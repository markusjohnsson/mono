/* Generated by JSIL v0.6.0 build 23296. See http://jsil.org/ for more information. */ 
var $asm01 = JSIL.DeclareAssembly("mscorlib, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null");

JSIL.MakeTypeAlias($jsilcore, "System.Object");

JSIL.DeclareNamespace("System");
JSIL.MakeClass($asm01.TypeRef("System.Object"), "System.Enum", true, [], function ($) {
  var $thisType = $.publicInterface;

  $.Method({Static:false, Public:true }, ".ctor", 
    $sig.make(0x30A, null, [], []), 
    function Enum__ctor () {
    }
  );

});

JSIL.DeclareNamespace("JSIL");
JSIL.DeclareNamespace("JSIL.Proxy");
JSIL.MakeEnum(
  "JSIL.Proxy.JSProxyMemberPolicy", true, {
    ReplaceDeclared: 0, 
    ReplaceNone: 1
  }, false
);

JSIL.MakeEnum(
  "JSIL.Proxy.JSProxyAttributePolicy", true, {
    ReplaceDeclared: 0, 
    ReplaceAll: 1
  }, false
);

JSIL.MakeEnum(
  "JSIL.Proxy.JSProxyInterfacePolicy", true, {
    ReplaceNone: 0, 
    ReplaceDeclared: 1, 
    ReplaceAll: 2
  }, false
);

JSIL.DeclareNamespace("System.Runtime");
JSIL.DeclareNamespace("System.Runtime.InteropServices");
JSIL.MakeInterface(
  "System.Runtime.InteropServices._Attribute", true, [], function ($) {
  }, []);

JSIL.MakeTypeAlias($jsilcore, "System.Attribute");

JSIL.MakeClass($asm01.TypeRef("System.Attribute"), "JSIL.Proxy.JSProxy", true, [], function ($) {
  var $thisType = $.publicInterface;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm01.System.Type)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm01.JSIL.Proxy.JSProxyMemberPolicy)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm01.JSIL.Proxy.JSProxyAttributePolicy)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm01.JSIL.Proxy.JSProxyInterfacePolicy)) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize($asm01.System.Boolean)) ();
  };
  var $T05 = function () {
    return ($T05 = JSIL.Memoize($asm01.System.Attribute)) ();
  };
  var $T06 = function () {
    return ($T06 = JSIL.Memoize(System.Array.Of($asm01.System.Type))) ();
  };
  var $T07 = function () {
    return ($T07 = JSIL.Memoize($asm01.System.String)) ();
  };
  var $T08 = function () {
    return ($T08 = JSIL.Memoize(System.Array.Of($asm01.System.String))) ();
  };

  $.Method({Static:false, Public:true }, ".ctor", 
    $sig.make(0x810, null, [
        $asm01.TypeRef("System.Type"), $asm01.TypeRef("JSIL.Proxy.JSProxyMemberPolicy"), 
        $asm01.TypeRef("JSIL.Proxy.JSProxyAttributePolicy"), $asm01.TypeRef("JSIL.Proxy.JSProxyInterfacePolicy"), 
        $asm01.TypeRef("System.Boolean")
      ], []), 
    function JSProxy__ctor (type, memberPolicy, attributePolicy, interfacePolicy, inheritable) {
      $T05().prototype._ctor.call(this);
    }
  );

  $.Method({Static:false, Public:true }, ".ctor", 
    $sig.make(0x813, null, [
        $jsilcore.TypeRef("System.Array", [$asm01.TypeRef("System.Type")]), $asm01.TypeRef("JSIL.Proxy.JSProxyMemberPolicy"), 
        $asm01.TypeRef("JSIL.Proxy.JSProxyAttributePolicy"), $asm01.TypeRef("JSIL.Proxy.JSProxyInterfacePolicy"), 
        $asm01.TypeRef("System.Boolean")
      ], []), 
    function JSProxy__ctor (types, memberPolicy, attributePolicy, interfacePolicy, inheritable) {
      $T05().prototype._ctor.call(this);
    }
  );

  $.Method({Static:false, Public:true }, ".ctor", 
    $sig.make(0x817, null, [
        $asm01.TypeRef("System.String"), $asm01.TypeRef("JSIL.Proxy.JSProxyMemberPolicy"), 
        $asm01.TypeRef("JSIL.Proxy.JSProxyAttributePolicy"), $asm01.TypeRef("JSIL.Proxy.JSProxyInterfacePolicy"), 
        $asm01.TypeRef("System.Boolean")
      ], []), 
    function JSProxy__ctor (typeName, memberPolicy, attributePolicy, interfacePolicy, inheritable) {
      $T05().prototype._ctor.call(this);
    }
  );

  $.Method({Static:false, Public:true }, ".ctor", 
    $sig.make(0x81D, null, [
        $jsilcore.TypeRef("System.Array", [$asm01.TypeRef("System.String")]), $asm01.TypeRef("JSIL.Proxy.JSProxyMemberPolicy"), 
        $asm01.TypeRef("JSIL.Proxy.JSProxyAttributePolicy"), $asm01.TypeRef("JSIL.Proxy.JSProxyInterfacePolicy"), 
        $asm01.TypeRef("System.Boolean")
      ], []), 
    function JSProxy__ctor (typeNames, memberPolicy, attributePolicy, interfacePolicy, inheritable) {
      $T05().prototype._ctor.call(this);
    }
  );

})
  .Attribute($asm01.TypeRef("System.AttributeUsageAttribute"), function () { return [1028]; });

JSIL.MakeClass($asm01.TypeRef("System.Attribute"), "JSIL.Proxy.JSNeverReplace", true, [], function ($) {
  var $thisType = $.publicInterface;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm01.System.Attribute)) ();
  };

  $.Method({Static:false, Public:true }, ".ctor", 
    $sig.make(0x8A8, null, [], []), 
    function JSNeverReplace__ctor () {
      $T00().prototype._ctor.call(this);
    }
  );

})
  .Attribute($asm01.TypeRef("System.AttributeUsageAttribute"), function () { return [992]; });

JSIL.MakeClass($asm01.TypeRef("System.Attribute"), "JSIL.Proxy.JSNeverInherit", true, [], function ($) {
  var $thisType = $.publicInterface;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm01.System.Attribute)) ();
  };

  $.Method({Static:false, Public:true }, ".ctor", 
    $sig.make(0x8BE, null, [], []), 
    function JSNeverInherit__ctor () {
      $T00().prototype._ctor.call(this);
    }
  );

})
  .Attribute($asm01.TypeRef("System.AttributeUsageAttribute"), function () { return [992]; });

JSIL.MakeClass($asm01.TypeRef("System.Object"), "JSIL.Proxy.AnyType", true, [], function ($) {
  var $thisType = $.publicInterface;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm01.System.InvalidOperationException)) ();
  };

  $.Method({Static:false, Public:false}, ".ctor", 
    $sig.make(0x1AF, null, [], []), 
    function AnyType__ctor () {
      throw new ($T00())();
    }
  );

});

JSIL.MakeClass($asm01.TypeRef("System.Object"), "System.EventArgs", true, [], function ($) {
  var $thisType = $.publicInterface;

  $.Method({Static:false, Public:true }, ".ctor", 
    $sig.make(0x92D, null, [], []), 
    function EventArgs__ctor () {
    }
  );

  $.Field({Static:true , Public:true , ReadOnly:true }, "Empty", $.Type); 
  $.Method({Static:true , Public:false}, ".cctor", 
    $sig.make(0x92F, null, [], []), 
    function EventArgs__cctor () {
      $thisType.Empty = new $thisType();
    }
  );

});

JSIL.DeclareNamespace("System.Globalization");
JSIL.MakeClass($asm01.TypeRef("System.Object"), "System.Globalization.CCFixed", true, [], function ($) {
  var $thisType = $.publicInterface;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm01.System.Int32)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm01.System.DayOfWeek)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm01.System.Globalization.CCMath)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm01.System.DateTime)) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize($asm01.System.Int64)) ();
  };
  var $T05 = function () {
    return ($T05 = JSIL.Memoize($asm01.System.Double)) ();
  };

  $.Method({Static:false, Public:true }, ".ctor", 
    $sig.make(0x962, null, [], []), 
    function CCFixed__ctor () {
    }
  );

  $.Method({Static:true , Public:true }, "day_of_week", 
    $sig.make(0x956, $asm01.TypeRef("System.DayOfWeek"), [$asm01.TypeRef("System.Int32")], []), 
    function CCFixed_day_of_week (date) {
      return $T01().$Cast($T02().mod(date, 7));
    }
  );

  $.Method({Static:true , Public:true }, "FromDateTime", 
    $sig.make(0x951, $asm01.TypeRef("System.Int32"), [$asm01.TypeRef("System.DateTime")], []), 
    function CCFixed_FromDateTime (time) {
      return ((1 + ($T04().op_Division(
              time.get_Ticks(), 
              $T04().Create(6930432, 51498, 0)
            )).ToNumber()) | 0);
    }
  );

  $.Method({Static:true , Public:true }, "ToDateTime", 
    $sig.make(0x954, $asm01.TypeRef("System.DateTime"), [$asm01.TypeRef("System.Int32")], []), 
    function CCFixed_ToDateTime (date) {
      return new ($T03())($T04().op_Multiplication(
          $T04().FromNumber(((date - 1) | 0)), 
          $T04().Create(6930432, 51498, 0)
        ));
    }
  );

  $.Method({Static:true , Public:true }, "ToDateTime", 
    $sig.make(0x95B, $asm01.TypeRef("System.DateTime"), [
        $asm01.TypeRef("System.Int32"), $asm01.TypeRef("System.Int32"), 
        $asm01.TypeRef("System.Int32"), $asm01.TypeRef("System.Int32"), 
        $asm01.TypeRef("System.Double")
      ], []), 
    function CCFixed_ToDateTime (date, hour, minute, second, milliseconds) {
      return $thisType.ToDateTime(date).AddHours(hour).AddMinutes(minute).AddSeconds(second).AddMilliseconds(milliseconds);
    }
  );

});

JSIL.MakeClass($asm01.TypeRef("System.Object"), "System.Globalization.CCMath", true, [], function ($) {
  var $thisType = $.publicInterface;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm01.System.Int32)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm01.System.Void)) ();
  };

  $.Method({Static:false, Public:true }, ".ctor", 
    $sig.make(0x992, null, [], []), 
    function CCMath__ctor () {
    }
  );

  $.Method({Static:true , Public:true }, "div", 
    $sig.make(0x98B, $asm01.TypeRef("System.Int32"), [$asm01.TypeRef("System.Int32"), $asm01.TypeRef("System.Int32")], []), 
    function CCMath_div (x, y) {
      return ((Math.floor((x / y))) | 0);
    }
  );

  $.Method({Static:true , Public:true }, "div_mod", 
    $sig.make(0x990, $asm01.TypeRef("System.Int32"), [
        $jsilcore.TypeRef("JSIL.Reference", [$asm01.TypeRef("System.Int32")]), $asm01.TypeRef("System.Int32"), 
        $asm01.TypeRef("System.Int32")
      ], []), 
    function CCMath_div_mod (/* ref */ remainder, x, y) {
      var i = $thisType.div(x, y);
      remainder.value = ((x - ((y * i) | 0)) | 0);
      return i;
    }
  );

  $.Method({Static:true , Public:true }, "mod", 
    $sig.make(0x98E, $asm01.TypeRef("System.Int32"), [$asm01.TypeRef("System.Int32"), $asm01.TypeRef("System.Int32")], []), 
    function CCMath_mod (x, y) {
      return ((x - ((y * $thisType.div(x, y)) | 0)) | 0);
    }
  );

});

JSIL.MakeClass($asm01.TypeRef("System.Object"), "System.Globalization.CCGregorianCalendar", true, [], function ($) {
  var $thisType = $.publicInterface;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm01.System.DateTime)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm01.System.Int32)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm01.System.Globalization.CCFixed)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm01.System.Globalization.CCMath)) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize($asm01.System.Boolean)) ();
  };

  $.Method({Static:false, Public:true }, ".ctor", 
    $sig.make(0xA4E, null, [], []), 
    function CCGregorianCalendar__ctor () {
    }
  );

  $.Method({Static:true , Public:true }, "AddMonths", 
    $sig.make(0x9BA, $asm01.TypeRef("System.DateTime"), [$asm01.TypeRef("System.DateTime"), $asm01.TypeRef("System.Int32")], []), 
    function CCGregorianCalendar_AddMonths (time, months) {
      var j = new JSIL.Variable(0);
      var k = new JSIL.Variable(0);
      var l = new JSIL.Variable(0);
      var i = $T02().FromDateTime(time);
      $thisType.dmy_from_fixed(/* ref */ j, /* ref */ k, /* ref */ l, i);
      k.value += months;
      l.value += $T03().div_mod(/* ref */ k, k.value, 12);
      var daysInMonth = $thisType.GetDaysInMonth(l.value, k.value);
      if (j.value > daysInMonth) {
        j.value = daysInMonth;
      }
      return $T02().ToDateTime($thisType.fixed_from_dmy(j.value, k.value, l.value)).Add(time.get_TimeOfDay());
    }
  );

  $.Method({Static:true , Public:true }, "AddYears", 
    $sig.make(0x9D3, $asm01.TypeRef("System.DateTime"), [$asm01.TypeRef("System.DateTime"), $asm01.TypeRef("System.Int32")], []), 
    function CCGregorianCalendar_AddYears (time, years) {
      var j = new JSIL.Variable(0);
      var k = new JSIL.Variable(0);
      var l = new JSIL.Variable(0);
      var i = $T02().FromDateTime(time);
      $thisType.dmy_from_fixed(/* ref */ j, /* ref */ k, /* ref */ l, i);
      l.value += years;
      var daysInMonth = $thisType.GetDaysInMonth(l.value, k.value);
      if (j.value > daysInMonth) {
        j.value = daysInMonth;
      }
      return $T02().ToDateTime($thisType.fixed_from_dmy(j.value, k.value, l.value)).Add(time.get_TimeOfDay());
    }
  );

  $.Method({Static:true , Public:true }, "day_from_fixed", 
    $sig.make(0x9C3, $asm01.TypeRef("System.Int32"), [$asm01.TypeRef("System.Int32")], []), 
    function CCGregorianCalendar_day_from_fixed (date) {
      var i = new JSIL.Variable(0);
      var j = new JSIL.Variable(0);
      var k = new JSIL.Variable(0);
      $thisType.dmy_from_fixed(/* ref */ i, /* ref */ j, /* ref */ k, date);
      return i.value;
    }
  );

  $.Method({Static:true , Public:true }, "dmy_from_fixed", 
    $sig.make(0x9C6, null, [
        $jsilcore.TypeRef("JSIL.Reference", [$asm01.TypeRef("System.Int32")]), $jsilcore.TypeRef("JSIL.Reference", [$asm01.TypeRef("System.Int32")]), 
        $jsilcore.TypeRef("JSIL.Reference", [$asm01.TypeRef("System.Int32")]), $asm01.TypeRef("System.Int32")
      ], []), 
    function CCGregorianCalendar_dmy_from_fixed (/* ref */ day, /* ref */ month, /* ref */ year, date) {
      $thisType.my_from_fixed(/* ref */ month, /* ref */ year, date);
      day.value = ((((date - $thisType.fixed_from_dmy(1, month.value, year.value)) | 0) + 1) | 0);
    }
  );

  $.Method({Static:true , Public:true }, "fixed_from_dmy", 
    $sig.make(0x9CB, $asm01.TypeRef("System.Int32"), [
        $asm01.TypeRef("System.Int32"), $asm01.TypeRef("System.Int32"), 
        $asm01.TypeRef("System.Int32")
      ], []), 
    function CCGregorianCalendar_fixed_from_dmy (day, month, year) {
      var i = 0;
      i += ((365 * ((year - 1) | 0)) | 0);
      i += $T03().div(((year - 1) | 0), 4);
      i -= $T03().div(((year - 1) | 0), 100);
      i += $T03().div(((year - 1) | 0), 400);
      i += $T03().div(((((367 * month) | 0) - 362) | 0), 12);
      if (month > 2) {
        var arg_69_0 = i;
        var arg_69_ = (!$thisType.is_leap_year(year) ? -2 : -1);
        i = ((arg_69_0 + arg_69_) | 0);
      }
      return ((i + day) | 0);
    }
  );

  $.Method({Static:true , Public:true }, "GetDayOfMonth", 
    $sig.make(0x9C1, $asm01.TypeRef("System.Int32"), [$asm01.TypeRef("System.DateTime")], []), 
    function CCGregorianCalendar_GetDayOfMonth (time) {
      return $thisType.day_from_fixed($T02().FromDateTime(time));
    }
  );

  $.Method({Static:true , Public:true }, "GetDayOfWeek", 
    $sig.make(0xA4B, $asm01.TypeRef("System.DayOfWeek"), [$asm01.TypeRef("System.DateTime")], []), 
    function CCGregorianCalendar_GetDayOfWeek (time) {
      var rd = $T02().FromDateTime(time);
      return $T02().day_of_week(rd);
    }
  );

  $.Method({Static:true , Public:true }, "GetDayOfYear", 
    $sig.make(0xA39, $asm01.TypeRef("System.Int32"), [$asm01.TypeRef("System.DateTime")], []), 
    function CCGregorianCalendar_GetDayOfYear (time) {
      var i = $T02().FromDateTime(time);
      var j = $thisType.year_from_fixed(i);
      return ((((i - $thisType.fixed_from_dmy(1, 1, j)) | 0) + 1) | 0);
    }
  );

  $.Method({Static:true , Public:true }, "GetDaysInMonth", 
    $sig.make(0x9BB, $asm01.TypeRef("System.Int32"), [$asm01.TypeRef("System.Int32"), $asm01.TypeRef("System.Int32")], []), 
    function CCGregorianCalendar_GetDaysInMonth (year, month) {
      var i = $thisType.fixed_from_dmy(1, month, year);
      return (($thisType.fixed_from_dmy(1, ((month + 1) | 0), year) - i) | 0);
    }
  );

  $.Method({Static:true , Public:true }, "GetDaysInYear", 
    $sig.make(0xA3F, $asm01.TypeRef("System.Int32"), [$asm01.TypeRef("System.Int32")], []), 
    function CCGregorianCalendar_GetDaysInYear (year) {
      var i = $thisType.fixed_from_dmy(1, 1, year);
      return (($thisType.fixed_from_dmy(1, 1, ((year + 1) | 0)) - i) | 0);
    }
  );

  $.Method({Static:true , Public:true }, "GetMonth", 
    $sig.make(0xA41, $asm01.TypeRef("System.Int32"), [$asm01.TypeRef("System.DateTime")], []), 
    function CCGregorianCalendar_GetMonth (time) {
      return $thisType.month_from_fixed($T02().FromDateTime(time));
    }
  );

  $.Method({Static:true , Public:true }, "GetYear", 
    $sig.make(0xA46, $asm01.TypeRef("System.Int32"), [$asm01.TypeRef("System.DateTime")], []), 
    function CCGregorianCalendar_GetYear (time) {
      return $thisType.year_from_fixed($T02().FromDateTime(time));
    }
  );

  $.Method({Static:true , Public:true }, "is_leap_year", 
    $sig.make(0x9CE, $asm01.TypeRef("System.Boolean"), [$asm01.TypeRef("System.Int32")], []), 
    function CCGregorianCalendar_is_leap_year (year) {
      if ($T03().mod(year, 4) !== 0) {
        var result = false;
      } else {
        var i = $T03().mod(year, 400);
        result = ((i !== 100) && 
          (i !== 200) && 
          (i !== 300));
      }
      return result;
    }
  );

  $.Method({Static:true , Public:true }, "IsLeapDay", 
    $sig.make(0xA47, $asm01.TypeRef("System.Boolean"), [
        $asm01.TypeRef("System.Int32"), $asm01.TypeRef("System.Int32"), 
        $asm01.TypeRef("System.Int32")
      ], []), 
    function CCGregorianCalendar_IsLeapDay (year, month, day) {
      return ($thisType.is_leap_year(year) && 
        (month === 2) && (day === 29));
    }
  );

  $.Method({Static:true , Public:true }, "month_from_fixed", 
    $sig.make(0xA43, $asm01.TypeRef("System.Int32"), [$asm01.TypeRef("System.Int32")], []), 
    function CCGregorianCalendar_month_from_fixed (date) {
      var i = new JSIL.Variable(0);
      var j = new JSIL.Variable(0);
      $thisType.my_from_fixed(/* ref */ i, /* ref */ j, date);
      return i.value;
    }
  );

  $.Method({Static:true , Public:true }, "my_from_fixed", 
    $sig.make(0x9C9, null, [
        $jsilcore.TypeRef("JSIL.Reference", [$asm01.TypeRef("System.Int32")]), $jsilcore.TypeRef("JSIL.Reference", [$asm01.TypeRef("System.Int32")]), 
        $asm01.TypeRef("System.Int32")
      ], []), 
    function CCGregorianCalendar_my_from_fixed (/* ref */ month, /* ref */ year, date) {
      year.value = $thisType.year_from_fixed(date);
      var i = ((date - $thisType.fixed_from_dmy(1, 1, year.value)) | 0);
      var j = ((date >= $thisType.fixed_from_dmy(1, 3, year.value)) ? (!$thisType.is_leap_year(year.value) ? 2 : 1) : 0);
      month.value = $T03().div(((((12 * ((i + j) | 0)) | 0) + 373) | 0), 367);
    }
  );

  $.Method({Static:true , Public:true }, "ToDateTime", 
    $sig.make(0xA49, $asm01.TypeRef("System.DateTime"), [
        $asm01.TypeRef("System.Int32"), $asm01.TypeRef("System.Int32"), 
        $asm01.TypeRef("System.Int32"), $asm01.TypeRef("System.Int32"), 
        $asm01.TypeRef("System.Int32"), $asm01.TypeRef("System.Int32"), 
        $asm01.TypeRef("System.Int32")
      ], []), 
    function CCGregorianCalendar_ToDateTime (year, month, day, hour, minute, second, milliseconds) {
      return $T02().ToDateTime(
        $thisType.fixed_from_dmy(day, month, year), 
        hour, 
        minute, 
        second, 
        milliseconds
      );
    }
  );

  $.Method({Static:true , Public:true }, "year_from_fixed", 
    $sig.make(0x9D0, $asm01.TypeRef("System.Int32"), [$asm01.TypeRef("System.Int32")], []), 
    function CCGregorianCalendar_year_from_fixed (date) {
      var i = new JSIL.Variable(((date - 1) | 0));
      var j = $T03().div_mod(/* ref */ i, i.value, 146097);
      var k = $T03().div_mod(/* ref */ i, i.value, 36524);
      var l = $T03().div_mod(/* ref */ i, i.value, 1461);
      var m = $T03().div(i.value, 365);
      var n = ((((((((400 * j) | 0) + ((100 * k) | 0)) | 0) + ((4 * l) | 0)) | 0) + m) | 0);
      if (!((k === 4) || (m === 4))) {
        var arg_6A_0 = ((n + 1) | 0);
      } else {
        arg_6A_0 = n;
      }
      return arg_6A_0;
    }
  );

});

JSIL.DeclareNamespace("System.Runtime.CompilerServices");
JSIL.MakeClass($asm01.TypeRef("System.Attribute"), "System.Runtime.CompilerServices.ExtensionAttribute", true, [], function ($) {
  var $thisType = $.publicInterface;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm01.System.Attribute)) ();
  };

  $.Method({Static:false, Public:true }, ".ctor", 
    $sig.make(0xA89, null, [], []), 
    function ExtensionAttribute__ctor () {
      $T00().prototype._ctor.call(this);
    }
  );

})
  .Attribute($asm01.TypeRef("System.AttributeUsageAttribute"), function () { return [69]; });

JSIL.MakeInterface(
  "System.Runtime.InteropServices._Exception", true, [], function ($) {
    $.Method({}, "get_HelpLink", $sig.make(0x3CD, $asm01.TypeRef("System.String"), [], []));
    $.Method({}, "set_HelpLink", $sig.make(0x3D0, null, [$asm01.TypeRef("System.String")], []));
    $.Method({}, "get_InnerException", $sig.make(0x3D3, $asm01.TypeRef("System.Exception"), [], []));
    $.Method({}, "get_Message", $sig.make(0x3D6, $asm01.TypeRef("System.String"), [], []));
    $.Method({}, "get_Source", $sig.make(0x3DC, $asm01.TypeRef("System.String"), [], []));
    $.Method({}, "set_Source", $sig.make(0x3DD, null, [$asm01.TypeRef("System.String")], []));
    $.Method({}, "get_StackTrace", $sig.make(0x3DE, $asm01.TypeRef("System.String"), [], []));
    $.Method({}, "Equals", $sig.make(0x3E5, $asm01.TypeRef("System.Boolean"), [$asm01.TypeRef("System.Object")], []));
    $.Method({}, "GetBaseException", $sig.make(0x3E6, $asm01.TypeRef("System.Exception"), [], []));
    $.Property({}, "HelpLink");
    $.Property({}, "InnerException");
    $.Property({}, "Message");
    $.Property({}, "Source");
    $.Property({}, "StackTrace");
  }, []);

JSIL.MakeClass($asm01.TypeRef("System.Object"), "System.Exception", true, [], function ($) {
  var $thisType = $.publicInterface;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm01.System.String)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm01.System.NotImplementedException)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm01.System.Int32)) ();
  };

  $.Method({Static:false, Public:true }, ".ctor", 
    $sig.make(0x407, null, [], []), 
    function Exception__ctor () {
      $thisType.prototype._ctor.call(this, $T00().Empty);
    }
  );

  $.Method({Static:false, Public:true }, ".ctor", 
    $sig.make(0x409, null, [$asm01.TypeRef("System.String")], []), 
    function Exception__ctor (message) {
      this.set_Message(message);
    }
  );

  $.Method({Static:false, Public:true }, ".ctor", 
    $sig.make(0x40B, null, [$asm01.TypeRef("System.String"), $.Type], []), 
    function Exception__ctor (message, innerException) {
      this.set_Message(message);
      this.set_InnerException(innerException);
    }
  );

  $.Method({Static:false, Public:true }, "get_HelpLink", 
    $sig.make(0x3F2, $asm01.TypeRef("System.String"), [], []), 
    function Exception_get_HelpLink () {
      return this.Exception$HelpLink$value;
    }
  )
    .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

  $.Method({Static:false, Public:false}, "get_HResult", 
    $sig.make(0x3EE, $asm01.TypeRef("System.Int32"), [], []), 
    function Exception_get_HResult () {
      return this.Exception$HResult$value;
    }
  )
    .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

  $.Method({Static:false, Public:true }, "get_InnerException", 
    $sig.make(0x3F7, $.Type, [], []), 
    function Exception_get_InnerException () {
      return this.Exception$InnerException$value;
    }
  )
    .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

  $.Method({Static:false, Public:true }, "get_Message", 
    $sig.make(0x3FB, $asm01.TypeRef("System.String"), [], []), 
    function Exception_get_Message () {
      return this.Exception$Message$value;
    }
  )
    .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

  $.Method({Static:false, Public:true }, "get_Source", 
    $sig.make(0x3FE, $asm01.TypeRef("System.String"), [], []), 
    function Exception_get_Source () {
      return this.Exception$Source$value;
    }
  )
    .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

  $.Method({Static:false, Public:true }, "get_StackTrace", 
    $sig.make(0x404, $asm01.TypeRef("System.String"), [], []), 
    function Exception_get_StackTrace () {
      return this.Exception$StackTrace$value;
    }
  )
    .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

  $.Method({Static:false, Public:true }, "GetBaseException", 
    $sig.make(0x40D, $.Type, [], []), 
    function Exception_GetBaseException () {
      throw new ($T01())();
    }
  );

  $.Method({Static:false, Public:true }, "GetHashCode", 
    $sig.make(0x410, $asm01.TypeRef("System.Int32"), [], []), 
    function Exception_GetHashCode () {
      throw new ($T01())();
    }
  );

  $.Method({Static:false, Public:true }, "set_HelpLink", 
    $sig.make(0x3F4, null, [$asm01.TypeRef("System.String")], []), 
    function Exception_set_HelpLink (value) {
      this.Exception$HelpLink$value = value;
    }
  )
    .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

  $.Method({Static:false, Public:false}, "set_HResult", 
    $sig.make(0x3F0, null, [$asm01.TypeRef("System.Int32")], []), 
    function Exception_set_HResult (value) {
      this.Exception$HResult$value = value;
    }
  )
    .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

  $.Method({Static:false, Public:false}, "set_InnerException", 
    $sig.make(0x3F9, null, [$.Type], []), 
    function Exception_set_InnerException (value) {
      this.Exception$InnerException$value = value;
    }
  )
    .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

  $.Method({Static:false, Public:false}, "set_Message", 
    $sig.make(0x3FC, null, [$asm01.TypeRef("System.String")], []), 
    function Exception_set_Message (value) {
      this.Exception$Message$value = value;
    }
  )
    .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

  $.Method({Static:false, Public:true }, "set_Source", 
    $sig.make(0x401, null, [$asm01.TypeRef("System.String")], []), 
    function Exception_set_Source (value) {
      this.Exception$Source$value = value;
    }
  )
    .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

  $.Method({Static:false, Public:false}, "set_StackTrace", 
    $sig.make(0x406, null, [$asm01.TypeRef("System.String")], []), 
    function Exception_set_StackTrace (value) {
      this.Exception$StackTrace$value = value;
    }
  )
    .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

  $.Field({Static:false, Public:false}, "Exception$HResult$value", $asm01.TypeRef("System.Int32"))
    .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute")); 
  $.Field({Static:false, Public:false}, "Exception$HelpLink$value", $asm01.TypeRef("System.String"))
    .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute")); 
  $.Field({Static:false, Public:false}, "Exception$InnerException$value", $.Type)
    .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute")); 
  $.Field({Static:false, Public:false}, "Exception$Message$value", $asm01.TypeRef("System.String"))
    .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute")); 
  $.Field({Static:false, Public:false}, "Exception$Source$value", $asm01.TypeRef("System.String"))
    .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute")); 
  $.Field({Static:false, Public:false}, "Exception$StackTrace$value", $asm01.TypeRef("System.String"))
    .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute")); 
  $.Property({Static:false, Public:false}, "HResult", $asm01.TypeRef("System.Int32"));

  $.Property({Static:false, Public:true , Virtual:true }, "HelpLink", $asm01.TypeRef("System.String"));

  $.Property({Static:false, Public:true , Virtual:true }, "InnerException", $.Type);

  $.Property({Static:false, Public:true , Virtual:true }, "Message", $asm01.TypeRef("System.String"));

  $.Property({Static:false, Public:true , Virtual:true }, "Source", $asm01.TypeRef("System.String"));

  $.Property({Static:false, Public:true , Virtual:true }, "StackTrace", $asm01.TypeRef("System.String"));

  $.ImplementInterfaces($asm01.TypeRef("System.Runtime.InteropServices._Exception"))
});

JSIL.MakeClass($asm01.TypeRef("System.Exception"), "System.SystemException", true, [], function ($) {
  var $thisType = $.publicInterface;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm01.System.Exception)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm01.System.Locale)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm01.System.Object)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm01.System.String)) ();
  };

  $.Method({Static:false, Public:true }, ".ctor", 
    $sig.make(0x7CB, null, [], []), 
    function SystemException__ctor () {
      $T00().prototype._ctor.call(this, $T01().GetText("A system exception has occurred.", JSIL.Array.New($T02(), 0)));
      this.Exception$HResult$value = -2146233087;
    }
  );

  $.Method({Static:false, Public:true }, ".ctor", 
    $sig.make(0x7CE, null, [$asm01.TypeRef("System.String")], []), 
    function SystemException__ctor (message) {
      $T00().prototype._ctor.call(this, message);
      this.Exception$HResult$value = -2146233087;
    }
  );

  $.Method({Static:false, Public:true }, ".ctor", 
    $sig.make(0x7D2, null, [$asm01.TypeRef("System.String"), $asm01.TypeRef("System.Exception")], []), 
    function SystemException__ctor (message, innerException) {
      $sig.get(0x40B, null, [$asm01.System.String, $asm01.System.Exception], []).Call($T00().prototype, "_ctor", null, this, message, innerException);
      this.Exception$HResult$value = -2146233087;
    }
  );

  $.Constant({Static:true , Public:false}, "Result", -2146233087); 
})
  .Attribute($asm01.TypeRef("System.Runtime.InteropServices.ComVisibleAttribute"), function () { return [true]; });

JSIL.MakeClass($asm01.TypeRef("System.SystemException"), "System.NullReferenceException", true, [], function ($) {
  var $thisType = $.publicInterface;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm01.System.SystemException)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm01.System.Locale)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm01.System.Object)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm01.System.String)) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize($asm01.System.Exception)) ();
  };

  $.Method({Static:false, Public:true }, ".ctor", 
    $sig.make(0xAA8, null, [], []), 
    function NullReferenceException__ctor () {
      $T00().prototype._ctor.call(this, $T01().GetText("A null value was found where an object instance was required.", JSIL.Array.New($T02(), 0)));
      this.Exception$HResult$value = -2147467261;
    }
  );

  $.Method({Static:false, Public:true }, ".ctor", 
    $sig.make(0xAAA, null, [$asm01.TypeRef("System.String")], []), 
    function NullReferenceException__ctor (message) {
      $T00().prototype._ctor.call(this, message);
      this.Exception$HResult$value = -2147467261;
    }
  );

  $.Method({Static:false, Public:true }, ".ctor", 
    $sig.make(0xAAE, null, [$asm01.TypeRef("System.String"), $asm01.TypeRef("System.Exception")], []), 
    function NullReferenceException__ctor (message, innerException) {
      $sig.get(0x7D2, null, [$asm01.System.String, $asm01.System.Exception], []).Call($T00().prototype, "_ctor", null, this, message, innerException);
      this.Exception$HResult$value = -2147467261;
    }
  );

  $.Constant({Static:true , Public:false}, "Result", -2147467261); 
})
  .Attribute($asm01.TypeRef("System.Runtime.InteropServices.ComVisibleAttribute"), function () { return [true]; });

JSIL.MakeTypeAlias($jsilcore, "System.ValueType");

JSIL.MakeInterface(
  "System.IFormattable", true, [], function ($) {
    $.Method({}, "ToString", $sig.make(0x200, $asm01.TypeRef("System.String"), [$asm01.TypeRef("System.String"), $asm01.TypeRef("System.IFormatProvider")], []));
  }, []);

JSIL.MakeInterface(
  "System.IComparable", true, [], function ($) {
    $.Method({}, "CompareTo", $sig.make(0x1CB, $asm01.TypeRef("System.Int32"), [$asm01.TypeRef("System.Object")], []));
  }, []);

JSIL.MakeInterface(
  "System.IComparable`1", true, ["T"], function ($) {
    $.Method({}, "CompareTo", $sig.make(0x1E4, $asm01.TypeRef("System.Int32"), [new JSIL.GenericParameter("T", "System.IComparable`1")], []));
  }, []);

JSIL.MakeInterface(
  "System.IEquatable`1", true, ["T"], function ($) {
    $.Method({}, "Equals", $sig.make(0x1F9, $asm01.TypeRef("System.Boolean"), [new JSIL.GenericParameter("T", "System.IEquatable`1")], []));
  }, []);

JSIL.MakeTypeAlias($jsilcore, "System.Int32");

JSIL.MakeInterface(
  "System.IConvertible", true, [], function ($) {
    $.Method({}, "GetTypeCode", $sig.make(0x3A7, $asm01.TypeRef("System.TypeCode"), [], []));
    $.Method({}, "ToBoolean", $sig.make(0x3A8, $asm01.TypeRef("System.Boolean"), [$asm01.TypeRef("System.IFormatProvider")], []));
    $.Method({}, "ToByte", $sig.make(0x3A9, $asm01.TypeRef("System.Byte"), [$asm01.TypeRef("System.IFormatProvider")], []));
    $.Method({}, "ToChar", $sig.make(0x3AA, $asm01.TypeRef("System.Char"), [$asm01.TypeRef("System.IFormatProvider")], []));
    $.Method({}, "ToDateTime", $sig.make(0x3AB, $asm01.TypeRef("System.DateTime"), [$asm01.TypeRef("System.IFormatProvider")], []));
    $.Method({}, "ToDecimal", $sig.make(0x3AC, $asm01.TypeRef("System.Decimal"), [$asm01.TypeRef("System.IFormatProvider")], []));
    $.Method({}, "ToDouble", $sig.make(0x3AD, $asm01.TypeRef("System.Double"), [$asm01.TypeRef("System.IFormatProvider")], []));
    $.Method({}, "ToInt16", $sig.make(0x3AE, $asm01.TypeRef("System.Int16"), [$asm01.TypeRef("System.IFormatProvider")], []));
    $.Method({}, "ToInt32", $sig.make(0x3AF, $asm01.TypeRef("System.Int32"), [$asm01.TypeRef("System.IFormatProvider")], []));
    $.Method({}, "ToInt64", $sig.make(0x3B0, $asm01.TypeRef("System.Int64"), [$asm01.TypeRef("System.IFormatProvider")], []));
    $.Method({}, "ToSByte", $sig.make(0x3B1, $asm01.TypeRef("System.SByte"), [$asm01.TypeRef("System.IFormatProvider")], []));
    $.Method({}, "ToSingle", $sig.make(0x3B2, $asm01.TypeRef("System.Single"), [$asm01.TypeRef("System.IFormatProvider")], []));
    $.Method({}, "ToString", $sig.make(0x3B3, $asm01.TypeRef("System.String"), [$asm01.TypeRef("System.IFormatProvider")], []));
    $.Method({}, "ToType", $sig.make(0x3B4, $asm01.TypeRef("System.Object"), [$asm01.TypeRef("System.Type"), $asm01.TypeRef("System.IFormatProvider")], []));
    $.Method({}, "ToUInt16", $sig.make(0x3B5, $asm01.TypeRef("System.UInt16"), [$asm01.TypeRef("System.IFormatProvider")], []));
    $.Method({}, "ToUInt32", $sig.make(0x3B6, $asm01.TypeRef("System.UInt32"), [$asm01.TypeRef("System.IFormatProvider")], []));
    $.Method({}, "ToUInt64", $sig.make(0x3B7, $asm01.TypeRef("System.UInt64"), [$asm01.TypeRef("System.IFormatProvider")], []));
  }, []);

JSIL.MakeClass($asm01.TypeRef("System.Attribute"), "System.CLSCompliantAttribute", true, [], function ($) {
  var $thisType = $.publicInterface;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm01.System.Boolean)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm01.System.Attribute)) ();
  };

  $.Method({Static:false, Public:true }, ".ctor", 
    $sig.make(0xAF5, null, [$asm01.TypeRef("System.Boolean")], []), 
    function CLSCompliantAttribute__ctor (isCompliant) {
      $T01().prototype._ctor.call(this);
      this.is_compliant = isCompliant;
    }
  );

  $.Method({Static:false, Public:true }, "get_IsCompliant", 
    $sig.make(0xAF2, $asm01.TypeRef("System.Boolean"), [], []), 
    function CLSCompliantAttribute_get_IsCompliant () {
      return this.is_compliant;
    }
  );

  $.Field({Static:false, Public:false}, "is_compliant", $asm01.TypeRef("System.Boolean")); 
  $.Property({Static:false, Public:true }, "IsCompliant", $asm01.TypeRef("System.Boolean"));

})
  .Attribute($asm01.TypeRef("System.Runtime.InteropServices.ComVisibleAttribute"), function () { return [true]; })
  .Attribute($asm01.TypeRef("System.AttributeUsageAttribute"), function () { return [$asm01.System.AttributeTargets.All]; });

JSIL.MakeClass($asm01.TypeRef("System.Attribute"), "System.AttributeUsageAttribute", true, [], function ($) {
  var $thisType = $.publicInterface;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm01.System.AttributeTargets)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm01.System.Attribute)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm01.System.Boolean)) ();
  };

  $.Method({Static:false, Public:true }, ".ctor", 
    $sig.make(0xB42, null, [$asm01.TypeRef("System.AttributeTargets")], []), 
    function AttributeUsageAttribute__ctor (validOn) {
      this.inherited = true;
      $T01().prototype._ctor.call(this);
      this.valid_on = validOn;
    }
  );

  $.Method({Static:false, Public:true }, "get_AllowMultiple", 
    $sig.make(0xB34, $asm01.TypeRef("System.Boolean"), [], []), 
    function AttributeUsageAttribute_get_AllowMultiple () {
      return this.allow_multiple;
    }
  );

  $.Method({Static:false, Public:true }, "get_Inherited", 
    $sig.make(0xB37, $asm01.TypeRef("System.Boolean"), [], []), 
    function AttributeUsageAttribute_get_Inherited () {
      return this.inherited;
    }
  );

  $.Method({Static:false, Public:true }, "get_ValidOn", 
    $sig.make(0xB3F, $asm01.TypeRef("System.AttributeTargets"), [], []), 
    function AttributeUsageAttribute_get_ValidOn () {
      return this.valid_on;
    }
  );

  $.Method({Static:false, Public:true }, "set_AllowMultiple", 
    $sig.make(0xB36, null, [$asm01.TypeRef("System.Boolean")], []), 
    function AttributeUsageAttribute_set_AllowMultiple (value) {
      this.allow_multiple = value;
    }
  );

  $.Method({Static:false, Public:true }, "set_Inherited", 
    $sig.make(0xB3B, null, [$asm01.TypeRef("System.Boolean")], []), 
    function AttributeUsageAttribute_set_Inherited (value) {
      this.inherited = value;
    }
  );

  $.Field({Static:false, Public:false}, "valid_on", $asm01.TypeRef("System.AttributeTargets")); 
  $.Field({Static:false, Public:false}, "allow_multiple", $asm01.TypeRef("System.Boolean")); 
  $.Field({Static:false, Public:false}, "inherited", $asm01.TypeRef("System.Boolean")); 
  $.Property({Static:false, Public:true }, "AllowMultiple", $asm01.TypeRef("System.Boolean"));

  $.Property({Static:false, Public:true }, "Inherited", $asm01.TypeRef("System.Boolean"));

  $.Property({Static:false, Public:true }, "ValidOn", $asm01.TypeRef("System.AttributeTargets"));

})
  .Attribute($asm01.TypeRef("System.AttributeUsageAttribute"), function () { return [$asm01.System.AttributeTargets.Class]; })
  .Attribute($asm01.TypeRef("System.Runtime.InteropServices.ComVisibleAttribute"), function () { return [true]; });

JSIL.DeclareNamespace("System.Security");
JSIL.MakeInterface(
  "System.Security.IPermission", true, [], function ($) {
    $.Method({}, "Copy", $sig.make(0xB6A, $.Type, [], []));
    $.Method({}, "Demand", $sig.make(0xB6C, null, [], []));
    $.Method({}, "Intersect", $sig.make(0xB6E, $.Type, [$.Type], []));
    $.Method({}, "IsSubsetOf", $sig.make(0xB70, $asm01.TypeRef("System.Boolean"), [$.Type], []));
    $.Method({}, "Union", $sig.make(0xB73, $.Type, [$.Type], []));
  }, []);

JSIL.MakeEnum(
  "System.Runtime.InteropServices.ClassInterfaceType", true, {
    None: 0, 
    AutoDispatch: 1, 
    AutoDual: 2
  }, false
);

JSIL.MakeEnum(
  "System.Globalization.GregorianCalendarTypes", true, {
    Localized: 1, 
    USEnglish: 2, 
    MiddleEastFrench: 9, 
    Arabic: 10, 
    TransliteratedEnglish: 11, 
    TransliteratedFrench: 12
  }, false
);

JSIL.DeclareNamespace("System.Collections");
JSIL.MakeInterface(
  "System.Collections.IEnumerator", true, [], function ($) {
    $.Method({}, "get_Current", $sig.make(0x3BE, $asm01.TypeRef("System.Object"), [], []));
    $.Method({}, "MoveNext", $sig.make(0x3C0, $asm01.TypeRef("System.Boolean"), [], []));
    $.Method({}, "Reset", $sig.make(0x3C2, null, [], []));
    $.Property({}, "Current");
  }, []);

JSIL.MakeInterface(
  "System.Collections.IDictionaryEnumerator", true, [], function ($) {
    $.Method({}, "get_Entry", $sig.make(0x3CF, $asm01.TypeRef("System.Collections.DictionaryEntry"), [], []));
    $.Method({}, "get_Key", $sig.make(0x3D2, $asm01.TypeRef("System.Object"), [], []));
    $.Method({}, "get_Value", $sig.make(0x3D5, $asm01.TypeRef("System.Object"), [], []));
    $.Property({}, "Entry");
    $.Property({}, "Key");
    $.Property({}, "Value");
  }, [$asm01.TypeRef("System.Collections.IEnumerator")]);

JSIL.MakeInterface(
  "System.Collections.IEnumerable", true, [], function ($) {
    $.Method({}, "GetEnumerator", $sig.make(0x1EB, $asm01.TypeRef("System.Collections.IEnumerator"), [], []));
  }, []);

JSIL.DeclareNamespace("System.Collections.Generic");
JSIL.MakeInterface(
  "System.Collections.Generic.IEnumerable`1", true, ["T"], function ($) {
    $.Method({}, "GetEnumerator", $sig.make(0x1F0, $asm01.TypeRef("System.Collections.Generic.IEnumerator`1", [new JSIL.GenericParameter("T", "System.Collections.Generic.IEnumerable`1")]), [], []));
  }, [$asm01.TypeRef("System.Collections.IEnumerable")]);

JSIL.MakeInterface(
  "System.Collections.Generic.ICollection`1", true, ["T"], function ($) {
    $.Method({}, "get_Count", $sig.make(0x1F6, $asm01.TypeRef("System.Int32"), [], []));
    $.Method({}, "get_IsReadOnly", $sig.make(0x1F8, $asm01.TypeRef("System.Boolean"), [], []));
    $.Method({}, "Add", $sig.make(0x1FB, null, [new JSIL.GenericParameter("T", "System.Collections.Generic.ICollection`1")], []));
    $.Method({}, "Clear", $sig.make(0x1FC, null, [], []));
    $.Method({}, "Contains", $sig.make(0x1FE, $asm01.TypeRef("System.Boolean"), [new JSIL.GenericParameter("T", "System.Collections.Generic.ICollection`1")], []));
    $.Method({}, "CopyTo", $sig.make(0x1FF, null, [$jsilcore.TypeRef("System.Array", [new JSIL.GenericParameter("T", "System.Collections.Generic.ICollection`1")]), $asm01.TypeRef("System.Int32")], []));
    $.Method({}, "Remove", $sig.make(0x201, $asm01.TypeRef("System.Boolean"), [new JSIL.GenericParameter("T", "System.Collections.Generic.ICollection`1")], []));
    $.Property({}, "Count");
    $.Property({}, "IsReadOnly");
  }, [$asm01.TypeRef("System.Collections.Generic.IEnumerable`1", [new JSIL.GenericParameter("T", "System.Collections.Generic.ICollection`1")]), $asm01.TypeRef("System.Collections.IEnumerable")]);

JSIL.MakeTypeAlias($jsilcore, "System.UInt16");

JSIL.MakeTypeAlias($jsilcore, "System.Type");

JSIL.DeclareNamespace("System.Runtime.Versioning");
JSIL.MakeClass($asm01.TypeRef("System.Attribute"), "System.Runtime.Versioning.TargetFrameworkAttribute", true, [], function ($) {
  var $thisType = $.publicInterface;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm01.System.Attribute)) ();
  };

  $.Method({Static:false, Public:true }, ".ctor", 
    $sig.make(0x7FB, null, [], []), 
    function TargetFrameworkAttribute__ctor () {
      $T00().prototype._ctor.call(this);
    }
  );

});

JSIL.DeclareNamespace("System.Reflection");
JSIL.MakeClass($asm01.TypeRef("System.Attribute"), "System.Reflection.DefaultMemberAttribute", true, [], function ($) {
  var $thisType = $.publicInterface;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm01.System.String)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm01.System.Attribute)) ();
  };

  $.Method({Static:false, Public:true }, ".ctor", 
    $sig.make(0x830, null, [$asm01.TypeRef("System.String")], []), 
    function DefaultMemberAttribute__ctor (name) {
      $T01().prototype._ctor.call(this);
      this.DefaultMemberAttribute$MemberName$value = name;
    }
  );

  $.Method({Static:false, Public:true }, "get_MemberName", 
    $sig.make(0x827, $asm01.TypeRef("System.String"), [], []), 
    function DefaultMemberAttribute_get_MemberName () {
      return this.DefaultMemberAttribute$MemberName$value;
    }
  )
    .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

  $.Method({Static:false, Public:true }, "set_MemberName", 
    $sig.make(0x82D, null, [$asm01.TypeRef("System.String")], []), 
    function DefaultMemberAttribute_set_MemberName (value) {
      this.DefaultMemberAttribute$MemberName$value = value;
    }
  )
    .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

  $.Field({Static:false, Public:false}, "DefaultMemberAttribute$MemberName$value", $asm01.TypeRef("System.String"))
    .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute")); 
  $.Property({Static:false, Public:true }, "MemberName", $asm01.TypeRef("System.String"));

});

JSIL.MakeTypeAlias($jsilcore, "System.Delegate");

JSIL.DeclareNamespace("System.Diagnostics");
JSIL.MakeClass($asm01.TypeRef("System.Attribute"), "System.Diagnostics.DebuggerTypeProxyAttribute", true, [], function ($) {
  var $thisType = $.publicInterface;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm01.System.String)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm01.System.Attribute)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm01.System.Type)) ();
  };

  $.Method({Static:false, Public:true }, ".ctor", 
    $sig.make(0x87B, null, [$asm01.TypeRef("System.String")], []), 
    function DebuggerTypeProxyAttribute__ctor (typeName) {
      $T01().prototype._ctor.call(this);
      this.proxy_type_name = typeName;
    }
  );

  $.Method({Static:false, Public:true }, ".ctor", 
    $sig.make(0x881, null, [$asm01.TypeRef("System.Type")], []), 
    function DebuggerTypeProxyAttribute__ctor (type) {
      $T01().prototype._ctor.call(this);
      this.proxy_type_name = type.Type$Name$value;
    }
  );

  $.Method({Static:false, Public:true }, "get_ProxyTypeName", 
    $sig.make(0x86F, $asm01.TypeRef("System.String"), [], []), 
    function DebuggerTypeProxyAttribute_get_ProxyTypeName () {
      return this.proxy_type_name;
    }
  );

  $.Method({Static:false, Public:true }, "get_Target", 
    $sig.make(0x871, $asm01.TypeRef("System.Type"), [], []), 
    function DebuggerTypeProxyAttribute_get_Target () {
      return this.target_type;
    }
  );

  $.Method({Static:false, Public:true }, "get_TargetTypeName", 
    $sig.make(0x876, $asm01.TypeRef("System.String"), [], []), 
    function DebuggerTypeProxyAttribute_get_TargetTypeName () {
      return this.target_type_name;
    }
  );

  $.Method({Static:false, Public:true }, "set_Target", 
    $sig.make(0x874, null, [$asm01.TypeRef("System.Type")], []), 
    function DebuggerTypeProxyAttribute_set_Target (value) {
      this.target_type = value;
      this.target_type_name = this.target_type.Type$Name$value;
    }
  );

  $.Method({Static:false, Public:true }, "set_TargetTypeName", 
    $sig.make(0x877, null, [$asm01.TypeRef("System.String")], []), 
    function DebuggerTypeProxyAttribute_set_TargetTypeName (value) {
      this.target_type_name = value;
    }
  );

  $.Field({Static:false, Public:false}, "proxy_type_name", $asm01.TypeRef("System.String")); 
  $.Field({Static:false, Public:false}, "target_type_name", $asm01.TypeRef("System.String")); 
  $.Field({Static:false, Public:false}, "target_type", $asm01.TypeRef("System.Type")); 
  $.Property({Static:false, Public:true }, "ProxyTypeName", $asm01.TypeRef("System.String"));

  $.Property({Static:false, Public:true }, "Target", $asm01.TypeRef("System.Type"));

  $.Property({Static:false, Public:true }, "TargetTypeName", $asm01.TypeRef("System.String"));

})
  .Attribute($asm01.TypeRef("System.Runtime.InteropServices.ComVisibleAttribute"), function () { return [true]; })
  .Attribute($asm01.TypeRef("System.AttributeUsageAttribute"), function () { return [13]; });

JSIL.MakeClass($asm01.TypeRef("System.Attribute"), "System.ObsoleteAttribute", true, [], function ($) {
  var $thisType = $.publicInterface;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm01.System.Attribute)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm01.System.String)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm01.System.Boolean)) ();
  };

  $.Method({Static:false, Public:true }, ".ctor", 
    $sig.make(0x8BD, null, [], []), 
    function ObsoleteAttribute__ctor () {
      $T00().prototype._ctor.call(this);
    }
  );

  $.Method({Static:false, Public:true }, ".ctor", 
    $sig.make(0x8BF, null, [$asm01.TypeRef("System.String")], []), 
    function ObsoleteAttribute__ctor (message) {
      $T00().prototype._ctor.call(this);
      this._message = message;
    }
  );

  $.Method({Static:false, Public:true }, ".ctor", 
    $sig.make(0x8C2, null, [$asm01.TypeRef("System.String"), $asm01.TypeRef("System.Boolean")], []), 
    function ObsoleteAttribute__ctor (message, error) {
      $T00().prototype._ctor.call(this);
      this._message = message;
      this._error = error;
    }
  );

  $.Method({Static:false, Public:true }, "get_IsError", 
    $sig.make(0x8BB, $asm01.TypeRef("System.Boolean"), [], []), 
    function ObsoleteAttribute_get_IsError () {
      return this._error;
    }
  );

  $.Method({Static:false, Public:true }, "get_Message", 
    $sig.make(0x8B9, $asm01.TypeRef("System.String"), [], []), 
    function ObsoleteAttribute_get_Message () {
      return this._message;
    }
  );

  $.Field({Static:false, Public:false}, "_message", $asm01.TypeRef("System.String")); 
  $.Field({Static:false, Public:false}, "_error", $asm01.TypeRef("System.Boolean")); 
  $.Property({Static:false, Public:true }, "Message", $asm01.TypeRef("System.String"));

  $.Property({Static:false, Public:true }, "IsError", $asm01.TypeRef("System.Boolean"));

})
  .Attribute($asm01.TypeRef("System.AttributeUsageAttribute"), function () { return [6140]; })
  .Attribute($asm01.TypeRef("System.Runtime.InteropServices.ComVisibleAttribute"), function () { return [true]; });

JSIL.MakeClass($asm01.TypeRef("System.SystemException"), "System.NotImplementedException", true, [], function ($) {
  var $thisType = $.publicInterface;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm01.System.SystemException)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm01.System.Locale)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm01.System.Object)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm01.System.String)) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize($asm01.System.Exception)) ();
  };

  $.Method({Static:false, Public:true }, ".ctor", 
    $sig.make(0x8F8, null, [], []), 
    function NotImplementedException__ctor () {
      $T00().prototype._ctor.call(this, $T01().GetText("The requested feature is not implemented.", JSIL.Array.New($T02(), 0)));
      this.Exception$HResult$value = -2147467263;
    }
  );

  $.Method({Static:false, Public:true }, ".ctor", 
    $sig.make(0x8FB, null, [$asm01.TypeRef("System.String")], []), 
    function NotImplementedException__ctor (message) {
      $T00().prototype._ctor.call(this, message);
      this.Exception$HResult$value = -2147467263;
    }
  );

  $.Method({Static:false, Public:true }, ".ctor", 
    $sig.make(0x8FD, null, [$asm01.TypeRef("System.String"), $asm01.TypeRef("System.Exception")], []), 
    function NotImplementedException__ctor (message, inner) {
      $sig.get(0x7D2, null, [$asm01.System.String, $asm01.System.Exception], []).Call($T00().prototype, "_ctor", null, this, message, inner);
      this.Exception$HResult$value = -2147467263;
    }
  );

  $.Constant({Static:true , Public:false}, "Result", -2147467263); 
})
  .Attribute($asm01.TypeRef("System.Runtime.InteropServices.ComVisibleAttribute"), function () { return [true]; });

JSIL.MakeClass($asm01.TypeRef("System.Attribute"), "System.Runtime.CompilerServices.MethodImplAttribute", true, [], function ($) {
  var $thisType = $.publicInterface;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm01.System.Attribute)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm01.System.Int16)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm01.System.Runtime.CompilerServices.MethodImplOptions)) ();
  };

  $.Method({Static:false, Public:true }, ".ctor", 
    $sig.make(0x93A, null, [], []), 
    function MethodImplAttribute__ctor () {
      $T00().prototype._ctor.call(this);
    }
  );

  $.Method({Static:false, Public:true }, ".ctor", 
    $sig.make(0x93B, null, [$asm01.TypeRef("System.Int16")], []), 
    function MethodImplAttribute__ctor (value) {
      $T00().prototype._ctor.call(this);
      this._val = $T02().$Cast(value);
    }
  );

  $.Method({Static:false, Public:true }, ".ctor", 
    $sig.make(0x93E, null, [$asm01.TypeRef("System.Runtime.CompilerServices.MethodImplOptions")], []), 
    function MethodImplAttribute__ctor (methodImplOptions) {
      $T00().prototype._ctor.call(this);
      this._val = methodImplOptions;
    }
  );

  $.Method({Static:false, Public:true }, "get_Value", 
    $sig.make(0x937, $asm01.TypeRef("System.Runtime.CompilerServices.MethodImplOptions"), [], []), 
    function MethodImplAttribute_get_Value () {
      return this._val;
    }
  );

  $.Field({Static:false, Public:false}, "_val", $asm01.TypeRef("System.Runtime.CompilerServices.MethodImplOptions")); 
  $.Field({Static:false, Public:true }, "MethodCodeType", $asm01.TypeRef("System.Runtime.CompilerServices.MethodCodeType")); 
  $.Property({Static:false, Public:true }, "Value", $asm01.TypeRef("System.Runtime.CompilerServices.MethodImplOptions"));

})
  .Attribute($asm01.TypeRef("System.AttributeUsageAttribute"), function () { return [96]; })
  .Attribute($asm01.TypeRef("System.Runtime.InteropServices.ComVisibleAttribute"), function () { return [true]; });

JSIL.MakeInterface(
  "System.ICloneable", true, [], function ($) {
    $.Method({}, "Clone", $sig.make(0x1B5, $asm01.TypeRef("System.Object"), [], []));
  }, []);

JSIL.MakeInterface(
  "System.IFormatProvider", true, [], function ($) {
    $.Method({}, "GetFormat", $sig.make(0x1B9, $asm01.TypeRef("System.Object"), [$asm01.TypeRef("System.Type")], []));
  }, []);

JSIL.MakeClass($asm01.TypeRef("System.Object"), "System.Globalization.CultureInfo", true, [], function ($) {
  var $thisType = $.publicInterface;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm01.System.Object)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm01.System.Int32)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm01.System.Boolean)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm01.System.ArgumentOutOfRangeException)) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize($asm01.System.ArgumentException)) ();
  };
  var $T05 = function () {
    return ($T05 = JSIL.Memoize($asm01.System.String)) ();
  };
  var $T06 = function () {
    return ($T06 = JSIL.Memoize($asm01.System.ArgumentNullException)) ();
  };
  var $T07 = function () {
    return ($T07 = JSIL.Memoize($asm01.System.Void)) ();
  };
  var $T08 = function () {
    return ($T08 = JSIL.Memoize($asm01.System.Globalization.NumberFormatInfo)) ();
  };
  var $T09 = function () {
    return ($T09 = JSIL.Memoize($asm01.System.Globalization.DateTimeFormatInfo)) ();
  };
  var $T0A = function () {
    return ($T0A = JSIL.Memoize($asm01.System.Globalization.Calendar)) ();
  };
  var $T0B = function () {
    return ($T0B = JSIL.Memoize($asm01.System.Globalization.GregorianCalendar)) ();
  };
  var $T0C = function () {
    return ($T0C = JSIL.Memoize($asm01.System.Globalization.GregorianCalendarTypes)) ();
  };
  var $T0D = function () {
    return ($T0D = JSIL.Memoize($asm01.System.Exception)) ();
  };
  var $T0E = function () {
    return ($T0E = JSIL.Memoize($asm01.System.Globalization.TextInfo)) ();
  };
  var $T0F = function () {
    return ($T0F = JSIL.Memoize($asm01.System.Threading.Monitor)) ();
  };
  var $T10 = function () {
    return ($T10 = JSIL.Memoize($asm01.System.Globalization.CompareInfo)) ();
  };
  var $T11 = function () {
    return ($T11 = JSIL.Memoize($asm01.System.Threading.Thread)) ();
  };
  var $T12 = function () {
    return ($T12 = JSIL.Memoize($asm01.System.Collections.Hashtable)) ();
  };
  var $T13 = function () {
    return ($T13 = JSIL.Memoize($asm01.System.Type)) ();
  };
  var $T14 = function () {
    return ($T14 = JSIL.Memoize($asm01.System.InvalidOperationException)) ();
  };

  $.Method({Static:false, Public:true }, ".ctor", 
    $sig.make(0x31F, null, [$asm01.TypeRef("System.Int32")], []), 
    function CultureInfo__ctor (culture) {
      $sig.get(0x320, null, [$asm01.System.Int32, $asm01.System.Boolean], []).Call($thisType.prototype, "_ctor", null, this, culture, true);
    }
  );

  $.Method({Static:false, Public:true }, ".ctor", 
    $sig.make(0x320, null, [$asm01.TypeRef("System.Int32"), $asm01.TypeRef("System.Boolean")], []), 
    function CultureInfo__ctor (culture, useUserOverride) {
      $sig.get(0x322, null, [
          $asm01.System.Int32, $asm01.System.Boolean, 
          $asm01.System.Boolean
        ], []).Call($thisType.prototype, "_ctor", null, this, culture, useUserOverride, false);
    }
  );

  $.Method({Static:false, Public:false}, ".ctor", 
    $sig.make(0x322, null, [
        $asm01.TypeRef("System.Int32"), $asm01.TypeRef("System.Boolean"), 
        $asm01.TypeRef("System.Boolean")
      ], []), 
    function CultureInfo__ctor (culture, useUserOverride, read_only) {
      if (culture < 0) {
        throw $sig.get(0xCA7, null, [$asm01.System.String, $asm01.System.String], []).Construct($T03(), "culture", "Positive number required.");
      }
      this.constructed = true;
      this.m_isReadOnly = read_only;
      this.m_useUserOverride = useUserOverride;
      if (culture === 127) {
        this.ConstructInvariant(read_only);
      } else if (!this.ConstructInternalLocaleFromLcid(culture)) {
        throw $sig.get(0x818, null, [$asm01.System.String, $asm01.System.String], []).Construct($T04(), $T05().Format("Culture ID {0} (0x{0:X4}) is not a supported culture.", culture), "culture");
      }
    }
  );

  $.Method({Static:false, Public:true }, ".ctor", 
    $sig.make(0x325, null, [$asm01.TypeRef("System.String")], []), 
    function CultureInfo__ctor (name) {
      $sig.get(0x327, null, [$asm01.System.String, $asm01.System.Boolean], []).Call($thisType.prototype, "_ctor", null, this, name, true);
    }
  );

  $.Method({Static:false, Public:true }, ".ctor", 
    $sig.make(0x327, null, [$asm01.TypeRef("System.String"), $asm01.TypeRef("System.Boolean")], []), 
    function CultureInfo__ctor (name, useUserOverride) {
      $sig.get(0x329, null, [
          $asm01.System.String, $asm01.System.Boolean, 
          $asm01.System.Boolean
        ], []).Call($thisType.prototype, "_ctor", null, this, name, useUserOverride, false);
    }
  );

  $.Method({Static:false, Public:false}, ".ctor", 
    $sig.make(0x329, null, [
        $asm01.TypeRef("System.String"), $asm01.TypeRef("System.Boolean"), 
        $asm01.TypeRef("System.Boolean")
      ], []), 
    function CultureInfo__ctor (name, useUserOverride, read_only) {
      if (name === null) {
        throw new ($T06())("name");
      }
      this.constructed = true;
      this.m_isReadOnly = read_only;
      this.m_useUserOverride = useUserOverride;
      if (name.length === 0) {
        this.ConstructInvariant(read_only);
      } else if (!this.ConstructInternalLocaleFromName(name.toLowerCase())) {
        throw $sig.get(0x818, null, [$asm01.System.String, $asm01.System.String], []).Construct($T04(), ("Culture name " + name + " is not supported."), "name");
      }
    }
  );

  $.Method({Static:false, Public:false}, ".ctor", 
    $sig.make(0x32C, null, [], []), 
    function CultureInfo__ctor () {
      this.constructed = true;
    }
  );

  $.Method({Static:false, Public:false}, "CheckNeutral", 
    $sig.make(0x28E, null, [], []), 
    function CultureInfo_CheckNeutral () {
    }
  );

  $.Method({Static:false, Public:true }, "Clone", 
    $sig.make(0x27E, $asm01.TypeRef("System.Object"), [], []), 
    function CultureInfo_Clone () {
      if (!this.constructed) {
        this.Construct();
      }
      var ci = $thisType.$Cast($T00().prototype.MemberwiseClone.call(this));
      ci.m_isReadOnly = false;
      ci.cached_serialized_form = null;
      if (!this.get_IsNeutralCulture()) {
        ci.set_NumberFormat($T08().$Cast(this.get_NumberFormat().Clone()));
        ci.set_DateTimeFormat($T09().$Cast(this.get_DateTimeFormat().Clone()));
      }
      return ci;
    }
  );

  $.Method({Static:false, Public:false}, "Construct", 
    $sig.make(0x294, null, [], []), 
    function CultureInfo_Construct () {
      JSIL.CultureInfo.construct_internal_locale_from_lcid(this, this.cultureID);
      this.constructed = true;
    }
  );

  $.Method({Static:false, Public:false}, "ConstructCalendars", 
    $sig.make(0x333, null, [], []), 
    function CultureInfo_ConstructCalendars () {
      if (this.calendar_data === null) {
        this.optional_calendars = JSIL.Array.New($T0A(), [new ($T0B())($T0C().Localized)]);
      } else {
        this.optional_calendars = JSIL.Array.New($T0A(), 5);

        for (var i = 0; i < 5; ++i) {
          var caldata = $T01().$Cast(this.calendar_data[i]);
          var caltype = ((caldata >> 24) | 0);
          var num = caltype;
          if (num !== 0) {
            throw new ($T0D())(JSIL.ConcatString("invalid calendar type:  ", caldata));
          }
          var greg_type = $T0C().$Cast(((caldata & 16777215) | 0));
          var cal = new ($T0B())(greg_type);
          this.optional_calendars[i] = cal;
        }
      }
    }
  );

  $.Method({Static:true , Public:false}, "ConstructCurrentCulture", 
    $sig.make(0x278, $.Type, [], []), 
    function CultureInfo_ConstructCurrentCulture () {
      var ci = new $thisType();
      if (!$thisType.ConstructInternalLocaleFromCurrentLocale(ci)) {
        ci = $thisType.get_InvariantCulture();
      }
      $thisType.BootstrapCultureID = ci.cultureID;
      return ci;
    }
  );

  $.Method({Static:true , Public:false}, "ConstructCurrentUICulture", 
    $sig.make(0x27A, $.Type, [], []), 
    function CultureInfo_ConstructCurrentUICulture () {
      return $thisType.ConstructCurrentCulture();
    }
  );

  $.Method({Static:true , Public:false}, "ConstructInternalLocaleFromCurrentLocale", 
    $sig.make(0x2A5, $asm01.TypeRef("System.Boolean"), [$.Type], []), 
    function CultureInfo_ConstructInternalLocaleFromCurrentLocale (ci) {
      return JSIL.CultureInfo.construct_internal_locale_from_current_locale(ci);
    }
  );

  $.Method({Static:false, Public:false}, "ConstructInternalLocaleFromLcid", 
    $sig.make(0x29A, $asm01.TypeRef("System.Boolean"), [$asm01.TypeRef("System.Int32")], []), 
    function CultureInfo_ConstructInternalLocaleFromLcid (lcid) {
      return JSIL.CultureInfo.construct_internal_locale_from_lcid(this, lcid);
    }
  );

  $.Method({Static:false, Public:false}, "ConstructInternalLocaleFromName", 
    $sig.make(0x297, $asm01.TypeRef("System.Boolean"), [$asm01.TypeRef("System.String")], []), 
    function CultureInfo_ConstructInternalLocaleFromName (locale) {
      if (!(!(locale == "zh-chs") && !(locale == "zh-cht"))) {
        var result = false;
      } else {
        var text = locale;
        if (text !== null) {
          if (!(text == "zh-hans")) {
            if (text == "zh-hant") {
              locale = "zh-cht";
            }
          } else {
            locale = "zh-chs";
          }
        }
        result = (JSIL.CultureInfo.construct_internal_locale_from_name(this, locale));
      }
      return result;
    }
  );

  $.Method({Static:true , Public:false}, "ConstructInternalLocaleFromSpecificName", 
    $sig.make(0x29B, $asm01.TypeRef("System.Boolean"), [$.Type, $asm01.TypeRef("System.String")], []), 
    function CultureInfo_ConstructInternalLocaleFromSpecificName (ci, name) {
      return JSIL.CultureInfo.construct_internal_locale_from_specific_name(ci, name);
    }
  );

  $.Method({Static:false, Public:false}, "ConstructInvariant", 
    $sig.make(0x2E4, null, [$asm01.TypeRef("System.Boolean")], []), 
    function CultureInfo_ConstructInvariant (read_only) {
      this.cultureID = 127;
      this.numInfo = $T08().get_InvariantInfo();
      this.dateTimeInfo = $T09().get_InvariantInfo();
      if (!read_only) {
        this.numInfo = $T08().$Cast(this.numInfo.Clone());
        this.dateTimeInfo = $T09().$Cast(this.dateTimeInfo.Clone());
      }
      this.textInfo = this.CreateTextInfo(read_only);
      this.m_name = $T05().Empty;
      this.displayname = (this.englishname = (this.nativename = "Invariant Language (Invariant Country)"));
      this.iso3lang = "IVL";
      this.iso2lang = "iv";
      this.icu_name = "en_US_POSIX";
      this.win3lang = "IVL";
    }
  );

  $.Method({Static:true , Public:false}, "CreateCulture", 
    $sig.make(0x332, $.Type, [$asm01.TypeRef("System.String"), $asm01.TypeRef("System.Boolean")], []), 
    function CultureInfo_CreateCulture (name, reference) {
      var invariant = (name.length === 0);
      if (reference) {
        var use_user_override = !invariant;
        var read_only = false;
      } else {
        read_only = false;
        use_user_override = !invariant;
      }
      return $sig.get(0x329, null, [
          $asm01.System.String, $asm01.System.Boolean, 
          $asm01.System.Boolean
        ], []).Construct($thisType, name, use_user_override, read_only);
    }
  );

  $.Method({Static:true , Public:true }, "CreateSpecificCulture", 
    $sig.make(0x275, $.Type, [$asm01.TypeRef("System.String")], []), 
    function CultureInfo_CreateSpecificCulture (name) {
      if (name === null) {
        throw new ($T06())("name");
      }
      if (name == $T05().Empty) {
        var result = $thisType.get_InvariantCulture();
      } else {
        var ci = new $thisType();
        if (!$thisType.ConstructInternalLocaleFromSpecificName(ci, name.toLowerCase())) {
          throw $sig.get(0x818, null, [$asm01.System.String, $asm01.System.String], []).Construct($T04(), ("Culture name " + name + " is not supported."), name);
        }
        result = ci;
      }
      return result;
    }
  );

  $.Method({Static:false, Public:false}, "CreateTextInfo", 
    $sig.make(0x2E7, $asm01.TypeRef("System.Globalization.TextInfo"), [$asm01.TypeRef("System.Boolean")], []), 
    function CultureInfo_CreateTextInfo (readOnly) {
      return new ($T0E())(this, this.cultureID, this.textinfo_data, readOnly);
    }
  );

  $.Method({Static:false, Public:true }, "Object.Equals", 
    $sig.make(0x282, $asm01.TypeRef("System.Boolean"), [$asm01.TypeRef("System.Object")], []), 
    function CultureInfo_Object_Equals (value) {
      var b = $thisType.$As(value);
      return ((b !== null) && (b.cultureID === this.cultureID));
    }
  );

  $.Method({Static:false, Public:true }, "get_Calendar", 
    $sig.make(0x21F, $asm01.TypeRef("System.Globalization.Calendar"), [], []), 
    function CultureInfo_get_Calendar () {
      return this.get_DateTimeFormat().get_Calendar();
    }
  );

  $.Method({Static:false, Public:true }, "get_CompareInfo", 
    $sig.make(0x243, $asm01.TypeRef("System.Globalization.CompareInfo"), [], []), 
    function CultureInfo_get_CompareInfo () {
      var flag = new JSIL.Variable(false);
      if (this.compareInfo === null) {
        if (!this.constructed) {
          this.Construct();
        }
        flag.value = false;
        try {
          $T0F().Enter(this, /* ref */ flag);
          if (this.compareInfo === null) {
            this.compareInfo = new ($T10())(this);
          }
        } finally {
          if (flag.value) {
            $T0F().Exit(this);
          }
        }
      }
      return this.compareInfo;
    }
  );

  $.Method({Static:true , Public:true }, "get_CurrentCulture", 
    $sig.make(0x1CD, $.Type, [], []), 
    function CultureInfo_get_CurrentCulture () {
      return $T11().Thread$CurrentThread$value.get_CurrentCulture();
    }
  );

  $.Method({Static:true , Public:true }, "get_CurrentUICulture", 
    $sig.make(0x1D0, $.Type, [], []), 
    function CultureInfo_get_CurrentUICulture () {
      return $T11().Thread$CurrentThread$value.get_CurrentUICulture();
    }
  );

  $.Method({Static:false, Public:true }, "get_DateTimeFormat", 
    $sig.make(0x260, $asm01.TypeRef("System.Globalization.DateTimeFormatInfo"), [], []), 
    function CultureInfo_get_DateTimeFormat () {
      if (!this.constructed) {
        this.Construct();
      }
      this.CheckNeutral();
      var flag = new JSIL.Variable(false);
      if (this.dateTimeInfo === null) {
        flag.value = false;
        try {
          $T0F().Enter(this, /* ref */ flag);
          if (this.dateTimeInfo === null) {
            this.dateTimeInfo = new ($T09())(this.m_isReadOnly);
            JSIL.CultureInfo.construct_datetime_format(this);
            if (this.optional_calendars !== null) {
              this.dateTimeInfo.set_Calendar(this.optional_calendars[0]);
            }
          }
        } finally {
          if (flag.value) {
            $T0F().Exit(this);
          }
        }
      }
      return this.dateTimeInfo;
    }
  );

  $.Method({Static:false, Public:true }, "get_DisplayName", 
    $sig.make(0x268, $asm01.TypeRef("System.String"), [], []), 
    function CultureInfo_get_DisplayName () {
      if (!this.constructed) {
        this.Construct();
      }
      return this.displayname;
    }
  );

  $.Method({Static:false, Public:true }, "get_EnglishName", 
    $sig.make(0x26E, $asm01.TypeRef("System.String"), [], []), 
    function CultureInfo_get_EnglishName () {
      if (!this.constructed) {
        this.Construct();
      }
      return this.englishname;
    }
  );

  $.Method({Static:false, Public:false}, "get_IcuName", 
    $sig.make(0x23C, $asm01.TypeRef("System.String"), [], []), 
    function CultureInfo_get_IcuName () {
      if (!this.constructed) {
        this.Construct();
      }
      return this.icu_name;
    }
  );

  $.Method({Static:true , Public:true }, "get_InstalledUICulture", 
    $sig.make(0x270, $.Type, [], []), 
    function CultureInfo_get_InstalledUICulture () {
      return $sig.get(0x32E, $thisType, [$asm01.System.Int32], []).CallStatic($thisType, "GetCultureInfo", null, $thisType.BootstrapCultureID);
    }
  );

  $.Method({Static:true , Public:true }, "get_InvariantCulture", 
    $sig.make(0x1CA, $.Type, [], []), 
    function CultureInfo_get_InvariantCulture () {
      return $thisType.invariant_culture_info;
    }
  );

  $.Method({Static:false, Public:true }, "get_IsNeutralCulture", 
    $sig.make(0x247, $asm01.TypeRef("System.Boolean"), [], []), 
    function CultureInfo_get_IsNeutralCulture () {
      if (!this.constructed) {
        this.Construct();
      }
      return ((this.cultureID !== 127) && ((((this.cultureID & 65280) | 0) === 0) || 
          (this.specific_lcid === 0)));
    }
  );

  $.Method({Static:false, Public:true }, "get_IsReadOnly", 
    $sig.make(0x271, $asm01.TypeRef("System.Boolean"), [], []), 
    function CultureInfo_get_IsReadOnly () {
      return this.m_isReadOnly;
    }
  );

  $.Method({Static:false, Public:true }, "get_LCID", 
    $sig.make(0x213, $asm01.TypeRef("System.Int32"), [], []), 
    function CultureInfo_get_LCID () {
      return this.cultureID;
    }
  );

  $.Method({Static:false, Public:true }, "get_Name", 
    $sig.make(0x217, $asm01.TypeRef("System.String"), [], []), 
    function CultureInfo_get_Name () {
      if (this.m_name == "zh-CHS") {
        var result = "zh-Hans";
      } else if (this.m_name == "zh-CHT") {
        result = "zh-Hant";
      } else {
        result = this.m_name;
      }
      return result;
    }
  );

  $.Method({Static:false, Public:true }, "get_NativeName", 
    $sig.make(0x21C, $asm01.TypeRef("System.String"), [], []), 
    function CultureInfo_get_NativeName () {
      if (!this.constructed) {
        this.Construct();
      }
      return this.nativename;
    }
  );

  $.Method({Static:false, Public:true }, "get_NumberFormat", 
    $sig.make(0x255, $asm01.TypeRef("System.Globalization.NumberFormatInfo"), [], []), 
    function CultureInfo_get_NumberFormat () {
      if (!this.constructed) {
        this.Construct();
      }
      this.CheckNeutral();
      var flag = new JSIL.Variable(false);
      if (this.numInfo === null) {
        flag.value = false;
        try {
          $T0F().Enter(this, /* ref */ flag);
          if (this.numInfo === null) {
            this.numInfo = new ($T08())(this.m_isReadOnly);
            JSIL.CultureInfo.construct_number_format(this);
          }
        } finally {
          if (flag.value) {
            $T0F().Exit(this);
          }
        }
      }
      return this.numInfo;
    }
  );

  $.Method({Static:false, Public:true }, "get_OptionalCalendars", 
    $sig.make(0x223, $jsilcore.TypeRef("System.Array", [$asm01.TypeRef("System.Globalization.Calendar")]), [], []), 
    function CultureInfo_get_OptionalCalendars () {
      var flag = new JSIL.Variable(false);
      if (this.optional_calendars === null) {
        flag.value = false;
        try {
          $T0F().Enter(this, /* ref */ flag);
          if (this.optional_calendars === null) {
            this.ConstructCalendars();
          }
        } finally {
          if (flag.value) {
            $T0F().Exit(this);
          }
        }
      }
      return this.optional_calendars;
    }
  );

  $.Method({Static:false, Public:true }, "get_Parent", 
    $sig.make(0x226, $.Type, [], []), 
    function CultureInfo_get_Parent () {
      if (this.parent_culture === null) {
        if (!this.constructed) {
          this.Construct();
        }
        if (this.parent_lcid === this.cultureID) {
          var result = null;
          return result;
        }
        if (this.parent_lcid === 127) {
          this.parent_culture = $thisType.get_InvariantCulture();
        } else if (this.cultureID === 127) {
          this.parent_culture = this;
        } else {
          this.parent_culture = $sig.get(0x31F, null, [$asm01.System.Int32], []).Construct($thisType, this.parent_lcid);
        }
      }
      result = this.parent_culture;
      return result;
    }
  );

  $.Method({Static:false, Public:false}, "get_Territory", 
    $sig.make(0x20F, $asm01.TypeRef("System.String"), [], []), 
    function CultureInfo_get_Territory () {
      return this.territory;
    }
  );

  $.Method({Static:false, Public:true }, "get_TextInfo", 
    $sig.make(0x22A, $asm01.TypeRef("System.Globalization.TextInfo"), [], []), 
    function CultureInfo_get_TextInfo () {
      var flag = new JSIL.Variable(false);
      if (this.textInfo === null) {
        if (!this.constructed) {
          this.Construct();
        }
        flag.value = false;
        try {
          $T0F().Enter(this, /* ref */ flag);
          if (this.textInfo === null) {
            this.textInfo = this.CreateTextInfo(this.m_isReadOnly);
          }
        } finally {
          if (flag.value) {
            $T0F().Exit(this);
          }
        }
      }
      return this.textInfo;
    }
  );

  $.Method({Static:false, Public:true }, "get_ThreeLetterISOLanguageName", 
    $sig.make(0x22C, $asm01.TypeRef("System.String"), [], []), 
    function CultureInfo_get_ThreeLetterISOLanguageName () {
      if (!this.constructed) {
        this.Construct();
      }
      return this.iso3lang;
    }
  );

  $.Method({Static:false, Public:true }, "get_ThreeLetterWindowsLanguageName", 
    $sig.make(0x230, $asm01.TypeRef("System.String"), [], []), 
    function CultureInfo_get_ThreeLetterWindowsLanguageName () {
      if (!this.constructed) {
        this.Construct();
      }
      return this.win3lang;
    }
  );

  $.Method({Static:false, Public:true }, "get_TwoLetterISOLanguageName", 
    $sig.make(0x235, $asm01.TypeRef("System.String"), [], []), 
    function CultureInfo_get_TwoLetterISOLanguageName () {
      if (!this.constructed) {
        this.Construct();
      }
      return this.iso2lang;
    }
  );

  $.Method({Static:false, Public:true }, "get_UseUserOverride", 
    $sig.make(0x238, $asm01.TypeRef("System.Boolean"), [], []), 
    function CultureInfo_get_UseUserOverride () {
      return this.m_useUserOverride;
    }
  );

  $.Method({Static:true , Public:true }, "GetCultureInfo", 
    $sig.make(0x32E, $.Type, [$asm01.TypeRef("System.Int32")], []), 
    function CultureInfo_GetCultureInfo (culture) {
      var o = null;
      var flag = new JSIL.Variable(false);
      try {
        $T0F().Enter((o = $thisType.shared_table_lock), /* ref */ flag);
        if ($thisType.shared_by_number !== null) {
          var c = $thisType.$As($thisType.shared_by_number.get_Item(culture));
          if (c !== null) {
            var result = c;
            return result;
          }
        }
        c = $sig.get(0x322, null, [
            $asm01.System.Int32, $asm01.System.Boolean, 
            $asm01.System.Boolean
          ], []).Construct($thisType, culture, false, true);
        $thisType.insert_into_shared_tables(c);
        result = c;
      } finally {
        if (flag.value) {
          $T0F().Exit(o);
        }
      }
      return result;
    }
  );

  $.Method({Static:true , Public:true }, "GetCultureInfo", 
    $sig.make(0x32F, $.Type, [$asm01.TypeRef("System.String")], []), 
    function CultureInfo_GetCultureInfo (name) {
      var o = null;
      if (name === null) {
        throw new ($T06())("name");
      }
      var flag = new JSIL.Variable(false);
      try {
        $T0F().Enter((o = $thisType.shared_table_lock), /* ref */ flag);
        if ($thisType.shared_by_name !== null) {
          var c = $thisType.$As($thisType.shared_by_name.get_Item(name));
          if (c !== null) {
            var result = c;
            return result;
          }
        }
        c = $sig.get(0x329, null, [
            $asm01.System.String, $asm01.System.Boolean, 
            $asm01.System.Boolean
          ], []).Construct($thisType, name, false, true);
        $thisType.insert_into_shared_tables(c);
        result = c;
      } finally {
        if (flag.value) {
          $T0F().Exit(o);
        }
      }
      return result;
    }
  );

  $.Method({Static:true , Public:true }, "GetCultureInfo", 
    $sig.make(0x330, $.Type, [$asm01.TypeRef("System.String"), $asm01.TypeRef("System.String")], []), 
    function CultureInfo_GetCultureInfo (name, altName) {
      if (name === null) {
        throw new ($T06())("null");
      }
      if (altName === null) {
        throw new ($T06())("null");
      }
      return $sig.get(0x32F, $thisType, [$asm01.System.String], []).CallStatic($thisType, "GetCultureInfo", null, name);
    }
  )
    .Attribute($asm01.TypeRef("System.MonoTODOAttribute"), function () { return ["Currently it ignores the altName parameter"]; });

  $.Method({Static:true , Public:true }, "GetCultureInfoByIetfLanguageTag", 
    $sig.make(0x331, $.Type, [$asm01.TypeRef("System.String")], []), 
    function CultureInfo_GetCultureInfoByIetfLanguageTag (name) {
      if (name !== null) {
        if (name == "zh-Hans") {
          var cultureInfo = $sig.get(0x32F, $thisType, [$asm01.System.String], []).CallStatic($thisType, "GetCultureInfo", null, "zh-CHS");
          return cultureInfo;
        }
        if (name == "zh-Hant") {
          cultureInfo = $sig.get(0x32F, $thisType, [$asm01.System.String], []).CallStatic($thisType, "GetCultureInfo", null, "zh-CHT");
          return cultureInfo;
        }
      }
      cultureInfo = $sig.get(0x32F, $thisType, [$asm01.System.String], []).CallStatic($thisType, "GetCultureInfo", null, name);
      return cultureInfo;
    }
  );

  $.Method({Static:false, Public:true }, "GetFormat", 
    $sig.make(0x291, $asm01.TypeRef("System.Object"), [$asm01.TypeRef("System.Type")], []), 
    function CultureInfo_GetFormat (formatType) {
      var format = null;
      if (formatType === $T08().__Type__) {
        format = this.get_NumberFormat();
      } else if (formatType === $T09().__Type__) {
        format = this.get_DateTimeFormat();
      }
      return format;
    }
  );

  $.Method({Static:false, Public:true }, "GetHashCode", 
    $sig.make(0x285, $asm01.TypeRef("System.Int32"), [], []), 
    function CultureInfo_GetHashCode () {
      return this.cultureID;
    }
  );

  $.Method({Static:true , Public:false}, "insert_into_shared_tables", 
    $sig.make(0x32D, null, [$.Type], []), 
    function CultureInfo_insert_into_shared_tables (c) {
      if ($thisType.shared_by_number === null) {
        $thisType.shared_by_number = new ($T12())();
        $thisType.shared_by_name = new ($T12())();
      }
      $thisType.shared_by_number.set_Item(c.cultureID, c);
      $thisType.shared_by_name.set_Item(c.m_name, c);
    }
  );

  $.Method({Static:true , Public:false}, "IsIDNeutralCulture", 
    $sig.make(0x28B, $asm01.TypeRef("System.Boolean"), [$asm01.TypeRef("System.Int32")], []), 
    function CultureInfo_IsIDNeutralCulture (lcid) {
      var ret = new JSIL.Variable(false);
      if (!(JSIL.CultureInfo.internal_is_lcid_neutral(lcid, /* ref */ ret))) {
        throw new ($T04())($T05().Format("Culture id 0x{:x4} is not supported.", lcid));
      }
      return ret.value;
    }
  );

  $.Method({Static:true , Public:true }, "ReadOnly", 
    $sig.make(0x287, $.Type, [$.Type], []), 
    function CultureInfo_ReadOnly (ci) {
      if (ci === null) {
        throw new ($T06())("ci");
      }
      if (ci.m_isReadOnly) {
        var result = ci;
      } else {
        var new_ci = $thisType.$Cast(ci.Clone());
        new_ci.m_isReadOnly = true;
        if (new_ci.numInfo !== null) {
          new_ci.numInfo = $T08().ReadOnly(new_ci.numInfo);
        }
        if (new_ci.dateTimeInfo !== null) {
          new_ci.dateTimeInfo = $T09().ReadOnly(new_ci.dateTimeInfo);
        }
        if (new_ci.textInfo !== null) {
          new_ci.textInfo = $T0E().ReadOnly(new_ci.textInfo);
        }
        result = new_ci;
      }
      return result;
    }
  );

  $.Method({Static:false, Public:true }, "set_DateTimeFormat", 
    $sig.make(0x264, null, [$asm01.TypeRef("System.Globalization.DateTimeFormatInfo")], []), 
    function CultureInfo_set_DateTimeFormat (value) {
      if (!this.constructed) {
        this.Construct();
      }
      if (this.m_isReadOnly) {
        throw new ($T14())($thisType.MSG_READONLY);
      }
      if (value === null) {
        throw new ($T06())("DateTimeFormat");
      }
      this.dateTimeInfo = value;
    }
  );

  $.Method({Static:false, Public:true }, "set_NumberFormat", 
    $sig.make(0x259, null, [$asm01.TypeRef("System.Globalization.NumberFormatInfo")], []), 
    function CultureInfo_set_NumberFormat (value) {
      if (!this.constructed) {
        this.Construct();
      }
      if (this.m_isReadOnly) {
        throw new ($T14())($thisType.MSG_READONLY);
      }
      if (value === null) {
        throw new ($T06())("NumberFormat");
      }
      this.numInfo = value;
    }
  );

  $.Method({Static:false, Public:true }, "toString", 
    $sig.make(0x289, $asm01.TypeRef("System.String"), [], []), 
    function CultureInfo_toString () {
      return this.m_name;
    }
  );

  $.Constant({Static:true , Public:false}, "NumOptionalCalendars", 5); 
  $.Constant({Static:true , Public:false}, "GregorianTypeMask", 16777215); 
  $.Constant({Static:true , Public:false}, "CalendarTypeBits", 24); 
  $.Constant({Static:true , Public:false}, "InvariantCultureId", 127); 
  $.Field({Static:true , Public:false}, "invariant_culture_info", $.Type); 
  $.Field({Static:true , Public:false}, "shared_table_lock", $asm01.TypeRef("System.Object")); 
  $.Field({Static:true , Public:false}, "BootstrapCultureID", $asm01.TypeRef("System.Int32")); 
  $.Field({Static:false, Public:false}, "m_isReadOnly", $asm01.TypeRef("System.Boolean")); 
  $.Field({Static:false, Public:false}, "cultureID", $asm01.TypeRef("System.Int32")); 
  $.Field({Static:false, Public:false}, "parent_lcid", $asm01.TypeRef("System.Int32")); 
  $.Field({Static:false, Public:false}, "specific_lcid", $asm01.TypeRef("System.Int32")); 
  $.Field({Static:false, Public:false}, "datetime_index", $asm01.TypeRef("System.Int32")); 
  $.Field({Static:false, Public:false}, "number_index", $asm01.TypeRef("System.Int32")); 
  $.Field({Static:false, Public:false}, "m_useUserOverride", $asm01.TypeRef("System.Boolean")); 
  $.Field({Static:false, Public:false}, "numInfo", $asm01.TypeRef("System.Globalization.NumberFormatInfo")); 
  $.Field({Static:false, Public:false}, "dateTimeInfo", $asm01.TypeRef("System.Globalization.DateTimeFormatInfo")); 
  $.Field({Static:false, Public:false}, "textInfo", $asm01.TypeRef("System.Globalization.TextInfo")); 
  $.Field({Static:false, Public:false}, "m_name", $asm01.TypeRef("System.String")); 
  $.Field({Static:false, Public:false}, "displayname", $asm01.TypeRef("System.String")); 
  $.Field({Static:false, Public:false}, "englishname", $asm01.TypeRef("System.String")); 
  $.Field({Static:false, Public:false}, "nativename", $asm01.TypeRef("System.String")); 
  $.Field({Static:false, Public:false}, "iso3lang", $asm01.TypeRef("System.String")); 
  $.Field({Static:false, Public:false}, "iso2lang", $asm01.TypeRef("System.String")); 
  $.Field({Static:false, Public:false}, "icu_name", $asm01.TypeRef("System.String")); 
  $.Field({Static:false, Public:false}, "win3lang", $asm01.TypeRef("System.String")); 
  $.Field({Static:false, Public:false}, "territory", $asm01.TypeRef("System.String")); 
  $.Field({Static:false, Public:false}, "compareInfo", $asm01.TypeRef("System.Globalization.CompareInfo")); 
  $.Field({Static:false, Public:false, ReadOnly:true }, "calendar_data", $jsilcore.TypeRef("System.Array", [$asm01.TypeRef("System.Object")])); 
  $.Field({Static:false, Public:false, ReadOnly:true }, "textinfo_data", $jsilcore.TypeRef("System.Array", [$asm01.TypeRef("System.Object")])); 
  $.Field({Static:false, Public:false}, "optional_calendars", $jsilcore.TypeRef("System.Array", [$asm01.TypeRef("System.Globalization.Calendar")])); 
  $.Field({Static:false, Public:false}, "parent_culture", $.Type); 
  $.Field({Static:false, Public:false}, "m_dataItem", $asm01.TypeRef("System.Int32")); 
  $.Field({Static:false, Public:false}, "calendar", $asm01.TypeRef("System.Globalization.Calendar")); 
  $.Field({Static:false, Public:false}, "constructed", $asm01.TypeRef("System.Boolean")); 
  $.Field({Static:false, Public:false}, "cached_serialized_form", $jsilcore.TypeRef("System.Array", [$asm01.TypeRef("System.Byte")])); 
  $.Field({Static:true , Public:false, ReadOnly:true }, "MSG_READONLY", $asm01.TypeRef("System.String"), "This instance is read only"); 
  $.Field({Static:true , Public:false}, "shared_by_number", $asm01.TypeRef("System.Collections.Hashtable")); 
  $.Field({Static:true , Public:false}, "shared_by_name", $asm01.TypeRef("System.Collections.Hashtable")); 
  $.Method({Static:true , Public:false}, ".cctor", 
    $sig.make(0x272, null, [], []), 
    function CultureInfo__cctor () {
      $thisType.shared_table_lock = new ($T00())();
      $thisType.MSG_READONLY = "This instance is read only";
      $thisType.invariant_culture_info = $sig.get(0x322, null, [
          $asm01.System.Int32, $asm01.System.Boolean, 
          $asm01.System.Boolean
        ], []).Construct($thisType, 127, false, true);
    }
  );

  $.Property({Static:true , Public:true }, "InvariantCulture", $.Type);

  $.Property({Static:true , Public:true }, "CurrentCulture", $.Type);

  $.Property({Static:true , Public:true }, "CurrentUICulture", $.Type);

  $.Property({Static:false, Public:false}, "Territory", $asm01.TypeRef("System.String"));

  $.Property({Static:false, Public:true , Virtual:true }, "LCID", $asm01.TypeRef("System.Int32"));

  $.Property({Static:false, Public:true , Virtual:true }, "Name", $asm01.TypeRef("System.String"));

  $.Property({Static:false, Public:true , Virtual:true }, "NativeName", $asm01.TypeRef("System.String"));

  $.Property({Static:false, Public:true , Virtual:true }, "Calendar", $asm01.TypeRef("System.Globalization.Calendar"));

  $.Property({Static:false, Public:true , Virtual:true }, "OptionalCalendars", $jsilcore.TypeRef("System.Array", [$asm01.TypeRef("System.Globalization.Calendar")]));

  $.Property({Static:false, Public:true , Virtual:true }, "Parent", $.Type);

  $.Property({Static:false, Public:true , Virtual:true }, "TextInfo", $asm01.TypeRef("System.Globalization.TextInfo"));

  $.Property({Static:false, Public:true , Virtual:true }, "ThreeLetterISOLanguageName", $asm01.TypeRef("System.String"));

  $.Property({Static:false, Public:true , Virtual:true }, "ThreeLetterWindowsLanguageName", $asm01.TypeRef("System.String"));

  $.Property({Static:false, Public:true , Virtual:true }, "TwoLetterISOLanguageName", $asm01.TypeRef("System.String"));

  $.Property({Static:false, Public:true }, "UseUserOverride", $asm01.TypeRef("System.Boolean"));

  $.Property({Static:false, Public:false}, "IcuName", $asm01.TypeRef("System.String"));

  $.Property({Static:false, Public:true , Virtual:true }, "CompareInfo", $asm01.TypeRef("System.Globalization.CompareInfo"));

  $.Property({Static:false, Public:true , Virtual:true }, "IsNeutralCulture", $asm01.TypeRef("System.Boolean"));

  $.Property({Static:false, Public:true , Virtual:true }, "NumberFormat", $asm01.TypeRef("System.Globalization.NumberFormatInfo"));

  $.Property({Static:false, Public:true , Virtual:true }, "DateTimeFormat", $asm01.TypeRef("System.Globalization.DateTimeFormatInfo"));

  $.Property({Static:false, Public:true , Virtual:true }, "DisplayName", $asm01.TypeRef("System.String"));

  $.Property({Static:false, Public:true , Virtual:true }, "EnglishName", $asm01.TypeRef("System.String"));

  $.Property({Static:true , Public:true }, "InstalledUICulture", $.Type);

  $.Property({Static:false, Public:true }, "IsReadOnly", $asm01.TypeRef("System.Boolean"));

  $.ImplementInterfaces($asm01.TypeRef("System.ICloneable"), $asm01.TypeRef("System.IFormatProvider"))
})
  .Attribute($asm01.TypeRef("System.Runtime.InteropServices.ComVisibleAttribute"), function () { return [true]; });

JSIL.MakeInterface(
  "System.Collections.ICollection", true, [], function ($) {
    $.Method({}, "get_Count", $sig.make(0x28D, $asm01.TypeRef("System.Int32"), [], []));
    $.Method({}, "get_IsSynchronized", $sig.make(0x28F, $asm01.TypeRef("System.Boolean"), [], []));
    $.Method({}, "get_SyncRoot", $sig.make(0x292, $asm01.TypeRef("System.Object"), [], []));
    $.Method({}, "CopyTo", $sig.make(0x296, null, [$asm01.TypeRef("System.Array"), $asm01.TypeRef("System.Int32")], []));
    $.Property({}, "Count");
    $.Property({}, "IsSynchronized");
    $.Property({}, "SyncRoot");
  }, [$asm01.TypeRef("System.Collections.IEnumerable")]);

JSIL.MakeInterface(
  "System.Collections.IList", true, [], function ($) {
    $.Method({}, "get_IsFixedSize", $sig.make(0x9DB, $asm01.TypeRef("System.Boolean"), [], []));
    $.Method({}, "get_IsReadOnly", $sig.make(0x9DC, $asm01.TypeRef("System.Boolean"), [], []));
    $.Method({}, "get_Item", $sig.make(0x9DE, $asm01.TypeRef("System.Object"), [$asm01.TypeRef("System.Int32")], []));
    $.Method({}, "set_Item", $sig.make(0x9E0, null, [$asm01.TypeRef("System.Int32"), $asm01.TypeRef("System.Object")], []));
    $.Method({}, "Add", $sig.make(0x9E2, $asm01.TypeRef("System.Int32"), [$asm01.TypeRef("System.Object")], []));
    $.Method({}, "Clear", $sig.make(0x9E4, null, [], []));
    $.Method({}, "Contains", $sig.make(0x9E6, $asm01.TypeRef("System.Boolean"), [$asm01.TypeRef("System.Object")], []));
    $.Method({}, "IndexOf", $sig.make(0x9E8, $asm01.TypeRef("System.Int32"), [$asm01.TypeRef("System.Object")], []));
    $.Method({}, "Insert", $sig.make(0x9EA, null, [$asm01.TypeRef("System.Int32"), $asm01.TypeRef("System.Object")], []));
    $.Method({}, "Remove", $sig.make(0x9EC, null, [$asm01.TypeRef("System.Object")], []));
    $.Method({}, "RemoveAt", $sig.make(0x9EE, null, [$asm01.TypeRef("System.Int32")], []));
    $.Property({}, "IsFixedSize");
    $.Property({}, "IsReadOnly");
    $.Property({}, "Item");
  }, [$asm01.TypeRef("System.Collections.ICollection"), $asm01.TypeRef("System.Collections.IEnumerable")]);

JSIL.MakeInterface(
  "System.Collections.Generic.IList`1", true, ["T"], function ($) {
    $.Method({}, "IndexOf", $sig.make(0xA01, $asm01.TypeRef("System.Int32"), [new JSIL.GenericParameter("T", "System.Collections.Generic.IList`1")], []));
    $.Method({}, "Insert", $sig.make(0xA05, null, [$asm01.TypeRef("System.Int32"), new JSIL.GenericParameter("T", "System.Collections.Generic.IList`1")], []));
    $.Method({}, "RemoveAt", $sig.make(0xA07, null, [$asm01.TypeRef("System.Int32")], []));
    $.Method({}, "get_Item", $sig.make(0x9FC, new JSIL.GenericParameter("T", "System.Collections.Generic.IList`1"), [$asm01.TypeRef("System.Int32")], []));
    $.Method({}, "set_Item", $sig.make(0x9FE, null, [$asm01.TypeRef("System.Int32"), new JSIL.GenericParameter("T", "System.Collections.Generic.IList`1")], []));
    $.Property({}, "Item");
  }, [$asm01.TypeRef("System.Collections.Generic.ICollection`1", [new JSIL.GenericParameter("T", "System.Collections.Generic.IList`1")]), $asm01.TypeRef("System.Collections.Generic.IEnumerable`1", [new JSIL.GenericParameter("T", "System.Collections.Generic.IList`1")]), $asm01.TypeRef("System.Collections.IEnumerable")]);

JSIL.MakeClass($asm01.TypeRef("System.Attribute"), "System.ThreadStaticAttribute", false, [], function ($) {
  var $thisType = $.publicInterface;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm01.System.Attribute)) ();
  };

  $.Method({Static:false, Public:true }, ".ctor", 
    $sig.make(0xA0F, null, [], []), 
    function ThreadStaticAttribute__ctor () {
      $T00().prototype._ctor.call(this);
    }
  );

});

JSIL.DeclareNamespace("System.Security.Cryptography");
JSIL.MakeClass($asm01.TypeRef("System.Object"), "System.Security.Cryptography.RandomNumberGenerator", true, [], function ($) {
  var $thisType = $.publicInterface;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm01.System.NotImplementedException)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize(System.Array.Of($asm01.System.Byte))) ();
  };

  $.Method({Static:false, Public:true }, ".ctor", 
    $sig.make(0xA61, null, [], []), 
    function RandomNumberGenerator__ctor () {
    }
  );

  $.Method({Static:true , Public:false}, "Create", 
    $sig.make(0xA54, $.Type, [], []), 
    function RandomNumberGenerator_Create () {
      throw new ($T00())();
    }
  );

  $.Method({Static:false, Public:false}, "GetBytes", 
    $sig.make(0xA5D, null, [$jsilcore.TypeRef("System.Array", [$asm01.TypeRef("System.Byte")])], []), 
    function RandomNumberGenerator_GetBytes (b) {
      throw new ($T00())();
    }
  );

});

JSIL.MakeEnum(
  "System.Diagnostics.DebuggerBrowsableState", true, {
    Never: 0, 
    Collapsed: 2, 
    RootHidden: 3
  }, false
);

JSIL.MakeStruct($asm01.TypeRef("System.ValueType"), "System.TimeSpan", true, [], function ($) {
  var $thisType = $.publicInterface;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm01.System.Int64)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm01.System.Int32)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm01.System.Exception)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm01.System.OverflowException)) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize($asm01.System.Locale)) ();
  };
  var $T05 = function () {
    return ($T05 = JSIL.Memoize($asm01.System.Object)) ();
  };
  var $T06 = function () {
    return ($T06 = JSIL.Memoize($asm01.System.Boolean)) ();
  };
  var $T07 = function () {
    return ($T07 = JSIL.Memoize($asm01.System.ArgumentOutOfRangeException)) ();
  };
  var $T08 = function () {
    return ($T08 = JSIL.Memoize($asm01.System.ArgumentException)) ();
  };
  var $T09 = function () {
    return ($T09 = JSIL.Memoize($asm01.System.Math)) ();
  };
  var $T0A = function () {
    return ($T0A = JSIL.Memoize($asm01.System.Double)) ();
  };
  var $T0B = function () {
    return ($T0B = JSIL.Memoize($asm01.System.Void)) ();
  };
  var $T0C = function () {
    return ($T0C = JSIL.Memoize($asm01.System.String)) ();
  };
  var $T0D = function () {
    return ($T0D = JSIL.Memoize($asm01.System.ArgumentNullException)) ();
  };
  var $T0E = function () {
    return ($T0E = JSIL.Memoize($asm01.System.TimeSpan_Parser)) ();
  };
  var $T0F = function () {
    return ($T0F = JSIL.Memoize($asm01.System.Text.StringBuilder)) ();
  };
  var $T10 = function () {
    return ($T10 = JSIL.Memoize($asm01.System.IFormatProvider)) ();
  };
  var $T11 = function () {
    return ($T11 = JSIL.Memoize($asm01.System.FormatException)) ();
  };
  var $T12 = function () {
    return ($T12 = JSIL.Memoize($asm01.System.TimeSpan_FormatParser)) ();
  };
  var $T13 = function () {
    return ($T13 = JSIL.Memoize($asm01.System.TimeSpan_FormatElement)) ();
  };

  $.Method({Static:false, Public:true }, ".ctor", 
    $sig.make(0x225, null, [$asm01.TypeRef("System.Int64")], []), 
    function TimeSpan__ctor (ticks) {
      this._ticks = ticks;
    }
  );

  $.Method({Static:false, Public:true }, ".ctor", 
    $sig.make(0x227, null, [
        $asm01.TypeRef("System.Int32"), $asm01.TypeRef("System.Int32"), 
        $asm01.TypeRef("System.Int32")
      ], []), 
    function TimeSpan__ctor (hours, minutes, seconds) {
      $thisType.CalculateTicks(
        0, 
        hours, 
        minutes, 
        seconds, 
        0, 
        true, 
        /* ref */ new JSIL.MemberReference(this, "_ticks")
      );
    }
  );

  $.Method({Static:false, Public:true }, ".ctor", 
    $sig.make(0x229, null, [
        $asm01.TypeRef("System.Int32"), $asm01.TypeRef("System.Int32"), 
        $asm01.TypeRef("System.Int32"), $asm01.TypeRef("System.Int32")
      ], []), 
    function TimeSpan__ctor (days, hours, minutes, seconds) {
      $thisType.CalculateTicks(
        days, 
        hours, 
        minutes, 
        seconds, 
        0, 
        true, 
        /* ref */ new JSIL.MemberReference(this, "_ticks")
      );
    }
  );

  $.Method({Static:false, Public:true }, ".ctor", 
    $sig.make(0x22B, null, [
        $asm01.TypeRef("System.Int32"), $asm01.TypeRef("System.Int32"), 
        $asm01.TypeRef("System.Int32"), $asm01.TypeRef("System.Int32"), 
        $asm01.TypeRef("System.Int32")
      ], []), 
    function TimeSpan__ctor (days, hours, minutes, seconds, milliseconds) {
      $thisType.CalculateTicks(
        days, 
        hours, 
        minutes, 
        seconds, 
        milliseconds, 
        true, 
        /* ref */ new JSIL.MemberReference(this, "_ticks")
      );
    }
  );

  $.Method({Static:false, Public:true }, "Add", 
    $sig.make(0x231, $.Type, [$.Type], []), 
    function TimeSpan_Add (ts) {
      try {
        var result = new $thisType($T00().op_Addition(this._ticks, ts.get_Ticks()));
      } catch ($exception) {
        if ($T03().$Is($exception)) {
          throw new ($T03())($T04().GetText("Resulting timespan is too big.", JSIL.Array.New($T05(), 0)));
        } else {
          throw $exception;
        }
      }
      return result;
    }
  );

  $.Method({Static:true , Public:false}, "CalculateTicks", 
    $sig.make(0x22E, $asm01.TypeRef("System.Boolean"), [
        $asm01.TypeRef("System.Int32"), $asm01.TypeRef("System.Int32"), 
        $asm01.TypeRef("System.Int32"), $asm01.TypeRef("System.Int32"), 
        $asm01.TypeRef("System.Int32"), $asm01.TypeRef("System.Boolean"), 
        $jsilcore.TypeRef("JSIL.Reference", [$asm01.TypeRef("System.Int64")])
      ], []), 
    function TimeSpan_CalculateTicks (days, hours, minutes, seconds, milliseconds, throwExc, /* ref */ result) {
      var t = $T00().op_Addition(
        $T00().op_Multiplication(
          $T00().FromNumber(((((((hours * 3600) | 0) + ((minutes * 60) | 0)) | 0) + seconds) | 0)), 
          $T00().Create(1000, 0, 0)
        ), 
        $T00().FromNumber(milliseconds)
      );
      t = $T00().op_Multiplication(t, $T00().Create(10000, 0, 0));
      result.value = $T00().Create(0, 0, 0);
      var overflow = false;
      if (days > 0) {
        var td = $T00().op_Multiplication(
          $T00().Create(6930432, 51498, 0), 
          $T00().FromNumber(days)
        );
        if (!$T00().op_GreaterThanOrEqual(t, $T00().Create(0, 0, 0))) {
          var ticks = t;
          t = $T00().op_Addition(t, td);
          overflow = $T00().op_GreaterThan(ticks, t);
        } else {
          t = $T00().op_Addition(t, td);
          overflow = $T00().op_LessThan(t, $T00().Create(0, 0, 0));
        }
      } else if (days < 0) {
        td = $T00().op_Multiplication(
          $T00().Create(6930432, 51498, 0), 
          $T00().FromNumber(days)
        );
        if (!$T00().op_GreaterThan(t, $T00().Create(0, 0, 0))) {
          t = $T00().op_Addition(t, td);
          overflow = $T00().op_GreaterThan(t, $T00().Create(0, 0, 0));
        } else {
          ticks = t;
          t = $T00().op_Addition(t, td);
          overflow = $T00().op_GreaterThan(t, ticks);
        }
      }
      if (overflow) {
        if (throwExc) {
          throw new ($T07())($T04().GetText("The timespan is too big or too small.", JSIL.Array.New($T05(), 0)));
        }
        var result2 = false;
      } else {
        result.value = t;
        result2 = true;
      }
      return result2;
    }
  );

  $.Method({Static:true , Public:true }, "Compare", 
    $sig.make(0x234, $asm01.TypeRef("System.Int32"), [$.Type, $.Type], []), 
    function TimeSpan_Compare (t1, t2) {
      if (!$T00().op_GreaterThanOrEqual(t1._ticks, t2._ticks)) {
        var result = -1;
      } else if (!$T00().op_LessThanOrEqual(t1._ticks, t2._ticks)) {
        result = 1;
      } else {
        result = 0;
      }
      return result;
    }
  );

  $.Method({Static:false, Public:true }, "CompareTo", 
    $sig.make(0x237, $asm01.TypeRef("System.Int32"), [$asm01.TypeRef("System.Object")], []), 
    function TimeSpan_CompareTo (value) {
      if (value === null) {
        var result = 1;
      } else {
        if (!$thisType.$Is(value)) {
          throw $sig.get(0x818, null, [$asm01.System.String, $asm01.System.String], []).Construct($T08(), $T04().GetText("Argument has to be a TimeSpan.", JSIL.Array.New($T05(), 0)), "value");
        }
        result = $thisType.Compare(this, $thisType.$Cast(value));
      }
      return result;
    }
  );

  $.Method({Static:false, Public:true }, "CompareTo", 
    $sig.make(0x23A, $asm01.TypeRef("System.Int32"), [$.Type], []), 
    function TimeSpan_CompareTo (value) {
      return $thisType.Compare(this, value);
    }
  );

  $.Method({Static:false, Public:true }, "Duration", 
    $sig.make(0x242, $.Type, [], []), 
    function TimeSpan_Duration () {
      try {
        var result = new $thisType($sig.get(0x7E7, $asm01.System.Int64, [$asm01.System.Int64], []).CallStatic($T09(), "Abs", null, this._ticks));
      } catch ($exception) {
        if ($T03().$Is($exception)) {
          throw new ($T03())($T04().GetText("This TimeSpan value is MinValue so you cannot get the duration.", JSIL.Array.New($T05(), 0)));
        } else {
          throw $exception;
        }
      }
      return result;
    }
  );

  $.Method({Static:false, Public:true }, "Equals", 
    $sig.make(0x23D, $asm01.TypeRef("System.Boolean"), [$.Type], []), 
    function TimeSpan_Equals (obj) {
      return $T00().op_Equality(obj._ticks, this._ticks);
    }
  );

  $.Method({Static:false, Public:true }, "Object.Equals", 
    $sig.make(0x246, $asm01.TypeRef("System.Boolean"), [$asm01.TypeRef("System.Object")], []), 
    function TimeSpan_Object_Equals (value) {
      return ($thisType.$Is(value).valueOf() && $T00().op_Equality(this._ticks, $thisType.$Cast(value)._ticks));
    }
  );

  $.Method({Static:true , Public:true }, "Equals", 
    $sig.make(0x257, $asm01.TypeRef("System.Boolean"), [$.Type, $.Type], []), 
    function TimeSpan_Equals (t1, t2) {
      return $T00().op_Equality(t1._ticks, t2._ticks);
    }
  );

  $.Method({Static:true , Public:false}, "From", 
    $sig.make(0x273, $.Type, [$asm01.TypeRef("System.Double"), $asm01.TypeRef("System.Int64")], []), 
    function TimeSpan_From (value, tickMultiplicator) {
      if (isNaN(value)) {
        throw $sig.get(0x818, null, [$asm01.System.String, $asm01.System.String], []).Construct($T08(), $T04().GetText("Value cannot be NaN.", JSIL.Array.New($T05(), 0)), "value");
      }
      if (!(!((value == Number.NEGATIVE_INFINITY) || 
            (value === Number.POSITIVE_INFINITY) || 
            (value < $thisType.MinValue.get_Ticks().ToNumber())) && (value <= $thisType.MaxValue.get_Ticks().ToNumber()))) {
        throw new ($T03())($T04().GetText("Outside range [MinValue,MaxValue]", JSIL.Array.New($T05(), 0)));
      }
      try {
        value *= ($T00().op_Division(tickMultiplicator, $T00().Create(10000, 0, 0))).ToNumber();
        var val = $T00().FromNumber(Math.round(value));
        var result = new $thisType($T00().op_Multiplication(val, $T00().Create(10000, 0, 0)));
      } catch ($exception) {
        if ($T03().$Is($exception)) {
          throw new ($T03())($T04().GetText("Resulting timespan is too big.", JSIL.Array.New($T05(), 0)));
        } else {
          throw $exception;
        }
      }
      return result;
    }
  );

  $.Method({Static:true , Public:true }, "FromDays", 
    $sig.make(0x25B, $.Type, [$asm01.TypeRef("System.Double")], []), 
    function TimeSpan_FromDays (value) {
      return $thisType.From(value, $T00().Create(6930432, 51498, 0));
    }
  );

  $.Method({Static:true , Public:true }, "FromHours", 
    $sig.make(0x25F, $.Type, [$asm01.TypeRef("System.Double")], []), 
    function TimeSpan_FromHours (value) {
      return $thisType.From(value, $T00().Create(12871680, 2145, 0));
    }
  );

  $.Method({Static:true , Public:true }, "FromMilliseconds", 
    $sig.make(0x26C, $.Type, [$asm01.TypeRef("System.Double")], []), 
    function TimeSpan_FromMilliseconds (value) {
      return $thisType.From(value, $T00().Create(10000, 0, 0));
    }
  );

  $.Method({Static:true , Public:true }, "FromMinutes", 
    $sig.make(0x263, $.Type, [$asm01.TypeRef("System.Double")], []), 
    function TimeSpan_FromMinutes (value) {
      return $thisType.From(value, $T00().Create(12797440, 35, 0));
    }
  );

  $.Method({Static:true , Public:true }, "FromSeconds", 
    $sig.make(0x26A, $.Type, [$asm01.TypeRef("System.Double")], []), 
    function TimeSpan_FromSeconds (value) {
      return $thisType.From(value, $T00().Create(10000000, 0, 0));
    }
  );

  $.Method({Static:true , Public:true }, "FromTicks", 
    $sig.make(0x277, $.Type, [$asm01.TypeRef("System.Int64")], []), 
    function TimeSpan_FromTicks (value) {
      return new $thisType(value);
    }
  );

  $.Method({Static:false, Public:true }, "get_Days", 
    $sig.make(0x209, $asm01.TypeRef("System.Int32"), [], []), 
    function TimeSpan_get_Days () {
      return ($T00().op_Division(this._ticks, $T00().Create(6930432, 51498, 0))).ToNumber();
    }
  );

  $.Method({Static:false, Public:true }, "get_Hours", 
    $sig.make(0x20B, $asm01.TypeRef("System.Int32"), [], []), 
    function TimeSpan_get_Hours () {
      return ($T00().op_Division(
          $T00().op_Modulus(this._ticks, $T00().Create(6930432, 51498, 0)), 
          $T00().Create(12871680, 2145, 0)
        )).ToNumber();
    }
  );

  $.Method({Static:false, Public:true }, "get_Milliseconds", 
    $sig.make(0x20D, $asm01.TypeRef("System.Int32"), [], []), 
    function TimeSpan_get_Milliseconds () {
      return ($T00().op_Division(
          $T00().op_Modulus(this._ticks, $T00().Create(10000000, 0, 0)), 
          $T00().Create(10000, 0, 0)
        )).ToNumber();
    }
  );

  $.Method({Static:false, Public:true }, "get_Minutes", 
    $sig.make(0x20E, $asm01.TypeRef("System.Int32"), [], []), 
    function TimeSpan_get_Minutes () {
      return ($T00().op_Division(
          $T00().op_Modulus(this._ticks, $T00().Create(12871680, 2145, 0)), 
          $T00().Create(12797440, 35, 0)
        )).ToNumber();
    }
  );

  $.Method({Static:false, Public:true }, "get_Seconds", 
    $sig.make(0x211, $asm01.TypeRef("System.Int32"), [], []), 
    function TimeSpan_get_Seconds () {
      return ($T00().op_Division(
          $T00().op_Modulus(this._ticks, $T00().Create(12797440, 35, 0)), 
          $T00().Create(10000000, 0, 0)
        )).ToNumber();
    }
  );

  $.Method({Static:false, Public:true }, "get_Ticks", 
    $sig.make(0x212, $asm01.TypeRef("System.Int64"), [], []), 
    function TimeSpan_get_Ticks () {
      return this._ticks;
    }
  );

  $.Method({Static:false, Public:true }, "get_TotalDays", 
    $sig.make(0x216, $asm01.TypeRef("System.Double"), [], []), 
    function TimeSpan_get_TotalDays () {
      return (this._ticks.ToNumber() / 864000000000);
    }
  );

  $.Method({Static:false, Public:true }, "get_TotalHours", 
    $sig.make(0x219, $asm01.TypeRef("System.Double"), [], []), 
    function TimeSpan_get_TotalHours () {
      return (this._ticks.ToNumber() / 36000000000);
    }
  );

  $.Method({Static:false, Public:true }, "get_TotalMilliseconds", 
    $sig.make(0x21A, $asm01.TypeRef("System.Double"), [], []), 
    function TimeSpan_get_TotalMilliseconds () {
      return (this._ticks.ToNumber() / 10000);
    }
  );

  $.Method({Static:false, Public:true }, "get_TotalMinutes", 
    $sig.make(0x21E, $asm01.TypeRef("System.Double"), [], []), 
    function TimeSpan_get_TotalMinutes () {
      return (this._ticks.ToNumber() / 600000000);
    }
  );

  $.Method({Static:false, Public:true }, "get_TotalSeconds", 
    $sig.make(0x222, $asm01.TypeRef("System.Double"), [], []), 
    function TimeSpan_get_TotalSeconds () {
      return (this._ticks.ToNumber() / 10000000);
    }
  );

  $.Method({Static:false, Public:true }, "GetHashCode", 
    $sig.make(0x279, $asm01.TypeRef("System.Int32"), [], []), 
    function TimeSpan_GetHashCode () {
      return JSIL.ObjectHashCode(this._ticks);
    }
  );

  $.Method({Static:false, Public:true }, "Negate", 
    $sig.make(0x27B, $.Type, [], []), 
    function TimeSpan_Negate () {
      if (!$T00().op_Inequality(this._ticks, $thisType.MinValue._ticks)) {
        throw new ($T03())($T04().GetText("This TimeSpan value is MinValue and cannot be negated.", JSIL.Array.New($T05(), 0)));
      }
      return new $thisType($T00().op_UnaryNegation(this._ticks));
    }
  );

  $.Method({Static:true , Public:true }, "op_Addition", 
    $sig.make(0x290, $.Type, [$.Type, $.Type], []), 
    function TimeSpan_op_Addition (t1, t2) {
      return t1.Add(t2);
    }
  );

  $.Method({Static:true , Public:true }, "op_Equality", 
    $sig.make(0x293, $asm01.TypeRef("System.Boolean"), [$.Type, $.Type], []), 
    function TimeSpan_op_Equality (t1, t2) {
      return $T00().op_Equality(t1._ticks, t2._ticks);
    }
  );

  $.Method({Static:true , Public:true }, "op_GreaterThan", 
    $sig.make(0x295, $asm01.TypeRef("System.Boolean"), [$.Type, $.Type], []), 
    function TimeSpan_op_GreaterThan (t1, t2) {
      return $T00().op_GreaterThan(t1._ticks, t2._ticks);
    }
  );

  $.Method({Static:true , Public:true }, "op_GreaterThanOrEqual", 
    $sig.make(0x298, $asm01.TypeRef("System.Boolean"), [$.Type, $.Type], []), 
    function TimeSpan_op_GreaterThanOrEqual (t1, t2) {
      return $T00().op_GreaterThanOrEqual(t1._ticks, t2._ticks);
    }
  );

  $.Method({Static:true , Public:true }, "op_Inequality", 
    $sig.make(0x299, $asm01.TypeRef("System.Boolean"), [$.Type, $.Type], []), 
    function TimeSpan_op_Inequality (t1, t2) {
      return $T00().op_Inequality(t1._ticks, t2._ticks);
    }
  );

  $.Method({Static:true , Public:true }, "op_LessThan", 
    $sig.make(0x29D, $asm01.TypeRef("System.Boolean"), [$.Type, $.Type], []), 
    function TimeSpan_op_LessThan (t1, t2) {
      return $T00().op_LessThan(t1._ticks, t2._ticks);
    }
  );

  $.Method({Static:true , Public:true }, "op_LessThanOrEqual", 
    $sig.make(0x29F, $asm01.TypeRef("System.Boolean"), [$.Type, $.Type], []), 
    function TimeSpan_op_LessThanOrEqual (t1, t2) {
      return $T00().op_LessThanOrEqual(t1._ticks, t2._ticks);
    }
  );

  $.Method({Static:true , Public:true }, "op_Subtraction", 
    $sig.make(0x2A0, $.Type, [$.Type, $.Type], []), 
    function TimeSpan_op_Subtraction (t1, t2) {
      return t1.Subtract(t2);
    }
  );

  $.Method({Static:true , Public:true }, "op_UnaryNegation", 
    $sig.make(0x2A3, $.Type, [$.Type], []), 
    function TimeSpan_op_UnaryNegation (t) {
      return t.Negate();
    }
  );

  $.Method({Static:true , Public:true }, "op_UnaryPlus", 
    $sig.make(0x2B1, $.Type, [$.Type], []), 
    function TimeSpan_op_UnaryPlus (t) {
      return t;
    }
  );

  $.Method({Static:true , Public:true }, "Parse", 
    $sig.make(0x27C, $.Type, [$asm01.TypeRef("System.String")], []), 
    function TimeSpan_Parse (s) {
      var result = new JSIL.Variable(new $thisType());
      if (s === null) {
        throw new ($T0D())("s");
      }
      var p = new ($T0E())(s);
      p.Execute(false, /* ref */ result);
      return result.value;
    }
  );

  $.Method({Static:false, Public:true }, "Subtract", 
    $sig.make(0x281, $.Type, [$.Type], []), 
    function TimeSpan_Subtract (ts) {
      try {
        var result = new $thisType($T00().op_Subtraction(this._ticks, ts.get_Ticks()));
      } catch ($exception) {
        if ($T03().$Is($exception)) {
          throw new ($T03())($T04().GetText("Resulting timespan is too big.", JSIL.Array.New($T05(), 0)));
        } else {
          throw $exception;
        }
      }
      return result;
    }
  );

  $.Method({Static:false, Public:true }, "toString", 
    $sig.make(0x283, $asm01.TypeRef("System.String"), [], []), 
    function TimeSpan_toString () {
      var sb = $sig.get(0xB02, null, [$asm01.System.Int32], []).Construct($T0F(), 14);
      if (!$T00().op_GreaterThanOrEqual(this._ticks, $T00().Create(0, 0, 0))) {
        $sig.get(0xB55, $asm01.System.Text.StringBuilder, [$asm01.System.Char], []).CallVirtual("Append", null, sb, "-");
      }
      if (this.get_Days() !== 0) {
        $sig.get(0xB31, $asm01.System.Text.StringBuilder, [$asm01.System.Int32], []).CallVirtual("Append", null, sb, $sig.get(0x7E2, $asm01.System.Int32, [$asm01.System.Int32], []).CallStatic($T09(), "Abs", null, this.get_Days()));
        $sig.get(0xB55, $asm01.System.Text.StringBuilder, [$asm01.System.Char], []).CallVirtual("Append", null, sb, ".");
      }
      $sig.get(0xB22, $asm01.System.Text.StringBuilder, [$asm01.System.String], []).CallVirtual("Append", null, sb, $sig.get(0x274, $asm01.System.String, [$asm01.System.String], []).CallVirtual("ToString", null, $sig.get(0x7E2, $asm01.System.Int32, [$asm01.System.Int32], []).CallStatic($T09(), "Abs", null, this.get_Hours()), "D2"));
      $sig.get(0xB55, $asm01.System.Text.StringBuilder, [$asm01.System.Char], []).CallVirtual("Append", null, sb, ":");
      $sig.get(0xB22, $asm01.System.Text.StringBuilder, [$asm01.System.String], []).CallVirtual("Append", null, sb, $sig.get(0x274, $asm01.System.String, [$asm01.System.String], []).CallVirtual("ToString", null, $sig.get(0x7E2, $asm01.System.Int32, [$asm01.System.Int32], []).CallStatic($T09(), "Abs", null, this.get_Minutes()), "D2"));
      $sig.get(0xB55, $asm01.System.Text.StringBuilder, [$asm01.System.Char], []).CallVirtual("Append", null, sb, ":");
      $sig.get(0xB22, $asm01.System.Text.StringBuilder, [$asm01.System.String], []).CallVirtual("Append", null, sb, $sig.get(0x274, $asm01.System.String, [$asm01.System.String], []).CallVirtual("ToString", null, $sig.get(0x7E2, $asm01.System.Int32, [$asm01.System.Int32], []).CallStatic($T09(), "Abs", null, this.get_Seconds()), "D2"));
      var fractional = ($sig.get(0x7E7, $asm01.System.Int64, [$asm01.System.Int64], []).CallStatic($T09(), "Abs", null, $T00().op_Modulus(this._ticks, $T00().Create(10000000, 0, 0)))).ToNumber();
      if (fractional !== 0) {
        $sig.get(0xB55, $asm01.System.Text.StringBuilder, [$asm01.System.Char], []).CallVirtual("Append", null, sb, ".");
        $sig.get(0xB22, $asm01.System.Text.StringBuilder, [$asm01.System.String], []).CallVirtual("Append", null, sb, $sig.get(0x274, $asm01.System.String, [$asm01.System.String], []).CallVirtual("ToString", null, fractional, "D7"));
      }
      return sb.toString();
    }
  );

  $.Method({Static:false, Public:true }, "ToString", 
    $sig.make(0x286, $asm01.TypeRef("System.String"), [$asm01.TypeRef("System.String")], []), 
    function TimeSpan_ToString (format) {
      return this.ToString(format, null);
    }
  );

  $.Method({Static:false, Public:true }, "ToString", 
    $sig.make(0x288, $asm01.TypeRef("System.String"), [$asm01.TypeRef("System.String"), $asm01.TypeRef("System.IFormatProvider")], []), 
    function TimeSpan_ToString (format, formatProvider) {
      if (!(!((format === null) || 
            (format.length === 0) || 
            (format == "c") || 
            (format == "t")) && !(format == "T"))) {
        var result = this.toString();
      } else if (!(!(format != "g") || !(format != "G"))) {
        result = this.ToStringCustom(format);
      } else {
        var decimal_separator = ".";
        var days = $sig.get(0x7E2, $asm01.System.Int32, [$asm01.System.Int32], []).CallStatic($T09(), "Abs", null, this.get_Days());
        var hours = $sig.get(0x7E2, $asm01.System.Int32, [$asm01.System.Int32], []).CallStatic($T09(), "Abs", null, this.get_Hours());
        var minutes = $sig.get(0x7E2, $asm01.System.Int32, [$asm01.System.Int32], []).CallStatic($T09(), "Abs", null, this.get_Minutes());
        var seconds = $sig.get(0x7E2, $asm01.System.Int32, [$asm01.System.Int32], []).CallStatic($T09(), "Abs", null, this.get_Seconds());
        var milliseconds = $sig.get(0x7E2, $asm01.System.Int32, [$asm01.System.Int32], []).CallStatic($T09(), "Abs", null, this.get_Milliseconds());
        var fractional = ($sig.get(0x7E7, $asm01.System.Int64, [$asm01.System.Int64], []).CallStatic($T09(), "Abs", null, $T00().op_Modulus(this._ticks, $T00().Create(10000000, 0, 0)))).ToNumber();
        var sb = $sig.get(0xB02, null, [$asm01.System.Int32], []).Construct($T0F(), (format == "g" ? 16 : 32));
        if (!$T00().op_GreaterThanOrEqual(this._ticks, $T00().Create(0, 0, 0))) {
          $sig.get(0xB55, $asm01.System.Text.StringBuilder, [$asm01.System.Char], []).CallVirtual("Append", null, sb, "-");
        }
        if (format !== null) {
          if (!(format == "g")) {
            if (format == "G") {
              $sig.get(0xB22, $asm01.System.Text.StringBuilder, [$asm01.System.String], []).CallVirtual("Append", null, sb, $sig.get(0x274, $asm01.System.String, [$asm01.System.String], []).CallVirtual("ToString", null, days, "D1"));
              $sig.get(0xB55, $asm01.System.Text.StringBuilder, [$asm01.System.Char], []).CallVirtual("Append", null, sb, ":");
              $sig.get(0xB22, $asm01.System.Text.StringBuilder, [$asm01.System.String], []).CallVirtual("Append", null, sb, $sig.get(0x274, $asm01.System.String, [$asm01.System.String], []).CallVirtual("ToString", null, hours, "D2"));
              $sig.get(0xB55, $asm01.System.Text.StringBuilder, [$asm01.System.Char], []).CallVirtual("Append", null, sb, ":");
              $sig.get(0xB22, $asm01.System.Text.StringBuilder, [$asm01.System.String], []).CallVirtual("Append", null, sb, $sig.get(0x274, $asm01.System.String, [$asm01.System.String], []).CallVirtual("ToString", null, minutes, "D2"));
              $sig.get(0xB55, $asm01.System.Text.StringBuilder, [$asm01.System.Char], []).CallVirtual("Append", null, sb, ":");
              $sig.get(0xB22, $asm01.System.Text.StringBuilder, [$asm01.System.String], []).CallVirtual("Append", null, sb, $sig.get(0x274, $asm01.System.String, [$asm01.System.String], []).CallVirtual("ToString", null, seconds, "D2"));
              $sig.get(0xB22, $asm01.System.Text.StringBuilder, [$asm01.System.String], []).CallVirtual("Append", null, sb, decimal_separator);
              $sig.get(0xB22, $asm01.System.Text.StringBuilder, [$asm01.System.String], []).CallVirtual("Append", null, sb, $sig.get(0x274, $asm01.System.String, [$asm01.System.String], []).CallVirtual("ToString", null, fractional, "D7"));
            }
          } else {
            if (days !== 0) {
              $sig.get(0xB22, $asm01.System.Text.StringBuilder, [$asm01.System.String], []).CallVirtual("Append", null, sb, days.toString());
              $sig.get(0xB55, $asm01.System.Text.StringBuilder, [$asm01.System.Char], []).CallVirtual("Append", null, sb, ":");
            }
            $sig.get(0xB22, $asm01.System.Text.StringBuilder, [$asm01.System.String], []).CallVirtual("Append", null, sb, hours.toString());
            $sig.get(0xB55, $asm01.System.Text.StringBuilder, [$asm01.System.Char], []).CallVirtual("Append", null, sb, ":");
            $sig.get(0xB22, $asm01.System.Text.StringBuilder, [$asm01.System.String], []).CallVirtual("Append", null, sb, $sig.get(0x274, $asm01.System.String, [$asm01.System.String], []).CallVirtual("ToString", null, minutes, "D2"));
            $sig.get(0xB55, $asm01.System.Text.StringBuilder, [$asm01.System.Char], []).CallVirtual("Append", null, sb, ":");
            $sig.get(0xB22, $asm01.System.Text.StringBuilder, [$asm01.System.String], []).CallVirtual("Append", null, sb, $sig.get(0x274, $asm01.System.String, [$asm01.System.String], []).CallVirtual("ToString", null, seconds, "D2"));
            if (milliseconds !== 0) {
              $sig.get(0xB22, $asm01.System.Text.StringBuilder, [$asm01.System.String], []).CallVirtual("Append", null, sb, decimal_separator);
              $sig.get(0xB22, $asm01.System.Text.StringBuilder, [$asm01.System.String], []).CallVirtual("Append", null, sb, $sig.get(0x274, $asm01.System.String, [$asm01.System.String], []).CallVirtual("ToString", null, milliseconds, "D3"));
            }
          }
        }
        result = sb.toString();
      }
      return result;
    }
  );

  $.Method({Static:false, Public:false}, "ToStringCustom", 
    $sig.make(0x28A, $asm01.TypeRef("System.String"), [$asm01.TypeRef("System.String")], []), 
    function TimeSpan_ToStringCustom (format) {
      if (format.length < 2) {
        throw new ($T11())("The format is not recognized.");
      }
      var parser = new ($T12())(format);
      var sb = $sig.get(0xB02, null, [$asm01.System.Int32], []).Construct($T0F(), ((format.length + 1) | 0));

      while (!parser.get_AtEnd()) {
        var element = parser.GetNextElement().MemberwiseClone();
        switch (element.Type.valueOf()) {
          case 0: 
            $sig.get(0xB22, $asm01.System.Text.StringBuilder, [$asm01.System.String], []).CallVirtual("Append", null, sb, $sig.get(0x274, $asm01.System.String, [$asm01.System.String], []).CallVirtual("ToString", null, $sig.get(0x7E2, $asm01.System.Int32, [$asm01.System.Int32], []).CallStatic($T09(), "Abs", null, this.get_Days()), JSIL.ConcatString("D", element.IntValue)));
            break;

          case 1: 
            $sig.get(0xB22, $asm01.System.Text.StringBuilder, [$asm01.System.String], []).CallVirtual("Append", null, sb, $sig.get(0x274, $asm01.System.String, [$asm01.System.String], []).CallVirtual("ToString", null, $sig.get(0x7E2, $asm01.System.Int32, [$asm01.System.Int32], []).CallStatic($T09(), "Abs", null, this.get_Hours()), JSIL.ConcatString("D", element.IntValue)));
            break;

          case 2: 
            $sig.get(0xB22, $asm01.System.Text.StringBuilder, [$asm01.System.String], []).CallVirtual("Append", null, sb, $sig.get(0x274, $asm01.System.String, [$asm01.System.String], []).CallVirtual("ToString", null, $sig.get(0x7E2, $asm01.System.Int32, [$asm01.System.Int32], []).CallStatic($T09(), "Abs", null, this.get_Minutes()), JSIL.ConcatString("D", element.IntValue)));
            break;

          case 3: 
            $sig.get(0xB22, $asm01.System.Text.StringBuilder, [$asm01.System.String], []).CallVirtual("Append", null, sb, $sig.get(0x274, $asm01.System.String, [$asm01.System.String], []).CallVirtual("ToString", null, $sig.get(0x7E2, $asm01.System.Int32, [$asm01.System.Int32], []).CallStatic($T09(), "Abs", null, this.get_Seconds()), JSIL.ConcatString("D", element.IntValue)));
            break;

          case 4: 
            $sig.get(0xB22, $asm01.System.Text.StringBuilder, [$asm01.System.String], []).CallVirtual("Append", null, sb, $sig.get(0x274, $asm01.System.String, [$asm01.System.String], []).CallVirtual("ToString", null, $sig.get(0x7E2, $asm01.System.Int32, [$asm01.System.Int32], []).CallStatic($T09(), "Abs", null, this.get_Milliseconds()), JSIL.ConcatString("D", element.IntValue)));
            break;

          case 5: 
            var value = $sig.get(0x7E2, $asm01.System.Int32, [$asm01.System.Int32], []).CallStatic($T09(), "Abs", null, this.get_Milliseconds());
            if (value > 0) {
              var threshold = (($T09().Pow(10, element.IntValue)) | 0);

              while (value >= threshold) {
                value = ((value / 10) | 0);
              }
              $sig.get(0xB22, $asm01.System.Text.StringBuilder, [$asm01.System.String], []).CallVirtual("Append", null, sb, value.toString());
            }
            break;

          case 6: 
            $sig.get(0xB22, $asm01.System.Text.StringBuilder, [$asm01.System.String], []).CallVirtual("Append", null, sb, element.StringValue);
            break;

          case 7: 
            $sig.get(0xB55, $asm01.System.Text.StringBuilder, [$asm01.System.Char], []).CallVirtual("Append", null, sb, element.CharValue);
            break;

          default: 
            throw new ($T11())("The format is not recognized.");

        }
      }
      return sb.toString();
    }
  );

  $.Method({Static:true , Public:true }, "TryParse", 
    $sig.make(0x27F, $asm01.TypeRef("System.Boolean"), [$asm01.TypeRef("System.String"), $jsilcore.TypeRef("JSIL.Reference", [$.Type])], []), 
    function TimeSpan_TryParse (s, /* ref */ result) {
      if (s === null) {
        result.value = $thisType.Zero.MemberwiseClone();
        var result2 = false;
      } else {
        var p = new ($T0E())(s);
        result2 = p.Execute(true, /* ref */ result);
      }
      return result2;
    }
  );

  $.Constant({Static:true , Public:true }, "TicksPerDay", 864000000000); 
  $.Constant({Static:true , Public:true }, "TicksPerHour", 36000000000); 
  $.Constant({Static:true , Public:true }, "TicksPerMillisecond", 10000); 
  $.Constant({Static:true , Public:true }, "TicksPerMinute", 600000000); 
  $.Constant({Static:true , Public:true }, "TicksPerSecond", 10000000); 
  $.Field({Static:true , Public:true , ReadOnly:true }, "MaxValue", $.Type); 
  $.Field({Static:true , Public:true , ReadOnly:true }, "MinValue", $.Type); 
  $.Field({Static:true , Public:true , ReadOnly:true }, "Zero", $.Type); 
  $.Field({Static:false, Public:false}, "_ticks", $asm01.TypeRef("System.Int64")); 
  $.Method({Static:true , Public:false}, ".cctor", 
    $sig.make(0x2B3, null, [], []), 
    function TimeSpan__cctor () {
      $thisType.MaxValue = new $thisType();
      $thisType.MinValue = new $thisType();
      $thisType.Zero = new $thisType();
      $thisType.MaxValue = new $thisType($T00().Create(16777215, 16777215, 32767));
      $thisType.MinValue = new $thisType($T00().Create(0, 0, 32768));
      $thisType.Zero = new $thisType($T00().Create(0, 0, 0));
    }
  );

  $.Property({Static:false, Public:true }, "Days", $asm01.TypeRef("System.Int32"));

  $.Property({Static:false, Public:true }, "Hours", $asm01.TypeRef("System.Int32"));

  $.Property({Static:false, Public:true }, "Milliseconds", $asm01.TypeRef("System.Int32"));

  $.Property({Static:false, Public:true }, "Minutes", $asm01.TypeRef("System.Int32"));

  $.Property({Static:false, Public:true }, "Seconds", $asm01.TypeRef("System.Int32"));

  $.Property({Static:false, Public:true }, "Ticks", $asm01.TypeRef("System.Int64"));

  $.Property({Static:false, Public:true }, "TotalDays", $asm01.TypeRef("System.Double"));

  $.Property({Static:false, Public:true }, "TotalHours", $asm01.TypeRef("System.Double"));

  $.Property({Static:false, Public:true }, "TotalMilliseconds", $asm01.TypeRef("System.Double"));

  $.Property({Static:false, Public:true }, "TotalMinutes", $asm01.TypeRef("System.Double"));

  $.Property({Static:false, Public:true }, "TotalSeconds", $asm01.TypeRef("System.Double"));

  $.ImplementInterfaces(
      $asm01.TypeRef("System.IComparable"), $asm01.TypeRef("System.IComparable`1", [$.Type]), 
      $asm01.TypeRef("System.IEquatable`1", [$.Type]), $asm01.TypeRef("System.IFormattable")
  )
})
  .Attribute($asm01.TypeRef("System.Runtime.InteropServices.ComVisibleAttribute"), function () { return [true]; });

JSIL.MakeEnum(
  "System.TimeSpan/ParseError", false, {
    None: 0, 
    Format: 1, 
    Overflow: 2
  }, false
);

JSIL.MakeClass($asm01.TypeRef("System.Object"), "System.TimeSpan/Parser", false, [], function ($) {
  var $thisType = $.publicInterface;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm01.System.String)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm01.System.Int32)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm01.System.Boolean)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm01.System.TimeSpan_ParseError)) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize($asm01.System.OverflowException)) ();
  };
  var $T05 = function () {
    return ($T05 = JSIL.Memoize($asm01.System.Locale)) ();
  };
  var $T06 = function () {
    return ($T06 = JSIL.Memoize($asm01.System.Object)) ();
  };
  var $T07 = function () {
    return ($T07 = JSIL.Memoize($asm01.System.FormatException)) ();
  };
  var $T08 = function () {
    return ($T08 = JSIL.Memoize($asm01.System.TimeSpan)) ();
  };
  var $T09 = function () {
    return ($T09 = JSIL.Memoize($asm01.System.Int64)) ();
  };
  var $T0A = function () {
    return ($T0A = JSIL.Memoize($asm01.System.Exception)) ();
  };
  var $T0B = function () {
    return ($T0B = JSIL.Memoize($asm01.System.Void)) ();
  };
  var $T0C = function () {
    return ($T0C = JSIL.Memoize($asm01.System.UInt64)) ();
  };

  $.Method({Static:false, Public:true }, ".ctor", 
    $sig.make(0xF28, null, [$asm01.TypeRef("System.String")], []), 
    function Parser__ctor (src) {
      this._cur = 0;
      this._src = src;
      this._length = this._src.length;
    }
  );

  $.Method({Static:false, Public:false}, "CheckParseSuccess", 
    $sig.make(0xF76, $asm01.TypeRef("System.Boolean"), [
        $asm01.TypeRef("System.Int32"), $asm01.TypeRef("System.Int32"), 
        $asm01.TypeRef("System.Int32"), $asm01.TypeRef("System.Boolean")
      ], []), 
    function Parser_CheckParseSuccess (hours, minutes, seconds, tryParse) {
      if (!(!((this.parse_error === $T03().Overflow) || 
            (hours > 23) || 
            (minutes > 59)) && (seconds <= 59))) {
        if (!tryParse) {
          throw new ($T04())($T05().GetText("Invalid time data.", JSIL.Array.New($T06(), 0)));
        }
        var result = false;
      } else if (this.parse_error === $T03().Format) {
        if (!tryParse) {
          throw new ($T07())($T05().GetText("Invalid format for TimeSpan.Parse.", JSIL.Array.New($T06(), 0)));
        }
        result = false;
      } else {
        result = true;
      }
      return result;
    }
  );

  $.Method({Static:false, Public:true }, "Execute", 
    $sig.make(0xF78, $asm01.TypeRef("System.Boolean"), [$asm01.TypeRef("System.Boolean"), $jsilcore.TypeRef("JSIL.Reference", [$asm01.TypeRef("System.TimeSpan")])], []), 
    function Parser_Execute (tryParse, /* ref */ result) {
      var t = new JSIL.Variable(0);
      var hours = 0;
      result.value = $T08().Zero.MemberwiseClone();
      this.ParseWhiteSpace();
      var sign = this.ParseSign();
      var days = this.ParseInt(false);
      if (this.ParseOptDot()) {
        hours = this.ParseInt(true);
      } else if (!this.get_AtEnd()) {
        hours = days;
        days = 0;
      }
      this.ParseColon(false);
      var p = this._cur;
      var minutes = this.ParseInt(true);
      var seconds = 0;
      if (p < this._cur) {
        this.ParseColon(true);
        seconds = this.ParseInt(true);
      }
      if (this.ParseOptDot()) {
        var ticks = this.ParseTicks();
      } else {
        ticks = $T09().Create(0, 0, 0);
      }
      this.ParseWhiteSpace();
      if (!this.get_AtEnd()) {
        this.SetParseError($T03().Format);
      }
      if (!this.CheckParseSuccess(hours, minutes, seconds, tryParse)) {
        var result2 = false;
      } else if (!$T08().CalculateTicks(
          days, 
          hours, 
          minutes, 
          seconds, 
          0, 
          false, 
          /* ref */ t
        )) {
        result2 = false;
      } else {
        try {
          t.value = (sign ? $T09().op_Subtraction($T09().op_Subtraction($T09().Create(0, 0, 0), t.value), ticks) : $T09().op_Addition(t.value, ticks));
        } catch ($exception) {
          if ($T04().$Is($exception)) {
            if (tryParse) {
              result2 = false;
              return result2;
            }
            throw $exception;
          } else {
            throw $exception;
          }
        }
        result.value = new ($T08())(t.value);
        result2 = true;
      }
      return result2;
    }
  );

  $.Method({Static:false, Public:true }, "get_AtEnd", 
    $sig.make(0xF23, $asm01.TypeRef("System.Boolean"), [], []), 
    function Parser_get_AtEnd () {
      return (this._cur >= this._length);
    }
  );

  $.Method({Static:false, Public:false}, "ParseColon", 
    $sig.make(0xF6D, null, [$asm01.TypeRef("System.Boolean")], []), 
    function Parser_ParseColon (optional) {
      if (!this.get_AtEnd()) {
        if (this._src[this._cur].charCodeAt(0) === ":".charCodeAt(0)) {
          ++this._cur;
        } else if (!optional) {
          this.SetParseError($T03().Format);
        }
      }
    }
  );

  $.Method({Static:false, Public:false}, "ParseInt", 
    $sig.make(0xF67, $asm01.TypeRef("System.Int32"), [$asm01.TypeRef("System.Boolean")], []), 
    function Parser_ParseInt (optional) {
      if (!(!optional || !this.get_AtEnd())) {
        var result = 0;
      } else {
        var res = $T09().Create(0, 0, 0);
        var count = 0;

      $loop0: 
        while (!this.get_AtEnd() && (("0123456789".indexOf(this._src[this._cur]) !== -1))) {
          res = $T09().op_Subtraction(
            $T09().op_Addition(
              $T09().op_Multiplication(res, $T09().Create(10, 0, 0)), 
              ($T0C().FromNumber(this._src[this._cur].charCodeAt(0))).ToInt64()
            ), 
            $T09().Create(48, 0, 0)
          );
          if (!$T09().op_LessThanOrEqual(res, $T09().Create(16777215, 127, 0))) {
            this.SetParseError($T03().Overflow);
            break $loop0;
          }
          ++this._cur;
          ++count;
        }
        if (!(optional || (count !== 0))) {
          this.SetParseError($T03().Format);
        }
        result = res.ToNumber();
      }
      return result;
    }
  );

  $.Method({Static:false, Public:false}, "ParseIntExact", 
    $sig.make(0xF32, $asm01.TypeRef("System.Int32"), [$asm01.TypeRef("System.Int32"), $asm01.TypeRef("System.Int32")], []), 
    function Parser_ParseIntExact (digit_count, max_digit_count) {
      var res = $T09().Create(0, 0, 0);
      var count = 0;

    $loop0: 
      while (!this.get_AtEnd() && (("0123456789".indexOf(this._src[this._cur]) !== -1))) {
        res = $T09().op_Subtraction(
          $T09().op_Addition(
            $T09().op_Multiplication(res, $T09().Create(10, 0, 0)), 
            ($T0C().FromNumber(this._src[this._cur].charCodeAt(0))).ToInt64()
          ), 
          $T09().Create(48, 0, 0)
        );
        if (!$T09().op_LessThanOrEqual(res, $T09().Create(16777215, 127, 0))) {
          this.SetParseError($T03().Format);
          break $loop0;
        }
        ++this._cur;
        ++count;
      }
      if (!(!((count === 0) || 
            ((digit_count > 1) && 
              (digit_count !== count))) && (count <= max_digit_count))) {
        this.SetParseError($T03().Format);
      }
      return res.ToNumber();
    }
  );

  $.Method({Static:false, Public:false}, "ParseOptDot", 
    $sig.make(0xF6A, $asm01.TypeRef("System.Boolean"), [], []), 
    function Parser_ParseOptDot () {
      if (this.get_AtEnd()) {
        var result = false;
      } else if (this._src[this._cur].charCodeAt(0) === ".".charCodeAt(0)) {
        ++this._cur;
        result = true;
      } else {
        result = false;
      }
      return result;
    }
  );

  $.Method({Static:false, Public:false}, "ParseSign", 
    $sig.make(0xF30, $asm01.TypeRef("System.Boolean"), [], []), 
    function Parser_ParseSign () {
      var res = false;
      if (!(this.get_AtEnd() || (this._src[this._cur].charCodeAt(0) !== "-".charCodeAt(0)))) {
        res = true;
        ++this._cur;
      }
      return res;
    }
  );

  $.Method({Static:false, Public:false}, "ParseTicks", 
    $sig.make(0xF6F, $asm01.TypeRef("System.Int64"), [], []), 
    function Parser_ParseTicks () {
      var mag = $T09().Create(1000000, 0, 0);
      var res = $T09().Create(0, 0, 0);
      var digitseen = false;

      while (!($T09().op_LessThanOrEqual(mag, $T09().Create(0, 0, 0)) || 
          this.get_AtEnd().valueOf()) && (("0123456789".indexOf(this._src[this._cur]) !== -1))) {
        res = $T09().op_Addition(res, $T09().op_Multiplication($T09().FromNumber((String.fromCharCode((this._src[this._cur].charCodeAt(0) - "0".charCodeAt(0)))).charCodeAt(0)), mag));
        ++this._cur;
        mag = $T09().op_Division(mag, $T09().Create(10, 0, 0));
        digitseen = true;
      }
      if (!digitseen) {
        this.SetParseError($T03().Format);
      }
      return res;
    }
  );

  $.Method({Static:false, Public:false}, "ParseTicksExact", 
    $sig.make(0xF70, $asm01.TypeRef("System.Int64"), [$asm01.TypeRef("System.Int32"), $asm01.TypeRef("System.Int32")], []), 
    function Parser_ParseTicksExact (digits_count, max_digits_count) {
      var mag = $T09().Create(1000000, 0, 0);
      var res = $T09().Create(0, 0, 0);
      var count = 0;

      while (!($T09().op_LessThanOrEqual(mag, $T09().Create(0, 0, 0)) || 
          this.get_AtEnd().valueOf()) && (("0123456789".indexOf(this._src[this._cur]) !== -1))) {
        res = $T09().op_Addition(res, $T09().op_Multiplication($T09().FromNumber((String.fromCharCode((this._src[this._cur].charCodeAt(0) - "0".charCodeAt(0)))).charCodeAt(0)), mag));
        ++this._cur;
        ++count;
        mag = $T09().op_Division(mag, $T09().Create(10, 0, 0));
      }
      if (!(!((digits_count > 0) && 
            (count !== digits_count)) && (count <= max_digits_count))) {
        this.SetParseError($T03().Format);
      }
      return res;
    }
  );

  $.Method({Static:false, Public:false}, "ParseWhiteSpace", 
    $sig.make(0xF2C, null, [], []), 
    function Parser_ParseWhiteSpace () {

      while (!this.get_AtEnd() && ((" \n\r\t".indexOf(this._src[this._cur]) !== -1))) {
        ++this._cur;
      }
    }
  );

  $.Method({Static:false, Public:false}, "SetParseError", 
    $sig.make(0xF73, null, [$asm01.TypeRef("System.TimeSpan/ParseError")], []), 
    function Parser_SetParseError (error) {
      if (this.parse_error === $T03().None) {
        this.parse_error = error;
      }
    }
  );

  $.Field({Static:false, Public:false}, "_src", $asm01.TypeRef("System.String")); 
  $.Field({Static:false, Public:false}, "_cur", $asm01.TypeRef("System.Int32")); 
  $.Field({Static:false, Public:false}, "_length", $asm01.TypeRef("System.Int32")); 
  $.Field({Static:false, Public:false}, "parse_error", $asm01.TypeRef("System.TimeSpan/ParseError")); 
  $.Property({Static:false, Public:true }, "AtEnd", $asm01.TypeRef("System.Boolean"));

});

JSIL.MakeEnum(
  "System.TimeSpan/FormatElementType", false, {
    Days: 0, 
    Hours: 1, 
    Minutes: 2, 
    Seconds: 3, 
    Ticks: 4, 
    TicksUppercase: 5, 
    Literal: 6, 
    EscapedChar: 7, 
    Error: 8, 
    End: 9
  }, false
);

JSIL.MakeStruct($asm01.TypeRef("System.ValueType"), "System.TimeSpan/FormatElement", false, [], function ($) {
  var $thisType = $.publicInterface;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm01.System.TimeSpan_FormatElementType)) ();
  };

  $.Method({Static:false, Public:true }, ".ctor", 
    $sig.make(0x1011, null, [$asm01.TypeRef("System.TimeSpan/FormatElementType")], []), 
    function FormatElement__ctor (type) {
      this.Type = type;
      this.CharValue = "\0";
      this.IntValue = 0;
      this.StringValue = null;
    }
  );

  $.Field({Static:false, Public:true }, "Type", $asm01.TypeRef("System.TimeSpan/FormatElementType")); 
  $.Field({Static:false, Public:true }, "CharValue", $asm01.TypeRef("System.Char")); 
  $.Field({Static:false, Public:true }, "StringValue", $asm01.TypeRef("System.String")); 
  $.Field({Static:false, Public:true }, "IntValue", $asm01.TypeRef("System.Int32")); 
});

JSIL.MakeClass($asm01.TypeRef("System.Object"), "System.TimeSpan/FormatParser", false, [], function ($) {
  var $thisType = $.publicInterface;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm01.System.String)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm01.System.TimeSpan_FormatElement)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm01.System.TimeSpan_FormatElementType)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm01.System.Char)) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize($asm01.System.Int32)) ();
  };

  $.Method({Static:false, Public:true }, ".ctor", 
    $sig.make(0x1025, null, [$asm01.TypeRef("System.String")], []), 
    function FormatParser__ctor (format) {
      this.format = format;
    }
  );

  $.Method({Static:false, Public:true }, "get_AtEnd", 
    $sig.make(0x1024, $asm01.TypeRef("System.Boolean"), [], []), 
    function FormatParser_get_AtEnd () {
      return (this.cur >= this.format.length);
    }
  );

  $.Method({Static:false, Public:true }, "GetNextElement", 
    $sig.make(0x1026, $asm01.TypeRef("System.TimeSpan/FormatElement"), [], []), 
    function FormatParser_GetNextElement () {
      var element = new ($T01())();
      if (this.get_AtEnd()) {
        var result = new ($T01())($T02().End);
      } else {

        var $label0 = 0;
      $labelgroup0: 
        while (true) {
          switch ($label0) {
            case 0: /* $entry0 */ 
              var c = (this.format[this.cur]);
              if (c.charCodeAt(0) <= "\\".charCodeAt(0)) {
                switch (c) {
                  case "%": 
                    ++this.cur;
                    if (this.get_AtEnd()) {
                      result = new ($T01())($T02().Error);
                      return result;
                    }
                    if (this.format[this.cur].charCodeAt(0) === "d".charCodeAt(0)) {
                      $label0 = 1 /* goto IL_A0 */ ;
                      continue $labelgroup0;
                    }
                    if (this.format[this.cur].charCodeAt(0) === "h".charCodeAt(0)) {
                      $label0 = 2 /* goto IL_D8 */ ;
                      continue $labelgroup0;
                    }
                    if (this.format[this.cur].charCodeAt(0) === "m".charCodeAt(0)) {
                      $label0 = 3 /* goto IL_110 */ ;
                      continue $labelgroup0;
                    }
                    if (this.format[this.cur].charCodeAt(0) === "s".charCodeAt(0)) {
                      $label0 = 4 /* goto IL_148 */ ;
                      continue $labelgroup0;
                    }
                    if (this.format[this.cur].charCodeAt(0) === "f".charCodeAt(0)) {
                      $label0 = 5 /* goto IL_180 */ ;
                      continue $labelgroup0;
                    }
                    if (this.format[this.cur].charCodeAt(0) !== "F".charCodeAt(0)) {
                      result = new ($T01())($T02().Error);
                      return result;
                    }
                    break;

                  case "&": 
                    $label0 = 6 /* goto IL_356 */ ;
                    continue $labelgroup0;

                  case "'": 
                    var literal = this.ParseLiteral();
                    if (literal === null) {
                      result = new ($T01())($T02().Error);
                      return result;
                    }
                    element.Type = $T02().Literal;
                    element.StringValue = literal;
                    $label0 = 7 /* goto IL_360 */ ;
                    continue $labelgroup0;

                  default: 
                    if (c.charCodeAt(0) !== "F".charCodeAt(0)) {
                      if (c.charCodeAt(0) !== "\\".charCodeAt(0)) {
                        $label0 = 6 /* goto IL_356 */ ;
                        continue $labelgroup0;
                      }
                      var escaped_char = this.ParseEscapedChar();
                      if (escaped_char.charCodeAt(0) === "\0".charCodeAt(0)) {
                        result = new ($T01())($T02().Error);
                        return result;
                      }
                      element.Type = $T02().EscapedChar;
                      element.CharValue = escaped_char;
                      $label0 = 7 /* goto IL_360 */ ;
                      continue $labelgroup0;
                    }
                    break;

                }
                var count = this.ParseChar("F");
                if (count > 7) {
                  result = new ($T01())($T02().Error);
                  return result;
                }
                element.Type = $T02().TicksUppercase;
                element.IntValue = count;
                $label0 = 7 /* goto IL_360 */ ;
                continue $labelgroup0;
              } else {
                switch (c) {
                  case "d": 
                    break;

                  case "e": 
                  case "g": 
                    $label0 = 6 /* goto IL_356 */ ;
                    continue $labelgroup0;

                  case "f": 
                    $label0 = 5 /* goto IL_180 */ ;
                    continue $labelgroup0;

                  case "h": 
                    $label0 = 2 /* goto IL_D8 */ ;
                    continue $labelgroup0;

                  default: 
                    if (c.charCodeAt(0) === "m".charCodeAt(0)) {
                      $label0 = 3 /* goto IL_110 */ ;
                      continue $labelgroup0;
                    }
                    if (c.charCodeAt(0) !== "s".charCodeAt(0)) {
                      $label0 = 6 /* goto IL_356 */ ;
                      continue $labelgroup0;
                    }
                    $label0 = 4 /* goto IL_148 */ ;
                    continue $labelgroup0;

                }
              }

              $label0 = 1 /* goto IL_A0 */ ;
              continue $labelgroup0;
            case 1: /* IL_A0 */ 
              count = this.ParseChar("d");
              if (count > 8) {
                result = new ($T01())($T02().Error);
                return result;
              }
              element.Type = $T02().Days;
              element.IntValue = count;
              $label0 = 7 /* goto IL_360 */ ;
              continue $labelgroup0;

            case 2: /* IL_D8 */ 
              count = this.ParseChar("h");
              if (count > 2) {
                result = new ($T01())($T02().Error);
                return result;
              }
              element.Type = $T02().Hours;
              element.IntValue = count;
              $label0 = 7 /* goto IL_360 */ ;
              continue $labelgroup0;

            case 3: /* IL_110 */ 
              count = this.ParseChar("m");
              if (count > 2) {
                result = new ($T01())($T02().Error);
                return result;
              }
              element.Type = $T02().Minutes;
              element.IntValue = count;
              $label0 = 7 /* goto IL_360 */ ;
              continue $labelgroup0;

            case 4: /* IL_148 */ 
              count = this.ParseChar("s");
              if (count > 2) {
                result = new ($T01())($T02().Error);
                return result;
              }
              element.Type = $T02().Seconds;
              element.IntValue = count;
              $label0 = 7 /* goto IL_360 */ ;
              continue $labelgroup0;

            case 5: /* IL_180 */ 
              count = this.ParseChar("f");
              if (count > 7) {
                result = new ($T01())($T02().Error);
                return result;
              }
              element.Type = $T02().Ticks;
              element.IntValue = count;
              $label0 = 7 /* goto IL_360 */ ;
              continue $labelgroup0;

            case 6: /* IL_356 */ 
              result = new ($T01())($T02().Error);
              return result;

              $label0 = 7 /* goto IL_360 */ ;
              continue $labelgroup0;
            case 7: /* IL_360 */ 
              result = element.MemberwiseClone();

              break $labelgroup0;
          }
        }
      }
      return result;
    }
  );

  $.Method({Static:false, Public:false}, "ParseChar", 
    $sig.make(0x1027, $asm01.TypeRef("System.Int32"), [$asm01.TypeRef("System.Char")], []), 
    function FormatParser_ParseChar (c) {
      var count = 0;

      while (!this.get_AtEnd() && (this.format[this.cur].charCodeAt(0) === c.charCodeAt(0))) {
        ++this.cur;
        ++count;
      }
      return count;
    }
  );

  $.Method({Static:false, Public:false}, "ParseEscapedChar", 
    $sig.make(0x1028, $asm01.TypeRef("System.Char"), [], []), 
    function FormatParser_ParseEscapedChar () {
      if (!(!this.get_AtEnd() && (this.format[this.cur].charCodeAt(0) === "\\".charCodeAt(0)))) {
        var result = "\0";
      } else {
        ++this.cur;
        if (this.get_AtEnd()) {
          result = "\0";
        } else {
          result = (this.format[this.cur++]);
        }
      }
      return result;
    }
  );

  $.Method({Static:false, Public:false}, "ParseLiteral", 
    $sig.make(0x1029, $asm01.TypeRef("System.String"), [], []), 
    function FormatParser_ParseLiteral () {
      var count = 0;
      if (!(!this.get_AtEnd() && (this.format[this.cur].charCodeAt(0) === "'".charCodeAt(0)))) {
        var result = null;
      } else {

        while (!this.get_AtEnd() && (this.format[this.cur].charCodeAt(0) !== "'".charCodeAt(0))) {
          ++this.cur;
          ++count;
        }
        if (!(this.get_AtEnd() || (this.format[this.cur].charCodeAt(0) !== "'".charCodeAt(0)))) {
          ++this.cur;
          result = this.format.Substring(++this.cur, count);
        } else {
          result = null;
        }
      }
      return result;
    }
  );

  $.Field({Static:false, Public:false}, "cur", $asm01.TypeRef("System.Int32")); 
  $.Field({Static:false, Public:false}, "format", $asm01.TypeRef("System.String")); 
  $.Property({Static:false, Public:true }, "AtEnd", $asm01.TypeRef("System.Boolean"));

});

JSIL.MakeClass($asm01.TypeRef("System.SystemException"), "System.InvalidCastException", true, [], function ($) {
  var $thisType = $.publicInterface;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm01.System.SystemException)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm01.System.Locale)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm01.System.Object)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm01.System.String)) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize($asm01.System.Exception)) ();
  };
  var $T05 = function () {
    return ($T05 = JSIL.Memoize($asm01.System.Int32)) ();
  };

  $.Method({Static:false, Public:true }, ".ctor", 
    $sig.make(0xACF, null, [], []), 
    function InvalidCastException__ctor () {
      $T00().prototype._ctor.call(this, $T01().GetText("Cannot cast from source type to destination type.", JSIL.Array.New($T02(), 0)));
      this.Exception$HResult$value = -2147467262;
    }
  );

  $.Method({Static:false, Public:true }, ".ctor", 
    $sig.make(0xAD5, null, [$asm01.TypeRef("System.String")], []), 
    function InvalidCastException__ctor (message) {
      $T00().prototype._ctor.call(this, message);
      this.Exception$HResult$value = -2147467262;
    }
  );

  $.Method({Static:false, Public:true }, ".ctor", 
    $sig.make(0xAD9, null, [$asm01.TypeRef("System.String"), $asm01.TypeRef("System.Exception")], []), 
    function InvalidCastException__ctor (message, innerException) {
      $sig.get(0x7D2, null, [$asm01.System.String, $asm01.System.Exception], []).Call($T00().prototype, "_ctor", null, this, message, innerException);
      this.Exception$HResult$value = -2147467262;
    }
  );

  $.Method({Static:false, Public:true }, ".ctor", 
    $sig.make(0xADF, null, [$asm01.TypeRef("System.String"), $asm01.TypeRef("System.Int32")], []), 
    function InvalidCastException__ctor (message, errorCode) {
      $T00().prototype._ctor.call(this, message);
      this.Exception$HResult$value = errorCode;
    }
  );

  $.Constant({Static:true , Public:false}, "Result", -2147467262); 
})
  .Attribute($asm01.TypeRef("System.Runtime.InteropServices.ComVisibleAttribute"), function () { return [true]; });

JSIL.MakeClass($asm01.TypeRef("System.SystemException"), "System.IndexOutOfRangeException", true, [], function ($) {
  var $thisType = $.publicInterface;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm01.System.SystemException)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm01.System.Locale)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm01.System.Object)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm01.System.String)) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize($asm01.System.Exception)) ();
  };

  $.Method({Static:false, Public:true }, ".ctor", 
    $sig.make(0xBA2, null, [], []), 
    function IndexOutOfRangeException__ctor () {
      $T00().prototype._ctor.call(this, $T01().GetText("Array index is out of range.", JSIL.Array.New($T02(), 0)));
    }
  );

  $.Method({Static:false, Public:true }, ".ctor", 
    $sig.make(0xBA4, null, [$asm01.TypeRef("System.String")], []), 
    function IndexOutOfRangeException__ctor (message) {
      $T00().prototype._ctor.call(this, message);
    }
  );

  $.Method({Static:false, Public:true }, ".ctor", 
    $sig.make(0xBA6, null, [$asm01.TypeRef("System.String"), $asm01.TypeRef("System.Exception")], []), 
    function IndexOutOfRangeException__ctor (message, innerException) {
      $sig.get(0x7D2, null, [$asm01.System.String, $asm01.System.Exception], []).Call($T00().prototype, "_ctor", null, this, message, innerException);
    }
  );

})
  .Attribute($asm01.TypeRef("System.Runtime.InteropServices.ComVisibleAttribute"), function () { return [true]; });

JSIL.MakeTypeAlias($jsilcore, "System.MulticastDelegate");

JSIL.MakeDelegate("System.Action", true, []);

JSIL.MakeDelegate("System.Action`1", true, ["T"]);

JSIL.MakeDelegate("System.Action`5", true, [
    "T1", "T2", "T3", "T4", 
    "T5"
  ]);

JSIL.MakeDelegate("System.Action`6", true, [
    "T1", "T2", "T3", "T4", 
    "T5", "T6"
  ]);

JSIL.MakeDelegate("System.Action`7", true, [
    "T1", "T2", "T3", "T4", 
    "T5", "T6", "T7"
  ]);

JSIL.MakeDelegate("System.Action`8", true, [
    "T1", "T2", "T3", "T4", 
    "T5", "T6", "T7", "T8"
  ]);

JSIL.MakeClass($asm01.TypeRef("System.Attribute"), "System.Runtime.InteropServices.ComDefaultInterfaceAttribute", true, [], function ($) {
  var $thisType = $.publicInterface;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm01.System.Type)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm01.System.Attribute)) ();
  };

  $.Method({Static:false, Public:true }, ".ctor", 
    $sig.make(0x837, null, [$asm01.TypeRef("System.Type")], []), 
    function ComDefaultInterfaceAttribute__ctor (defaultInterface) {
      $T01().prototype._ctor.call(this);
      this._type = defaultInterface;
    }
  );

  $.Method({Static:false, Public:true }, "get_Value", 
    $sig.make(0x833, $asm01.TypeRef("System.Type"), [], []), 
    function ComDefaultInterfaceAttribute_get_Value () {
      return this._type;
    }
  );

  $.Field({Static:false, Public:false}, "_type", $asm01.TypeRef("System.Type")); 
  $.Property({Static:false, Public:true }, "Value", $asm01.TypeRef("System.Type"));

})
  .Attribute($asm01.TypeRef("System.Runtime.InteropServices.ComVisibleAttribute"), function () { return [true]; })
  .Attribute($asm01.TypeRef("System.AttributeUsageAttribute"), function () { return [$asm01.System.AttributeTargets.Class]; });

JSIL.MakeEnum(
  "System.Globalization.CalendarWeekRule", true, {
    FirstDay: 0, 
    FirstFullWeek: 1, 
    FirstFourDayWeek: 2
  }, false
);

JSIL.MakeInterface(
  "System.Collections.Generic.IDictionary`2", true, ["TKey", "TValue"], function ($) {
    $.Method({}, "Add", $sig.make(0x251, null, [new JSIL.GenericParameter("TKey", "System.Collections.Generic.IDictionary`2"), new JSIL.GenericParameter("TValue", "System.Collections.Generic.IDictionary`2")], []));
    $.Method({}, "ContainsKey", $sig.make(0x254, $asm01.TypeRef("System.Boolean"), [new JSIL.GenericParameter("TKey", "System.Collections.Generic.IDictionary`2")], []));
    $.Method({}, "Remove", $sig.make(0x25C, $asm01.TypeRef("System.Boolean"), [new JSIL.GenericParameter("TKey", "System.Collections.Generic.IDictionary`2")], []));
    $.Method({}, "TryGetValue", $sig.make(0x265, $asm01.TypeRef("System.Boolean"), [new JSIL.GenericParameter("TKey", "System.Collections.Generic.IDictionary`2"), $jsilcore.TypeRef("JSIL.Reference", [new JSIL.GenericParameter("TValue", "System.Collections.Generic.IDictionary`2")])], []));
    $.Method({}, "get_Item", $sig.make(0x24A, new JSIL.GenericParameter("TValue", "System.Collections.Generic.IDictionary`2"), [new JSIL.GenericParameter("TKey", "System.Collections.Generic.IDictionary`2")], []));
    $.Method({}, "set_Item", $sig.make(0x24B, null, [new JSIL.GenericParameter("TKey", "System.Collections.Generic.IDictionary`2"), new JSIL.GenericParameter("TValue", "System.Collections.Generic.IDictionary`2")], []));
    $.Method({}, "get_Keys", $sig.make(0x24C, $asm01.TypeRef("System.Collections.Generic.ICollection`1", [new JSIL.GenericParameter("TKey", "System.Collections.Generic.IDictionary`2")]), [], []));
    $.Method({}, "get_Values", $sig.make(0x24F, $asm01.TypeRef("System.Collections.Generic.ICollection`1", [new JSIL.GenericParameter("TValue", "System.Collections.Generic.IDictionary`2")]), [], []));
    $.Property({}, "Item");
    $.Property({}, "Keys");
    $.Property({}, "Values");
  }, [$asm01.TypeRef("System.Collections.Generic.ICollection`1", [$asm01.TypeRef("System.Collections.Generic.KeyValuePair`2", [new JSIL.GenericParameter("TKey", "System.Collections.Generic.IDictionary`2"), new JSIL.GenericParameter("TValue", "System.Collections.Generic.IDictionary`2")])]), $asm01.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm01.TypeRef("System.Collections.Generic.KeyValuePair`2", [new JSIL.GenericParameter("TKey", "System.Collections.Generic.IDictionary`2"), new JSIL.GenericParameter("TValue", "System.Collections.Generic.IDictionary`2")])]), $asm01.TypeRef("System.Collections.IEnumerable")]);

JSIL.DeclareNamespace("System.Threading");
JSIL.MakeClass($asm01.TypeRef("System.Object"), "System.Threading.Monitor", true, [], function ($) {
  var $thisType = $.publicInterface;

  $.Method({Static:false, Public:true }, ".ctor", 
    $sig.make(0x863, null, [], []), 
    function Monitor__ctor () {
    }
  );

  $.ExternalMethod({Static:true , Public:true }, "Enter", 
    $sig.make(0x858, null, [$asm01.TypeRef("System.Object")], [])
  )
    .Attribute($asm01.TypeRef("JSIL.Meta.JSExternal"))
    .Attribute($asm01.TypeRef("JSIL.Meta.JSRuntimeDispatch"));

  $.ExternalMethod({Static:true , Public:true }, "Enter", 
    $sig.make(0x85B, null, [$asm01.TypeRef("System.Object"), $jsilcore.TypeRef("JSIL.Reference", [$asm01.TypeRef("System.Boolean")])], [])
  )
    .Attribute($asm01.TypeRef("JSIL.Meta.JSRuntimeDispatch"))
    .Attribute($asm01.TypeRef("JSIL.Meta.JSExternal"));

  $.ExternalMethod({Static:true , Public:true }, "Exit", 
    $sig.make(0x861, null, [$asm01.TypeRef("System.Object")], [])
  )
    .Attribute($asm01.TypeRef("JSIL.Meta.JSExternal"));

});

JSIL.MakeClass($asm01.TypeRef("System.Object"), "System.Random", true, [], function ($) {
  var $thisType = $.publicInterface;

  $.Method({Static:false, Public:true }, ".ctor", 
    $sig.make(0x87C, null, [], []), 
    function Random__ctor () {
    }
  );

});

JSIL.MakeStruct($asm01.TypeRef("System.ValueType"), "System.IntPtr", true, [], function ($) {
  var $thisType = $.publicInterface;
  $.SetValue("__IsNativeType__", true);
  $.SetValue("__IsIntegral__", false);
  $.SetValue("__IsNumeric__", false);

});

JSIL.MakeClass($asm01.TypeRef("System.Attribute"), "System.SerializableAttribute", true, [], function ($) {
  var $thisType = $.publicInterface;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm01.System.Attribute)) ();
  };

  $.Method({Static:false, Public:true }, ".ctor", 
    $sig.make(0x898, null, [], []), 
    function SerializableAttribute__ctor () {
      $T00().prototype._ctor.call(this);
    }
  );

})
  .Attribute($asm01.TypeRef("System.Runtime.InteropServices.ComVisibleAttribute"), function () { return [true]; })
  .Attribute($asm01.TypeRef("System.AttributeUsageAttribute"), function () { return [4124]; });

JSIL.MakeClass($asm01.TypeRef("System.SystemException"), "System.ArithmeticException", true, [], function ($) {
  var $thisType = $.publicInterface;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm01.System.SystemException)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm01.System.Locale)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm01.System.Object)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm01.System.String)) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize($asm01.System.Exception)) ();
  };

  $.Method({Static:false, Public:true }, ".ctor", 
    $sig.make(0xA18, null, [], []), 
    function ArithmeticException__ctor () {
      $T00().prototype._ctor.call(this, $T01().GetText("Overflow or underflow in the arithmetic operation.", JSIL.Array.New($T02(), 0)));
      this.Exception$HResult$value = -2147024362;
    }
  );

  $.Method({Static:false, Public:true }, ".ctor", 
    $sig.make(0xA1B, null, [$asm01.TypeRef("System.String")], []), 
    function ArithmeticException__ctor (message) {
      $T00().prototype._ctor.call(this, message);
      this.Exception$HResult$value = -2147024362;
    }
  );

  $.Method({Static:false, Public:true }, ".ctor", 
    $sig.make(0xA1E, null, [$asm01.TypeRef("System.String"), $asm01.TypeRef("System.Exception")], []), 
    function ArithmeticException__ctor (message, innerException) {
      $sig.get(0x7D2, null, [$asm01.System.String, $asm01.System.Exception], []).Call($T00().prototype, "_ctor", null, this, message, innerException);
      this.Exception$HResult$value = -2147024362;
    }
  );

  $.Constant({Static:true , Public:false}, "Result", -2147024362); 
})
  .Attribute($asm01.TypeRef("System.Runtime.InteropServices.ComVisibleAttribute"), function () { return [true]; });

JSIL.MakeClass($asm01.TypeRef("System.ArithmeticException"), "System.DivideByZeroException", true, [], function ($) {
  var $thisType = $.publicInterface;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm01.System.ArithmeticException)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm01.System.Locale)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm01.System.Object)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm01.System.String)) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize($asm01.System.Exception)) ();
  };

  $.Method({Static:false, Public:true }, ".ctor", 
    $sig.make(0xA5C, null, [], []), 
    function DivideByZeroException__ctor () {
      $T00().prototype._ctor.call(this, $T01().GetText("Division by zero", JSIL.Array.New($T02(), 0)));
      this.Exception$HResult$value = -2147352558;
    }
  );

  $.Method({Static:false, Public:true }, ".ctor", 
    $sig.make(0xA60, null, [$asm01.TypeRef("System.String")], []), 
    function DivideByZeroException__ctor (message) {
      $T00().prototype._ctor.call(this, message);
      this.Exception$HResult$value = -2147352558;
    }
  );

  $.Method({Static:false, Public:true }, ".ctor", 
    $sig.make(0xA63, null, [$asm01.TypeRef("System.String"), $asm01.TypeRef("System.Exception")], []), 
    function DivideByZeroException__ctor (message, innerException) {
      $T00().prototype._ctor.call(this, message, innerException);
      this.Exception$HResult$value = -2147352558;
    }
  );

  $.Constant({Static:true , Public:false}, "Result", -2147352558); 
})
  .Attribute($asm01.TypeRef("System.Runtime.InteropServices.ComVisibleAttribute"), function () { return [true]; });

JSIL.DeclareNamespace("System.Security.Permissions");
JSIL.MakeEnum(
  "System.Security.Permissions.SecurityAction", true, {
    Demand: 2, 
    Assert: 3, 
    Deny: 4, 
    PermitOnly: 5, 
    LinkDemand: 6, 
    InheritanceDemand: 7, 
    RequestMinimum: 8, 
    RequestOptional: 9, 
    RequestRefuse: 10
  }, false
);

JSIL.MakeClass($asm01.TypeRef("System.Attribute"), "System.Runtime.InteropServices.GuidAttribute", true, [], function ($) {
  var $thisType = $.publicInterface;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm01.System.String)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm01.System.Attribute)) ();
  };

  $.Method({Static:false, Public:true }, ".ctor", 
    $sig.make(0xA7D, null, [$asm01.TypeRef("System.String")], []), 
    function GuidAttribute__ctor (guid) {
      $T01().prototype._ctor.call(this);
      this.guidValue = guid;
    }
  );

  $.Method({Static:false, Public:true }, "get_Value", 
    $sig.make(0xA7A, $asm01.TypeRef("System.String"), [], []), 
    function GuidAttribute_get_Value () {
      return this.guidValue;
    }
  );

  $.Field({Static:false, Public:false}, "guidValue", $asm01.TypeRef("System.String")); 
  $.Property({Static:false, Public:true }, "Value", $asm01.TypeRef("System.String"));

})
  .Attribute($asm01.TypeRef("System.Runtime.InteropServices.ComVisibleAttribute"), function () { return [true]; })
  .Attribute($asm01.TypeRef("System.AttributeUsageAttribute"), function () { return [5149]; });

JSIL.DeclareNamespace("System.Runtime.ConstrainedExecution");
JSIL.MakeClass($asm01.TypeRef("System.Attribute"), "System.Runtime.ConstrainedExecution.PrePrepareMethodAttribute", true, [], function ($) {
  var $thisType = $.publicInterface;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm01.System.Attribute)) ();
  };

  $.Method({Static:false, Public:true }, ".ctor", 
    $sig.make(0xAA7, null, [], []), 
    function PrePrepareMethodAttribute__ctor () {
      $T00().prototype._ctor.call(this);
    }
  );

})
  .Attribute($asm01.TypeRef("System.AttributeUsageAttribute"), function () { return [96]; });

JSIL.MakeClass($asm01.TypeRef("System.Object"), "System.StringSplitOptions", true, [], function ($) {
  var $thisType = $.publicInterface;

  $.Method({Static:false, Public:true }, ".ctor", 
    $sig.make(0x321, null, [], []), 
    function StringSplitOptions__ctor () {
    }
  );

});

JSIL.MakeTypeAlias($jsilcore, "System.SByte");

JSIL.MakeTypeAlias($jsilcore, "System.Int16");

JSIL.MakeClass($asm01.TypeRef("System.ArithmeticException"), "System.OverflowException", true, [], function ($) {
  var $thisType = $.publicInterface;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm01.System.ArithmeticException)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm01.System.Locale)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm01.System.Object)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm01.System.String)) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize($asm01.System.Exception)) ();
  };

  $.Method({Static:false, Public:true }, ".ctor", 
    $sig.make(0xAA6, null, [], []), 
    function OverflowException__ctor () {
      $T00().prototype._ctor.call(this, $T01().GetText("Number overflow.", JSIL.Array.New($T02(), 0)));
      this.Exception$HResult$value = -2146233066;
    }
  );

  $.Method({Static:false, Public:true }, ".ctor", 
    $sig.make(0xAC4, null, [$asm01.TypeRef("System.String")], []), 
    function OverflowException__ctor (message) {
      $T00().prototype._ctor.call(this, message);
      this.Exception$HResult$value = -2146233066;
    }
  );

  $.Method({Static:false, Public:true }, ".ctor", 
    $sig.make(0xACB, null, [$asm01.TypeRef("System.String"), $asm01.TypeRef("System.Exception")], []), 
    function OverflowException__ctor (message, innerException) {
      $T00().prototype._ctor.call(this, message, innerException);
      this.Exception$HResult$value = -2146233066;
    }
  );

  $.Constant({Static:true , Public:false}, "Result", -2146233066); 
})
  .Attribute($asm01.TypeRef("System.Runtime.InteropServices.ComVisibleAttribute"), function () { return [true]; });

JSIL.DeclareNamespace("System.Runtime.Serialization");
JSIL.MakeInterface(
  "System.Runtime.Serialization.ISerializable", false, [], function ($) {
  }, []);

JSIL.MakeStruct($asm01.TypeRef("System.ValueType"), "System.DateTime", true, [], function ($) {
  var $thisType = $.publicInterface;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm01.System.Int64)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm01.System.String)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm01.System.Int32)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm01.System.ArgumentOutOfRangeException)) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize($asm01.System.TimeSpan)) ();
  };
  var $T05 = function () {
    return ($T05 = JSIL.Memoize($asm01.System.DateTimeKind)) ();
  };
  var $T06 = function () {
    return ($T06 = JSIL.Memoize($asm01.System.ArgumentException)) ();
  };
  var $T07 = function () {
    return ($T07 = JSIL.Memoize($asm01.System.Boolean)) ();
  };
  var $T08 = function () {
    return ($T08 = JSIL.Memoize($asm01.System.DateTimeOffset)) ();
  };
  var $T09 = function () {
    return ($T09 = JSIL.Memoize($asm01.System.Globalization.DateTimeFormatInfo)) ();
  };
  var $T0A = function () {
    return ($T0A = JSIL.Memoize($asm01.System.Globalization.DateTimeStyles)) ();
  };
  var $T0B = function () {
    return ($T0B = JSIL.Memoize($asm01.System.DateTimeUtils)) ();
  };
  var $T0C = function () {
    return ($T0C = JSIL.Memoize($asm01.System.StringEx)) ();
  };
  var $T0D = function () {
    return ($T0D = JSIL.Memoize($asm01.System.Double)) ();
  };
  var $T0E = function () {
    return ($T0E = JSIL.Memoize($asm01.System.Void)) ();
  };
  var $T0F = function () {
    return ($T0F = JSIL.Memoize($asm01.System.Char)) ();
  };
  var $T10 = function () {
    return ($T10 = JSIL.Memoize($asm01.System.Math)) ();
  };
  var $T11 = function () {
    return ($T11 = JSIL.Memoize($asm01.System.Exception)) ();
  };
  var $T12 = function () {
    return ($T12 = JSIL.Memoize($asm01.System.UInt64)) ();
  };
  var $T13 = function () {
    return ($T13 = JSIL.Memoize(System.Array.Of($asm01.System.String))) ();
  };
  var $T14 = function () {
    return ($T14 = JSIL.Memoize($asm01.System.Globalization.CultureInfo)) ();
  };
  var $T15 = function () {
    return ($T15 = JSIL.Memoize(System.Array.Of($asm01.System.Int32))) ();
  };
  var $T16 = function () {
    return ($T16 = JSIL.Memoize($asm01.System.Object)) ();
  };
  var $T17 = function () {
    return ($T17 = JSIL.Memoize($asm01.System.Locale)) ();
  };
  var $T18 = function () {
    return ($T18 = JSIL.Memoize($asm01.System.IFormatProvider)) ();
  };
  var $T19 = function () {
    return ($T19 = JSIL.Memoize($asm01.System.FormatException)) ();
  };
  var $T1A = function () {
    return ($T1A = JSIL.Memoize($asm01.System.DateTime_Which)) ();
  };
  var $T1B = function () {
    return ($T1B = JSIL.Memoize($asm01.System.DayOfWeek)) ();
  };
  var $T1C = function () {
    return ($T1C = JSIL.Memoize($asm01.System.TimeZone)) ();
  };
  var $T1D = function () {
    return ($T1D = JSIL.Memoize($asm01.System.Collections.Generic.List$b1.Of($asm01.System.String))) ();
  };
  var $T1E = function () {
    return ($T1E = JSIL.Memoize($asm01.System.Collections.Generic.IEnumerable$b1.Of($asm01.System.String))) ();
  };
  var $T1F = function () {
    return ($T1F = JSIL.Memoize($asm01.System.TypeCode)) ();
  };
  var $T20 = function () {
    return ($T20 = JSIL.Memoize($asm01.System.OverflowException)) ();
  };
  var $T21 = function () {
    return ($T21 = JSIL.Memoize($asm01.System.ArgumentNullException)) ();
  };
  var $T22 = function () {
    return ($T22 = JSIL.Memoize($asm01.System.InvalidCastException)) ();
  };
  var $T23 = function () {
    return ($T23 = JSIL.Memoize($asm01.System.Type)) ();
  };

  $.Method({Static:false, Public:true }, ".ctor", 
    $sig.make(0x400, null, [$asm01.TypeRef("System.Int64")], []), 
    function DateTime__ctor (ticks) {
      if (!($T00().op_GreaterThanOrEqual(ticks, $T00().Create(0, 0, 0)) && $T00().op_LessThanOrEqual(ticks, $T00().Create(3620863, 2651636, 11210)))) {
        $thisType.InvalidTickValue(ticks);
      }
      this.encoded = ticks;
    }
  );

  $.Method({Static:false, Public:true }, ".ctor", 
    $sig.make(0x403, null, [
        $asm01.TypeRef("System.Int32"), $asm01.TypeRef("System.Int32"), 
        $asm01.TypeRef("System.Int32")
      ], []), 
    function DateTime__ctor (year, month, day) {
      $sig.get(0x40E, null, [
          $asm01.System.Int32, $asm01.System.Int32, 
          $asm01.System.Int32, $asm01.System.Int32, 
          $asm01.System.Int32, $asm01.System.Int32, 
          $asm01.System.Int32
        ], []).Call($thisType.prototype, "_ctor", null, this, 
        year, 
        month, 
        day, 
        0, 
        0, 
        0, 
        0
      );
    }
  );

  $.Method({Static:false, Public:true }, ".ctor", 
    $sig.make(0x40A, null, [
        $asm01.TypeRef("System.Int32"), $asm01.TypeRef("System.Int32"), 
        $asm01.TypeRef("System.Int32"), $asm01.TypeRef("System.Int32"), 
        $asm01.TypeRef("System.Int32"), $asm01.TypeRef("System.Int32")
      ], []), 
    function DateTime__ctor (year, month, day, hour, minute, second) {
      $sig.get(0x40E, null, [
          $asm01.System.Int32, $asm01.System.Int32, 
          $asm01.System.Int32, $asm01.System.Int32, 
          $asm01.System.Int32, $asm01.System.Int32, 
          $asm01.System.Int32
        ], []).Call($thisType.prototype, "_ctor", null, this, 
        year, 
        month, 
        day, 
        hour, 
        minute, 
        second, 
        0
      );
    }
  );

  $.Method({Static:false, Public:true }, ".ctor", 
    $sig.make(0x40E, null, [
        $asm01.TypeRef("System.Int32"), $asm01.TypeRef("System.Int32"), 
        $asm01.TypeRef("System.Int32"), $asm01.TypeRef("System.Int32"), 
        $asm01.TypeRef("System.Int32"), $asm01.TypeRef("System.Int32"), 
        $asm01.TypeRef("System.Int32")
      ], []), 
    function DateTime__ctor (year, month, day, hour, minute, second, millisecond) {
      if (!(!((year < 1) || 
            (year > 9999) || 
            (month < 1) || 
            (month > 12) || 
            (day < 1) || 
            (day > $thisType.DaysInMonth(year, month)) || 
            (hour < 0) || 
            (hour > 23) || 
            (minute < 0) || 
            (minute > 59) || 
            (second < 0) || 
            (second > 59) || 
            (millisecond < 0)) && (millisecond <= 999))) {
        throw new ($T03())("Parameters describe an unrepresentable DateTime.");
      }
      this.encoded = (new ($T04())($thisType.AbsoluteDays(year, month, day), hour, minute, second, millisecond)).get_Ticks();
    }
  );

  $.Method({Static:false, Public:true }, ".ctor", 
    $sig.make(0x411, null, [$asm01.TypeRef("System.Int64"), $asm01.TypeRef("System.DateTimeKind")], []), 
    function DateTime__ctor (ticks, kind) {
      if (!($T00().op_GreaterThanOrEqual(ticks, $T00().Create(0, 0, 0)) && $T00().op_LessThanOrEqual(ticks, $T00().Create(3620863, 2651636, 11210)))) {
        $thisType.InvalidTickValue(ticks);
      }
      if (!((kind >= $T05().Unspecified) && (kind <= $T05().Local))) {
        throw $sig.get(0x818, null, [$asm01.System.String, $asm01.System.String], []).Construct($T06(), "Invalid DateTimeKind value.", "kind");
      }
      this.encoded = $T00().op_BitwiseOr($T00().op_LeftShift(kind.valueOf(), 62), ticks);
    }
  );

  $.Method({Static:false, Public:true }, ".ctor", 
    $sig.make(0x415, null, [
        $asm01.TypeRef("System.Int32"), $asm01.TypeRef("System.Int32"), 
        $asm01.TypeRef("System.Int32"), $asm01.TypeRef("System.Int32"), 
        $asm01.TypeRef("System.Int32"), $asm01.TypeRef("System.Int32"), 
        $asm01.TypeRef("System.DateTimeKind")
      ], []), 
    function DateTime__ctor (year, month, day, hour, minute, second, kind) {
      $thisType.prototype._ctor.call(this, 
        year, 
        month, 
        day, 
        hour, 
        minute, 
        second
      );
      if (!((kind >= $T05().Unspecified) && (kind <= $T05().Local))) {
        throw $sig.get(0x818, null, [$asm01.System.String, $asm01.System.String], []).Construct($T06(), "Invalid DateTimeKind value.", "kind");
      }
      this.encoded = $T00().op_BitwiseOr(this.encoded, $T00().op_LeftShift(kind.valueOf(), 62));
    }
  );

  $.Method({Static:false, Public:true }, ".ctor", 
    $sig.make(0x419, null, [
        $asm01.TypeRef("System.Int32"), $asm01.TypeRef("System.Int32"), 
        $asm01.TypeRef("System.Int32"), $asm01.TypeRef("System.Int32"), 
        $asm01.TypeRef("System.Int32"), $asm01.TypeRef("System.Int32"), 
        $asm01.TypeRef("System.Int32"), $asm01.TypeRef("System.DateTimeKind")
      ], []), 
    function DateTime__ctor (year, month, day, hour, minute, second, millisecond, kind) {
      $sig.get(0x40E, null, [
          $asm01.System.Int32, $asm01.System.Int32, 
          $asm01.System.Int32, $asm01.System.Int32, 
          $asm01.System.Int32, $asm01.System.Int32, 
          $asm01.System.Int32
        ], []).Call($thisType.prototype, "_ctor", null, this, 
        year, 
        month, 
        day, 
        hour, 
        minute, 
        second, 
        millisecond
      );
      if (!((kind >= $T05().Unspecified) && (kind <= $T05().Local))) {
        throw $sig.get(0x818, null, [$asm01.System.String, $asm01.System.String], []).Construct($T06(), "Invalid DateTimeKind value.", "kind");
      }
      this.encoded = $T00().op_BitwiseOr(this.encoded, $T00().op_LeftShift(kind.valueOf(), 62));
    }
  );

  $.Method({Static:true , Public:false}, "_DoParse", 
    $sig.make(0x472, $asm01.TypeRef("System.Boolean"), [
        $asm01.TypeRef("System.String"), $asm01.TypeRef("System.String"), 
        $asm01.TypeRef("System.String"), $asm01.TypeRef("System.Boolean"), 
        $jsilcore.TypeRef("JSIL.Reference", [$.Type]), $jsilcore.TypeRef("JSIL.Reference", [$asm01.TypeRef("System.DateTimeOffset")]), 
        $asm01.TypeRef("System.Globalization.DateTimeFormatInfo"), $asm01.TypeRef("System.Globalization.DateTimeStyles"), 
        $asm01.TypeRef("System.Boolean"), $jsilcore.TypeRef("JSIL.Reference", [$asm01.TypeRef("System.Boolean")]), 
        $jsilcore.TypeRef("JSIL.Reference", [$asm01.TypeRef("System.Boolean")])
      ], []), 
    function DateTime__DoParse (s, firstPart, secondPart, exact, /* ref */ result, /* ref */ dto, dfi, style, firstPartIsDate, /* ref */ incompleteFormat, /* ref */ longYear) {
      var useutc = new JSIL.Variable(false);
      var use_invariant = new JSIL.Variable(false);
      var sloppy_parsing = false;
      dto.value = $sig.get(0x6BF, null, [$asm01.System.Int64, $asm01.System.TimeSpan], []).Construct($T08(), $T00().Create(0, 0, 0), $T04().Zero);
      var flexibleTwoPartsParsing = (!exact && 
        (secondPart !== null));
      incompleteFormat.value = false;
      var valuePos = 0;
      var format = firstPart;
      var afterTFormat = false;
      var invInfo = $T09().get_InvariantInfo();
      if (format.length === 1) {
        format = $T0B().GetStandardPattern(format[0], dfi, /* ref */ useutc, /* ref */ use_invariant);
      }
      result.value = new $thisType($T00().Create(0, 0, 0));
      var num_parsed = new JSIL.Variable(0);
      var ampm = new JSIL.Variable(0);
      var np = new JSIL.Variable(0);
      if (format === null) {
        var result2 = false;
      } else if (s === null) {
        result2 = false;
      } else {
        if ($T0A().$Cast((style & $T0A().AllowLeadingWhite)) !== $T0A().None) {
          format = $T0C().TrimStart(format, null);
          s = $T0C().TrimStart(s, null);
        }
        if ($T0A().$Cast((style & $T0A().AllowTrailingWhite)) !== $T0A().None) {
          format = $T0C().TrimEnd(format, null);
          s = $T0C().TrimEnd(s, null);
        }
        if (use_invariant.value) {
          dfi = invInfo;
        }
        if ($T0A().$Cast((style & $T0A().AllowInnerWhite)) !== $T0A().None) {
          sloppy_parsing = true;
        }
        var chars = format;
        var len = format.length;
        var pos = 0;
        var num = 0;
        if (len !== 0) {

          var $label0 = 0;
        $labelgroup0: 
          while (true) {
            switch ($label0) {
              case 0: /* $entry0 */ 
                var day = -1;
                var dayofweek = -1;
                var month = -1;
                var year = -1;
                var hour = -1;
                var minute = -1;
                var second = -1;
                var fractionalSeconds = -1;
                ampm.value = -1;
                var tzsign = -1;
                var tzoffset = -1;
                var tzoffmin = -1;
                var isFirstPart = true;

              $loop0: 
                while (valuePos !== s.length) {
                  num_parsed.value = 0;
                  if (!(!flexibleTwoPartsParsing || (((pos + num) | 0) !== 0))) {
                    var isLetter = $thisType.IsLetter(s, valuePos);
                    if (isLetter) {
                      if (s[valuePos].charCodeAt(0) === "Z".charCodeAt(0)) {
                        num_parsed.value = 1;
                      } else {
                        $thisType._ParseString(
                          s, 
                          valuePos, 
                          0, 
                          "GMT", 
                          /* ref */ num_parsed
                        );
                      }
                      if (!((num_parsed.value <= 0) || $thisType.IsLetter(s, ((valuePos + num_parsed.value) | 0)))) {
                        valuePos += num_parsed.value;
                        useutc.value = true;
                        continue $loop0;
                      }
                    }
                    if (!(afterTFormat || !$thisType._ParseAmPm(
                          s, 
                          valuePos, 
                          0, 
                          dfi, 
                          exact, 
                          /* ref */ num_parsed, 
                          /* ref */ ampm
                        ))) {
                      if ($thisType.IsLetter(s, ((valuePos + num_parsed.value) | 0))) {
                        ampm.value = -1;
                      } else if (num_parsed.value > 0) {
                        valuePos += num_parsed.value;
                        continue $loop0;
                      }
                    }
                    if (!(afterTFormat || 
                        (dayofweek !== -1) || !isLetter)) {
                      dayofweek = $thisType._ParseEnum(
                        s, 
                        valuePos, 
                        dfi.get_RawDayNames(), 
                        invInfo.get_RawDayNames(), 
                        exact, 
                        /* ref */ num_parsed
                      );
                      if (dayofweek === -1) {
                        dayofweek = $thisType._ParseEnum(
                          s, 
                          valuePos, 
                          dfi.get_RawAbbreviatedDayNames(), 
                          invInfo.get_RawAbbreviatedDayNames(), 
                          exact, 
                          /* ref */ num_parsed
                        );
                      }
                      if (!((dayofweek === -1) || $thisType.IsLetter(s, ((valuePos + num_parsed.value) | 0)))) {
                        valuePos += num_parsed.value;
                        continue $loop0;
                      }
                      dayofweek = -1;
                    }
                    if (!(!((" \n\r\t".indexOf(s[valuePos]) !== -1)) && (s[valuePos].charCodeAt(0) !== ",".charCodeAt(0)))) {
                      ++valuePos;
                      continue $loop0;
                    }
                    num_parsed.value = 0;
                  }
                  if (((pos + num) | 0) >= len) {
                    if (!(!flexibleTwoPartsParsing || (num !== 0))) {
                      afterTFormat = (isFirstPart && 
                        ((firstPart[((firstPart.length - 1) | 0)]).charCodeAt(0) === "T".charCodeAt(0)));
                      if (isFirstPart || !(format == "")) {
                        pos = 0;
                        if (isFirstPart) {
                          format = secondPart;
                        } else {
                          format = "";
                        }
                        chars = format;
                        len = chars.length;
                        isFirstPart = false;
                        continue $loop0;
                      }
                    }
                    $label0 = 1 /* goto IL_1139 */ ;
                    continue $labelgroup0;
                  } else {
                    var leading_zeros = true;
                    if (chars[pos].charCodeAt(0) === "'".charCodeAt(0)) {

                    $loop4: 
                      for (num = 1; ((pos + num) | 0) < len; ++num) {
                        if (chars[((pos + num) | 0)].charCodeAt(0) === "'".charCodeAt(0)) {
                          break $loop4;
                        }
                        if (!((valuePos !== s.length) && (s[valuePos].charCodeAt(0) === chars[((pos + num) | 0)].charCodeAt(0)))) {
                          result2 = false;
                          return result2;
                        }
                        ++valuePos;
                      }
                      pos += ((num + 1) | 0);
                      num = 0;
                    } else if (chars[pos].charCodeAt(0) === "\"".charCodeAt(0)) {

                    $loop3: 
                      for (num = 1; ((pos + num) | 0) < len; ++num) {
                        if (chars[((pos + num) | 0)].charCodeAt(0) === "\"".charCodeAt(0)) {
                          break $loop3;
                        }
                        if (!((valuePos !== s.length) && (s[valuePos].charCodeAt(0) === chars[((pos + num) | 0)].charCodeAt(0)))) {
                          result2 = false;
                          return result2;
                        }
                        ++valuePos;
                      }
                      pos += ((num + 1) | 0);
                      num = 0;
                    } else if (chars[pos].charCodeAt(0) === "\\".charCodeAt(0)) {
                      pos += ((num + 1) | 0);
                      num = 0;
                      if (pos >= len) {
                        result2 = false;
                        return result2;
                      }
                      if (s[valuePos].charCodeAt(0) !== chars[pos].charCodeAt(0)) {
                        result2 = false;
                        return result2;
                      }
                      ++valuePos;
                      ++pos;
                    } else if (chars[pos].charCodeAt(0) === "%".charCodeAt(0)) {
                      ++pos;
                    } else if (!(!((" \n\r\t".indexOf(s[valuePos]) !== -1)) && ((s[valuePos].charCodeAt(0) !== ",".charCodeAt(0)) || 
                          (!(!exact && 
                              (chars[pos].charCodeAt(0) === "/".charCodeAt(0))) && 
                            !((" \n\r\t".indexOf(chars[pos]) !== -1)))))) {
                      ++valuePos;
                      num = 0;
                      if (!(!exact || ($T0A().$Cast((style & $T0A().AllowInnerWhite)) !== $T0A().None))) {
                        if (!((" \n\r\t".indexOf(chars[pos]) !== -1))) {
                          result2 = false;
                          return result2;
                        }
                        ++pos;
                      } else {

                      $loop1: 
                        for (var ws = valuePos; ws < s.length; ++ws) {
                          if (!((" \n\r\t".indexOf(s[ws]) !== -1)) && (s[ws].charCodeAt(0) !== ",".charCodeAt(0))) {
                            break $loop1;
                          }
                        }
                        valuePos = ws;

                      $loop2: 
                        for (ws = pos; ws < chars.length; ++ws) {
                          if (!((" \n\r\t".indexOf(chars[ws]) !== -1)) && (chars[ws].charCodeAt(0) !== ",".charCodeAt(0))) {
                            break $loop2;
                          }
                        }
                        pos = ws;
                        if (!(exact || 
                            (pos >= chars.length) || 
                            (chars[pos].charCodeAt(0) !== "/".charCodeAt(0)) || $thisType._ParseDateSeparator(
                              s, 
                              valuePos, 
                              dfi, 
                              exact, 
                              /* ref */ num_parsed
                            ))) {
                          ++pos;
                        }
                      }
                    } else if (!((((((pos + num) | 0) + 1) | 0) >= len) || ((chars[((((pos + num) | 0) + 1) | 0)]).charCodeAt(0) !== chars[((pos + num) | 0)].charCodeAt(0)))) {
                      ++num;
                    } else {

                      var $label1 = 0;
                    $labelgroup1: 
                      while (true) {
                        switch ($label1) {
                          case 0: /* $entry1 */ 
                            var c = (chars[pos]);
                            if (c.charCodeAt(0) <= "Z".charCodeAt(0)) {
                              if (c.charCodeAt(0) <= ":".charCodeAt(0)) {
                                if (c.charCodeAt(0) !== "/".charCodeAt(0)) {
                                  if (c.charCodeAt(0) !== ":".charCodeAt(0)) {
                                    $label1 = 4 /* goto IL_1052 */ ;
                                    continue $labelgroup1;
                                  }
                                  if (!$thisType._ParseTimeSeparator(
                                      s, 
                                      valuePos, 
                                      dfi, 
                                      exact, 
                                      /* ref */ num_parsed
                                    )) {
                                    result2 = false;
                                    return result2;
                                  }
                                } else {
                                  if (!$thisType._ParseDateSeparator(
                                      s, 
                                      valuePos, 
                                      dfi, 
                                      exact, 
                                      /* ref */ num_parsed
                                    )) {
                                    result2 = false;
                                    return result2;
                                  }
                                  num = 0;
                                }
                              } else {
                                switch (c) {
                                  case "F": 
                                    leading_zeros = false;
                                    $label1 = 3 /* goto IL_C55 */ ;
                                    continue $labelgroup1;

                                  case "G": 
                                    if (s[valuePos].charCodeAt(0) !== "G".charCodeAt(0)) {
                                      result2 = false;
                                      return result2;
                                    }
                                    if (!((((pos + 2) | 0) >= len) || 
                                        (((valuePos + 2) | 0) >= s.length) || 
                                        ((chars[((pos + 1) | 0)]).charCodeAt(0) !== "M".charCodeAt(0)) || 
                                        ((s[((valuePos + 1) | 0)]).charCodeAt(0) !== "M".charCodeAt(0)) || 
                                        ((chars[((pos + 2) | 0)]).charCodeAt(0) !== "T".charCodeAt(0)) || ((s[((valuePos + 2) | 0)]).charCodeAt(0) !== "T".charCodeAt(0)))) {
                                      useutc.value = true;
                                      num = 2;
                                      num_parsed.value = 3;
                                    } else {
                                      num = 0;
                                      num_parsed.value = 1;
                                    }
                                    break;

                                  case "H": 
                                    if (!((hour === -1) && (flexibleTwoPartsParsing || 
                                          (ampm.value < 0)))) {
                                      result2 = false;
                                      return result2;
                                    }
                                    if (num === 0) {
                                      hour = $thisType._ParseNumber(
                                        s, 
                                        valuePos, 
                                        1, 
                                        2, 
                                        false, 
                                        sloppy_parsing, 
                                        /* ref */ num_parsed
                                      );
                                    } else {
                                      hour = $thisType._ParseNumber(
                                        s, 
                                        valuePos, 
                                        1, 
                                        2, 
                                        true, 
                                        sloppy_parsing, 
                                        /* ref */ num_parsed
                                      );
                                    }
                                    if (hour >= 24) {
                                      result2 = false;
                                      return result2;
                                    }
                                    break;

                                  case "I": 
                                  case "J": 
                                  case "L": 
                                    $label1 = 4 /* goto IL_1052 */ ;
                                    continue $labelgroup1;

                                  case "K": 
                                    if (s[valuePos].charCodeAt(0) === "Z".charCodeAt(0)) {
                                      ++valuePos;
                                      useutc.value = true;
                                    } else if (!((s[valuePos].charCodeAt(0) !== "+".charCodeAt(0)) && (s[valuePos].charCodeAt(0) !== "-".charCodeAt(0)))) {
                                      if (tzsign !== -1) {
                                        result2 = false;
                                        return result2;
                                      }
                                      if (s[valuePos].charCodeAt(0) === "+".charCodeAt(0)) {
                                        tzsign = 0;
                                      } else if (s[valuePos].charCodeAt(0) === "-".charCodeAt(0)) {
                                        tzsign = 1;
                                      }
                                      ++valuePos;
                                      tzoffset = $thisType._ParseNumber(
                                        s, 
                                        valuePos, 
                                        0, 
                                        2, 
                                        true, 
                                        sloppy_parsing, 
                                        /* ref */ num_parsed
                                      );
                                      valuePos += num_parsed.value;
                                      if (num_parsed.value < 0) {
                                        result2 = false;
                                        return result2;
                                      }
                                      if (("0123456789".indexOf(s[valuePos]) !== -1)) {
                                        num_parsed.value = 0;
                                      } else if (!$thisType._ParseString(
                                          s, 
                                          valuePos, 
                                          0, 
                                          dfi.get_TimeSeparator(), 
                                          /* ref */ num_parsed
                                        )) {
                                        result2 = false;
                                        return result2;
                                      }
                                      valuePos += num_parsed.value;
                                      tzoffmin = $thisType._ParseNumber(
                                        s, 
                                        valuePos, 
                                        0, 
                                        2, 
                                        true, 
                                        sloppy_parsing, 
                                        /* ref */ num_parsed
                                      );
                                      num = 2;
                                      if (num_parsed.value < 0) {
                                        result2 = false;
                                        return result2;
                                      }
                                    }
                                    break;

                                  case "M": 
                                    if (month !== -1) {
                                      result2 = false;
                                      return result2;
                                    }
                                    if (flexibleTwoPartsParsing) {
                                      num_parsed.value = -1;
                                      if (!((num !== 0) && (num !== 3))) {
                                        month = $thisType._ParseNumber(
                                          s, 
                                          valuePos, 
                                          1, 
                                          2, 
                                          false, 
                                          sloppy_parsing, 
                                          /* ref */ num_parsed
                                        );
                                      }
                                      if (!((num <= 1) || (num_parsed.value !== -1))) {
                                        month = (($thisType._ParseEnum(
                                              s, 
                                              valuePos, 
                                              dfi.get_RawMonthNames(), 
                                              invInfo.get_RawMonthNames(), 
                                              exact, 
                                              /* ref */ num_parsed
                                            ) + 1) | 0);
                                      }
                                      if (!((num <= 1) || (num_parsed.value !== -1))) {
                                        month = (($thisType._ParseEnum(
                                              s, 
                                              valuePos, 
                                              dfi.get_RawAbbreviatedMonthNames(), 
                                              invInfo.get_RawAbbreviatedMonthNames(), 
                                              exact, 
                                              /* ref */ num_parsed
                                            ) + 1) | 0);
                                      }
                                    } else if (num === 0) {
                                      month = $thisType._ParseNumber(
                                        s, 
                                        valuePos, 
                                        1, 
                                        2, 
                                        false, 
                                        sloppy_parsing, 
                                        /* ref */ num_parsed
                                      );
                                    } else if (num === 1) {
                                      month = $thisType._ParseNumber(
                                        s, 
                                        valuePos, 
                                        1, 
                                        2, 
                                        true, 
                                        sloppy_parsing, 
                                        /* ref */ num_parsed
                                      );
                                    } else if (num === 2) {
                                      month = (($thisType._ParseEnum(
                                            s, 
                                            valuePos, 
                                            dfi.get_RawAbbreviatedMonthNames(), 
                                            invInfo.get_RawAbbreviatedMonthNames(), 
                                            exact, 
                                            /* ref */ num_parsed
                                          ) + 1) | 0);
                                    } else {
                                      month = (($thisType._ParseEnum(
                                            s, 
                                            valuePos, 
                                            dfi.get_RawMonthNames(), 
                                            invInfo.get_RawMonthNames(), 
                                            exact, 
                                            /* ref */ num_parsed
                                          ) + 1) | 0);
                                    }
                                    break;

                                  default: 
                                    if (c.charCodeAt(0) !== "Z".charCodeAt(0)) {
                                      $label1 = 4 /* goto IL_1052 */ ;
                                      continue $labelgroup1;
                                    }
                                    if (s[valuePos].charCodeAt(0) !== "Z".charCodeAt(0)) {
                                      result2 = false;
                                      return result2;
                                    }
                                    num = 0;
                                    num_parsed.value = 1;
                                    useutc.value = true;
                                    break;

                                }
                              }
                            } else if (c.charCodeAt(0) <= "m".charCodeAt(0)) {
                              switch (c) {
                                case "d": 
                                  if (!(!((num < 2) && 
                                        (day !== -1)) && ((num < 2) || 
                                        (dayofweek === -1)))) {
                                    result2 = false;
                                    return result2;
                                  }
                                  if (num === 0) {
                                    day = $thisType._ParseNumber(
                                      s, 
                                      valuePos, 
                                      1, 
                                      2, 
                                      false, 
                                      sloppy_parsing, 
                                      /* ref */ num_parsed
                                    );
                                  } else if (num === 1) {
                                    day = $thisType._ParseNumber(
                                      s, 
                                      valuePos, 
                                      1, 
                                      2, 
                                      true, 
                                      sloppy_parsing, 
                                      /* ref */ num_parsed
                                    );
                                  } else if (num === 2) {
                                    dayofweek = $thisType._ParseEnum(
                                      s, 
                                      valuePos, 
                                      dfi.get_RawAbbreviatedDayNames(), 
                                      invInfo.get_RawAbbreviatedDayNames(), 
                                      exact, 
                                      /* ref */ num_parsed
                                    );
                                  } else {
                                    dayofweek = $thisType._ParseEnum(
                                      s, 
                                      valuePos, 
                                      dfi.get_RawDayNames(), 
                                      invInfo.get_RawDayNames(), 
                                      exact, 
                                      /* ref */ num_parsed
                                    );
                                  }
                                  break;

                                case "e": 
                                case "g": 
                                  $label1 = 4 /* goto IL_1052 */ ;
                                  continue $labelgroup1;

                                case "f": 
                                  $label1 = 3 /* goto IL_C55 */ ;
                                  continue $labelgroup1;

                                case "h": 
                                  if (hour !== -1) {
                                    result2 = false;
                                    return result2;
                                  }
                                  if (num === 0) {
                                    hour = $thisType._ParseNumber(
                                      s, 
                                      valuePos, 
                                      1, 
                                      2, 
                                      false, 
                                      sloppy_parsing, 
                                      /* ref */ num_parsed
                                    );
                                  } else {
                                    hour = $thisType._ParseNumber(
                                      s, 
                                      valuePos, 
                                      1, 
                                      2, 
                                      true, 
                                      sloppy_parsing, 
                                      /* ref */ num_parsed
                                    );
                                  }
                                  if (hour > 12) {
                                    result2 = false;
                                    return result2;
                                  }
                                  if (hour === 12) {
                                    hour = 0;
                                  }
                                  break;

                                default: 
                                  if (c.charCodeAt(0) !== "m".charCodeAt(0)) {
                                    $label1 = 4 /* goto IL_1052 */ ;
                                    continue $labelgroup1;
                                  }
                                  if (minute !== -1) {
                                    result2 = false;
                                    return result2;
                                  }
                                  if (num === 0) {
                                    minute = $thisType._ParseNumber(
                                      s, 
                                      valuePos, 
                                      1, 
                                      2, 
                                      false, 
                                      sloppy_parsing, 
                                      /* ref */ num_parsed
                                    );
                                  } else {
                                    minute = $thisType._ParseNumber(
                                      s, 
                                      valuePos, 
                                      1, 
                                      2, 
                                      true, 
                                      sloppy_parsing, 
                                      /* ref */ num_parsed
                                    );
                                  }
                                  if (minute >= 60) {
                                    result2 = false;
                                    return result2;
                                  }
                                  break;

                              }
                            } else {
                              switch (c) {
                                case "s": 
                                  if (second !== -1) {
                                    result2 = false;
                                    return result2;
                                  }
                                  if (num === 0) {
                                    second = $thisType._ParseNumber(
                                      s, 
                                      valuePos, 
                                      1, 
                                      2, 
                                      false, 
                                      sloppy_parsing, 
                                      /* ref */ num_parsed
                                    );
                                  } else {
                                    second = $thisType._ParseNumber(
                                      s, 
                                      valuePos, 
                                      1, 
                                      2, 
                                      true, 
                                      sloppy_parsing, 
                                      /* ref */ num_parsed
                                    );
                                  }
                                  if (second >= 60) {
                                    result2 = false;
                                    return result2;
                                  }
                                  break;

                                case "t": 
                                  if (!$thisType._ParseAmPm(
                                      s, 
                                      valuePos, 
                                      ((num > 0) ? 0 : 1), 
                                      dfi, 
                                      exact, 
                                      /* ref */ num_parsed, 
                                      /* ref */ ampm
                                    )) {
                                    result2 = false;
                                    return result2;
                                  }
                                  break;

                                default: 
                                  switch (c) {
                                    case "y": 
                                      if (year !== -1) {
                                        result2 = false;
                                        return result2;
                                      }
                                      if (num === 0) {
                                        year = $thisType._ParseNumber(
                                          s, 
                                          valuePos, 
                                          1, 
                                          2, 
                                          false, 
                                          sloppy_parsing, 
                                          /* ref */ num_parsed
                                        );
                                      } else if (num < 3) {
                                        year = $thisType._ParseNumber(
                                          s, 
                                          valuePos, 
                                          1, 
                                          2, 
                                          true, 
                                          sloppy_parsing, 
                                          /* ref */ num_parsed
                                        );
                                      } else {
                                        year = $thisType._ParseNumber(
                                          s, 
                                          valuePos, 
                                          (exact ? 4 : 3), 
                                          4, 
                                          false, 
                                          sloppy_parsing, 
                                          /* ref */ num_parsed
                                        );
                                        if (!((year < 1000) || 
                                            (num_parsed.value !== 4) || 
                                            longYear.value || (s.length <= ((4 + valuePos) | 0)))) {
                                          np.value = 0;
                                          var ly = $thisType._ParseNumber(
                                            s, 
                                            valuePos, 
                                            5, 
                                            5, 
                                            false, 
                                            sloppy_parsing, 
                                            /* ref */ np
                                          );
                                          longYear.value = (ly > 9999);
                                        }
                                        num = 3;
                                      }
                                      if (num_parsed.value <= 2) {
                                        year += ((year < 30) ? 2000 : 1900);
                                      }
                                      break;

                                    case "z": 
                                      if (tzsign !== -1) {
                                        result2 = false;
                                        return result2;
                                      }
                                      if (s[valuePos].charCodeAt(0) === "+".charCodeAt(0)) {
                                        tzsign = 0;
                                      } else {
                                        if (s[valuePos].charCodeAt(0) !== "-".charCodeAt(0)) {
                                          result2 = false;
                                          return result2;
                                        }
                                        tzsign = 1;
                                      }
                                      ++valuePos;
                                      if (num === 0) {
                                        tzoffset = $thisType._ParseNumber(
                                          s, 
                                          valuePos, 
                                          1, 
                                          2, 
                                          false, 
                                          sloppy_parsing, 
                                          /* ref */ num_parsed
                                        );
                                      } else if (num === 1) {
                                        tzoffset = $thisType._ParseNumber(
                                          s, 
                                          valuePos, 
                                          1, 
                                          2, 
                                          true, 
                                          sloppy_parsing, 
                                          /* ref */ num_parsed
                                        );
                                      } else {
                                        tzoffset = $thisType._ParseNumber(
                                          s, 
                                          valuePos, 
                                          1, 
                                          2, 
                                          true, 
                                          true, 
                                          /* ref */ num_parsed
                                        );
                                        valuePos += num_parsed.value;
                                        if (num_parsed.value < 0) {
                                          result2 = false;
                                          return result2;
                                        }
                                        num_parsed.value = 0;
                                        if (!(!((valuePos < s.length) && 
                                              (("0123456789".indexOf(s[valuePos]) !== -1))) && !$thisType._ParseTimeSeparator(
                                              s, 
                                              valuePos, 
                                              dfi, 
                                              exact, 
                                              /* ref */ num_parsed
                                            ))) {
                                          valuePos += num_parsed.value;
                                          tzoffmin = $thisType._ParseNumber(
                                            s, 
                                            valuePos, 
                                            1, 
                                            2, 
                                            true, 
                                            sloppy_parsing, 
                                            /* ref */ num_parsed
                                          );
                                          if (num_parsed.value < 0) {
                                            result2 = false;
                                            return result2;
                                          }
                                        } else {
                                          if (!flexibleTwoPartsParsing) {
                                            result2 = false;
                                            return result2;
                                          }
                                          num_parsed.value = 0;
                                        }
                                      }
                                      break;

                                    default: 
                                      $label1 = 4 /* goto IL_1052 */ ;
                                      continue $labelgroup1;

                                  }
                                  break;

                              }
                            }

                            $label1 = 1 /* goto IL_107B */ ;
                            continue $labelgroup1;
                          case 1: /* IL_107B */ 
                            if (num_parsed.value < 0) {
                              result2 = false;
                              return result2;
                            }
                            valuePos += num_parsed.value;
                            if (!(exact || flexibleTwoPartsParsing)) {

                              var $label2 = 0;
                            $labelgroup2: 
                              while (true) {
                                switch ($label2) {
                                  case 0: /* $entry2 */ 
                                    c = (chars[pos]);
                                    if (c.charCodeAt(0) <= "f".charCodeAt(0)) {
                                      if ((c.charCodeAt(0) === "F".charCodeAt(0)) || (c.charCodeAt(0) === "f".charCodeAt(0))) {
                                        $label2 = 1 /* goto IL_10D9 */ ;
                                        continue $labelgroup2;
                                      }
                                    } else if ((c.charCodeAt(0) === "m".charCodeAt(0)) || 
                                      (c.charCodeAt(0) === "s".charCodeAt(0)) || (c.charCodeAt(0) === "z".charCodeAt(0))) {
                                      $label2 = 1 /* goto IL_10D9 */ ;
                                      continue $labelgroup2;
                                    }
                                    $label1 = 2 /* goto IL_1124 */ ;
                                    continue $labelgroup1;

                                  case 1: /* IL_10D9 */ 
                                    if (!((s.length <= valuePos) || 
                                        (s[valuePos].charCodeAt(0) !== "Z".charCodeAt(0)) || ((((pos + 1) | 0) !== chars.length) && 
                                          ((chars[((pos + 1) | 0)]).charCodeAt(0) === "Z".charCodeAt(0))))) {
                                      useutc.value = true;
                                      ++valuePos;
                                    }

                                    $label2 = 2 /* goto $exit2 */ ;
                                    continue $labelgroup2;
                                  case 2: /* $exit2 */ 

                                    break $labelgroup2;
                                }
                              }
                            }

                            $label1 = 2 /* goto IL_1124 */ ;
                            continue $labelgroup1;
                          case 2: /* IL_1124 */ 
                            pos = ((((pos + num) | 0) + 1) | 0);
                            num = 0;
                            continue $loop0;

                          case 3: /* IL_C55 */ 
                            if (!((num <= 6) && (fractionalSeconds === -1))) {
                              result2 = false;
                              return result2;
                            }
                            var decimalNumber = $thisType._ParseNumber(
                              s, 
                              valuePos, 
                              0, 
                              ((num + 1) | 0), 
                              leading_zeros, 
                              sloppy_parsing, 
                              /* ref */ num_parsed
                            );
                            if (num_parsed.value === -1) {
                              result2 = false;
                              return result2;
                            }
                            fractionalSeconds = (decimalNumber / $T10().Pow(10, num_parsed.value));
                            $label1 = 1 /* goto IL_107B */ ;
                            continue $labelgroup1;

                          case 4: /* IL_1052 */ 
                            if (s[valuePos].charCodeAt(0) !== chars[pos].charCodeAt(0)) {
                              result2 = false;
                              return result2;
                            }
                            num = 0;
                            num_parsed.value = 1;
                            $label1 = 1 /* goto IL_107B */ ;
                            continue $labelgroup1;

                          case 5: /* $exit1 */ 

                            break $labelgroup1;
                        }
                      }
                    }
                  }
                }
                $label0 = 1 /* goto IL_1139 */ ;
                continue $labelgroup0;

              case 1: /* IL_1139 */ 
                if (!((((pos + 1) | 0) >= len) || 
                    (chars[pos].charCodeAt(0) !== ".".charCodeAt(0)) || ((chars[((pos + 1) | 0)]).charCodeAt(0) !== "F".charCodeAt(0)))) {

                  for (++pos; (pos < len) && (chars[pos].charCodeAt(0) === "F".charCodeAt(0)); ++pos) {
                  }
                }

                for (; (pos < len) && (chars[pos].charCodeAt(0) === "K".charCodeAt(0)); ++pos) {
                }
                if (pos < len) {
                  result2 = false;
                  return result2;
                }
                if (s.length > valuePos) {
                  if (valuePos === 0) {
                    result2 = false;
                    return result2;
                  }
                  if (!(!(("0123456789".indexOf(s[valuePos]) !== -1)) || !(("0123456789".indexOf(s[((valuePos - 1) | 0)]) !== -1)))) {
                    result2 = false;
                    return result2;
                  }
                  if (!(!(("abcdefghijklmnopqrstuvxyzABCDEFGHIJKLMNOPQRSTUVXYZ".indexOf(s[valuePos]) !== -1)) || !(("abcdefghijklmnopqrstuvxyzABCDEFGHIJKLMNOPQRSTUVXYZ".indexOf(s[((valuePos - 1) | 0)]) !== -1)))) {
                    result2 = false;
                    return result2;
                  }
                  incompleteFormat.value = true;
                  result2 = false;
                  return result2;
                } else {
                  if (hour === -1) {
                    hour = 0;
                  }
                  if (minute === -1) {
                    minute = 0;
                  }
                  if (second === -1) {
                    second = 0;
                  }
                  if (fractionalSeconds === -1) {
                    fractionalSeconds = 0;
                  }
                  if (!((day !== -1) || 
                      (month !== -1) || (year !== -1))) {
                    if ($T0A().$Cast((style & $T0A().NoCurrentDateDefault)) !== $T0A().None) {
                      day = 1;
                      month = 1;
                      year = 1;
                    } else {
                      day = $thisType.get_Today().get_Day();
                      month = $thisType.get_Today().get_Month();
                      year = $thisType.get_Today().get_Year();
                    }
                  }
                  if (day === -1) {
                    day = 1;
                  }
                  if (month === -1) {
                    month = 1;
                  }
                  if (year === -1) {
                    if ($T0A().$Cast((style & $T0A().NoCurrentDateDefault)) !== $T0A().None) {
                      year = 1;
                    } else {
                      year = $thisType.get_Today().get_Year();
                    }
                  }
                  if (!((ampm.value !== 0) || (hour !== 12))) {
                    hour = 0;
                  }
                  if (!((ampm.value !== 1) || (flexibleTwoPartsParsing && 
                        (hour >= 12)))) {
                    hour += 12;
                  }
                  if (!(!((year < 1) || 
                        (year > 9999) || 
                        (month < 1) || 
                        (month > 12) || 
                        (day < 1) || 
                        (day > $thisType.DaysInMonth(year, month)) || 
                        (hour < 0) || 
                        (hour > 23) || 
                        (minute < 0) || 
                        (minute > 59) || 
                        (second < 0)) && (second <= 59))) {
                    result2 = false;
                    return result2;
                  }
                  result.value = $sig.get(0x40E, null, [
                      $asm01.System.Int32, $asm01.System.Int32, 
                      $asm01.System.Int32, $asm01.System.Int32, 
                      $asm01.System.Int32, $asm01.System.Int32, 
                      $asm01.System.Int32
                    ], []).Construct($thisType, year, month, day, hour, minute, second, 0);
                  result.value = result.value.AddSeconds(fractionalSeconds).MemberwiseClone();
                  if (!((dayofweek === -1) || (dayofweek === result.value.get_DayOfWeek().valueOf()))) {
                    result2 = false;
                    return result2;
                  }
                  if (tzsign === -1) {
                    if ($thisType.op_Inequality(result.value, $thisType.MinValue)) {
                      try {
                        dto.value = new ($T08())(result.value);
                      } catch ($exception) {
                      }
                    }
                  } else {
                    if (tzoffmin === -1) {
                      tzoffmin = 0;
                    }
                    if (tzoffset === -1) {
                      tzoffset = 0;
                    }
                    if (tzsign === 1) {
                      tzoffset = -tzoffset;
                      tzoffmin = -tzoffmin;
                    }
                    try {
                      dto.value = $sig.get(0x6BE, null, [$thisType, $asm01.System.TimeSpan], []).Construct($T08(), result.value, new ($T04())(tzoffset, tzoffmin, 0));
                    } catch ($exception) {
                    }
                  }
                  var adjustToUniversal = ($T0A().$Cast((style & $T0A().AdjustToUniversal)) !== $T0A().None);
                  if (tzsign !== -1) {
                    var newticks = $sig.get(0x4B5, $thisType, [$thisType, $asm01.System.TimeSpan], []).CallStatic($thisType, "op_Subtraction", null, result.value, dto.value.get_Offset()).get_Ticks();
                    if (!$T00().op_GreaterThanOrEqual(newticks, $T00().Create(0, 0, 0))) {
                      newticks = $T00().op_Addition(newticks, $T00().Create(6930432, 51498, 0));
                    }
                    result.value = new $thisType(newticks, $T05().Utc);
                    if ($T0A().$Cast((style & $T0A().RoundtripKind)) !== $T0A().None) {
                      result.value = result.value.ToLocalTime().MemberwiseClone();
                    }
                  } else if (!(!useutc.value && ($T0A().$Cast((style & $T0A().AssumeUniversal)) === $T0A().None))) {
                    result.value.encoded = $T00().op_BitwiseOr(result.value.encoded, $T00().Create(0, 0, 16384));
                  } else if ($T0A().$Cast((style & $T0A().AssumeLocal)) !== $T0A().None) {
                    result.value.encoded = $T00().op_BitwiseOr(result.value.encoded, $T00().Create(0, 0, 32768));
                  }
                  var adjustToLocal = (!adjustToUniversal && 
                    ($T0A().$Cast((style & $T0A().RoundtripKind)) === $T0A().None));
                  if (($T12().op_RightShift(result.value.encoded.ToUInt64(), 62)).ToNumber() !== 0) {
                    if (adjustToUniversal) {
                      result.value = result.value.ToUniversalTime().MemberwiseClone();
                    } else if (adjustToLocal) {
                      result.value = result.value.ToLocalTime().MemberwiseClone();
                    }
                  }
                  result2 = true;
                  return result2;
                }

                break $labelgroup0;
            }
          }
        }
        result2 = false;
      }
      return result2;
    }
  );

  $.Method({Static:true , Public:false}, "_ParseAmPm", 
    $sig.make(0x46C, $asm01.TypeRef("System.Boolean"), [
        $asm01.TypeRef("System.String"), $asm01.TypeRef("System.Int32"), 
        $asm01.TypeRef("System.Int32"), $asm01.TypeRef("System.Globalization.DateTimeFormatInfo"), 
        $asm01.TypeRef("System.Boolean"), $jsilcore.TypeRef("JSIL.Reference", [$asm01.TypeRef("System.Int32")]), 
        $jsilcore.TypeRef("JSIL.Reference", [$asm01.TypeRef("System.Int32")])
      ], []), 
    function DateTime__ParseAmPm (s, valuePos, num, dfi, exact, /* ref */ num_parsed, /* ref */ ampm) {
      num_parsed.value = -1;
      if (ampm.value !== -1) {
        var result = false;
      } else if (!$thisType.IsLetter(s, valuePos)) {
        if (dfi.get_AMDesignator() != "") {
          result = false;
        } else {
          if (exact) {
            ampm.value = 0;
          }
          num_parsed.value = 0;
          result = true;
        }
      } else {
        var invInfo = $T09().get_InvariantInfo();
        if (!(!(!exact && 
              $thisType._ParseString(
                s, 
                valuePos, 
                num, 
                invInfo.get_PMDesignator(), 
                /* ref */ num_parsed
              )) && (!(dfi.get_PMDesignator() != "") || 
              !$thisType._ParseString(
                s, 
                valuePos, 
                num, 
                dfi.get_PMDesignator(), 
                /* ref */ num_parsed
              )))) {
          ampm.value = 1;
        } else {
          if (!(!exact && 
              $thisType._ParseString(
                s, 
                valuePos, 
                num, 
                invInfo.get_AMDesignator(), 
                /* ref */ num_parsed
              )) && !$thisType._ParseString(
              s, 
              valuePos, 
              num, 
              dfi.get_AMDesignator(), 
              /* ref */ num_parsed
            )) {
            result = false;
            return result;
          }
          if (!(!exact && (num_parsed.value === 0))) {
            ampm.value = 0;
          }
        }
        result = true;
      }
      return result;
    }
  );

  $.Method({Static:true , Public:false}, "_ParseDateSeparator", 
    $sig.make(0x46F, $asm01.TypeRef("System.Boolean"), [
        $asm01.TypeRef("System.String"), $asm01.TypeRef("System.Int32"), 
        $asm01.TypeRef("System.Globalization.DateTimeFormatInfo"), $asm01.TypeRef("System.Boolean"), 
        $jsilcore.TypeRef("JSIL.Reference", [$asm01.TypeRef("System.Int32")])
      ], []), 
    function DateTime__ParseDateSeparator (s, sPos, dfi, exact, /* ref */ num_parsed) {
      num_parsed.value = -1;
      if (!(!exact || (s[sPos].charCodeAt(0) === "/".charCodeAt(0)))) {
        var result = false;
      } else if (!(!($thisType._ParseTimeSeparator(
              s, 
              sPos, 
              dfi, 
              exact, 
              /* ref */ num_parsed
            ) || 
            (("0123456789".indexOf(s[sPos]) !== -1))) && !(("abcdefghijklmnopqrstuvxyzABCDEFGHIJKLMNOPQRSTUVXYZ".indexOf(s[sPos]) !== -1)))) {
        result = false;
      } else {
        num_parsed.value = 1;
        result = true;
      }
      return result;
    }
  );

  $.Method({Static:true , Public:false}, "_ParseEnum", 
    $sig.make(0x468, $asm01.TypeRef("System.Int32"), [
        $asm01.TypeRef("System.String"), $asm01.TypeRef("System.Int32"), 
        $jsilcore.TypeRef("System.Array", [$asm01.TypeRef("System.String")]), $jsilcore.TypeRef("System.Array", [$asm01.TypeRef("System.String")]), 
        $asm01.TypeRef("System.Boolean"), $jsilcore.TypeRef("JSIL.Reference", [$asm01.TypeRef("System.Int32")])
      ], []), 
    function DateTime__ParseEnum (s, sPos, values, invValues, exact, /* ref */ num_parsed) {

      for (var i = ((values.length - 1) | 0); i >= 0; --i) {
        if (!(exact || (invValues[i].length <= values[i].length))) {
          if (!((invValues[i].length <= 0) || !$thisType._ParseString(
                s, 
                sPos, 
                0, 
                invValues[i], 
                /* ref */ num_parsed
              ))) {
            var result = i;
            return result;
          }
          if (!((values[i].length <= 0) || !$thisType._ParseString(
                s, 
                sPos, 
                0, 
                values[i], 
                /* ref */ num_parsed
              ))) {
            result = i;
            return result;
          }
        } else {
          if (!((values[i].length <= 0) || !$thisType._ParseString(
                s, 
                sPos, 
                0, 
                values[i], 
                /* ref */ num_parsed
              ))) {
            result = i;
            return result;
          }
          if (!(exact || 
              (invValues[i].length <= 0) || !$thisType._ParseString(
                s, 
                sPos, 
                0, 
                invValues[i], 
                /* ref */ num_parsed
              ))) {
            result = i;
            return result;
          }
        }
      }
      num_parsed.value = -1;
      result = -1;
      return result;
    }
  );

  $.Method({Static:true , Public:false}, "_ParseNumber", 
    $sig.make(0x465, $asm01.TypeRef("System.Int32"), [
        $asm01.TypeRef("System.String"), $asm01.TypeRef("System.Int32"), 
        $asm01.TypeRef("System.Int32"), $asm01.TypeRef("System.Int32"), 
        $asm01.TypeRef("System.Boolean"), $asm01.TypeRef("System.Boolean"), 
        $jsilcore.TypeRef("JSIL.Reference", [$asm01.TypeRef("System.Int32")])
      ], []), 
    function DateTime__ParseNumber (s, valuePos, min_digits, digits, leadingzero, sloppy_parsing, /* ref */ num_parsed) {
      var number = 0;
      if (sloppy_parsing) {
        leadingzero = false;
      }
      if (!leadingzero) {
        var real_digits = 0;

      $loop0: 
        for (var i = valuePos; (i < s.length) && (i < ((digits + valuePos) | 0)); ++i) {
          if (!(("0123456789".indexOf(s[i]) !== -1))) {
            break $loop0;
          }
          ++real_digits;
        }
        digits = real_digits;
      }
      if (digits < min_digits) {
        num_parsed.value = -1;
        var result = 0;
      } else if (((s.length - valuePos) | 0) < digits) {
        num_parsed.value = -1;
        result = 0;
      } else {

        for (i = valuePos; i < ((digits + valuePos) | 0); ++i) {
          var c = (s[i]);
          if (!(("0123456789".indexOf(c) !== -1))) {
            num_parsed.value = -1;
            result = 0;
            return result;
          }
          number = ((((number * 10) | 0) + (String.fromCharCode((c.charCodeAt(0) - "0".charCodeAt(0)))).charCodeAt(0)) | 0);
        }
        num_parsed.value = digits;
        result = number;
      }
      return result;
    }
  );

  $.Method({Static:true , Public:false}, "_ParseString", 
    $sig.make(0x46B, $asm01.TypeRef("System.Boolean"), [
        $asm01.TypeRef("System.String"), $asm01.TypeRef("System.Int32"), 
        $asm01.TypeRef("System.Int32"), $asm01.TypeRef("System.String"), 
        $jsilcore.TypeRef("JSIL.Reference", [$asm01.TypeRef("System.Int32")])
      ], []), 
    function DateTime__ParseString (s, sPos, maxlength, value, /* ref */ num_parsed) {
      if (maxlength <= 0) {
        maxlength = value.length;
      }
      if (!((((sPos + maxlength) | 0) > s.length) || ($T01().Compare(
              s, 
              sPos, 
              value, 
              0, 
              maxlength, 
              true, 
              $T14().get_InvariantCulture()
            ) !== 0))) {
        num_parsed.value = maxlength;
        var result = true;
      } else {
        num_parsed.value = -1;
        result = false;
      }
      return result;
    }
  );

  $.Method({Static:true , Public:false}, "_ParseTimeSeparator", 
    $sig.make(0x46D, $asm01.TypeRef("System.Boolean"), [
        $asm01.TypeRef("System.String"), $asm01.TypeRef("System.Int32"), 
        $asm01.TypeRef("System.Globalization.DateTimeFormatInfo"), $asm01.TypeRef("System.Boolean"), 
        $jsilcore.TypeRef("JSIL.Reference", [$asm01.TypeRef("System.Int32")])
      ], []), 
    function DateTime__ParseTimeSeparator (s, sPos, dfi, exact, /* ref */ num_parsed) {
      return ($thisType._ParseString(
          s, 
          sPos, 
          0, 
          dfi.get_TimeSeparator(), 
          /* ref */ num_parsed
        ) || (!exact && 
          $thisType._ParseString(
            s, 
            sPos, 
            0, 
            ":", 
            /* ref */ num_parsed
          )));
    }
  );

  $.Method({Static:true , Public:false}, "AbsoluteDays", 
    $sig.make(0x3F6, $asm01.TypeRef("System.Int32"), [
        $asm01.TypeRef("System.Int32"), $asm01.TypeRef("System.Int32"), 
        $asm01.TypeRef("System.Int32")
      ], []), 
    function DateTime_AbsoluteDays (year, month, day) {
      var temp = 0;
      var i = 1;
      var days = ($thisType.IsLeapYear(year) ? $thisType.daysmonthleap : $thisType.daysmonth);

      while (i < month) {
        temp += days[i++];
      }
      return ((((((((((((day - 1) | 0) + temp) | 0) + ((365 * ((year - 1) | 0)) | 0)) | 0) + ((((year - 1) | 0) / 4) | 0)) | 0) - ((((year - 1) | 0) / 100) | 0)) | 0) + ((((year - 1) | 0) / 400) | 0)) | 0);
    }
  );

  $.Method({Static:false, Public:true }, "Add", 
    $sig.make(0x420, $.Type, [$asm01.TypeRef("System.TimeSpan")], []), 
    function DateTime_Add (value) {
      return this.AddTicks(value.get_Ticks());
    }
  );

  $.Method({Static:false, Public:true }, "AddDays", 
    $sig.make(0x421, $.Type, [$asm01.TypeRef("System.Double")], []), 
    function DateTime_AddDays (value) {
      return this.AddMilliseconds(Math.round((value * 86400000)));
    }
  );

  $.Method({Static:false, Public:true }, "AddHours", 
    $sig.make(0x423, $.Type, [$asm01.TypeRef("System.Double")], []), 
    function DateTime_AddHours (value) {
      return this.AddMilliseconds((value * 3600000));
    }
  );

  $.Method({Static:false, Public:true }, "AddMilliseconds", 
    $sig.make(0x424, $.Type, [$asm01.TypeRef("System.Double")], []), 
    function DateTime_AddMilliseconds (value) {
      if (!(((value * 10000) <= 9.2233720368547758E+18) && ((value * 10000) >= -9.2233720368547758E+18))) {
        throw new ($T03())();
      }
      var msticks = $T00().FromNumber(Math.round((value * 10000)));
      return this.AddTicks(msticks);
    }
  );

  $.Method({Static:false, Public:true }, "AddMinutes", 
    $sig.make(0x427, $.Type, [$asm01.TypeRef("System.Double")], []), 
    function DateTime_AddMinutes (value) {
      return this.AddMilliseconds((value * 60000));
    }
  );

  $.Method({Static:false, Public:true }, "AddMonths", 
    $sig.make(0x428, $.Type, [$asm01.TypeRef("System.Int32")], []), 
    function DateTime_AddMonths (months) {
      var day = this.get_Day();
      var month = ((this.get_Month() + ((months % 12) | 0)) | 0);
      var year = ((this.get_Year() + ((months / 12) | 0)) | 0);
      if (month < 1) {
        month = ((12 + month) | 0);
        --year;
      } else if (month > 12) {
        month -= 12;
        ++year;
      }
      var maxday = $thisType.DaysInMonth(year, month);
      if (day > maxday) {
        day = maxday;
      }
      var temp = new $thisType(year, month, day);
      temp.encoded = $T00().op_BitwiseOr(temp.encoded, $T00().op_BitwiseAnd(this.encoded, $T00().Create(0, 0, 49152)));
      return temp.Add(this.get_TimeOfDay());
    }
  );

  $.Method({Static:false, Public:false}, "AddRoundedMilliseconds", 
    $sig.make(0x425, $.Type, [$asm01.TypeRef("System.Double")], []), 
    function DateTime_AddRoundedMilliseconds (ms) {
      if (!(((ms * 10000) <= 9.2233720368547758E+18) && ((ms * 10000) >= -9.2233720368547758E+18))) {
        throw new ($T03())();
      }
      var msticks = $T00().op_Multiplication(
        $T00().FromNumber((ms += ((ms > 0) ? 0.5 : -0.5))), 
        $T00().Create(10000, 0, 0)
      );
      return this.AddTicks(msticks);
    }
  );

  $.Method({Static:false, Public:true }, "AddSeconds", 
    $sig.make(0x42E, $.Type, [$asm01.TypeRef("System.Double")], []), 
    function DateTime_AddSeconds (value) {
      return this.AddMilliseconds((value * 1000));
    }
  );

  $.Method({Static:false, Public:true }, "AddTicks", 
    $sig.make(0x422, $.Type, [$asm01.TypeRef("System.Int64")], []), 
    function DateTime_AddTicks (value) {
      var res = $T00().op_Addition(value, $T00().op_BitwiseAnd(this.encoded, $T00().Create(16777215, 16777215, 16383)));
      if (!($T00().op_GreaterThanOrEqual(res, $T00().Create(0, 0, 0)) && $T00().op_LessThanOrEqual(res, $T00().Create(3620863, 2651636, 11210)))) {
        throw new ($T03())();
      }
      var ret = new $thisType(res);
      ret.encoded = $T00().op_BitwiseOr(ret.encoded, $T00().op_BitwiseAnd(this.encoded, $T00().Create(0, 0, 49152)));
      return ret;
    }
  );

  $.Method({Static:false, Public:true }, "AddYears", 
    $sig.make(0x430, $.Type, [$asm01.TypeRef("System.Int32")], []), 
    function DateTime_AddYears (value) {
      return this.AddMonths(((value * 12) | 0));
    }
  );

  $.Method({Static:true , Public:false}, "CheckStyle", 
    $sig.make(0x479, null, [$asm01.TypeRef("System.Globalization.DateTimeStyles")], []), 
    function DateTime_CheckStyle (style) {
      if ($T0A().$Cast((style & $T0A().RoundtripKind)) !== $T0A().None) {
        if (!(!(($T0A().$Cast((style & $T0A().AdjustToUniversal)) !== $T0A().None) || 
              ($T0A().$Cast((style & $T0A().AssumeLocal)) !== $T0A().None)) && ($T0A().$Cast((style & $T0A().AssumeUniversal)) === $T0A().None))) {
          throw $sig.get(0x818, null, [$asm01.System.String, $asm01.System.String], []).Construct($T06(), "The DateTimeStyles value RoundtripKind cannot be used with the values AssumeLocal, Asersal or AdjustToUniversal.", "style");
        }
      }
      if (!(($T0A().$Cast((style & $T0A().AssumeUniversal)) === $T0A().None) || ($T0A().$Cast((style & $T0A().AssumeLocal)) === $T0A().None))) {
        throw $sig.get(0x818, null, [$asm01.System.String, $asm01.System.String], []).Construct($T06(), "The DateTimeStyles values AssumeLocal and AssumeUniversal cannot be used together.", "style");
      }
    }
  );

  $.Method({Static:true , Public:true }, "Compare", 
    $sig.make(0x431, $asm01.TypeRef("System.Int32"), [$.Type, $.Type], []), 
    function DateTime_Compare (t1, t2) {
      var t1t = $T00().op_BitwiseAnd(t1.encoded, $T00().Create(16777215, 16777215, 16383));
      var t2t = $T00().op_BitwiseAnd(t2.encoded, $T00().Create(16777215, 16777215, 16383));
      if (!$T00().op_GreaterThanOrEqual(t1t, t2t)) {
        var result = -1;
      } else if (!$T00().op_LessThanOrEqual(t1t, t2t)) {
        result = 1;
      } else {
        result = 0;
      }
      return result;
    }
  );

  $.Method({Static:false, Public:true }, "CompareTo", 
    $sig.make(0x433, $asm01.TypeRef("System.Int32"), [$asm01.TypeRef("System.Object")], []), 
    function DateTime_CompareTo (value) {
      if (value === null) {
        var result = 1;
      } else {
        if (!$thisType.$Is(value)) {
          throw new ($T06())($T17().GetText("Value is not a System.DateTime", JSIL.Array.New($T16(), 0)));
        }
        result = $thisType.Compare(this, $thisType.$Cast(value));
      }
      return result;
    }
  );

  $.Method({Static:false, Public:true }, "CompareTo", 
    $sig.make(0x437, $asm01.TypeRef("System.Int32"), [$.Type], []), 
    function DateTime_CompareTo (value) {
      return $thisType.Compare(this, value);
    }
  );

  $.Method({Static:true , Public:false}, "CoreParse", 
    $sig.make(0x460, $asm01.TypeRef("System.Boolean"), [
        $asm01.TypeRef("System.String"), $asm01.TypeRef("System.IFormatProvider"), 
        $asm01.TypeRef("System.Globalization.DateTimeStyles"), $jsilcore.TypeRef("JSIL.Reference", [$.Type]), 
        $jsilcore.TypeRef("JSIL.Reference", [$asm01.TypeRef("System.DateTimeOffset")]), $asm01.TypeRef("System.Boolean"), 
        $jsilcore.TypeRef("JSIL.Reference", [$asm01.TypeRef("System.Exception")])
      ], []), 
    function DateTime_CoreParse (s, provider, styles, /* ref */ result, /* ref */ dto, setExceptionOnError, /* ref */ exception) {
      dto.value = $sig.get(0x6BF, null, [$asm01.System.Int64, $asm01.System.TimeSpan], []).Construct($T08(), $T00().Create(0, 0, 0), $T04().Zero);
      var incompleteFormat = new JSIL.Variable(false);
      var longYear = new JSIL.Variable(false);
      if (!((s !== null) && (s.length !== 0))) {
        if (setExceptionOnError) {
          exception.value = new ($T19())("String was not recognized as a valid DateTime.");
        }
        result.value = $thisType.MinValue.MemberwiseClone();
        var result2 = false;
      } else {
        if (provider === null) {
          provider = $T14().get_CurrentCulture();
        }
        var dfi = $T09().GetInstance(provider);
        var allDateFormats = $thisType.YearMonthDayFormats(dfi);
        if (allDateFormats === null) {
          result.value = $thisType.MinValue.MemberwiseClone();
          result2 = false;
        } else {
          longYear.value = false;

          for (var i = 0; i < allDateFormats.length; ++i) {
            var firstPart = allDateFormats[i];
            incompleteFormat.value = false;
            if ($thisType._DoParse(
                s, 
                firstPart, 
                "", 
                false, 
                /* ref */ result, 
                /* ref */ dto, 
                dfi, 
                styles, 
                true, 
                /* ref */ incompleteFormat, 
                /* ref */ longYear
              )) {
              result2 = true;
              return result2;
            }
            if (incompleteFormat.value) {

              for (var j = 0; j < $thisType.ParseTimeFormats.length; ++j) {
                if ($thisType._DoParse(
                    s, 
                    firstPart, 
                    $thisType.ParseTimeFormats[j], 
                    false, 
                    /* ref */ result, 
                    /* ref */ dto, 
                    dfi, 
                    styles, 
                    true, 
                    /* ref */ incompleteFormat, 
                    /* ref */ longYear
                  )) {
                  result2 = true;
                  return result2;
                }
              }
            }
          }
          var dayIndex = (dfi.get_MonthDayPattern().indexOf(p));
          var monthIndex = (dfi.get_MonthDayPattern().indexOf(p));
          if (!((dayIndex !== -1) && (monthIndex !== -1))) {
            result.value = $thisType.MinValue.MemberwiseClone();
            if (setExceptionOnError) {
              exception.value = new ($T19())($T17().GetText("Order of month and date is not defined by {0}", JSIL.Array.New($T16(), [dfi.get_MonthDayPattern()])));
            }
            result2 = false;
          } else {
            var monthDayFormats = ((dayIndex < monthIndex) ? $thisType.DayMonthShortFormats : $thisType.MonthDayShortFormats);

            for (i = 0; i < monthDayFormats.length; ++i) {
              incompleteFormat.value = false;
              if ($thisType._DoParse(
                  s, 
                  monthDayFormats[i], 
                  "", 
                  false, 
                  /* ref */ result, 
                  /* ref */ dto, 
                  dfi, 
                  styles, 
                  true, 
                  /* ref */ incompleteFormat, 
                  /* ref */ longYear
                )) {
                result2 = true;
                return result2;
              }
            }

            for (j = 0; j < $thisType.ParseTimeFormats.length; ++j) {
              firstPart = $thisType.ParseTimeFormats[j];
              incompleteFormat.value = false;
              if ($thisType._DoParse(
                  s, 
                  firstPart, 
                  "", 
                  false, 
                  /* ref */ result, 
                  /* ref */ dto, 
                  dfi, 
                  styles, 
                  false, 
                  /* ref */ incompleteFormat, 
                  /* ref */ longYear
                )) {
                result2 = true;
                return result2;
              }
              if (incompleteFormat.value) {

                for (i = 0; i < monthDayFormats.length; ++i) {
                  if ($thisType._DoParse(
                      s, 
                      firstPart, 
                      monthDayFormats[i], 
                      false, 
                      /* ref */ result, 
                      /* ref */ dto, 
                      dfi, 
                      styles, 
                      false, 
                      /* ref */ incompleteFormat, 
                      /* ref */ longYear
                    )) {
                    result2 = true;
                    return result2;
                  }
                }

                for (i = 0; i < allDateFormats.length; ++i) {
                  var dateFormat = allDateFormats[i];
                  if ((dateFormat[((dateFormat.length - 1) | 0)]).charCodeAt(0) !== "T".charCodeAt(0)) {
                    if ($thisType._DoParse(
                        s, 
                        firstPart, 
                        dateFormat, 
                        false, 
                        /* ref */ result, 
                        /* ref */ dto, 
                        dfi, 
                        styles, 
                        false, 
                        /* ref */ incompleteFormat, 
                        /* ref */ longYear
                      )) {
                      result2 = true;
                      return result2;
                    }
                  }
                }
              }
            }
            if ($thisType.ParseExact(
                s, 
                dfi.GetAllDateTimePatternsInternal(), 
                dfi, 
                styles, 
                /* ref */ result, 
                false, 
                /* ref */ longYear, 
                setExceptionOnError, 
                /* ref */ exception
              )) {
              result2 = true;
            } else if (!setExceptionOnError) {
              result2 = false;
            } else {
              exception.value = new ($T19())("String was not recognized as a valid DateTime.");
              result2 = false;
            }
          }
        }
      }
      return result2;
    }
  );

  $.Method({Static:true , Public:true }, "DaysInMonth", 
    $sig.make(0x441, $asm01.TypeRef("System.Int32"), [$asm01.TypeRef("System.Int32"), $asm01.TypeRef("System.Int32")], []), 
    function DateTime_DaysInMonth (year, month) {
      if (!((month >= 1) && (month <= 12))) {
        throw new ($T03())();
      }
      if (!((year >= 1) && (year <= 9999))) {
        throw new ($T03())();
      }
      var days = ($thisType.IsLeapYear(year) ? $thisType.daysmonthleap : $thisType.daysmonth);
      return days[month];
    }
  );

  $.Method({Static:false, Public:true }, "Equals", 
    $sig.make(0x439, $asm01.TypeRef("System.Boolean"), [$.Type], []), 
    function DateTime_Equals (value) {
      return $T00().op_Equality(
        $T00().op_BitwiseAnd(value.encoded, $T00().Create(16777215, 16777215, 16383)), 
        $T00().op_BitwiseAnd(this.encoded, $T00().Create(16777215, 16777215, 16383))
      );
    }
  );

  $.Method({Static:false, Public:true }, "Object.Equals", 
    $sig.make(0x443, $asm01.TypeRef("System.Boolean"), [$asm01.TypeRef("System.Object")], []), 
    function DateTime_Object_Equals (value) {
      return ($thisType.$Is(value).valueOf() && $T00().op_Equality(
          $T00().op_BitwiseAnd($thisType.$Cast(value).encoded, $T00().Create(16777215, 16777215, 16383)), 
          $T00().op_BitwiseAnd(this.encoded, $T00().Create(16777215, 16777215, 16383))
        ));
    }
  );

  $.Method({Static:true , Public:true }, "Equals", 
    $sig.make(0x445, $asm01.TypeRef("System.Boolean"), [$.Type, $.Type], []), 
    function DateTime_Equals (t1, t2) {
      return $T00().op_Equality(
        $T00().op_BitwiseAnd(t1.encoded, $T00().Create(16777215, 16777215, 16383)), 
        $T00().op_BitwiseAnd(t2.encoded, $T00().Create(16777215, 16777215, 16383))
      );
    }
  );

  $.Method({Static:true , Public:true }, "FromBinary", 
    $sig.make(0x43E, $.Type, [$asm01.TypeRef("System.Int64")], []), 
    function DateTime_FromBinary (dateData) {
      var num = $T12().op_RightShift(dateData.ToUInt64(), 62);
      if (!$T12().op_GreaterThan(num, $T12().Create(1, 0, 0))) {
        if (!$T12().op_LessThan(num, $T12().Create(0, 0, 0))) {
          switch (num.ToNumber()) {
            case 0: 
              var result = new $thisType(dateData, $T05().Unspecified);
              return result;

            case 1: 
              result = new $thisType($T00().op_BitwiseAnd(dateData, $T00().Create(16777215, 16777215, 16383)), $T05().Utc);
              return result;

          }
        }
      }
      result = ((new $thisType($T00().op_BitwiseAnd(dateData, $T00().Create(16777215, 16777215, 16383)), $T05().Utc))).ToLocalTime().MemberwiseClone();
      return result;
    }
  );

  $.Method({Static:true , Public:true }, "FromFileTime", 
    $sig.make(0x446, $.Type, [$asm01.TypeRef("System.Int64")], []), 
    function DateTime_FromFileTime (fileTime) {
      if (!$T00().op_GreaterThanOrEqual(fileTime, $T00().Create(0, 0, 0))) {
        throw $sig.get(0xCA7, null, [$asm01.System.String, $asm01.System.String], []).Construct($T03(), "fileTime", "< 0");
      }
      return ((new $thisType($T00().op_Addition($T00().Create(7798784, 13506338, 1793), fileTime)))).ToLocalTime();
    }
  );

  $.Method({Static:true , Public:true }, "FromFileTimeUtc", 
    $sig.make(0x448, $.Type, [$asm01.TypeRef("System.Int64")], []), 
    function DateTime_FromFileTimeUtc (fileTime) {
      if (!$T00().op_GreaterThanOrEqual(fileTime, $T00().Create(0, 0, 0))) {
        throw $sig.get(0xCA7, null, [$asm01.System.String, $asm01.System.String], []).Construct($T03(), "fileTime", "< 0");
      }
      return new $thisType($T00().op_Addition($T00().Create(7798784, 13506338, 1793), fileTime));
    }
  );

  $.Method({Static:true , Public:true }, "FromOADate", 
    $sig.make(0x44A, $.Type, [$asm01.TypeRef("System.Double")], []), 
    function DateTime_FromOADate (d) {
      if (!((d > -657435) && (d < 2958466))) {
        throw $sig.get(0x818, null, [$asm01.System.String, $asm01.System.String], []).Construct($T06(), "d", "[-657435,2958466]");
      }
      var dt = new $thisType($T00().Create(8634368, 245963, 2129));
      if (d < 0) {
        var days = (Math.ceil(d));
        dt = dt.AddRoundedMilliseconds((days * 86400000)).MemberwiseClone();
        dt = dt.AddRoundedMilliseconds(((days - d) * 86400000)).MemberwiseClone();
      } else {
        dt = dt.AddRoundedMilliseconds((d * 86400000)).MemberwiseClone();
      }
      return dt;
    }
  );

  $.Method({Static:false, Public:false}, "FromTicks", 
    $sig.make(0x3F8, $asm01.TypeRef("System.Int32"), [$asm01.TypeRef("System.DateTime/Which")], []), 
    function DateTime_FromTicks (what) {
      var M = 1;
      var days = $thisType.daysmonth;
      var totaldays = ($T00().op_Division(
          $T00().op_BitwiseAnd(this.encoded, $T00().Create(16777215, 16777215, 16383)), 
          $T00().Create(6930432, 51498, 0)
        )).ToNumber();
      var num400 = ((totaldays / 146097) | 0);
      totaldays -= ((num400 * 146097) | 0);
      var num401 = ((totaldays / 36524) | 0);
      if (num401 === 4) {
        num401 = 3;
      }
      totaldays -= ((num401 * 36524) | 0);
      var num402 = ((totaldays / 1461) | 0);
      totaldays -= ((num402 * 1461) | 0);
      var numyears = ((totaldays / 365) | 0);
      if (numyears === 4) {
        numyears = 3;
      }
      if (what === $T1A().Year) {
        var result = ((((((((((num400 * 400) | 0) + ((num401 * 100) | 0)) | 0) + ((num402 * 4) | 0)) | 0) + numyears) | 0) + 1) | 0);
      } else {
        totaldays -= ((numyears * 365) | 0);
        if (what === $T1A().DayYear) {
          result = ((totaldays + 1) | 0);
        } else {
          if (!((numyears !== 3) || ((num401 !== 3) && 
                (num402 === 24)))) {
            days = $thisType.daysmonthleap;
          }

          for (; totaldays >= days[M]; totaldays -= days[M++]) {
          }
          if (what === $T1A().Month) {
            result = M;
          } else {
            result = ((totaldays + 1) | 0);
          }
        }
      }
      return result;
    }
  );

  $.Method({Static:false, Public:true }, "get_Date", 
    $sig.make(0x3BA, $.Type, [], []), 
    function DateTime_get_Date () {
      var ret = new $thisType(this.get_Year(), this.get_Month(), this.get_Day());
      ret.encoded = $T00().op_BitwiseOr(ret.encoded, $T00().op_BitwiseAnd(this.encoded, $T00().Create(0, 0, 49152)));
      return ret;
    }
  );

  $.Method({Static:false, Public:true }, "get_Day", 
    $sig.make(0x3BC, $asm01.TypeRef("System.Int32"), [], []), 
    function DateTime_get_Day () {
      return this.FromTicks($T1A().Day);
    }
  );

  $.Method({Static:false, Public:true }, "get_DayOfWeek", 
    $sig.make(0x3C5, $asm01.TypeRef("System.DayOfWeek"), [], []), 
    function DateTime_get_DayOfWeek () {
      return $T1B().$Cast($T00().op_Modulus(
          $T00().op_Addition(
            $T00().op_Division(
              $T00().op_BitwiseAnd(this.encoded, $T00().Create(16777215, 16777215, 16383)), 
              $T00().Create(6930432, 51498, 0)
            ), 
            $T00().Create(1, 0, 0)
          ), 
          $T00().Create(7, 0, 0)
        ));
    }
  );

  $.Method({Static:false, Public:true }, "get_DayOfYear", 
    $sig.make(0x3C8, $asm01.TypeRef("System.Int32"), [], []), 
    function DateTime_get_DayOfYear () {
      return this.FromTicks($T1A().DayYear);
    }
  );

  $.Method({Static:false, Public:true }, "get_Hour", 
    $sig.make(0x3CA, $asm01.TypeRef("System.Int32"), [], []), 
    function DateTime_get_Hour () {
      return ($T00().op_Division(
          $T00().op_Modulus(
            $T00().op_BitwiseAnd(this.encoded, $T00().Create(16777215, 16777215, 16383)), 
            $T00().Create(6930432, 51498, 0)
          ), 
          $T00().Create(12871680, 2145, 0)
        )).ToNumber();
    }
  );

  $.Method({Static:false, Public:true }, "get_Kind", 
    $sig.make(0x3F1, $asm01.TypeRef("System.DateTimeKind"), [], []), 
    function DateTime_get_Kind () {
      return $T05().$Cast($T12().op_RightShift(this.encoded.ToUInt64(), 62));
    }
  );

  $.Method({Static:false, Public:true }, "get_Millisecond", 
    $sig.make(0x3D1, $asm01.TypeRef("System.Int32"), [], []), 
    function DateTime_get_Millisecond () {
      return ($T00().op_Division(
          $T00().op_Modulus(
            $T00().op_BitwiseAnd(this.encoded, $T00().Create(16777215, 16777215, 16383)), 
            $T00().Create(10000000, 0, 0)
          ), 
          $T00().Create(10000, 0, 0)
        )).ToNumber();
    }
  );

  $.Method({Static:false, Public:true }, "get_Minute", 
    $sig.make(0x3CC, $asm01.TypeRef("System.Int32"), [], []), 
    function DateTime_get_Minute () {
      return ($T00().op_Division(
          $T00().op_Modulus(
            $T00().op_BitwiseAnd(this.encoded, $T00().Create(16777215, 16777215, 16383)), 
            $T00().Create(12871680, 2145, 0)
          ), 
          $T00().Create(12797440, 35, 0)
        )).ToNumber();
    }
  );

  $.Method({Static:false, Public:true }, "get_Month", 
    $sig.make(0x3BB, $asm01.TypeRef("System.Int32"), [], []), 
    function DateTime_get_Month () {
      return this.FromTicks($T1A().Month);
    }
  );

  $.Method({Static:true , Public:true }, "get_Now", 
    $sig.make(0x3D4, $.Type, [], []), 
    function DateTime_get_Now () {
      var now = $thisType.GetNow();
      var dt = new $thisType(now);
      if (!$T00().op_LessThanOrEqual(
          $T00().op_Subtraction(now, $thisType.last_now), 
          $T00().Create(12797440, 35, 0)
        )) {
        $thisType.to_local_time_span_object = $T1C().get_CurrentTimeZone().GetLocalTimeDiff(dt.MemberwiseClone()).MemberwiseClone();
        $thisType.last_now = now;
      }
      var ret = $thisType.op_Addition(dt, $T04().$Cast($thisType.to_local_time_span_object)).MemberwiseClone();
      ret.encoded = $T00().op_BitwiseOr(ret.encoded, $T00().Create(0, 0, 32768));
      return ret;
    }
  );

  $.Method({Static:false, Public:true }, "get_Second", 
    $sig.make(0x3CE, $asm01.TypeRef("System.Int32"), [], []), 
    function DateTime_get_Second () {
      return ($T00().op_Division(
          $T00().op_Modulus(
            $T00().op_BitwiseAnd(this.encoded, $T00().Create(16777215, 16777215, 16383)), 
            $T00().Create(12797440, 35, 0)
          ), 
          $T00().Create(10000000, 0, 0)
        )).ToNumber();
    }
  );

  $.Method({Static:false, Public:true }, "get_Ticks", 
    $sig.make(0x3D7, $asm01.TypeRef("System.Int64"), [], []), 
    function DateTime_get_Ticks () {
      return $T00().op_BitwiseAnd(this.encoded, $T00().Create(16777215, 16777215, 16383));
    }
  );

  $.Method({Static:false, Public:true }, "get_TimeOfDay", 
    $sig.make(0x3C9, $asm01.TypeRef("System.TimeSpan"), [], []), 
    function DateTime_get_TimeOfDay () {
      return new ($T04())($T00().op_Modulus(
          $T00().op_BitwiseAnd(this.encoded, $T00().Create(16777215, 16777215, 16383)), 
          $T00().Create(6930432, 51498, 0)
        ));
    }
  );

  $.Method({Static:true , Public:true }, "get_Today", 
    $sig.make(0x3D8, $.Type, [], []), 
    function DateTime_get_Today () {
      var now = $thisType.get_Now();
      var today = new $thisType(now.get_Year(), now.get_Month(), now.get_Day());
      today.encoded = $T00().op_BitwiseOr(today.encoded, $T00().Create(0, 0, 32768));
      return today;
    }
  );

  $.Method({Static:true , Public:true }, "get_UtcNow", 
    $sig.make(0x3EA, $.Type, [], []), 
    function DateTime_get_UtcNow () {
      return new $thisType($thisType.GetNow(), $T05().Utc);
    }
  );

  $.Method({Static:false, Public:true }, "get_Year", 
    $sig.make(0x3EC, $asm01.TypeRef("System.Int32"), [], []), 
    function DateTime_get_Year () {
      return this.FromTicks($T1A().Year);
    }
  );

  $.Method({Static:false, Public:true }, "GetDateTimeFormats", 
    $sig.make(0x44B, $jsilcore.TypeRef("System.Array", [$asm01.TypeRef("System.String")]), [$asm01.TypeRef("System.Char")], []), 
    function DateTime_GetDateTimeFormats (format) {
      if (("dDgGfFmMrRstTuUyY".indexOf(p)) < 0) {
        throw new ($T19())("Invalid format character.");
      }
      return JSIL.Array.New($T01(), [$sig.get(0x49F, $asm01.System.String, [$asm01.System.String], []).CallVirtual("ToString", null, this, format.toString())]);
    }
  );

  $.Method({Static:false, Public:true }, "GetDateTimeFormats", 
    $sig.make(0x44D, $jsilcore.TypeRef("System.Array", [$asm01.TypeRef("System.String")]), [$asm01.TypeRef("System.IFormatProvider")], []), 
    function DateTime_GetDateTimeFormats (provider) {
      var info = $T09().$Cast(provider.IFormatProvider_GetFormat($T09().__Type__));
      var i = new ($T1D())();
      var text = "dDgGfFmMrRstTuUyY";

      for (var j = 0; j < text.length; ++j) {
        var c = (text[j]);
        $T1D().prototype.AddRange.call(i, $T1E().$Cast(this.GetDateTimeFormats(c, info)));
      }
      return $T1D().prototype.ToArray.call(i);
    }
  );

  $.Method({Static:false, Public:true }, "GetDateTimeFormats", 
    $sig.make(0x44F, $jsilcore.TypeRef("System.Array", [$asm01.TypeRef("System.String")]), [$asm01.TypeRef("System.Char"), $asm01.TypeRef("System.IFormatProvider")], []), 
    function DateTime_GetDateTimeFormats (format, provider) {
      if (("dDgGfFmMrRstTuUyY".indexOf(p)) < 0) {
        throw new ($T19())("Invalid format character.");
      }
      var adjustutc = false;
      if (format.charCodeAt(0) === "U".charCodeAt(0)) {
        adjustutc = true;
      }
      var info = $T09().$Cast(provider.IFormatProvider_GetFormat($T09().__Type__));
      return this.GetDateTimeFormats(adjustutc, info.GetAllRawDateTimePatterns(format), info);
    }
  );

  $.Method({Static:false, Public:false}, "GetDateTimeFormats", 
    $sig.make(0x451, $jsilcore.TypeRef("System.Array", [$asm01.TypeRef("System.String")]), [
        $asm01.TypeRef("System.Boolean"), $jsilcore.TypeRef("System.Array", [$asm01.TypeRef("System.String")]), 
        $asm01.TypeRef("System.Globalization.DateTimeFormatInfo")
      ], []), 
    function DateTime_GetDateTimeFormats (adjustutc, patterns, dfi) {
      var results = JSIL.Array.New($T01(), patterns.length);
      var val = (adjustutc ? this.ToUniversalTime() : this);

      for (var i = 0; i < results.length; ++i) {
        results[i] = $T0B().ToString(val.MemberwiseClone(), patterns[i], dfi);
      }
      return results;
    }
  );

  $.Method({Static:false, Public:true }, "GetHashCode", 
    $sig.make(0x453, $asm01.TypeRef("System.Int32"), [], []), 
    function DateTime_GetHashCode () {
      return this.encoded.ToNumber();
    }
  );

  $.Method({Static:true , Public:false}, "GetNow", 
    $sig.make(0x41F, $asm01.TypeRef("System.Int64"), [], []), 
    function DateTime_GetNow () {
      var ms = $T0D().$Cast((new Date()).getTime());
      return $T00().op_Addition(
        $T00().Create(11894784, 8386039, 2207), 
        $T00().op_Multiplication(
          $T00().Create(10000, 0, 0), 
          $T00().FromNumber(ms)
        )
      );
    }
  );

  $.ExternalMethod({Static:true , Public:false}, "GetTimeMonotonic", 
    $sig.make(0x41D, $asm01.TypeRef("System.Int64"), [], [])
  );

  $.Method({Static:false, Public:true }, "GetTypeCode", 
    $sig.make(0x455, $asm01.TypeRef("System.TypeCode"), [], []), 
    function DateTime_GetTypeCode () {
      return $T1F().DateTime;
    }
  );

  $.Method({Static:true , Public:false}, "InvalidTickValue", 
    $sig.make(0x3FD, null, [$asm01.TypeRef("System.Int64")], []), 
    function DateTime_InvalidTickValue (ticks) {
      var msg = $T17().GetText("Value {0} is outside the valid range [0,{1}].", JSIL.Array.New($T16(), [ticks, $T00().Create(3620863, 2651636, 11210)]));
      throw $sig.get(0xCA7, null, [$asm01.System.String, $asm01.System.String], []).Construct($T03(), "ticks", msg);
    }
  );

  $.Method({Static:false, Public:true }, "IsDaylightSavingTime", 
    $sig.make(0x435, $asm01.TypeRef("System.Boolean"), [], []), 
    function DateTime_IsDaylightSavingTime () {
      return ((($T12().op_RightShift(this.encoded.ToUInt64(), 62)).ToNumber() !== 1) && $T1C().get_CurrentTimeZone().IsDaylightSavingTime(this.MemberwiseClone()));
    }
  );

  $.Method({Static:true , Public:true }, "IsLeapYear", 
    $sig.make(0x456, $asm01.TypeRef("System.Boolean"), [$asm01.TypeRef("System.Int32")], []), 
    function DateTime_IsLeapYear (year) {
      if (!((year >= 1) && (year <= 9999))) {
        throw new ($T03())();
      }
      return (((((year % 4) | 0) === 0) && 
          (((year % 100) | 0) !== 0)) || (((year % 400) | 0) === 0));
    }
  );

  $.Method({Static:true , Public:false}, "IsLetter", 
    $sig.make(0x471, $asm01.TypeRef("System.Boolean"), [$asm01.TypeRef("System.String"), $asm01.TypeRef("System.Int32")], []), 
    function DateTime_IsLetter (s, pos) {
      return ((pos < s.length) && (("abcdefghijklmnopqrstuvxyzABCDEFGHIJKLMNOPQRSTUVXYZ".indexOf(s[pos]) !== -1)));
    }
  );

  $.Method({Static:true , Public:true }, "op_Addition", 
    $sig.make(0x4A4, $.Type, [$.Type, $asm01.TypeRef("System.TimeSpan")], []), 
    function DateTime_op_Addition (d, t) {
      try {
        var res = $T00().op_Addition(
          $T00().op_BitwiseAnd(d.encoded, $T00().Create(16777215, 16777215, 16383)), 
          t.get_Ticks()
        );
        if (!($T00().op_GreaterThanOrEqual(res, $T00().Create(0, 0, 0)) && $T00().op_LessThanOrEqual(res, $T00().Create(3620863, 2651636, 11210)))) {
          throw new ($T03())();
        }
        var result = new $thisType(res, d.get_Kind());
      } catch ($exception) {
        if ($T20().$Is($exception)) {
          throw new ($T03())();
        } else {
          throw $exception;
        }
      }
      return result;
    }
  );

  $.Method({Static:true , Public:true }, "op_Equality", 
    $sig.make(0x4A5, $asm01.TypeRef("System.Boolean"), [$.Type, $.Type], []), 
    function DateTime_op_Equality (d1, d2) {
      return $T00().op_Equality(
        $T00().op_BitwiseAnd(d1.encoded, $T00().Create(16777215, 16777215, 16383)), 
        $T00().op_BitwiseAnd(d2.encoded, $T00().Create(16777215, 16777215, 16383))
      );
    }
  );

  $.Method({Static:true , Public:true }, "op_GreaterThan", 
    $sig.make(0x4A8, $asm01.TypeRef("System.Boolean"), [$.Type, $.Type], []), 
    function DateTime_op_GreaterThan (t1, t2) {
      return $T00().op_GreaterThan(
        $T00().op_BitwiseAnd(t1.encoded, $T00().Create(16777215, 16777215, 16383)), 
        $T00().op_BitwiseAnd(t2.encoded, $T00().Create(16777215, 16777215, 16383))
      );
    }
  );

  $.Method({Static:true , Public:true }, "op_GreaterThanOrEqual", 
    $sig.make(0x4AA, $asm01.TypeRef("System.Boolean"), [$.Type, $.Type], []), 
    function DateTime_op_GreaterThanOrEqual (t1, t2) {
      return $T00().op_GreaterThanOrEqual(
        $T00().op_BitwiseAnd(t1.encoded, $T00().Create(16777215, 16777215, 16383)), 
        $T00().op_BitwiseAnd(t2.encoded, $T00().Create(16777215, 16777215, 16383))
      );
    }
  );

  $.Method({Static:true , Public:true }, "op_Inequality", 
    $sig.make(0x4AC, $asm01.TypeRef("System.Boolean"), [$.Type, $.Type], []), 
    function DateTime_op_Inequality (d1, d2) {
      return $T00().op_Inequality(
        $T00().op_BitwiseAnd(d1.encoded, $T00().Create(16777215, 16777215, 16383)), 
        $T00().op_BitwiseAnd(d2.encoded, $T00().Create(16777215, 16777215, 16383))
      );
    }
  );

  $.Method({Static:true , Public:true }, "op_LessThan", 
    $sig.make(0x4AF, $asm01.TypeRef("System.Boolean"), [$.Type, $.Type], []), 
    function DateTime_op_LessThan (t1, t2) {
      return $T00().op_LessThan(
        $T00().op_BitwiseAnd(t1.encoded, $T00().Create(16777215, 16777215, 16383)), 
        $T00().op_BitwiseAnd(t2.encoded, $T00().Create(16777215, 16777215, 16383))
      );
    }
  );

  $.Method({Static:true , Public:true }, "op_LessThanOrEqual", 
    $sig.make(0x4B0, $asm01.TypeRef("System.Boolean"), [$.Type, $.Type], []), 
    function DateTime_op_LessThanOrEqual (t1, t2) {
      return $T00().op_LessThanOrEqual(
        $T00().op_BitwiseAnd(t1.encoded, $T00().Create(16777215, 16777215, 16383)), 
        $T00().op_BitwiseAnd(t2.encoded, $T00().Create(16777215, 16777215, 16383))
      );
    }
  );

  $.Method({Static:true , Public:true }, "op_Subtraction", 
    $sig.make(0x4B2, $asm01.TypeRef("System.TimeSpan"), [$.Type, $.Type], []), 
    function DateTime_op_Subtraction (d1, d2) {
      return new ($T04())($T00().op_Subtraction(
          $T00().op_BitwiseAnd(d1.encoded, $T00().Create(16777215, 16777215, 16383)), 
          $T00().op_BitwiseAnd(d2.encoded, $T00().Create(16777215, 16777215, 16383))
        ));
    }
  );

  $.Method({Static:true , Public:true }, "op_Subtraction", 
    $sig.make(0x4B5, $.Type, [$.Type, $asm01.TypeRef("System.TimeSpan")], []), 
    function DateTime_op_Subtraction (d, t) {
      try {
        var res = $T00().op_Subtraction(
          $T00().op_BitwiseAnd(d.encoded, $T00().Create(16777215, 16777215, 16383)), 
          t.get_Ticks()
        );
        if (!($T00().op_GreaterThanOrEqual(res, $T00().Create(0, 0, 0)) && $T00().op_LessThanOrEqual(res, $T00().Create(3620863, 2651636, 11210)))) {
          throw new ($T03())();
        }
        var result = new $thisType(res, d.get_Kind());
      } catch ($exception) {
        if ($T20().$Is($exception)) {
          throw new ($T03())();
        } else {
          throw $exception;
        }
      }
      return result;
    }
  );

  $.Method({Static:true , Public:true }, "Parse", 
    $sig.make(0x458, $.Type, [$asm01.TypeRef("System.String")], []), 
    function DateTime_Parse (s) {
      return $thisType.Parse(s, null);
    }
  );

  $.Method({Static:true , Public:true }, "Parse", 
    $sig.make(0x45A, $.Type, [$asm01.TypeRef("System.String"), $asm01.TypeRef("System.IFormatProvider")], []), 
    function DateTime_Parse (s, provider) {
      return $thisType.Parse(s, provider, $T0A().AllowWhiteSpaces);
    }
  );

  $.Method({Static:true , Public:true }, "Parse", 
    $sig.make(0x45D, $.Type, [
        $asm01.TypeRef("System.String"), $asm01.TypeRef("System.IFormatProvider"), 
        $asm01.TypeRef("System.Globalization.DateTimeStyles")
      ], []), 
    function DateTime_Parse (s, provider, styles) {
      var res = new JSIL.Variable(new $thisType());
      var dto = new JSIL.Variable(new ($T08())());
      if (s === null) {
        throw new ($T21())("s");
      }
      var exception = new JSIL.Variable(null);
      if (!$thisType.CoreParse(
          s, 
          provider, 
          styles, 
          /* ref */ res, 
          /* ref */ dto, 
          true, 
          /* ref */ exception
        )) {
        throw exception.value;
      }
      return res.value;
    }
  );

  $.Method({Static:true , Public:true }, "ParseExact", 
    $sig.make(0x461, $.Type, [
        $asm01.TypeRef("System.String"), $asm01.TypeRef("System.String"), 
        $asm01.TypeRef("System.IFormatProvider")
      ], []), 
    function DateTime_ParseExact (s, format, provider) {
      return $sig.get(0x474, $thisType, [
          $asm01.System.String, $asm01.System.String, 
          $asm01.System.IFormatProvider, $asm01.System.Globalization.DateTimeStyles
        ], []).CallStatic($thisType, "ParseExact", null, s, format, provider, $T0A().None);
    }
  );

  $.Method({Static:true , Public:true }, "ParseExact", 
    $sig.make(0x474, $.Type, [
        $asm01.TypeRef("System.String"), $asm01.TypeRef("System.String"), 
        $asm01.TypeRef("System.IFormatProvider"), $asm01.TypeRef("System.Globalization.DateTimeStyles")
      ], []), 
    function DateTime_ParseExact (s, format, provider, style) {
      if (format === null) {
        throw new ($T21())("format");
      }
      return $sig.get(0x476, $thisType, [
          $asm01.System.String, System.Array.Of($asm01.System.String), 
          $asm01.System.IFormatProvider, $asm01.System.Globalization.DateTimeStyles
        ], []).CallStatic($thisType, "ParseExact", null, s, JSIL.Array.New($T01(), [format]), provider, style);
    }
  );

  $.Method({Static:true , Public:true }, "ParseExact", 
    $sig.make(0x476, $.Type, [
        $asm01.TypeRef("System.String"), $jsilcore.TypeRef("System.Array", [$asm01.TypeRef("System.String")]), 
        $asm01.TypeRef("System.IFormatProvider"), $asm01.TypeRef("System.Globalization.DateTimeStyles")
      ], []), 
    function DateTime_ParseExact (s, formats, provider, style) {
      var result = new JSIL.Variable(new $thisType());
      var dfi = $T09().GetInstance(provider);
      $thisType.CheckStyle(style);
      if (s === null) {
        throw new ($T21())("s");
      }
      if (formats === null) {
        throw new ($T21())("formats");
      }
      if (formats.length === 0) {
        throw new ($T19())("Format specifier was invalid.");
      }
      var longYear = new JSIL.Variable(false);
      var e = new JSIL.Variable(null);
      if (!$thisType.ParseExact(
          s, 
          formats, 
          dfi, 
          style, 
          /* ref */ result, 
          true, 
          /* ref */ longYear, 
          true, 
          /* ref */ e
        )) {
        throw e.value;
      }
      return result.value;
    }
  );

  $.Method({Static:true , Public:false}, "ParseExact", 
    $sig.make(0x484, $asm01.TypeRef("System.Boolean"), [
        $asm01.TypeRef("System.String"), $jsilcore.TypeRef("System.Array", [$asm01.TypeRef("System.String")]), 
        $asm01.TypeRef("System.Globalization.DateTimeFormatInfo"), $asm01.TypeRef("System.Globalization.DateTimeStyles"), 
        $jsilcore.TypeRef("JSIL.Reference", [$.Type]), $asm01.TypeRef("System.Boolean"), 
        $jsilcore.TypeRef("JSIL.Reference", [$asm01.TypeRef("System.Boolean")]), $asm01.TypeRef("System.Boolean"), 
        $jsilcore.TypeRef("JSIL.Reference", [$asm01.TypeRef("System.Exception")])
      ], []), 
    function DateTime_ParseExact (s, formats, dfi, style, /* ref */ ret, exact, /* ref */ longYear, setExceptionOnError, /* ref */ exception) {
      var result = new JSIL.Variable(new $thisType());
      var dto = new JSIL.Variable(new ($T08())());
      var incompleteFormat = new JSIL.Variable(false);

    $loop0: 
      for (var i = 0; i < formats.length; ++i) {
        var format = formats[i];
        if (!((format !== null) && !(format == $T01().Empty))) {
          break $loop0;
        }
        if ($thisType._DoParse(
            s, 
            formats[i], 
            null, 
            exact, 
            /* ref */ result, 
            /* ref */ dto, 
            dfi, 
            style, 
            false, 
            /* ref */ incompleteFormat, 
            /* ref */ longYear
          )) {
          ret.value = result.value.MemberwiseClone();
          var result2 = true;
          return result2;
        }
      }
      if (setExceptionOnError) {
        exception.value = new ($T19())("Invalid format string");
      }
      ret.value = $thisType.MinValue.MemberwiseClone();
      result2 = false;
      return result2;
    }
  );

  $.Method({Static:true , Public:true }, "SpecifyKind", 
    $sig.make(0x440, $.Type, [$.Type, $asm01.TypeRef("System.DateTimeKind")], []), 
    function DateTime_SpecifyKind (value, kind) {
      return new $thisType(value.get_Ticks(), kind);
    }
  );

  $.Method({Static:false, Public:true }, "Subtract", 
    $sig.make(0x486, $asm01.TypeRef("System.TimeSpan"), [$.Type], []), 
    function DateTime_Subtract (value) {
      return $T04().op_Subtraction(
        new ($T04())(this.get_Ticks()), 
        new ($T04())(value.get_Ticks())
      );
    }
  );

  $.Method({Static:false, Public:true }, "Subtract", 
    $sig.make(0x48A, $.Type, [$asm01.TypeRef("System.TimeSpan")], []), 
    function DateTime_Subtract (value) {
      var newticks = $T00().op_Subtraction(
        this.get_Ticks(), 
        value.get_Ticks()
      );
      if (!($T00().op_GreaterThanOrEqual(newticks, $T00().Create(0, 0, 0)) && $T00().op_LessThanOrEqual(newticks, $T00().Create(3620863, 2651636, 11210)))) {
        throw new ($T03())();
      }
      var ret = new $thisType(newticks);
      ret.encoded = $T00().op_BitwiseOr(ret.encoded, $T00().op_BitwiseAnd(this.encoded, $T00().Create(0, 0, 49152)));
      return ret;
    }
  );

  $.Method({Static:false, Public:false}, "IConvertible.ToBoolean", 
    $sig.make(0x4B9, $asm01.TypeRef("System.Boolean"), [$asm01.TypeRef("System.IFormatProvider")], []), 
    function DateTime_IConvertible_ToBoolean (provider) {
      throw new ($T22())();
    }
  );

  $.Method({Static:false, Public:false}, "IConvertible.ToByte", 
    $sig.make(0x4BB, $asm01.TypeRef("System.Byte"), [$asm01.TypeRef("System.IFormatProvider")], []), 
    function DateTime_IConvertible_ToByte (provider) {
      throw new ($T22())();
    }
  );

  $.Method({Static:false, Public:false}, "IConvertible.ToChar", 
    $sig.make(0x4BE, $asm01.TypeRef("System.Char"), [$asm01.TypeRef("System.IFormatProvider")], []), 
    function DateTime_IConvertible_ToChar (provider) {
      throw new ($T22())();
    }
  );

  $.Method({Static:false, Public:false}, "IConvertible.ToDateTime", 
    $sig.make(0x4C1, $.Type, [$asm01.TypeRef("System.IFormatProvider")], []), 
    function DateTime_IConvertible_ToDateTime (provider) {
      return this;
    }
  );

  $.Method({Static:false, Public:false}, "IConvertible.ToDecimal", 
    $sig.make(0x4C2, $asm01.TypeRef("System.Decimal"), [$asm01.TypeRef("System.IFormatProvider")], []), 
    function DateTime_IConvertible_ToDecimal (provider) {
      throw new ($T22())();
    }
  );

  $.Method({Static:false, Public:false}, "IConvertible.ToDouble", 
    $sig.make(0x4C3, $asm01.TypeRef("System.Double"), [$asm01.TypeRef("System.IFormatProvider")], []), 
    function DateTime_IConvertible_ToDouble (provider) {
      throw new ($T22())();
    }
  );

  $.Method({Static:false, Public:false}, "IConvertible.ToInt16", 
    $sig.make(0x4C6, $asm01.TypeRef("System.Int16"), [$asm01.TypeRef("System.IFormatProvider")], []), 
    function DateTime_IConvertible_ToInt16 (provider) {
      throw new ($T22())();
    }
  );

  $.Method({Static:false, Public:false}, "IConvertible.ToInt32", 
    $sig.make(0x4C9, $asm01.TypeRef("System.Int32"), [$asm01.TypeRef("System.IFormatProvider")], []), 
    function DateTime_IConvertible_ToInt32 (provider) {
      throw new ($T22())();
    }
  );

  $.Method({Static:false, Public:false}, "IConvertible.ToInt64", 
    $sig.make(0x4CB, $asm01.TypeRef("System.Int64"), [$asm01.TypeRef("System.IFormatProvider")], []), 
    function DateTime_IConvertible_ToInt64 (provider) {
      throw new ($T22())();
    }
  );

  $.Method({Static:false, Public:false}, "IConvertible.ToSByte", 
    $sig.make(0x4CD, $asm01.TypeRef("System.SByte"), [$asm01.TypeRef("System.IFormatProvider")], []), 
    function DateTime_IConvertible_ToSByte (provider) {
      throw new ($T22())();
    }
  );

  $.Method({Static:false, Public:false}, "IConvertible.ToSingle", 
    $sig.make(0x4CE, $asm01.TypeRef("System.Single"), [$asm01.TypeRef("System.IFormatProvider")], []), 
    function DateTime_IConvertible_ToSingle (provider) {
      throw new ($T22())();
    }
  );

  $.Method({Static:false, Public:false}, "IConvertible.ToType", 
    $sig.make(0x4CF, $asm01.TypeRef("System.Object"), [$asm01.TypeRef("System.Type"), $asm01.TypeRef("System.IFormatProvider")], []), 
    function DateTime_IConvertible_ToType (targetType, provider) {
      if (targetType === null) {
        throw new ($T21())("targetType");
      }
      if (targetType === $thisType.__Type__) {
        var result = this.MemberwiseClone();
      } else if (targetType === $T01().__Type__) {
        result = $sig.get(0x49B, $asm01.System.String, [$asm01.System.IFormatProvider], []).CallVirtual("ToString", null, this, provider);
      } else {
        if (targetType !== $T16().__Type__) {
          throw new ($T22())();
        }
        result = this.MemberwiseClone();
      }
      return result;
    }
  );

  $.Method({Static:false, Public:false}, "IConvertible.ToUInt16", 
    $sig.make(0x4D0, $asm01.TypeRef("System.UInt16"), [$asm01.TypeRef("System.IFormatProvider")], []), 
    function DateTime_IConvertible_ToUInt16 (provider) {
      throw new ($T22())();
    }
  );

  $.Method({Static:false, Public:false}, "IConvertible.ToUInt32", 
    $sig.make(0x4D1, $asm01.TypeRef("System.UInt32"), [$asm01.TypeRef("System.IFormatProvider")], []), 
    function DateTime_IConvertible_ToUInt32 (provider) {
      throw new ($T22())();
    }
  );

  $.Method({Static:false, Public:false}, "IConvertible.ToUInt64", 
    $sig.make(0x4D2, $asm01.TypeRef("System.UInt64"), [$asm01.TypeRef("System.IFormatProvider")], []), 
    function DateTime_IConvertible_ToUInt64 (provider) {
      throw new ($T22())();
    }
  );

  $.Method({Static:false, Public:true }, "ToBinary", 
    $sig.make(0x43C, $asm01.TypeRef("System.Int64"), [], []), 
    function DateTime_ToBinary () {
      if (!$T00().op_Equality(
          $T00().op_BitwiseAnd(this.encoded, $T00().Create(0, 0, 32768)), 
          $T00().Create(0, 0, 0)
        )) {
        var result = $T00().op_BitwiseOr(
          this.ToUniversalTime().get_Ticks(), 
          $T00().Create(0, 0, 32768)
        );
      } else {
        result = this.encoded;
      }
      return result;
    }
  );

  $.Method({Static:false, Public:true }, "ToFileTime", 
    $sig.make(0x48B, $asm01.TypeRef("System.Int64"), [], []), 
    function DateTime_ToFileTime () {
      var universalTime = this.ToUniversalTime();
      if (!$T00().op_GreaterThanOrEqual(
          universalTime.get_Ticks(), 
          $T00().Create(7798784, 13506338, 1793)
        )) {
        throw new ($T03())("file time is not valid");
      }
      return $T00().op_Subtraction(
        universalTime.get_Ticks(), 
        $T00().Create(7798784, 13506338, 1793)
      );
    }
  );

  $.Method({Static:false, Public:true }, "ToFileTimeUtc", 
    $sig.make(0x48D, $asm01.TypeRef("System.Int64"), [], []), 
    function DateTime_ToFileTimeUtc () {
      if (!$T00().op_GreaterThanOrEqual(
          this.get_Ticks(), 
          $T00().Create(7798784, 13506338, 1793)
        )) {
        throw new ($T03())("file time is not valid");
      }
      return $T00().op_Subtraction(
        this.get_Ticks(), 
        $T00().Create(7798784, 13506338, 1793)
      );
    }
  );

  $.Method({Static:false, Public:true }, "ToLocalTime", 
    $sig.make(0x4A2, $.Type, [], []), 
    function DateTime_ToLocalTime () {
      return $T1C().get_CurrentTimeZone().ToLocalTime(this.MemberwiseClone());
    }
  );

  $.Method({Static:false, Public:true }, "ToLongDateString", 
    $sig.make(0x48F, $asm01.TypeRef("System.String"), [], []), 
    function DateTime_ToLongDateString () {
      return $sig.get(0x49F, $asm01.System.String, [$asm01.System.String], []).CallVirtual("ToString", null, this, "D");
    }
  );

  $.Method({Static:false, Public:true }, "ToLongTimeString", 
    $sig.make(0x490, $asm01.TypeRef("System.String"), [], []), 
    function DateTime_ToLongTimeString () {
      return $sig.get(0x49F, $asm01.System.String, [$asm01.System.String], []).CallVirtual("ToString", null, this, "T");
    }
  );

  $.Method({Static:false, Public:true }, "ToOADate", 
    $sig.make(0x492, $asm01.TypeRef("System.Double"), [], []), 
    function DateTime_ToOADate () {
      var ts = new ($T04())();
      var t = this.get_Ticks();
      if (!$T00().op_Inequality(t, $T00().Create(0, 0, 0))) {
        var result2 = 0;
      } else if (!$T00().op_GreaterThanOrEqual(t, $T00().Create(11560960, 16688805, 110))) {
        result2 = -657434.999;
      } else {
        $T04().prototype._ctor.call(ts, $T00().op_Subtraction(
            this.get_Ticks(), 
            $T00().Create(8634368, 245963, 2129)
          ));
        var result = ts.get_TotalDays();
        if (!$T00().op_GreaterThanOrEqual(t, $T00().Create(8634368, 245963, 2129))) {
          var d = (Math.ceil(result));
          result = ((d - 2) - (result - d));
        } else if (result >= 2958466) {
          result = 2958465.99999999;
        }
        result2 = result;
      }
      return result2;
    }
  );

  $.Method({Static:false, Public:true }, "ToShortDateString", 
    $sig.make(0x494, $asm01.TypeRef("System.String"), [], []), 
    function DateTime_ToShortDateString () {
      return $sig.get(0x49F, $asm01.System.String, [$asm01.System.String], []).CallVirtual("ToString", null, this, "d");
    }
  );

  $.Method({Static:false, Public:true }, "ToShortTimeString", 
    $sig.make(0x495, $asm01.TypeRef("System.String"), [], []), 
    function DateTime_ToShortTimeString () {
      return $sig.get(0x49F, $asm01.System.String, [$asm01.System.String], []).CallVirtual("ToString", null, this, "t");
    }
  );

  $.Method({Static:false, Public:true }, "toString", 
    $sig.make(0x498, $asm01.TypeRef("System.String"), [], []), 
    function DateTime_toString () {
      return this.ToString("G", null);
    }
  );

  $.Method({Static:false, Public:true }, "ToString", 
    $sig.make(0x49B, $asm01.TypeRef("System.String"), [$asm01.TypeRef("System.IFormatProvider")], []), 
    function DateTime_ToString (provider) {
      return this.ToString(null, provider);
    }
  );

  $.Method({Static:false, Public:true }, "ToString", 
    $sig.make(0x49F, $asm01.TypeRef("System.String"), [$asm01.TypeRef("System.String")], []), 
    function DateTime_ToString (format) {
      return this.ToString(format, null);
    }
  );

  $.Method({Static:false, Public:true }, "ToString", 
    $sig.make(0x4A1, $asm01.TypeRef("System.String"), [$asm01.TypeRef("System.String"), $asm01.TypeRef("System.IFormatProvider")], []), 
    function DateTime_ToString (format, provider) {
      var dfi = $T09().GetInstance(provider);
      if (!((format !== null) && !(format == $T01().Empty))) {
        format = "G";
      }
      var useutc = new JSIL.Variable(false);
      var use_invariant = new JSIL.Variable(false);
      if (format.length === 1) {
        var fchar = (format[0]);
        format = $T0B().GetStandardPattern(fchar, dfi, /* ref */ useutc, /* ref */ use_invariant);
        if (fchar.charCodeAt(0) === "U".charCodeAt(0)) {
          var result = $T0B().ToString(this.ToUniversalTime().MemberwiseClone(), format, dfi);
          return result;
        }
        if (format === null) {
          throw new ($T19())("format is not one of the format specifier characters defined for DateTimeFormatInfo");
        }
      }
      result = $T0B().ToString(this.MemberwiseClone(), format, dfi);
      return result;
    }
  );

  $.Method({Static:false, Public:true }, "ToUniversalTime", 
    $sig.make(0x4A3, $.Type, [], []), 
    function DateTime_ToUniversalTime () {
      return $T1C().get_CurrentTimeZone().ToUniversalTime(this.MemberwiseClone());
    }
  );

  $.Method({Static:true , Public:true }, "TryParse", 
    $sig.make(0x47B, $asm01.TypeRef("System.Boolean"), [$asm01.TypeRef("System.String"), $jsilcore.TypeRef("JSIL.Reference", [$.Type])], []), 
    function DateTime_TryParse (s, /* ref */ result) {
      var dto = new JSIL.Variable(new ($T08())());
      var exception = new JSIL.Variable(null);
      if (s !== null) {
        try {
          exception.value = null;
          var result2 = $thisType.CoreParse(
            s, 
            null, 
            $T0A().AllowWhiteSpaces, 
            /* ref */ result, 
            /* ref */ dto, 
            false, 
            /* ref */ exception
          );
          return result2;
        } catch ($exception) {
        }
      }
      result.value = $thisType.MinValue.MemberwiseClone();
      result2 = false;
      return result2;
    }
  );

  $.Method({Static:true , Public:true }, "TryParse", 
    $sig.make(0x47D, $asm01.TypeRef("System.Boolean"), [
        $asm01.TypeRef("System.String"), $asm01.TypeRef("System.IFormatProvider"), 
        $asm01.TypeRef("System.Globalization.DateTimeStyles"), $jsilcore.TypeRef("JSIL.Reference", [$.Type])
      ], []), 
    function DateTime_TryParse (s, provider, styles, /* ref */ result) {
      var dto = new JSIL.Variable(new ($T08())());
      var exception = new JSIL.Variable(null);
      if (s !== null) {
        try {
          exception.value = null;
          var result2 = $thisType.CoreParse(
            s, 
            provider, 
            styles, 
            /* ref */ result, 
            /* ref */ dto, 
            false, 
            /* ref */ exception
          );
          return result2;
        } catch ($exception) {
        }
      }
      result.value = $thisType.MinValue.MemberwiseClone();
      result2 = false;
      return result2;
    }
  );

  $.Method({Static:true , Public:true }, "TryParseExact", 
    $sig.make(0x47E, $asm01.TypeRef("System.Boolean"), [
        $asm01.TypeRef("System.String"), $asm01.TypeRef("System.String"), 
        $asm01.TypeRef("System.IFormatProvider"), $asm01.TypeRef("System.Globalization.DateTimeStyles"), 
        $jsilcore.TypeRef("JSIL.Reference", [$.Type])
      ], []), 
    function DateTime_TryParseExact (s, format, provider, style, /* ref */ result) {
      return $sig.get(0x481, $asm01.System.Boolean, [
          $asm01.System.String, System.Array.Of($asm01.System.String), 
          $asm01.System.IFormatProvider, $asm01.System.Globalization.DateTimeStyles, 
          JSIL.Reference.Of($thisType)
        ], []).CallStatic($thisType, "TryParseExact", null, 
        s, 
        JSIL.Array.New($T01(), [format]), 
        provider, 
        style, 
        /* ref */ result
      );
    }
  );

  $.Method({Static:true , Public:true }, "TryParseExact", 
    $sig.make(0x481, $asm01.TypeRef("System.Boolean"), [
        $asm01.TypeRef("System.String"), $jsilcore.TypeRef("System.Array", [$asm01.TypeRef("System.String")]), 
        $asm01.TypeRef("System.IFormatProvider"), $asm01.TypeRef("System.Globalization.DateTimeStyles"), 
        $jsilcore.TypeRef("JSIL.Reference", [$.Type])
      ], []), 
    function DateTime_TryParseExact (s, formats, provider, style, /* ref */ result) {
      var longYear = new JSIL.Variable(false);
      var e = new JSIL.Variable(null);
      try {
        var dfi = $T09().GetInstance(provider);
        longYear.value = false;
        e.value = null;
        var result2 = $thisType.ParseExact(
          s, 
          formats, 
          dfi, 
          style, 
          /* ref */ result, 
          true, 
          /* ref */ longYear, 
          false, 
          /* ref */ e
        );
      } catch ($exception) {
        result.value = $thisType.MinValue.MemberwiseClone();
        result2 = false;
      }
      return result2;
    }
  );

  $.Method({Static:true , Public:false}, "YearMonthDayFormats", 
    $sig.make(0x463, $jsilcore.TypeRef("System.Array", [$asm01.TypeRef("System.String")]), [$asm01.TypeRef("System.Globalization.DateTimeFormatInfo")], []), 
    function DateTime_YearMonthDayFormats (dfi) {
      var dayIndex = (dfi.get_ShortDatePattern().indexOf(p));
      var monthIndex = (dfi.get_ShortDatePattern().indexOf(p));
      var yearIndex = (dfi.get_ShortDatePattern().indexOf(p));
      if (!(!((dayIndex === -1) || 
            (monthIndex === -1)) && (yearIndex !== -1))) {
        var result = $thisType.ParseGenericYearMonthDayFormats;
      } else if (yearIndex < monthIndex) {
        if (monthIndex < dayIndex) {
          result = $thisType.ParseYearMonthDayFormats;
        } else if (yearIndex < dayIndex) {
          result = $thisType.ParseYearDayMonthFormats;
        } else {
          result = $thisType.ParseGenericYearMonthDayFormats;
        }
      } else if (dayIndex < monthIndex) {
        result = $thisType.ParseDayMonthYearFormats;
      } else if (dayIndex < yearIndex) {
        result = $thisType.ParseMonthDayYearFormats;
      } else {
        result = $thisType.ParseGenericYearMonthDayFormats;
      }
      return result;
    }
  );

  $.Constant({Static:true , Public:false}, "TicksMask", 4611686018427387903); 
  $.Constant({Static:true , Public:false}, "KindMask", -4611686018427387904); 
  $.Constant({Static:true , Public:false}, "KindShift", 62); 
  $.Constant({Static:true , Public:false}, "dp400", 146097); 
  $.Constant({Static:true , Public:false}, "dp100", 36524); 
  $.Constant({Static:true , Public:false}, "dp4", 1461); 
  $.Constant({Static:true , Public:false}, "w32file_epoch", 504911232000000000); 
  $.Constant({Static:true , Public:false}, "MAX_VALUE_TICKS", 3155378975999999999); 
  $.Constant({Static:true , Public:false}, "UnixEpoch", 621355968000000000); 
  $.Constant({Static:true , Public:false}, "ticks18991230", 599264352000000000); 
  $.Constant({Static:true , Public:false}, "OAMinValue", -657435); 
  $.Constant({Static:true , Public:false}, "OAMaxValue", 2958466); 
  $.Constant({Static:true , Public:false}, "formatExceptionMessage", "String was not recognized as a valid DateTime."); 
  $.Field({Static:false, Public:false}, "encoded", $asm01.TypeRef("System.Int64")); 
  $.Field({Static:true , Public:true , ReadOnly:true }, "MaxValue", $.Type); 
  $.Field({Static:true , Public:true , ReadOnly:true }, "MinValue", $.Type); 
  $.Field({Static:true , Public:false, ReadOnly:true }, "ParseTimeFormats", $jsilcore.TypeRef("System.Array", [$asm01.TypeRef("System.String")])); 
  $.Field({Static:true , Public:false, ReadOnly:true }, "ParseYearDayMonthFormats", $jsilcore.TypeRef("System.Array", [$asm01.TypeRef("System.String")])); 
  $.Field({Static:true , Public:false, ReadOnly:true }, "ParseYearMonthDayFormats", $jsilcore.TypeRef("System.Array", [$asm01.TypeRef("System.String")])); 
  $.Field({Static:true , Public:false, ReadOnly:true }, "ParseDayMonthYearFormats", $jsilcore.TypeRef("System.Array", [$asm01.TypeRef("System.String")])); 
  $.Field({Static:true , Public:false, ReadOnly:true }, "ParseMonthDayYearFormats", $jsilcore.TypeRef("System.Array", [$asm01.TypeRef("System.String")])); 
  $.Field({Static:true , Public:false, ReadOnly:true }, "ParseGenericYearMonthDayFormats", $jsilcore.TypeRef("System.Array", [$asm01.TypeRef("System.String")])); 
  $.Field({Static:true , Public:false, ReadOnly:true }, "MonthDayShortFormats", $jsilcore.TypeRef("System.Array", [$asm01.TypeRef("System.String")])); 
  $.Field({Static:true , Public:false, ReadOnly:true }, "DayMonthShortFormats", $jsilcore.TypeRef("System.Array", [$asm01.TypeRef("System.String")])); 
  $.Field({Static:true , Public:false, ReadOnly:true }, "daysmonth", $jsilcore.TypeRef("System.Array", [$asm01.TypeRef("System.Int32")])); 
  $.Field({Static:true , Public:false, ReadOnly:true }, "daysmonthleap", $jsilcore.TypeRef("System.Array", [$asm01.TypeRef("System.Int32")])); 
  $.Field({Static:true , Public:false}, "to_local_time_span_object", $asm01.TypeRef("System.Object")); 
  $.Field({Static:true , Public:false}, "last_now", $asm01.TypeRef("System.Int64"), function ($pi) {
      return $asm01.System.Int64.FromNumber(0);
    }); 
  $.Method({Static:true , Public:false}, ".cctor", 
    $sig.make(0x4D3, null, [], []), 
    function DateTime__cctor () {
      $thisType.MaxValue = new $thisType();
      $thisType.MinValue = new $thisType();
      $thisType.MaxValue = new $thisType($T00().Create(3620863, 2651636, 11210));
      $thisType.MinValue = new $thisType($T00().Create(0, 0, 0));
      $thisType.ParseTimeFormats = JSIL.Array.New($T01(), ["H:m:s.fff zzz", "H:m:s.fffffffzzz", "H:m:s.fffffff", "H:m:s.ffffff", "H:m:s.fffff", "H:m:s.ffff", "H:m:s.fff", "H:m:s.ff", "H:m:s.f", "H:m:s tt zzz", "H:m:szzz", "H:m:s", "H:mzzz", "H:m", "H tt", "H'\u6642'm'\u5206's'\u79d2'"]);
      $thisType.ParseYearDayMonthFormats = JSIL.Array.New($T01(), ["yyyy/M/dT", "M/yyyy/dT", "yyyy'\u5e74'M'\u6708'd'\u65e5", "yyyy/d/MMMM", "yyyy/MMM/d", "d/MMMM/yyyy", "MMM/d/yyyy", "d/yyyy/MMMM", "MMM/yyyy/d", "yy/d/M"]);
      $thisType.ParseYearMonthDayFormats = JSIL.Array.New($T01(), ["yyyy/M/dT", "M/yyyy/dT", "yyyy'\u5e74'M'\u6708'd'\u65e5", "yyyy/MMMM/d", "yyyy/d/MMM", "MMMM/d/yyyy", "d/MMM/yyyy", "MMMM/yyyy/d", "d/yyyy/MMM", "yy/MMMM/d", "yy/d/MMM", "MMM/yy/d"]);
      $thisType.ParseDayMonthYearFormats = JSIL.Array.New($T01(), ["yyyy/M/dT", "M/yyyy/dT", "yyyy'\u5e74'M'\u6708'd'\u65e5", "yyyy/MMMM/d", "yyyy/d/MMM", "d/MMMM/yyyy", "MMM/d/yyyy", "MMMM/yyyy/d", "d/yyyy/MMM", "d/MMMM/yy", "yy/MMM/d", "d/yy/MMM", "yy/d/MMM", "MMM/d/yy", "MMM/yy/d"]);
      $thisType.ParseMonthDayYearFormats = JSIL.Array.New($T01(), ["yyyy/M/dT", "M/yyyy/dT", "yyyy'\u5e74'M'\u6708'd'\u65e5", "yyyy/MMMM/d", "yyyy/d/MMM", "MMMM/d/yyyy", "d/MMM/yyyy", "MMMM/yyyy/d", "d/yyyy/MMM", "MMMM/d/yy", "MMM/yy/d", "d/MMM/yy", "yy/MMM/d", "d/yy/MMM", "yy/d/MMM"]);
      $thisType.ParseGenericYearMonthDayFormats = JSIL.Array.New($T01(), ["yyyy/M/dT", "yyyy/M/d", "M/yyyy/dT", "M/yyyy/d", "yyyy'\u5e74'M'\u6708'd'\u65e5", "yyyy'-'M'-'dT", "yyyy'-'M'-'d"]);
      $thisType.MonthDayShortFormats = JSIL.Array.New($T01(), ["MMMM/d", "d/MMM", "yyyy/MMMM"]);
      $thisType.DayMonthShortFormats = JSIL.Array.New($T01(), ["d/MMMM", "MMM/yy", "yyyy/MMMM"]);
      $thisType.daysmonth = JSIL.Array.New($T02(), [0, 31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]);
      $thisType.daysmonthleap = JSIL.Array.New($T02(), [0, 31, 29, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]);
      $thisType.last_now = $T00().Create(0, 0, 0);
    }
  );

  $.Property({Static:false, Public:true }, "Date", $.Type);

  $.Property({Static:false, Public:true }, "Month", $asm01.TypeRef("System.Int32"));

  $.Property({Static:false, Public:true }, "Day", $asm01.TypeRef("System.Int32"));

  $.Property({Static:false, Public:true }, "DayOfWeek", $asm01.TypeRef("System.DayOfWeek"));

  $.Property({Static:false, Public:true }, "DayOfYear", $asm01.TypeRef("System.Int32"));

  $.Property({Static:false, Public:true }, "TimeOfDay", $asm01.TypeRef("System.TimeSpan"));

  $.Property({Static:false, Public:true }, "Hour", $asm01.TypeRef("System.Int32"));

  $.Property({Static:false, Public:true }, "Minute", $asm01.TypeRef("System.Int32"));

  $.Property({Static:false, Public:true }, "Second", $asm01.TypeRef("System.Int32"));

  $.Property({Static:false, Public:true }, "Millisecond", $asm01.TypeRef("System.Int32"));

  $.Property({Static:true , Public:true }, "Now", $.Type);

  $.Property({Static:false, Public:true }, "Ticks", $asm01.TypeRef("System.Int64"));

  $.Property({Static:true , Public:true }, "Today", $.Type);

  $.Property({Static:true , Public:true }, "UtcNow", $.Type);

  $.Property({Static:false, Public:true }, "Year", $asm01.TypeRef("System.Int32"));

  $.Property({Static:false, Public:true }, "Kind", $asm01.TypeRef("System.DateTimeKind"));

  $.ImplementInterfaces(
      $asm01.TypeRef("System.IFormattable"), $asm01.TypeRef("System.IConvertible"), 
      $asm01.TypeRef("System.IComparable"), $asm01.TypeRef("System.Runtime.Serialization.ISerializable"), 
      $asm01.TypeRef("System.IComparable`1", [$.Type]), $asm01.TypeRef("System.IEquatable`1", [$.Type])
  )
});

JSIL.MakeEnum(
  "System.DateTime/Which", false, {
    Day: 0, 
    DayYear: 1, 
    Month: 2, 
    Year: 3
  }, false
);

JSIL.MakeDelegate("System.Comparison`1", true, ["T"]);

JSIL.MakeClass($asm01.TypeRef("System.Object"), "System.Runtime.ConstrainedExecution.CriticalFinalizerObject", true, [], function ($) {
  var $thisType = $.publicInterface;

  $.Method({Static:false, Public:false}, ".ctor", 
    $sig.make(0xB87, null, [], []), 
    function CriticalFinalizerObject__ctor () {
    }
  )
    .Attribute($asm01.TypeRef("System.Runtime.ConstrainedExecution.ReliabilityContractAttribute"), function () { return [$asm01.System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, $asm01.System.Runtime.ConstrainedExecution.Cer.MayFail]; });

  $.Method({Static:false, Public:false}, "Finalize", 
    $sig.make(0xB89, null, [], []), 
    function CriticalFinalizerObject_Finalize () {
    }
  )
    .Attribute($asm01.TypeRef("System.Runtime.ConstrainedExecution.ReliabilityContractAttribute"), function () { return [$asm01.System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, $asm01.System.Runtime.ConstrainedExecution.Cer.Success]; });

})
  .Attribute($asm01.TypeRef("System.Runtime.InteropServices.ComVisibleAttribute"), function () { return [true]; });

JSIL.MakeEnum(
  "System.Runtime.CompilerServices.MethodImplOptions", true, {
    Unmanaged: 4, 
    NoInlining: 8, 
    ForwardRef: 16, 
    Synchronized: 32, 
    NoOptimization: 64, 
    PreserveSig: 128, 
    InternalCall: 4096
  }, false
);

JSIL.MakeStaticClass("System.Runtime.CompilerServices.IsVolatile", true, [], function ($) {
  var $thisType = $.publicInterface;

})
  .Attribute($asm01.TypeRef("System.Runtime.InteropServices.ComVisibleAttribute"), function () { return [true]; });

JSIL.DeclareNamespace("System.Collections.ObjectModel");
JSIL.MakeClass($asm01.TypeRef("System.Object"), "System.Collections.ObjectModel.Collection`1", true, ["T"], function ($) {
  var $thisType = $.publicInterface;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm01.System.ArgumentNullException)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm01.System.Collections.ICollection)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm01.System.Object)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm01.System.Int32)) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize($asm01.System.NotSupportedException)) ();
  };
  var $T05 = function () {
    return ($T05 = JSIL.Memoize($asm01.System.ArgumentException)) ();
  };
  var $T06 = function () {
    return ($T06 = JSIL.Memoize($asm01.System.Collections.IList)) ();
  };
  var $T07 = function () {
    return ($T07 = JSIL.Memoize($asm01.System.Boolean)) ();
  };
  var $T08 = function () {
    return ($T08 = JSIL.Memoize($asm01.System.Array)) ();
  };

  $.Method({Static:false, Public:true }, ".ctor", 
    $sig.make(0xC2F, null, [], []), 
    function Collection$b1__ctor () {
      var i = new ($asm01.System.Collections.Generic.List$b1.Of($thisType.T.get(this))) ();
      this.syncRoot = i.ICollection_get_SyncRoot();
      this.list = i;
    }
  );

  $.Method({Static:false, Public:true }, ".ctor", 
    $sig.make(0xC34, null, [$asm01.TypeRef("System.Collections.Generic.IList`1", [new JSIL.GenericParameter("T", "System.Collections.ObjectModel.Collection`1")])], []), 
    function Collection$b1__ctor (list) {
      if (list === null) {
        throw new ($T00())("list");
      }
      this.list = list;
      var i = $T01().$As(list);
      this.syncRoot = ((i !== null) ? i.ICollection_get_SyncRoot() : new ($T02())());
    }
  );

  $.Method({Static:false, Public:true }, "Add", 
    $sig.make(0xC3A, null, [new JSIL.GenericParameter("T", "System.Collections.ObjectModel.Collection`1")], []), 
    function Collection$b1_Add (item) {
      var idx = this.list.ICollection$b1_get_Count();
      (new JSIL.MethodSignature(null, [$asm01.System.Int32, $thisType.T.get(this)], [])).CallVirtual("InsertItem", null, this, idx, item);
    }
  );

  $.Method({Static:true , Public:false}, "CheckWritable", 
    $sig.make(0xC60, null, [$asm01.TypeRef("System.Collections.Generic.IList`1", [new JSIL.GenericParameter("T", "System.Collections.ObjectModel.Collection`1")])], []), 
    function Collection$b1_CheckWritable (list) {
      if (list.ICollection$b1_get_IsReadOnly()) {
        throw new ($T04())();
      }
    }
  );

  $.Method({Static:false, Public:true }, "Clear", 
    $sig.make(0xC3C, null, [], []), 
    function Collection$b1_Clear () {
      this.ClearItems();
    }
  );

  $.Method({Static:false, Public:false}, "ClearItems", 
    $sig.make(0xC42, null, [], []), 
    function Collection$b1_ClearItems () {
      this.list.ICollection$b1_Clear();
    }
  );

  $.Method({Static:false, Public:true }, "Contains", 
    $sig.make(0xC45, $asm01.TypeRef("System.Boolean"), [new JSIL.GenericParameter("T", "System.Collections.ObjectModel.Collection`1")], []), 
    function Collection$b1_Contains (item) {
      return this.list.ICollection$b1_Contains(item);
    }
  );

  $.Method({Static:true , Public:false}, "ConvertItem", 
    $sig.make(0xC5F, new JSIL.GenericParameter("T", "System.Collections.ObjectModel.Collection`1"), [$asm01.TypeRef("System.Object")], []), 
    function Collection$b1_ConvertItem (item) {
      if ($thisType.Of($thisType.T.get(this)).IsValidItem(item)) {
        return $thisType.T.get(this).$Cast(item);
      }
      throw new ($T05())("item");
    }
  );

  $.Method({Static:false, Public:true }, "CopyTo", 
    $sig.make(0xC48, null, [$jsilcore.TypeRef("System.Array", [new JSIL.GenericParameter("T", "System.Collections.ObjectModel.Collection`1")]), $asm01.TypeRef("System.Int32")], []), 
    function Collection$b1_CopyTo (array, index) {
      this.list.ICollection$b1_CopyTo(array, index);
    }
  );

  $.Method({Static:false, Public:true }, "get_Count", 
    $sig.make(0xBFA, $asm01.TypeRef("System.Int32"), [], []), 
    function Collection$b1_get_Count () {
      return this.list.ICollection$b1_get_Count();
    }
  );

  $.Method({Static:false, Public:true }, "get_Item", 
    $sig.make(0xBFD, new JSIL.GenericParameter("T", "System.Collections.ObjectModel.Collection`1"), [$asm01.TypeRef("System.Int32")], []), 
    function Collection$b1_get_Item (index) {
      return this.list.IList$b1_get_Item(index);
    }
  );

  $.Method({Static:false, Public:false}, "get_Items", 
    $sig.make(0xBF8, $asm01.TypeRef("System.Collections.Generic.IList`1", [new JSIL.GenericParameter("T", "System.Collections.ObjectModel.Collection`1")]), [], []), 
    function Collection$b1_get_Items () {
      return this.list;
    }
  );

  $.Method({Static:false, Public:true }, "GetEnumerator", 
    $sig.make(0xC4C, $asm01.TypeRef("System.Collections.Generic.IEnumerator`1", [new JSIL.GenericParameter("T", "System.Collections.ObjectModel.Collection`1")]), [], []), 
    function Collection$b1_GetEnumerator () {
      return this.list.IEnumerable$b1_GetEnumerator();
    }
  );

  $.Method({Static:false, Public:true }, "IndexOf", 
    $sig.make(0xC4E, $asm01.TypeRef("System.Int32"), [new JSIL.GenericParameter("T", "System.Collections.ObjectModel.Collection`1")], []), 
    function Collection$b1_IndexOf (item) {
      return this.list.IList$b1_IndexOf(item);
    }
  );

  $.Method({Static:false, Public:true }, "Insert", 
    $sig.make(0xC55, null, [$asm01.TypeRef("System.Int32"), new JSIL.GenericParameter("T", "System.Collections.ObjectModel.Collection`1")], []), 
    function Collection$b1_Insert (index, item) {
      (new JSIL.MethodSignature(null, [$asm01.System.Int32, $thisType.T.get(this)], [])).CallVirtual("InsertItem", null, this, index, item);
    }
  );

  $.Method({Static:false, Public:false}, "InsertItem", 
    $sig.make(0xC57, null, [$asm01.TypeRef("System.Int32"), new JSIL.GenericParameter("T", "System.Collections.ObjectModel.Collection`1")], []), 
    function Collection$b1_InsertItem (index, item) {
      this.list.IList$b1_Insert(index, item);
    }
  );

  $.Method({Static:true , Public:false}, "IsFixedSize", 
    $sig.make(0xC62, $asm01.TypeRef("System.Boolean"), [$asm01.TypeRef("System.Collections.Generic.IList`1", [new JSIL.GenericParameter("T", "System.Collections.ObjectModel.Collection`1")])], []), 
    function Collection$b1_IsFixedSize (list) {
      var i = $T06().$As(list);
      return ((i !== null) && i.IList_get_IsFixedSize());
    }
  );

  $.Method({Static:true , Public:false}, "IsSynchronized", 
    $sig.make(0xC61, $asm01.TypeRef("System.Boolean"), [$asm01.TypeRef("System.Collections.Generic.IList`1", [new JSIL.GenericParameter("T", "System.Collections.ObjectModel.Collection`1")])], []), 
    function Collection$b1_IsSynchronized (list) {
      var c = $T01().$As(list);
      return ((c !== null) && c.ICollection_get_IsSynchronized());
    }
  );

  $.Method({Static:true , Public:false}, "IsValidItem", 
    $sig.make(0xC5E, $asm01.TypeRef("System.Boolean"), [$asm01.TypeRef("System.Object")], []), 
    function Collection$b1_IsValidItem (item) {
      return (($thisType.T.get(this).$As(item) !== null) || ((item === null) && 
          !$thisType.T.get(this).Type$IsValueType$value));
    }
  );

  $.Method({Static:false, Public:true }, "Remove", 
    $sig.make(0xC59, $asm01.TypeRef("System.Boolean"), [new JSIL.GenericParameter("T", "System.Collections.ObjectModel.Collection`1")], []), 
    function Collection$b1_Remove (item) {
      var idx = this.IndexOf(item);
      if (idx === -1) {
        var result = false;
      } else {
        this.RemoveItem(idx);
        result = true;
      }
      return result;
    }
  );

  $.Method({Static:false, Public:true }, "RemoveAt", 
    $sig.make(0xC5B, null, [$asm01.TypeRef("System.Int32")], []), 
    function Collection$b1_RemoveAt (index) {
      this.RemoveItem(index);
    }
  );

  $.Method({Static:false, Public:false}, "RemoveItem", 
    $sig.make(0xC5C, null, [$asm01.TypeRef("System.Int32")], []), 
    function Collection$b1_RemoveItem (index) {
      this.list.IList$b1_RemoveAt(index);
    }
  );

  $.Method({Static:false, Public:true }, "set_Item", 
    $sig.make(0xBFF, null, [$asm01.TypeRef("System.Int32"), new JSIL.GenericParameter("T", "System.Collections.ObjectModel.Collection`1")], []), 
    function Collection$b1_set_Item (index, value) {
      (new JSIL.MethodSignature(null, [$asm01.System.Int32, $thisType.T.get(this)], [])).CallVirtual("SetItem", null, this, index, value);
    }
  );

  $.Method({Static:false, Public:false}, "SetItem", 
    $sig.make(0xC5D, null, [$asm01.TypeRef("System.Int32"), new JSIL.GenericParameter("T", "System.Collections.ObjectModel.Collection`1")], []), 
    function Collection$b1_SetItem (index, item) {
      this.list.IList$b1_set_Item(index, item);
    }
  );

  $.Method({Static:false, Public:false}, "ICollection`1.get_IsReadOnly", 
    $sig.make(0xC04, $asm01.TypeRef("System.Boolean"), [], []), 
    function Collection$b1_ICollection$b1_get_IsReadOnly () {
      return this.list.ICollection$b1_get_IsReadOnly();
    }
  );

  $.Method({Static:false, Public:false}, "ICollection.CopyTo", 
    $sig.make(0xC63, null, [$asm01.TypeRef("System.Array"), $asm01.TypeRef("System.Int32")], []), 
    function Collection$b1_ICollection_CopyTo (array, index) {
      $T01().$Cast(this.list).ICollection_CopyTo(array, index);
    }
  );

  $.Method({Static:false, Public:false}, "ICollection.get_IsSynchronized", 
    $sig.make(0xC0B, $asm01.TypeRef("System.Boolean"), [], []), 
    function Collection$b1_ICollection_get_IsSynchronized () {
      return $thisType.Of($thisType.T.get(this)).IsSynchronized(this.list);
    }
  );

  $.Method({Static:false, Public:false}, "ICollection.get_SyncRoot", 
    $sig.make(0xC13, $asm01.TypeRef("System.Object"), [], []), 
    function Collection$b1_ICollection_get_SyncRoot () {
      return this.syncRoot;
    }
  );

  $.Method({Static:false, Public:false}, "IEnumerable.GetEnumerator", 
    $sig.make(0xC91, $asm01.TypeRef("System.Collections.IEnumerator"), [], []), 
    function Collection$b1_IEnumerable_GetEnumerator () {
      return this.list.IEnumerable$b1_GetEnumerator();
    }
  );

  $.Method({Static:false, Public:false}, "IList.Add", 
    $sig.make(0xC94, $asm01.TypeRef("System.Int32"), [$asm01.TypeRef("System.Object")], []), 
    function Collection$b1_IList_Add (value) {
      var idx = this.list.ICollection$b1_get_Count();
      (new JSIL.MethodSignature(null, [$asm01.System.Int32, $thisType.T.get(this)], [])).CallVirtual("InsertItem", null, this, idx, JSIL.CloneParameter($thisType.T.get(this), $thisType.Of($thisType.T.get(this)).ConvertItem(value)));
      return idx;
    }
  );

  $.Method({Static:false, Public:false}, "IList.Contains", 
    $sig.make(0xC97, $asm01.TypeRef("System.Boolean"), [$asm01.TypeRef("System.Object")], []), 
    function Collection$b1_IList_Contains (value) {
      return ($thisType.Of($thisType.T.get(this)).IsValidItem(value) && this.list.ICollection$b1_Contains(JSIL.CloneParameter($thisType.T.get(this), $thisType.T.get(this).$Cast(value))));
    }
  );

  $.Method({Static:false, Public:false}, "IList.get_IsFixedSize", 
    $sig.make(0xC19, $asm01.TypeRef("System.Boolean"), [], []), 
    function Collection$b1_IList_get_IsFixedSize () {
      return $thisType.Of($thisType.T.get(this)).IsFixedSize(this.list);
    }
  );

  $.Method({Static:false, Public:false}, "IList.get_IsReadOnly", 
    $sig.make(0xC1E, $asm01.TypeRef("System.Boolean"), [], []), 
    function Collection$b1_IList_get_IsReadOnly () {
      return this.list.ICollection$b1_get_IsReadOnly();
    }
  );

  $.Method({Static:false, Public:false}, "IList.get_Item", 
    $sig.make(0xC28, $asm01.TypeRef("System.Object"), [$asm01.TypeRef("System.Int32")], []), 
    function Collection$b1_IList_get_Item (index) {
      return this.list.IList$b1_get_Item(index);
    }
  );

  $.Method({Static:false, Public:false}, "IList.IndexOf", 
    $sig.make(0xC99, $asm01.TypeRef("System.Int32"), [$asm01.TypeRef("System.Object")], []), 
    function Collection$b1_IList_IndexOf (value) {
      if ($thisType.Of($thisType.T.get(this)).IsValidItem(value)) {
        var result = this.list.IList$b1_IndexOf(JSIL.CloneParameter($thisType.T.get(this), $thisType.T.get(this).$Cast(value)));
      } else {
        result = -1;
      }
      return result;
    }
  );

  $.Method({Static:false, Public:false}, "IList.Insert", 
    $sig.make(0xC9B, null, [$asm01.TypeRef("System.Int32"), $asm01.TypeRef("System.Object")], []), 
    function Collection$b1_IList_Insert (index, value) {
      (new JSIL.MethodSignature(null, [$asm01.System.Int32, $thisType.T.get(this)], [])).CallVirtual("InsertItem", null, this, index, JSIL.CloneParameter($thisType.T.get(this), $thisType.Of($thisType.T.get(this)).ConvertItem(value)));
    }
  );

  $.Method({Static:false, Public:false}, "IList.Remove", 
    $sig.make(0xC9C, null, [$asm01.TypeRef("System.Object")], []), 
    function Collection$b1_IList_Remove (value) {
      $thisType.Of($thisType.T.get(this)).CheckWritable(this.list);
      var idx = this.IndexOf(JSIL.CloneParameter($thisType.T.get(this), $thisType.Of($thisType.T.get(this)).ConvertItem(value)));
      this.RemoveItem(idx);
    }
  );

  $.Method({Static:false, Public:false}, "IList.set_Item", 
    $sig.make(0xC2B, null, [$asm01.TypeRef("System.Int32"), $asm01.TypeRef("System.Object")], []), 
    function Collection$b1_IList_set_Item (index, value) {
      (new JSIL.MethodSignature(null, [$asm01.System.Int32, $thisType.T.get(this)], [])).CallVirtual("SetItem", null, this, index, JSIL.CloneParameter($thisType.T.get(this), $thisType.Of($thisType.T.get(this)).ConvertItem(value)));
    }
  );

  $.Field({Static:false, Public:false}, "list", $asm01.TypeRef("System.Collections.Generic.IList`1", [$.GenericParameter("T")])); 
  $.Field({Static:false, Public:false}, "syncRoot", $asm01.TypeRef("System.Object")); 
  $.Property({Static:false, Public:false}, "Items", $asm01.TypeRef("System.Collections.Generic.IList`1", [new JSIL.GenericParameter("T", "System.Collections.ObjectModel.Collection`1")]));

  $.Property({Static:false, Public:true , Virtual:true }, "Count", $asm01.TypeRef("System.Int32"));

  $.Property({Static:false, Public:true , Virtual:true }, "Item", new JSIL.GenericParameter("T", "System.Collections.ObjectModel.Collection`1"));

  $.Property({Static:false, Public:false, Virtual:true }, "ICollection`1.IsReadOnly", $asm01.TypeRef("System.Boolean"));

  $.Property({Static:false, Public:false, Virtual:true }, "ICollection.IsSynchronized", $asm01.TypeRef("System.Boolean"));

  $.Property({Static:false, Public:false, Virtual:true }, "ICollection.SyncRoot", $asm01.TypeRef("System.Object"));

  $.Property({Static:false, Public:false, Virtual:true }, "IList.IsFixedSize", $asm01.TypeRef("System.Boolean"));

  $.Property({Static:false, Public:false, Virtual:true }, "IList.IsReadOnly", $asm01.TypeRef("System.Boolean"));

  $.Property({Static:false, Public:false, Virtual:true }, "IList.Item", $asm01.TypeRef("System.Object"));

  $.ImplementInterfaces(
      $asm01.TypeRef("System.Collections.Generic.IList`1", [new JSIL.GenericParameter("T", "System.Collections.ObjectModel.Collection`1")]), $asm01.TypeRef("System.Collections.Generic.ICollection`1", [new JSIL.GenericParameter("T", "System.Collections.ObjectModel.Collection`1")]), 
      $asm01.TypeRef("System.Collections.Generic.IEnumerable`1", [new JSIL.GenericParameter("T", "System.Collections.ObjectModel.Collection`1")]), $asm01.TypeRef("System.Collections.IList"), 
      $asm01.TypeRef("System.Collections.ICollection"), $asm01.TypeRef("System.Collections.IEnumerable")
  )
})
  .Attribute($asm01.TypeRef("System.Reflection.DefaultMemberAttribute"), function () { return ["Item"]; })
  .Attribute($asm01.TypeRef("System.Diagnostics.DebuggerDisplayAttribute"), function () { return ["Count={Count}"]; })
  .Attribute($asm01.TypeRef("System.Diagnostics.DebuggerTypeProxyAttribute"), function () { return [$asm01.TypeRef("System.Collections.Generic.CollectionDebuggerView`1")]; })
  .Attribute($asm01.TypeRef("System.Runtime.InteropServices.ComVisibleAttribute"), function () { return [false]; });

JSIL.MakeInterface(
  "System.Collections.Generic.IEqualityComparer`1", true, ["T"], function ($) {
    $.Method({}, "Equals", $sig.make(0x426, $asm01.TypeRef("System.Boolean"), [new JSIL.GenericParameter("T", "System.Collections.Generic.IEqualityComparer`1"), new JSIL.GenericParameter("T", "System.Collections.Generic.IEqualityComparer`1")], []));
    $.Method({}, "GetHashCode", $sig.make(0x4AD, $asm01.TypeRef("System.Int32"), [new JSIL.GenericParameter("T", "System.Collections.Generic.IEqualityComparer`1")], []));
  }, []);

JSIL.DeclareNamespace("JSIL.Meta");
JSIL.MakeClass($asm01.TypeRef("System.Attribute"), "JSIL.Meta.JSIsPure", true, [], function ($) {
  var $thisType = $.publicInterface;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm01.System.Attribute)) ();
  };

  $.Method({Static:false, Public:true }, ".ctor", 
    $sig.make(0xCC6, null, [], []), 
    function JSIsPure__ctor () {
      $T00().prototype._ctor.call(this);
    }
  );

})
  .Attribute($asm01.TypeRef("System.AttributeUsageAttribute"), function () { return [224]; });

JSIL.MakeClass($asm01.TypeRef("System.Attribute"), "JSIL.Meta.JSMutatedArguments", true, [], function ($) {
  var $thisType = $.publicInterface;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize(System.Array.Of($asm01.System.String))) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm01.System.Attribute)) ();
  };

  $.Method({Static:false, Public:true }, ".ctor", 
    $sig.make(0xCEA, null, [$jsilcore.TypeRef("System.Array", [$asm01.TypeRef("System.String")])], []), 
    function JSMutatedArguments__ctor (argumentNames) {
      $T01().prototype._ctor.call(this);
    }
  );

})
  .Attribute($asm01.TypeRef("System.AttributeUsageAttribute"), function () { return [224]; });

JSIL.MakeClass($asm01.TypeRef("System.Attribute"), "JSIL.Meta.JSEscapingArguments", true, [], function ($) {
  var $thisType = $.publicInterface;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize(System.Array.Of($asm01.System.String))) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm01.System.Attribute)) ();
  };

  $.Method({Static:false, Public:true }, ".ctor", 
    $sig.make(0x78A, null, [$jsilcore.TypeRef("System.Array", [$asm01.TypeRef("System.String")])], []), 
    function JSEscapingArguments__ctor (argumentNames) {
      $T01().prototype._ctor.call(this);
    }
  );

})
  .Attribute($asm01.TypeRef("System.AttributeUsageAttribute"), function () { return [224]; });

JSIL.MakeStaticClass("System.Math", true, [], function ($) {
  var $thisType = $.publicInterface;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm01.System.Int32)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm01.System.Int64)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm01.System.Single)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm01.System.Double)) ();
  };

  $.Method({Static:true , Public:true }, "Abs", 
    $sig.make(0x7E2, $asm01.TypeRef("System.Int32"), [$asm01.TypeRef("System.Int32")], []), 
    function Math_Abs (value) {
      return $T00().$Cast(Math.abs(null));
    }
  );

  $.Method({Static:true , Public:true }, "Abs", 
    $sig.make(0x7E7, $asm01.TypeRef("System.Int64"), [$asm01.TypeRef("System.Int64")], []), 
    function Math_Abs (value) {
      return ($T01().op_LessThan(value, $T01().Create(0, 0, 0)) ? $T01().op_UnaryNegation(value) : value);
    }
  );

  $.Method({Static:true , Public:true }, "Abs", 
    $sig.make(0x7EC, $asm01.TypeRef("System.Single"), [$asm01.TypeRef("System.Single")], []), 
    function Math_Abs (value) {
      return $T02().$Cast(Math.abs(null));
    }
  );

  $.Method({Static:true , Public:true }, "Abs", 
    $sig.make(0x7EE, $asm01.TypeRef("System.Double"), [$asm01.TypeRef("System.Double")], []), 
    function Math_Abs (value) {
      return $T03().$Cast(Math.abs(null));
    }
  );

  $.Method({Static:true , Public:true }, "Log", 
    $sig.make(0x81F, $asm01.TypeRef("System.Double"), [$asm01.TypeRef("System.Double")], []), 
    function Math_Log () {
    }
  );

  $.ExternalMethod({Static:true , Public:true }, "Min", 
    $sig.make(0x7C5, "JSIL.AnyType", [$asm01.TypeRef("System.Array") /* AnyType[] */ ], [])
  )
    .Attribute($asm01.TypeRef("JSIL.Meta.JSExternal"))
    .Attribute($asm01.TypeRef("JSIL.Meta.JSRuntimeDispatch"));

  $.ExternalMethod({Static:true , Public:true }, "Min", 
    $sig.make(0x7C5, "JSIL.AnyType", [$asm01.TypeRef("System.Array") /* AnyType[] */ ], [])
  );

  $.Method({Static:true , Public:true }, "Pow", 
    $sig.make(0x816, $asm01.TypeRef("System.Double"), [$asm01.TypeRef("System.Double"), $asm01.TypeRef("System.Int32")], []), 
    function Math_Pow () {
    }
  );

});

JSIL.MakeClass($asm01.TypeRef("System.Attribute"), "System.Diagnostics.DebuggerDisplayAttribute", true, [], function ($) {
  var $thisType = $.publicInterface;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm01.System.String)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm01.System.Attribute)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm01.System.Type)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm01.System.ArgumentNullException)) ();
  };

  $.Method({Static:false, Public:true }, ".ctor", 
    $sig.make(0x88D, null, [$asm01.TypeRef("System.String")], []), 
    function DebuggerDisplayAttribute__ctor (value) {
      $T01().prototype._ctor.call(this);
      if (value === null) {
        value = $T00().Empty;
      }
      this.value = value;
      this.type = $T00().Empty;
      this.$name = $T00().Empty;
    }
  );

  $.Method({Static:false, Public:true }, "get_Name", 
    $sig.make(0x887, $asm01.TypeRef("System.String"), [], []), 
    function DebuggerDisplayAttribute_get_Name () {
      return this.$name;
    }
  );

  $.Method({Static:false, Public:true }, "get_Target", 
    $sig.make(0x870, $asm01.TypeRef("System.Type"), [], []), 
    function DebuggerDisplayAttribute_get_Target () {
      return this.target_type;
    }
  );

  $.Method({Static:false, Public:true }, "get_TargetTypeName", 
    $sig.make(0x879, $asm01.TypeRef("System.String"), [], []), 
    function DebuggerDisplayAttribute_get_TargetTypeName () {
      return this.target_type_name;
    }
  );

  $.Method({Static:false, Public:true }, "get_Type", 
    $sig.make(0x87D, $asm01.TypeRef("System.String"), [], []), 
    function DebuggerDisplayAttribute_get_Type () {
      return this.type;
    }
  );

  $.Method({Static:false, Public:true }, "get_Value", 
    $sig.make(0x86D, $asm01.TypeRef("System.String"), [], []), 
    function DebuggerDisplayAttribute_get_Value () {
      return this.value;
    }
  );

  $.Method({Static:false, Public:true }, "set_Name", 
    $sig.make(0x889, null, [$asm01.TypeRef("System.String")], []), 
    function DebuggerDisplayAttribute_set_Name (value) {
      this.$name = value;
    }
  );

  $.Method({Static:false, Public:true }, "set_Target", 
    $sig.make(0x873, null, [$asm01.TypeRef("System.Type")], []), 
    function DebuggerDisplayAttribute_set_Target (value) {
      if (value === null) {
        throw new ($T03())("value");
      }
      this.target_type = value;
      this.target_type_name = this.target_type.Type$AssemblyQualifiedName$value;
    }
  );

  $.Method({Static:false, Public:true }, "set_TargetTypeName", 
    $sig.make(0x87A, null, [$asm01.TypeRef("System.String")], []), 
    function DebuggerDisplayAttribute_set_TargetTypeName (value) {
      this.target_type_name = value;
    }
  );

  $.Method({Static:false, Public:true }, "set_Type", 
    $sig.make(0x87F, null, [$asm01.TypeRef("System.String")], []), 
    function DebuggerDisplayAttribute_set_Type (value) {
      this.type = value;
    }
  );

  $.Field({Static:false, Public:false}, "value", $asm01.TypeRef("System.String")); 
  $.Field({Static:false, Public:false}, "type", $asm01.TypeRef("System.String")); 
  $.Field({Static:false, Public:false}, "$name", $asm01.TypeRef("System.String")); 
  $.Field({Static:false, Public:false}, "target_type_name", $asm01.TypeRef("System.String")); 
  $.Field({Static:false, Public:false}, "target_type", $asm01.TypeRef("System.Type")); 
  $.Property({Static:false, Public:true }, "Value", $asm01.TypeRef("System.String"));

  $.Property({Static:false, Public:true }, "Target", $asm01.TypeRef("System.Type"));

  $.Property({Static:false, Public:true }, "TargetTypeName", $asm01.TypeRef("System.String"));

  $.Property({Static:false, Public:true }, "Type", $asm01.TypeRef("System.String"));

  $.Property({Static:false, Public:true }, "Name", $asm01.TypeRef("System.String"));

})
  .Attribute($asm01.TypeRef("System.AttributeUsageAttribute"), function () { return [4509]; })
  .Attribute($asm01.TypeRef("System.Runtime.InteropServices.ComVisibleAttribute"), function () { return [true]; });

JSIL.MakeEnum(
  "System.TypeCode", true, {
    Empty: 0, 
    Object: 1, 
    DBNull: 2, 
    Boolean: 3, 
    Char: 4, 
    SByte: 5, 
    Byte: 6, 
    Int16: 7, 
    UInt16: 8, 
    Int32: 9, 
    UInt32: 10, 
    Int64: 11, 
    UInt64: 12, 
    Single: 13, 
    Double: 14, 
    Decimal: 15, 
    DateTime: 16, 
    String: 18
  }, false
);

JSIL.MakeClass($asm01.TypeRef("System.Exception"), "System.TimeZoneNotFoundException", true, [], function ($) {
  var $thisType = $.publicInterface;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm01.System.Exception)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm01.System.String)) ();
  };

  $.Method({Static:false, Public:true }, ".ctor", 
    $sig.make(0x8CC, null, [], []), 
    function TimeZoneNotFoundException__ctor () {
      $T00().prototype._ctor.call(this);
    }
  );

  $.Method({Static:false, Public:true }, ".ctor", 
    $sig.make(0x8D0, null, [$asm01.TypeRef("System.String")], []), 
    function TimeZoneNotFoundException__ctor (message) {
      $T00().prototype._ctor.call(this, message);
    }
  );

  $.Method({Static:false, Public:true }, ".ctor", 
    $sig.make(0x8D3, null, [$asm01.TypeRef("System.String"), $asm01.TypeRef("System.Exception")], []), 
    function TimeZoneNotFoundException__ctor (message, innerException) {
      $sig.get(0x40B, null, [$asm01.System.String, $asm01.System.Exception], []).Call($T00().prototype, "_ctor", null, this, message, innerException);
    }
  );

});

JSIL.MakeEnum(
  "System.Security.Permissions.SecurityPermissionFlag", true, {
    NoFlags: 0, 
    Assertion: 1, 
    UnmanagedCode: 2, 
    SkipVerification: 4, 
    Execution: 8, 
    ControlThread: 16, 
    ControlEvidence: 32, 
    ControlPolicy: 64, 
    SerializationFormatter: 128, 
    ControlDomainPolicy: 256, 
    ControlPrincipal: 512, 
    ControlAppDomain: 1024, 
    RemotingConfiguration: 2048, 
    Infrastructure: 4096, 
    BindingRedirects: 8192, 
    AllFlags: 16383
  }, false
);

JSIL.MakeClass($asm01.TypeRef("System.Attribute"), "System.Runtime.InteropServices.StructLayoutAttribute", true, [], function ($) {
  var $thisType = $.publicInterface;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm01.System.Int16)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm01.System.Runtime.InteropServices.CharSet)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm01.System.Attribute)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm01.System.Runtime.InteropServices.LayoutKind)) ();
  };

  $.Method({Static:false, Public:true }, ".ctor", 
    $sig.make(0x955, null, [$asm01.TypeRef("System.Int16")], []), 
    function StructLayoutAttribute__ctor (layoutKind) {
      this.CharSet = $T01().Auto;
      this.Pack = 8;
      this.Size = 0;
      $T02().prototype._ctor.call(this);
      this.lkind = $T03().$Cast(layoutKind);
    }
  );

  $.Method({Static:false, Public:true }, ".ctor", 
    $sig.make(0x958, null, [$asm01.TypeRef("System.Runtime.InteropServices.LayoutKind")], []), 
    function StructLayoutAttribute__ctor (layoutKind) {
      this.CharSet = $T01().Auto;
      this.Pack = 8;
      this.Size = 0;
      $T02().prototype._ctor.call(this);
      this.lkind = layoutKind;
    }
  );

  $.Method({Static:false, Public:true }, "get_Value", 
    $sig.make(0x953, $asm01.TypeRef("System.Runtime.InteropServices.LayoutKind"), [], []), 
    function StructLayoutAttribute_get_Value () {
      return this.lkind;
    }
  );

  $.Field({Static:false, Public:true }, "CharSet", $asm01.TypeRef("System.Runtime.InteropServices.CharSet")); 
  $.Field({Static:false, Public:true }, "Pack", $asm01.TypeRef("System.Int32")); 
  $.Field({Static:false, Public:true }, "Size", $asm01.TypeRef("System.Int32")); 
  $.Field({Static:false, Public:false}, "lkind", $asm01.TypeRef("System.Runtime.InteropServices.LayoutKind")); 
  $.Property({Static:false, Public:true }, "Value", $asm01.TypeRef("System.Runtime.InteropServices.LayoutKind"));

})
  .Attribute($asm01.TypeRef("System.Runtime.InteropServices.ComVisibleAttribute"), function () { return [true]; })
  .Attribute($asm01.TypeRef("System.AttributeUsageAttribute"), function () { return [12]; });

JSIL.MakeEnum(
  "System.Runtime.InteropServices.CharSet", true, {
    None: 1, 
    Ansi: 2, 
    Unicode: 3, 
    Auto: 4
  }, false
);

JSIL.MakeClass($asm01.TypeRef("System.Object"), "System.Collections.Generic.CollectionDebuggerView`1", false, ["T"], function ($) {
  var $thisType = $.publicInterface;

  $.Method({Static:false, Public:true }, ".ctor", 
    $sig.make(0x9BD, null, [$asm01.TypeRef("System.Collections.Generic.ICollection`1", [new JSIL.GenericParameter("T", "System.Collections.Generic.CollectionDebuggerView`1")])], []), 
    function CollectionDebuggerView$b1__ctor (col) {
      this.c = col;
    }
  );

  $.Method({Static:false, Public:true }, "get_Items", 
    $sig.make(0x9BC, $jsilcore.TypeRef("System.Array", [new JSIL.GenericParameter("T", "System.Collections.Generic.CollectionDebuggerView`1")]), [], []), 
    function CollectionDebuggerView$b1_get_Items () {
      var o = JSIL.Array.New($thisType.T.get(this), this.c.ICollection$b1_get_Count());
      this.c.ICollection$b1_CopyTo(o, 0);
      return o;
    }
  );

  $.Field({Static:false, Public:false, ReadOnly:true }, "c", $asm01.TypeRef("System.Collections.Generic.ICollection`1", [$.GenericParameter("T")])); 
  $.Property({Static:false, Public:true }, "Items", $jsilcore.TypeRef("System.Array", [new JSIL.GenericParameter("T", "System.Collections.Generic.CollectionDebuggerView`1")]))
    .Attribute($asm01.TypeRef("System.Diagnostics.DebuggerBrowsableAttribute"), function () { return [$asm01.System.Diagnostics.DebuggerBrowsableState.RootHidden]; });

});

JSIL.MakeClass($asm01.TypeRef("System.Object"), "System.Collections.Generic.CollectionDebuggerView`2", false, ["T", "U"], function ($) {
  var $thisType = $.publicInterface;

  $.Method({Static:false, Public:true }, ".ctor", 
    $sig.make(0x9F3, null, [$asm01.TypeRef("System.Collections.Generic.ICollection`1", [$asm01.TypeRef("System.Collections.Generic.KeyValuePair`2", [new JSIL.GenericParameter("T", "System.Collections.Generic.CollectionDebuggerView`2"), new JSIL.GenericParameter("U", "System.Collections.Generic.CollectionDebuggerView`2")])])], []), 
    function CollectionDebuggerView$b2__ctor (col) {
      this.c = col;
    }
  );

  $.Method({Static:false, Public:true }, "get_Items", 
    $sig.make(0x9E3, $jsilcore.TypeRef("System.Array", [$asm01.TypeRef("System.Collections.Generic.KeyValuePair`2", [new JSIL.GenericParameter("T", "System.Collections.Generic.CollectionDebuggerView`2"), new JSIL.GenericParameter("U", "System.Collections.Generic.CollectionDebuggerView`2")])]), [], []), 
    function CollectionDebuggerView$b2_get_Items () {
      var o = JSIL.Array.New($asm01.System.Collections.Generic.KeyValuePair$b2.Of($thisType.T.get(this), $thisType.U.get(this)), this.c.ICollection$b1_get_Count());
      this.c.ICollection$b1_CopyTo(o, 0);
      return o;
    }
  );

  $.Field({Static:false, Public:false, ReadOnly:true }, "c", $asm01.TypeRef("System.Collections.Generic.ICollection`1", [$asm01.TypeRef("System.Collections.Generic.KeyValuePair`2", [$.GenericParameter("T"), $.GenericParameter("U")])])); 
  $.Property({Static:false, Public:true }, "Items", $jsilcore.TypeRef("System.Array", [$asm01.TypeRef("System.Collections.Generic.KeyValuePair`2", [new JSIL.GenericParameter("T", "System.Collections.Generic.CollectionDebuggerView`2"), new JSIL.GenericParameter("U", "System.Collections.Generic.CollectionDebuggerView`2")])]))
    .Attribute($asm01.TypeRef("System.Diagnostics.DebuggerBrowsableAttribute"), function () { return [$asm01.System.Diagnostics.DebuggerBrowsableState.RootHidden]; });

});

JSIL.MakeClass($asm01.TypeRef("System.Object"), "System.Reflection.MemberFilter", true, [], function ($) {
  var $thisType = $.publicInterface;

  $.Method({Static:false, Public:true }, ".ctor", 
    $sig.make(0xA2C, null, [], []), 
    function MemberFilter__ctor () {
    }
  );

});

JSIL.MakeTypeAlias($jsilcore, "System.Reflection.MemberInfo");

JSIL.MakeTypeAlias($jsilcore, "System.Reflection.MethodBase");

JSIL.MakeTypeAlias($jsilcore, "System.Reflection.ConstructorInfo");

JSIL.MakeClass($asm01.TypeRef("System.Attribute"), "System.ParamArrayAttribute", true, [], function ($) {
  var $thisType = $.publicInterface;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm01.System.Attribute)) ();
  };

  $.Method({Static:false, Public:true }, ".ctor", 
    $sig.make(0xB8A, null, [], []), 
    function ParamArrayAttribute__ctor () {
      $T00().prototype._ctor.call(this);
    }
  );

});

JSIL.MakeClass($asm01.TypeRef("System.SystemException"), "System.RankException", true, [], function ($) {
  var $thisType = $.publicInterface;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm01.System.SystemException)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm01.System.Locale)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm01.System.Object)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm01.System.String)) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize($asm01.System.Exception)) ();
  };

  $.Method({Static:false, Public:true }, ".ctor", 
    $sig.make(0xAC5, null, [], []), 
    function RankException__ctor () {
      $T00().prototype._ctor.call(this, $T01().GetText("Two arrays must have the same number of dimensions.", JSIL.Array.New($T02(), 0)));
      this.Exception$HResult$value = -2146233065;
    }
  );

  $.Method({Static:false, Public:true }, ".ctor", 
    $sig.make(0xAD1, null, [$asm01.TypeRef("System.String")], []), 
    function RankException__ctor (message) {
      $T00().prototype._ctor.call(this, message);
      this.Exception$HResult$value = -2146233065;
    }
  );

  $.Method({Static:false, Public:true }, ".ctor", 
    $sig.make(0xAD6, null, [$asm01.TypeRef("System.String"), $asm01.TypeRef("System.Exception")], []), 
    function RankException__ctor (message, innerException) {
      $sig.get(0x7D2, null, [$asm01.System.String, $asm01.System.Exception], []).Call($T00().prototype, "_ctor", null, this, message, innerException);
      this.Exception$HResult$value = -2146233065;
    }
  );

  $.Constant({Static:true , Public:false}, "Result", -2146233065); 
})
  .Attribute($asm01.TypeRef("System.Runtime.InteropServices.ComVisibleAttribute"), function () { return [true]; });

JSIL.MakeClass($asm01.TypeRef("System.Attribute"), "System.Security.Permissions.SecurityAttribute", true, [], function ($) {
  var $thisType = $.publicInterface;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm01.System.Security.Permissions.SecurityAction)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm01.System.Attribute)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm01.System.Boolean)) ();
  };

  $.Method({Static:false, Public:false}, ".ctor", 
    $sig.make(0xB1B, null, [$asm01.TypeRef("System.Security.Permissions.SecurityAction")], []), 
    function SecurityAttribute__ctor (action) {
      $T01().prototype._ctor.call(this);
      this.set_Action(action);
    }
  );

  $.Method({Static:false, Public:true }, "get_Action", 
    $sig.make(0xB17, $asm01.TypeRef("System.Security.Permissions.SecurityAction"), [], []), 
    function SecurityAttribute_get_Action () {
      return this.m_Action;
    }
  );

  $.Method({Static:false, Public:true }, "get_Unrestricted", 
    $sig.make(0xB13, $asm01.TypeRef("System.Boolean"), [], []), 
    function SecurityAttribute_get_Unrestricted () {
      return this.m_Unrestricted;
    }
  );

  $.Method({Static:false, Public:true }, "set_Action", 
    $sig.make(0xB18, null, [$asm01.TypeRef("System.Security.Permissions.SecurityAction")], []), 
    function SecurityAttribute_set_Action (value) {
      this.m_Action = value;
    }
  );

  $.Method({Static:false, Public:true }, "set_Unrestricted", 
    $sig.make(0xB14, null, [$asm01.TypeRef("System.Boolean")], []), 
    function SecurityAttribute_set_Unrestricted (value) {
      this.m_Unrestricted = value;
    }
  );

  $.Field({Static:false, Public:false}, "m_Action", $asm01.TypeRef("System.Security.Permissions.SecurityAction")); 
  $.Field({Static:false, Public:false}, "m_Unrestricted", $asm01.TypeRef("System.Boolean")); 
  $.Property({Static:false, Public:true }, "Unrestricted", $asm01.TypeRef("System.Boolean"));

  $.Property({Static:false, Public:true }, "Action", $asm01.TypeRef("System.Security.Permissions.SecurityAction"));

})
  .Attribute($asm01.TypeRef("System.AttributeUsageAttribute"), function () { return [109]; })
  .Attribute($asm01.TypeRef("System.ObsoleteAttribute"), function () { return ["CAS support is not available with Silverlight applications."]; })
  .Attribute($asm01.TypeRef("System.Runtime.InteropServices.ComVisibleAttribute"), function () { return [true]; });

JSIL.MakeClass($asm01.TypeRef("System.Security.Permissions.SecurityAttribute"), "System.Security.Permissions.CodeAccessSecurityAttribute", true, [], function ($) {
  var $thisType = $.publicInterface;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm01.System.Security.Permissions.SecurityAction)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm01.System.Security.Permissions.SecurityAttribute)) ();
  };

  $.Method({Static:false, Public:false}, ".ctor", 
    $sig.make(0xB85, null, [$asm01.TypeRef("System.Security.Permissions.SecurityAction")], []), 
    function CodeAccessSecurityAttribute__ctor (action) {
      $T01().prototype._ctor.call(this, action);
    }
  );

})
  .Attribute($asm01.TypeRef("System.AttributeUsageAttribute"), function () { return [109]; })
  .Attribute($asm01.TypeRef("System.ObsoleteAttribute"), function () { return ["CAS support is not available with Silverlight applications."]; })
  .Attribute($asm01.TypeRef("System.Runtime.InteropServices.ComVisibleAttribute"), function () { return [true]; });

JSIL.MakeClass($asm01.TypeRef("System.SystemException"), "System.Reflection.AmbiguousMatchException", true, [], function ($) {
  var $thisType = $.publicInterface;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm01.System.SystemException)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm01.System.String)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm01.System.Exception)) ();
  };

  $.Method({Static:false, Public:true }, ".ctor", 
    $sig.make(0xBA3, null, [], []), 
    function AmbiguousMatchException__ctor () {
      $T00().prototype._ctor.call(this, "Ambiguous matching in method resolution");
    }
  );

  $.Method({Static:false, Public:true }, ".ctor", 
    $sig.make(0xBA5, null, [$asm01.TypeRef("System.String")], []), 
    function AmbiguousMatchException__ctor (message) {
      $T00().prototype._ctor.call(this, message);
    }
  );

  $.Method({Static:false, Public:true }, ".ctor", 
    $sig.make(0xBA7, null, [$asm01.TypeRef("System.String"), $asm01.TypeRef("System.Exception")], []), 
    function AmbiguousMatchException__ctor (message, inner) {
      $sig.get(0x7D2, null, [$asm01.System.String, $asm01.System.Exception], []).Call($T00().prototype, "_ctor", null, this, message, inner);
    }
  );

})
  .Attribute($asm01.TypeRef("System.Runtime.InteropServices.ComVisibleAttribute"), function () { return [true]; });

JSIL.MakeClass($asm01.TypeRef("System.Object"), "System.Globalization.Calendar", true, [], function ($) {
  var $thisType = $.publicInterface;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm01.System.DateTime)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm01.System.Int32)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm01.System.TimeSpan)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm01.System.Double)) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize($asm01.System.InvalidOperationException)) ();
  };
  var $T05 = function () {
    return ($T05 = JSIL.Memoize($asm01.System.Object)) ();
  };
  var $T06 = function () {
    return ($T06 = JSIL.Memoize(System.Array.Of($asm01.System.String))) ();
  };
  var $T07 = function () {
    return ($T07 = JSIL.Memoize($asm01.System.Exception)) ();
  };
  var $T08 = function () {
    return ($T08 = JSIL.Memoize($asm01.System.Globalization.CalendarWeekRule)) ();
  };
  var $T09 = function () {
    return ($T09 = JSIL.Memoize($asm01.System.DayOfWeek)) ();
  };
  var $T0A = function () {
    return ($T0A = JSIL.Memoize($asm01.System.ArgumentOutOfRangeException)) ();
  };
  var $T0B = function () {
    return ($T0B = JSIL.Memoize($asm01.System.String)) ();
  };
  var $T0C = function () {
    return ($T0C = JSIL.Memoize($asm01.System.Int64)) ();
  };
  var $T0D = function () {
    return ($T0D = JSIL.Memoize($asm01.System.ArgumentException)) ();
  };

  $.Method({Static:false, Public:false}, ".ctor", 
    $sig.make(0x5C9, null, [], []), 
    function Calendar__ctor () {
      this.M_MaxYearValue = 0;
      this.twoDigitYearMax = 99;
    }
  );

  $.Method({Static:false, Public:true }, "AddDays", 
    $sig.make(0x5A5, $asm01.TypeRef("System.DateTime"), [$asm01.TypeRef("System.DateTime"), $asm01.TypeRef("System.Int32")], []), 
    function Calendar_AddDays (time, days) {
      return time.Add($T02().FromDays(days));
    }
  );

  $.Method({Static:false, Public:true }, "AddHours", 
    $sig.make(0x5A6, $asm01.TypeRef("System.DateTime"), [$asm01.TypeRef("System.DateTime"), $asm01.TypeRef("System.Int32")], []), 
    function Calendar_AddHours (time, hours) {
      return time.Add($T02().FromHours(hours));
    }
  );

  $.Method({Static:false, Public:true }, "AddMilliseconds", 
    $sig.make(0x5A7, $asm01.TypeRef("System.DateTime"), [$asm01.TypeRef("System.DateTime"), $asm01.TypeRef("System.Double")], []), 
    function Calendar_AddMilliseconds (time, milliseconds) {
      return time.Add($T02().FromMilliseconds(milliseconds));
    }
  );

  $.Method({Static:false, Public:true }, "AddMinutes", 
    $sig.make(0x5A8, $asm01.TypeRef("System.DateTime"), [$asm01.TypeRef("System.DateTime"), $asm01.TypeRef("System.Int32")], []), 
    function Calendar_AddMinutes (time, minutes) {
      return time.Add($T02().FromMinutes(minutes));
    }
  );

  $.Method({Static:false, Public:true }, "AddSeconds", 
    $sig.make(0x5AA, $asm01.TypeRef("System.DateTime"), [$asm01.TypeRef("System.DateTime"), $asm01.TypeRef("System.Int32")], []), 
    function Calendar_AddSeconds (time, seconds) {
      return time.Add($T02().FromSeconds(seconds));
    }
  );

  $.Method({Static:false, Public:true }, "AddWeeks", 
    $sig.make(0x5AB, $asm01.TypeRef("System.DateTime"), [$asm01.TypeRef("System.DateTime"), $asm01.TypeRef("System.Int32")], []), 
    function Calendar_AddWeeks (time, weeks) {
      return time.AddDays(((weeks * this.get_M_DaysInWeek()) | 0));
    }
  );

  $.Method({Static:false, Public:false}, "CheckReadOnly", 
    $sig.make(0x5A3, null, [], []), 
    function Calendar_CheckReadOnly () {
      if (this.m_isReadOnly) {
        throw new ($T04())("This Calendar is read-only.");
      }
    }
  );

  $.Method({Static:false, Public:true }, "Clone", 
    $sig.make(0x59F, $asm01.TypeRef("System.Object"), [], []), 
    function Calendar_Clone () {
      var c = $thisType.$Cast($T05().prototype.MemberwiseClone.call(this));
      c.m_isReadOnly = false;
      return c;
    }
  )
    .Attribute($asm01.TypeRef("System.Runtime.InteropServices.ComVisibleAttribute"), function () { return [false]; });

  $.Method({Static:false, Public:false}, "get_AbbreviatedEraNames", 
    $sig.make(0x598, $jsilcore.TypeRef("System.Array", [$asm01.TypeRef("System.String")]), [], []), 
    function Calendar_get_AbbreviatedEraNames () {
      if (!((this.M_AbbrEraNames !== null) && (this.M_AbbrEraNames.length === this.get_Eras().length))) {
        throw new ($T07())("Internal: M_AbbrEraNames wrong initialized!");
      }
      return $T06().$Cast(this.M_AbbrEraNames.slice(0));
    }
  );

  $.Method({Static:false, Public:false}, "get_EraNames", 
    $sig.make(0x59A, $jsilcore.TypeRef("System.Array", [$asm01.TypeRef("System.String")]), [], []), 
    function Calendar_get_EraNames () {
      if (!((this.M_EraNames !== null) && (this.M_EraNames.length === this.get_Eras().length))) {
        throw new ($T07())("Internal: M_EraNames not initialized!");
      }
      return $T06().$Cast(this.M_EraNames.slice(0));
    }
  );

  $.Method({Static:false, Public:true }, "get_IsReadOnly", 
    $sig.make(0x594, $asm01.TypeRef("System.Boolean"), [], []), 
    function Calendar_get_IsReadOnly () {
      return this.m_isReadOnly;
    }
  );

  $.Method({Static:false, Public:false}, "get_M_DaysInWeek", 
    $sig.make(0x590, $asm01.TypeRef("System.Int32"), [], []), 
    function Calendar_get_M_DaysInWeek () {
      return 7;
    }
  );

  $.Method({Static:false, Public:false}, "get_M_MaxYear", 
    $sig.make(0x595, $asm01.TypeRef("System.Int32"), [], []), 
    function Calendar_get_M_MaxYear () {
      if (this.M_MaxYearValue === 0) {
        this.M_MaxYearValue = this.GetYear($T00().MaxValue.MemberwiseClone());
      }
      return this.M_MaxYearValue;
    }
  );

  $.Method({Static:false, Public:true }, "get_MaxSupportedDateTime", 
    $sig.make(0x592, $asm01.TypeRef("System.DateTime"), [], []), 
    function Calendar_get_MaxSupportedDateTime () {
      return $T00().MaxValue;
    }
  );

  $.Method({Static:false, Public:true }, "get_MinSupportedDateTime", 
    $sig.make(0x593, $asm01.TypeRef("System.DateTime"), [], []), 
    function Calendar_get_MinSupportedDateTime () {
      return $T00().MinValue;
    }
  );

  $.Method({Static:false, Public:true }, "get_TwoDigitYearMax", 
    $sig.make(0x596, $asm01.TypeRef("System.Int32"), [], []), 
    function Calendar_get_TwoDigitYearMax () {
      return this.twoDigitYearMax;
    }
  );

  $.Method({Static:false, Public:true }, "GetDaysInMonth", 
    $sig.make(0x5B0, $asm01.TypeRef("System.Int32"), [$asm01.TypeRef("System.Int32"), $asm01.TypeRef("System.Int32")], []), 
    function Calendar_GetDaysInMonth (year, month) {
      return this.GetDaysInMonth(year, month, 0);
    }
  );

  $.Method({Static:false, Public:true }, "GetDaysInYear", 
    $sig.make(0x5B2, $asm01.TypeRef("System.Int32"), [$asm01.TypeRef("System.Int32")], []), 
    function Calendar_GetDaysInYear (year) {
      return this.GetDaysInYear(year, 0);
    }
  );

  $.Method({Static:false, Public:true }, "GetHour", 
    $sig.make(0x5B5, $asm01.TypeRef("System.Int32"), [$asm01.TypeRef("System.DateTime")], []), 
    function Calendar_GetHour (time) {
      return time.get_TimeOfDay().get_Hours();
    }
  );

  $.Method({Static:false, Public:true }, "GetLeapMonth", 
    $sig.make(0x5A0, $asm01.TypeRef("System.Int32"), [$asm01.TypeRef("System.Int32")], []), 
    function Calendar_GetLeapMonth (year) {
      return this.GetLeapMonth(year, this.GetEra(this.ToDateTime(
            year, 
            1, 
            1, 
            0, 
            0, 
            0, 
            0
          ).MemberwiseClone()));
    }
  )
    .Attribute($asm01.TypeRef("System.Runtime.InteropServices.ComVisibleAttribute"), function () { return [false]; });

  $.Method({Static:false, Public:true }, "GetLeapMonth", 
    $sig.make(0x5A1, $asm01.TypeRef("System.Int32"), [$asm01.TypeRef("System.Int32"), $asm01.TypeRef("System.Int32")], []), 
    function Calendar_GetLeapMonth (year, era) {
      var max = this.GetMonthsInYear(year, era);

      for (var i = 1; i <= max; ++i) {
        if (this.IsLeapMonth(year, i, era)) {
          var result = i;
          return result;
        }
      }
      result = 0;
      return result;
    }
  )
    .Attribute($asm01.TypeRef("System.Runtime.InteropServices.ComVisibleAttribute"), function () { return [false]; });

  $.Method({Static:false, Public:true }, "GetMilliseconds", 
    $sig.make(0x5B6, $asm01.TypeRef("System.Double"), [$asm01.TypeRef("System.DateTime")], []), 
    function Calendar_GetMilliseconds (time) {
      return time.get_TimeOfDay().get_Milliseconds();
    }
  );

  $.Method({Static:false, Public:true }, "GetMinute", 
    $sig.make(0x5B7, $asm01.TypeRef("System.Int32"), [$asm01.TypeRef("System.DateTime")], []), 
    function Calendar_GetMinute (time) {
      return time.get_TimeOfDay().get_Minutes();
    }
  );

  $.Method({Static:false, Public:true }, "GetMonthsInYear", 
    $sig.make(0x5B9, $asm01.TypeRef("System.Int32"), [$asm01.TypeRef("System.Int32")], []), 
    function Calendar_GetMonthsInYear (year) {
      return this.GetMonthsInYear(year, 0);
    }
  );

  $.Method({Static:false, Public:true }, "GetSecond", 
    $sig.make(0x5BB, $asm01.TypeRef("System.Int32"), [$asm01.TypeRef("System.DateTime")], []), 
    function Calendar_GetSecond (time) {
      return time.get_TimeOfDay().get_Seconds();
    }
  );

  $.Method({Static:false, Public:true }, "GetWeekOfYear", 
    $sig.make(0x5BE, $asm01.TypeRef("System.Int32"), [
        $asm01.TypeRef("System.DateTime"), $asm01.TypeRef("System.Globalization.CalendarWeekRule"), 
        $asm01.TypeRef("System.DayOfWeek")
      ], []), 
    function Calendar_GetWeekOfYear (time, rule, firstDayOfWeek) {
      if (!((firstDayOfWeek >= $T09().Sunday) && ($T09().Saturday >= firstDayOfWeek))) {
        throw $sig.get(0xCA7, null, [$asm01.System.String, $asm01.System.String], []).Construct($T0A(), "firstDayOfWeek", "Value is not a valid day of week.");
      }
      var year = this.GetYear(time.MemberwiseClone());

    $loop0: 
      while (true) {
        var secondWeek = this.M_GetFirstDayOfSecondWeekOfYear(year, rule, firstDayOfWeek).MemberwiseClone();
        var days = ((this.M_DiffDays(time, secondWeek) + this.get_M_DaysInWeek()) | 0);
        if (days >= 0) {
          break $loop0;
        }
        --year;
      }
      return ((1 + ((days / this.get_M_DaysInWeek()) | 0)) | 0);
    }
  );

  $.Method({Static:false, Public:true }, "IsLeapDay", 
    $sig.make(0x5C0, $asm01.TypeRef("System.Boolean"), [
        $asm01.TypeRef("System.Int32"), $asm01.TypeRef("System.Int32"), 
        $asm01.TypeRef("System.Int32")
      ], []), 
    function Calendar_IsLeapDay (year, month, day) {
      return this.IsLeapDay(year, month, day, 0);
    }
  );

  $.Method({Static:false, Public:true }, "IsLeapMonth", 
    $sig.make(0x5C2, $asm01.TypeRef("System.Boolean"), [$asm01.TypeRef("System.Int32"), $asm01.TypeRef("System.Int32")], []), 
    function Calendar_IsLeapMonth (year, month) {
      return this.IsLeapMonth(year, month, 0);
    }
  );

  $.Method({Static:false, Public:true }, "IsLeapYear", 
    $sig.make(0x5C4, $asm01.TypeRef("System.Boolean"), [$asm01.TypeRef("System.Int32")], []), 
    function Calendar_IsLeapYear (year) {
      return this.IsLeapYear(year, 0);
    }
  );

  $.Method({Static:false, Public:false}, "M_ArgumentInRange", 
    $sig.make(0x59D, null, [
        $asm01.TypeRef("System.String"), $asm01.TypeRef("System.Int32"), 
        $asm01.TypeRef("System.Int32"), $asm01.TypeRef("System.Int32")
      ], []), 
    function Calendar_M_ArgumentInRange (param, arg, a, b) {
      if (!((a > arg) || (arg > b))) {
        return;
      }
      throw $sig.get(0xCA7, null, [$asm01.System.String, $asm01.System.String], []).Construct($T0A(), param, this.M_ValidValues(a, b));
    }
  );

  $.Method({Static:false, Public:false}, "M_CheckHMSM", 
    $sig.make(0x59E, null, [
        $asm01.TypeRef("System.Int32"), $asm01.TypeRef("System.Int32"), 
        $asm01.TypeRef("System.Int32"), $asm01.TypeRef("System.Int32")
      ], []), 
    function Calendar_M_CheckHMSM (hour, minute, second, milliseconds) {
      this.M_ArgumentInRange("hour", hour, 0, 23);
      this.M_ArgumentInRange("minute", minute, 0, 59);
      this.M_ArgumentInRange("second", second, 0, 59);
      this.M_ArgumentInRange("milliseconds", milliseconds, 0, 999999);
    }
  );

  $.Method({Static:false, Public:false}, "M_CheckYE", 
    $sig.make(0x5A4, null, [$asm01.TypeRef("System.Int32"), $jsilcore.TypeRef("JSIL.Reference", [$asm01.TypeRef("System.Int32")])], []), 
    function Calendar_M_CheckYE (year, /* ref */ era) {
    }
  );

  $.Method({Static:false, Public:false}, "M_DiffDays", 
    $sig.make(0x5BC, $asm01.TypeRef("System.Int32"), [$asm01.TypeRef("System.DateTime"), $asm01.TypeRef("System.DateTime")], []), 
    function Calendar_M_DiffDays (timeA, timeB) {
      var diff = $T0C().op_Subtraction(
        timeA.get_Ticks(), 
        timeB.get_Ticks()
      );
      if (!$T0C().op_LessThan(diff, $T0C().Create(0, 0, 0))) {
        var result = ($T0C().op_Division(diff, $T0C().Create(6930432, 51498, 0))).ToNumber();
      } else {
        diff = $T0C().op_Addition(diff, $T0C().Create(1, 0, 0));
        result = ((-1 + ($T0C().op_Division(diff, $T0C().Create(6930432, 51498, 0))).ToNumber()) | 0);
      }
      return result;
    }
  );

  $.Method({Static:false, Public:false}, "M_GetFirstDayOfSecondWeekOfYear", 
    $sig.make(0x5BD, $asm01.TypeRef("System.DateTime"), [
        $asm01.TypeRef("System.Int32"), $asm01.TypeRef("System.Globalization.CalendarWeekRule"), 
        $asm01.TypeRef("System.DayOfWeek")
      ], []), 
    function Calendar_M_GetFirstDayOfSecondWeekOfYear (year, rule, firstDayOfWeek) {
      var d = this.ToDateTime(
        year, 
        1, 
        1, 
        0, 
        0, 
        0, 
        0
      ).MemberwiseClone();
      var dow = this.GetDayOfWeek(d.MemberwiseClone()).valueOf();
      var d2 = 0;
      switch (rule.valueOf()) {
        case 0: 
          if (firstDayOfWeek > $T09().$Cast(dow)) {
            d2 += (firstDayOfWeek - $T09().$Cast(dow));
          } else {
            d2 += ($asm01.System.DayOfWeek.$Cast(firstDayOfWeek + this.get_M_DaysInWeek()) - $T09().$Cast(dow));
          }
          break;

        case 1: 
          d2 = this.get_M_DaysInWeek();
          if (firstDayOfWeek >= $T09().$Cast(dow)) {
            d2 += (firstDayOfWeek - $T09().$Cast(dow));
          } else {
            d2 += ($asm01.System.DayOfWeek.$Cast(firstDayOfWeek + this.get_M_DaysInWeek()) - $T09().$Cast(dow));
          }
          break;

        case 2: 
          var dow2 = ((((dow + 3) | 0) % this.get_M_DaysInWeek()) | 0);
          d2 = 3;
          if (firstDayOfWeek > $T09().$Cast(dow2)) {
            d2 += (firstDayOfWeek - $T09().$Cast(dow2));
          } else {
            d2 += ($asm01.System.DayOfWeek.$Cast(firstDayOfWeek + this.get_M_DaysInWeek()) - $T09().$Cast(dow2));
          }
          break;

      }
      return this.AddDays(d.MemberwiseClone(), d2);
    }
  );

  $.Method({Static:false, Public:false}, "M_ValidValues", 
    $sig.make(0x59C, $asm01.TypeRef("System.String"), [$asm01.TypeRef("System.Object"), $asm01.TypeRef("System.Object")], []), 
    function Calendar_M_ValidValues (a, b) {
      return $T0B().Format("Valid values are between {0} and {1}, inclusive.", JSIL.Array.New($T05(), [a, b]));
    }
  );

  $.Method({Static:true , Public:true }, "ReadOnly", 
    $sig.make(0x5A2, $.Type, [$.Type], []), 
    function Calendar_ReadOnly (calendar) {
      if (calendar.m_isReadOnly) {
        var result = calendar;
      } else {
        var c = $thisType.$Cast(calendar.Clone());
        c.m_isReadOnly = true;
        result = c;
      }
      return result;
    }
  )
    .Attribute($asm01.TypeRef("System.Runtime.InteropServices.ComVisibleAttribute"), function () { return [false]; });

  $.Method({Static:false, Public:false}, "set_AbbreviatedEraNames", 
    $sig.make(0x599, null, [$jsilcore.TypeRef("System.Array", [$asm01.TypeRef("System.String")])], []), 
    function Calendar_set_AbbreviatedEraNames (value) {
      this.CheckReadOnly();
      if (value.length !== this.get_Eras().length) {
        throw new ($T0D())($T0B().Format("Array length must be equal Eras length {0}.", this.get_Eras().length));
      }
      this.M_AbbrEraNames = $T06().$Cast(value.slice(0));
    }
  );

  $.Method({Static:false, Public:false}, "set_EraNames", 
    $sig.make(0x59B, null, [$jsilcore.TypeRef("System.Array", [$asm01.TypeRef("System.String")])], []), 
    function Calendar_set_EraNames (value) {
      this.CheckReadOnly();
      if (value.length !== this.get_Eras().length) {
        throw new ($T0D())($T0B().Format("Array length must be equal Eras length {0}.", this.get_Eras().length));
      }
      this.M_EraNames = $T06().$Cast(value.slice(0));
    }
  );

  $.Method({Static:false, Public:true }, "set_TwoDigitYearMax", 
    $sig.make(0x597, null, [$asm01.TypeRef("System.Int32")], []), 
    function Calendar_set_TwoDigitYearMax (value) {
      this.CheckReadOnly();
      this.M_ArgumentInRange("year", value, 100, this.get_M_MaxYear());
      var era = new JSIL.Variable(0);
      this.M_CheckYE(value, /* ref */ era);
      this.twoDigitYearMax = value;
    }
  );

  $.Method({Static:false, Public:true }, "ToDateTime", 
    $sig.make(0x5C6, $asm01.TypeRef("System.DateTime"), [
        $asm01.TypeRef("System.Int32"), $asm01.TypeRef("System.Int32"), 
        $asm01.TypeRef("System.Int32"), $asm01.TypeRef("System.Int32"), 
        $asm01.TypeRef("System.Int32"), $asm01.TypeRef("System.Int32"), 
        $asm01.TypeRef("System.Int32")
      ], []), 
    function Calendar_ToDateTime (year, month, day, hour, minute, second, millisecond) {
      return this.ToDateTime(
        year, 
        month, 
        day, 
        hour, 
        minute, 
        second, 
        millisecond, 
        0
      );
    }
  );

  $.Method({Static:false, Public:true }, "ToFourDigitYear", 
    $sig.make(0x5C8, $asm01.TypeRef("System.Int32"), [$asm01.TypeRef("System.Int32")], []), 
    function Calendar_ToFourDigitYear (year) {
      if (year < 0) {
        throw $sig.get(0xCA7, null, [$asm01.System.String, $asm01.System.String], []).Construct($T0A(), "year", "Non-negative number required.");
      }
      if (year <= 99) {
        var year2 = ((this.get_TwoDigitYearMax() % 100) | 0);
        var d = ((year - year2) | 0);
        year = ((((this.get_TwoDigitYearMax() + d) | 0) + ((d <= 0) ? 0 : -100)) | 0);
      }
      var era = new JSIL.Variable(0);
      this.M_CheckYE(year, /* ref */ era);
      return year;
    }
  );

  $.Constant({Static:true , Public:true }, "CurrentEra", 0); 
  $.Field({Static:false, Public:false}, "m_isReadOnly", $asm01.TypeRef("System.Boolean")); 
  $.Field({Static:false, Public:false}, "twoDigitYearMax", $asm01.TypeRef("System.Int32")); 
  $.Field({Static:false, Public:false}, "M_MaxYearValue", $asm01.TypeRef("System.Int32")); 
  $.Field({Static:false, Public:false}, "M_AbbrEraNames", $jsilcore.TypeRef("System.Array", [$asm01.TypeRef("System.String")])); 
  $.Field({Static:false, Public:false}, "M_EraNames", $jsilcore.TypeRef("System.Array", [$asm01.TypeRef("System.String")])); 
  $.Field({Static:false, Public:false}, "m_currentEraValue", $asm01.TypeRef("System.Int32")); 
  $.Property({Static:false, Public:false, Virtual:true }, "M_DaysInWeek", $asm01.TypeRef("System.Int32"));

  $.Property({Static:false, Public:true , Virtual:true }, "Eras", $jsilcore.TypeRef("System.Array", [$asm01.TypeRef("System.Int32")]));

  $.Property({Static:false, Public:true , Virtual:true }, "MaxSupportedDateTime", $asm01.TypeRef("System.DateTime"))
    .Attribute($asm01.TypeRef("System.Runtime.InteropServices.ComVisibleAttribute"), function () { return [false]; });

  $.Property({Static:false, Public:true , Virtual:true }, "MinSupportedDateTime", $asm01.TypeRef("System.DateTime"))
    .Attribute($asm01.TypeRef("System.Runtime.InteropServices.ComVisibleAttribute"), function () { return [false]; });

  $.Property({Static:false, Public:true }, "IsReadOnly", $asm01.TypeRef("System.Boolean"))
    .Attribute($asm01.TypeRef("System.Runtime.InteropServices.ComVisibleAttribute"), function () { return [false]; });

  $.Property({Static:false, Public:false, Virtual:true }, "M_MaxYear", $asm01.TypeRef("System.Int32"));

  $.Property({Static:false, Public:true , Virtual:true }, "TwoDigitYearMax", $asm01.TypeRef("System.Int32"));

  $.Property({Static:false, Public:false}, "AbbreviatedEraNames", $jsilcore.TypeRef("System.Array", [$asm01.TypeRef("System.String")]));

  $.Property({Static:false, Public:false}, "EraNames", $jsilcore.TypeRef("System.Array", [$asm01.TypeRef("System.String")]));

  $.ImplementInterfaces($asm01.TypeRef("System.ICloneable"))
})
  .Attribute($asm01.TypeRef("System.Runtime.InteropServices.ComVisibleAttribute"), function () { return [true]; });

JSIL.MakeClass($asm01.TypeRef("System.Globalization.Calendar"), "System.Globalization.GregorianCalendar", true, [], function ($) {
  var $thisType = $.publicInterface;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm01.System.Globalization.GregorianCalendarTypes)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm01.System.Globalization.Calendar)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm01.System.String)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm01.System.DateTime)) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize($asm01.System.Int32)) ();
  };
  var $T05 = function () {
    return ($T05 = JSIL.Memoize($asm01.System.Globalization.CCGregorianCalendar)) ();
  };
  var $T06 = function () {
    return ($T06 = JSIL.Memoize($asm01.System.Globalization.CCFixed)) ();
  };
  var $T07 = function () {
    return ($T07 = JSIL.Memoize($asm01.System.Globalization.CalendarWeekRule)) ();
  };
  var $T08 = function () {
    return ($T08 = JSIL.Memoize($asm01.System.DayOfWeek)) ();
  };
  var $T09 = function () {
    return ($T09 = JSIL.Memoize($asm01.System.ArgumentException)) ();
  };
  var $T0A = function () {
    return ($T0A = JSIL.Memoize($asm01.System.ArgumentOutOfRangeException)) ();
  };

  $.Method({Static:false, Public:true }, ".ctor", 
    $sig.make(0xC23, null, [$asm01.TypeRef("System.Globalization.GregorianCalendarTypes")], []), 
    function GregorianCalendar__ctor (type) {
      $T01().prototype._ctor.call(this);
      this.set_CalendarType(type);
      this.M_AbbrEraNames = JSIL.Array.New($T02(), ["AD"]);
      this.M_EraNames = JSIL.Array.New($T02(), ["A.D."]);
      if (this.twoDigitYearMax === 99) {
        this.twoDigitYearMax = 2029;
      }
    }
  );

  $.Method({Static:false, Public:true }, ".ctor", 
    $sig.make(0xC27, null, [], []), 
    function GregorianCalendar__ctor () {
      $thisType.prototype._ctor.call(this, $T00().Localized);
    }
  );

  $.Method({Static:false, Public:true }, "AddMonths", 
    $sig.make(0xBC8, $asm01.TypeRef("System.DateTime"), [$asm01.TypeRef("System.DateTime"), $asm01.TypeRef("System.Int32")], []), 
    function GregorianCalendar_AddMonths (time, months) {
      return $T05().AddMonths(time, months);
    }
  );

  $.Method({Static:false, Public:true }, "AddYears", 
    $sig.make(0xBCD, $asm01.TypeRef("System.DateTime"), [$asm01.TypeRef("System.DateTime"), $asm01.TypeRef("System.Int32")], []), 
    function GregorianCalendar_AddYears (time, years) {
      return $T05().AddYears(time, years);
    }
  );

  $.Method({Static:false, Public:true }, "get_CalendarType", 
    $sig.make(0xB97, $asm01.TypeRef("System.Globalization.GregorianCalendarTypes"), [], []), 
    function GregorianCalendar_get_CalendarType () {
      return this.m_type;
    }
  );

  $.Method({Static:false, Public:true }, "get_Eras", 
    $sig.make(0xB81, $jsilcore.TypeRef("System.Array", [$asm01.TypeRef("System.Int32")]), [], []), 
    function GregorianCalendar_get_Eras () {
      return JSIL.Array.New($T04(), [1]);
    }
  );

  $.Method({Static:false, Public:true }, "get_MaxSupportedDateTime", 
    $sig.make(0xBBA, $asm01.TypeRef("System.DateTime"), [], []), 
    function GregorianCalendar_get_MaxSupportedDateTime () {
      if ($thisType.Max === null) {
        $thisType.Max = new ($T03())(9999, 12, 31, 11, 59, 59);
      }
      return $thisType.Max;
    }
  );

  $.Method({Static:false, Public:true }, "get_MinSupportedDateTime", 
    $sig.make(0xB9F, $asm01.TypeRef("System.DateTime"), [], []), 
    function GregorianCalendar_get_MinSupportedDateTime () {
      if ($thisType.Min === null) {
        $thisType.Min = new ($T03())(1, 1, 1, 0, 0, 0);
      }
      return $thisType.Min;
    }
  );

  $.Method({Static:false, Public:true }, "get_TwoDigitYearMax", 
    $sig.make(0xB83, $asm01.TypeRef("System.Int32"), [], []), 
    function GregorianCalendar_get_TwoDigitYearMax () {
      return this.twoDigitYearMax;
    }
  );

  $.Method({Static:false, Public:true }, "GetDayOfMonth", 
    $sig.make(0xBCE, $asm01.TypeRef("System.Int32"), [$asm01.TypeRef("System.DateTime")], []), 
    function GregorianCalendar_GetDayOfMonth (time) {
      return $T05().GetDayOfMonth(time);
    }
  );

  $.Method({Static:false, Public:true }, "GetDayOfWeek", 
    $sig.make(0xBD3, $asm01.TypeRef("System.DayOfWeek"), [$asm01.TypeRef("System.DateTime")], []), 
    function GregorianCalendar_GetDayOfWeek (time) {
      var rd = $T06().FromDateTime(time);
      return $T06().day_of_week(rd);
    }
  );

  $.Method({Static:false, Public:true }, "GetDayOfYear", 
    $sig.make(0xBD6, $asm01.TypeRef("System.Int32"), [$asm01.TypeRef("System.DateTime")], []), 
    function GregorianCalendar_GetDayOfYear (time) {
      return $T05().GetDayOfYear(time);
    }
  );

  $.Method({Static:false, Public:true }, "GetDaysInMonth", 
    $sig.make(0xBD8, $asm01.TypeRef("System.Int32"), [
        $asm01.TypeRef("System.Int32"), $asm01.TypeRef("System.Int32"), 
        $asm01.TypeRef("System.Int32")
      ], []), 
    function GregorianCalendar_GetDaysInMonth (year, month, $era) {
      var era = new JSIL.Variable($era);
      this.M_CheckYME(year, month, /* ref */ era);
      return $T05().GetDaysInMonth(year, month);
    }
  );

  $.Method({Static:false, Public:true }, "GetDaysInYear", 
    $sig.make(0xBD9, $asm01.TypeRef("System.Int32"), [$asm01.TypeRef("System.Int32"), $asm01.TypeRef("System.Int32")], []), 
    function GregorianCalendar_GetDaysInYear (year, $era) {
      var era = new JSIL.Variable($era);
      this.M_CheckYE(year, /* ref */ era);
      return $T05().GetDaysInYear(year);
    }
  );

  $.Method({Static:false, Public:true }, "GetEra", 
    $sig.make(0xBDE, $asm01.TypeRef("System.Int32"), [$asm01.TypeRef("System.DateTime")], []), 
    function GregorianCalendar_GetEra (time) {
      return 1;
    }
  );

  $.Method({Static:false, Public:true }, "GetLeapMonth", 
    $sig.make(0xBE1, $asm01.TypeRef("System.Int32"), [$asm01.TypeRef("System.Int32"), $asm01.TypeRef("System.Int32")], []), 
    function GregorianCalendar_GetLeapMonth (year, era) {
      return 0;
    }
  )
    .Attribute($asm01.TypeRef("System.Runtime.InteropServices.ComVisibleAttribute"), function () { return [false]; });

  $.Method({Static:false, Public:true }, "GetMonth", 
    $sig.make(0xBE5, $asm01.TypeRef("System.Int32"), [$asm01.TypeRef("System.DateTime")], []), 
    function GregorianCalendar_GetMonth (time) {
      return $T05().GetMonth(time);
    }
  );

  $.Method({Static:false, Public:true }, "GetMonthsInYear", 
    $sig.make(0xBE9, $asm01.TypeRef("System.Int32"), [$asm01.TypeRef("System.Int32"), $asm01.TypeRef("System.Int32")], []), 
    function GregorianCalendar_GetMonthsInYear (year, $era) {
      var era = new JSIL.Variable($era);
      this.M_CheckYE(year, /* ref */ era);
      return 12;
    }
  );

  $.Method({Static:false, Public:true }, "GetWeekOfYear", 
    $sig.make(0xBEE, $asm01.TypeRef("System.Int32"), [
        $asm01.TypeRef("System.DateTime"), $asm01.TypeRef("System.Globalization.CalendarWeekRule"), 
        $asm01.TypeRef("System.DayOfWeek")
      ], []), 
    function GregorianCalendar_GetWeekOfYear (time, rule, firstDayOfWeek) {
      return $T01().prototype.GetWeekOfYear.call(this, time, rule, firstDayOfWeek);
    }
  )
    .Attribute($asm01.TypeRef("System.Runtime.InteropServices.ComVisibleAttribute"), function () { return [false]; });

  $.Method({Static:false, Public:true }, "GetYear", 
    $sig.make(0xC09, $asm01.TypeRef("System.Int32"), [$asm01.TypeRef("System.DateTime")], []), 
    function GregorianCalendar_GetYear (time) {
      return $T05().GetYear(time);
    }
  );

  $.Method({Static:false, Public:true }, "IsLeapDay", 
    $sig.make(0xC0F, $asm01.TypeRef("System.Boolean"), [
        $asm01.TypeRef("System.Int32"), $asm01.TypeRef("System.Int32"), 
        $asm01.TypeRef("System.Int32"), $asm01.TypeRef("System.Int32")
      ], []), 
    function GregorianCalendar_IsLeapDay (year, month, day, $era) {
      var era = new JSIL.Variable($era);
      this.M_CheckYMDE(year, month, day, /* ref */ era);
      return $T05().IsLeapDay(year, month, day);
    }
  );

  $.Method({Static:false, Public:true }, "IsLeapMonth", 
    $sig.make(0xC14, $asm01.TypeRef("System.Boolean"), [
        $asm01.TypeRef("System.Int32"), $asm01.TypeRef("System.Int32"), 
        $asm01.TypeRef("System.Int32")
      ], []), 
    function GregorianCalendar_IsLeapMonth (year, month, $era) {
      var era = new JSIL.Variable($era);
      this.M_CheckYME(year, month, /* ref */ era);
      return false;
    }
  );

  $.Method({Static:false, Public:true }, "IsLeapYear", 
    $sig.make(0xC18, $asm01.TypeRef("System.Boolean"), [$asm01.TypeRef("System.Int32"), $asm01.TypeRef("System.Int32")], []), 
    function GregorianCalendar_IsLeapYear (year, $era) {
      var era = new JSIL.Variable($era);
      this.M_CheckYE(year, /* ref */ era);
      return $T05().is_leap_year(year);
    }
  );

  $.Method({Static:false, Public:false}, "M_CheckEra", 
    $sig.make(0xBBE, null, [$jsilcore.TypeRef("JSIL.Reference", [$asm01.TypeRef("System.Int32")])], []), 
    function GregorianCalendar_M_CheckEra (/* ref */ era) {
      if (era.value === 0) {
        era.value = 1;
      }
      if (era.value !== 1) {
        throw new ($T09())("Era value was not valid.");
      }
    }
  );

  $.Method({Static:false, Public:false}, "M_CheckYE", 
    $sig.make(0xBC0, null, [$asm01.TypeRef("System.Int32"), $jsilcore.TypeRef("JSIL.Reference", [$asm01.TypeRef("System.Int32")])], []), 
    function GregorianCalendar_M_CheckYE (year, /* ref */ era) {
      this.M_CheckEra(/* ref */ era);
      this.M_ArgumentInRange("year", year, 1, 9999);
    }
  );

  $.Method({Static:false, Public:false}, "M_CheckYMDE", 
    $sig.make(0xBC4, null, [
        $asm01.TypeRef("System.Int32"), $asm01.TypeRef("System.Int32"), 
        $asm01.TypeRef("System.Int32"), $jsilcore.TypeRef("JSIL.Reference", [$asm01.TypeRef("System.Int32")])
      ], []), 
    function GregorianCalendar_M_CheckYMDE (year, month, day, /* ref */ era) {
      this.M_CheckYME(year, month, /* ref */ era);
      this.M_ArgumentInRange("day", day, 1, this.GetDaysInMonth(year, month, era.value));
    }
  );

  $.Method({Static:false, Public:false}, "M_CheckYME", 
    $sig.make(0xBC2, null, [
        $asm01.TypeRef("System.Int32"), $asm01.TypeRef("System.Int32"), 
        $jsilcore.TypeRef("JSIL.Reference", [$asm01.TypeRef("System.Int32")])
      ], []), 
    function GregorianCalendar_M_CheckYME (year, month, /* ref */ era) {
      this.M_CheckYE(year, /* ref */ era);
      if (!((month >= 1) && (month <= 12))) {
        throw $sig.get(0xCA7, null, [$asm01.System.String, $asm01.System.String], []).Construct($T0A(), "month", "Month must be between one and twelve.");
      }
    }
  );

  $.Method({Static:false, Public:true }, "set_CalendarType", 
    $sig.make(0xB9A, null, [$asm01.TypeRef("System.Globalization.GregorianCalendarTypes")], []), 
    function GregorianCalendar_set_CalendarType (value) {
      this.CheckReadOnly();
      this.m_type = value;
    }
  );

  $.Method({Static:false, Public:true }, "set_TwoDigitYearMax", 
    $sig.make(0xB84, null, [$asm01.TypeRef("System.Int32")], []), 
    function GregorianCalendar_set_TwoDigitYearMax (value) {
      this.CheckReadOnly();
      this.M_ArgumentInRange("value", value, 100, this.get_M_MaxYear());
      this.twoDigitYearMax = value;
    }
  );

  $.Method({Static:false, Public:true }, "ToDateTime", 
    $sig.make(0xC1C, $asm01.TypeRef("System.DateTime"), [
        $asm01.TypeRef("System.Int32"), $asm01.TypeRef("System.Int32"), 
        $asm01.TypeRef("System.Int32"), $asm01.TypeRef("System.Int32"), 
        $asm01.TypeRef("System.Int32"), $asm01.TypeRef("System.Int32"), 
        $asm01.TypeRef("System.Int32"), $asm01.TypeRef("System.Int32")
      ], []), 
    function GregorianCalendar_ToDateTime (year, month, day, hour, minute, second, millisecond, $era) {
      var era = new JSIL.Variable($era);
      this.M_CheckYMDE(year, month, day, /* ref */ era);
      this.M_CheckHMSM(hour, minute, second, millisecond);
      return $T05().ToDateTime(
        year, 
        month, 
        day, 
        hour, 
        minute, 
        second, 
        millisecond
      );
    }
  );

  $.Method({Static:false, Public:true }, "ToFourDigitYear", 
    $sig.make(0xC20, $asm01.TypeRef("System.Int32"), [$asm01.TypeRef("System.Int32")], []), 
    function GregorianCalendar_ToFourDigitYear (year) {
      return $T01().prototype.ToFourDigitYear.call(this, year);
    }
  );

  $.Constant({Static:true , Public:true }, "ADEra", 1); 
  $.Field({Static:false, Public:false}, "m_type", $asm01.TypeRef("System.Globalization.GregorianCalendarTypes")); 
  $.Field({Static:true , Public:false}, "Min", $asm01.TypeRef("System.Nullable`1", [$asm01.TypeRef("System.DateTime")])); 
  $.Field({Static:true , Public:false}, "Max", $asm01.TypeRef("System.Nullable`1", [$asm01.TypeRef("System.DateTime")])); 
  $.Method({Static:true , Public:false}, ".cctor", 
    $sig.make(0x10F7, null, [], []), 
    function GregorianCalendar__cctor () {
      $thisType.Min = new ($asm01.System.Nullable$b1.Of($asm01.System.DateTime)) ();
      $thisType.Max = new ($asm01.System.Nullable$b1.Of($asm01.System.DateTime)) ();
    }
  );

  $.Property({Static:false, Public:true , Virtual:true }, "Eras", $jsilcore.TypeRef("System.Array", [$asm01.TypeRef("System.Int32")]));

  $.Property({Static:false, Public:true , Virtual:true }, "TwoDigitYearMax", $asm01.TypeRef("System.Int32"));

  $.Property({Static:false, Public:true , Virtual:true }, "CalendarType", $asm01.TypeRef("System.Globalization.GregorianCalendarTypes"));

  $.Property({Static:false, Public:true , Virtual:true }, "MinSupportedDateTime", $asm01.TypeRef("System.DateTime"))
    .Attribute($asm01.TypeRef("System.Runtime.InteropServices.ComVisibleAttribute"), function () { return [false]; });

  $.Property({Static:false, Public:true , Virtual:true }, "MaxSupportedDateTime", $asm01.TypeRef("System.DateTime"))
    .Attribute($asm01.TypeRef("System.Runtime.InteropServices.ComVisibleAttribute"), function () { return [false]; });

})
  .Attribute($asm01.TypeRef("System.Runtime.InteropServices.ComVisibleAttribute"), function () { return [true]; })
  .Attribute($asm01.TypeRef("System.MonoLimitationAttribute"), function () { return ["Serialization format not compatible with .NET"]; });

JSIL.MakeClass($asm01.TypeRef("System.Object"), "System.Collections.Generic.List`1", true, ["T"], function ($) {
  var $thisType = $.publicInterface;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm01.System.ArgumentNullException)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm01.System.Void)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm01.System.Int32)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm01.System.ArgumentOutOfRangeException)) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize($asm01.System.Collections.IEnumerator)) ();
  };
  var $T05 = function () {
    return ($T05 = JSIL.Memoize($asm01.System.IDisposable)) ();
  };
  var $T06 = function () {
    return ($T06 = JSIL.Memoize($asm01.System.Array)) ();
  };
  var $T07 = function () {
    return ($T07 = JSIL.Memoize($asm01.System.ArgumentException)) ();
  };
  var $T08 = function () {
    return ($T08 = JSIL.Memoize($asm01.System.Type)) ();
  };
  var $T09 = function () {
    return ($T09 = JSIL.Memoize($asm01.System.NotImplementedException)) ();
  };
  var $T0A = function () {
    return ($T0A = JSIL.Memoize($asm01.System.Object)) ();
  };
  var $T0B = function () {
    return ($T0B = JSIL.Memoize($asm01.System.Exception)) ();
  };
  var $T0C = function () {
    return ($T0C = JSIL.Memoize($asm01.System.NullReferenceException)) ();
  };
  var $T0D = function () {
    return ($T0D = JSIL.Memoize($asm01.System.InvalidCastException)) ();
  };
  var $T0E = function () {
    return ($T0E = JSIL.Memoize($asm01.System.Boolean)) ();
  };

  $.Method({Static:false, Public:true }, ".ctor", 
    $sig.make(0xD75, null, [], []), 
    function List$b1__ctor () {
      this._items = $thisType.Of($thisType.T.get(this)).EmptyArray;
    }
  );

  $.Method({Static:false, Public:true }, ".ctor", 
    $sig.make(0xD77, null, [$asm01.TypeRef("System.Collections.Generic.IEnumerable`1", [new JSIL.GenericParameter("T", "System.Collections.Generic.List`1")])], []), 
    function List$b1__ctor (collection) {
      if (collection === null) {
        throw new ($T00())("collection");
      }
      var c = $asm01.System.Collections.Generic.ICollection$b1.Of($thisType.T.get(this)).$As(collection);
      if (c === null) {
        this._items = $thisType.Of($thisType.T.get(this)).EmptyArray;
        $thisType.Of($thisType.T.get(this)).prototype.AddEnumerable.call(this, collection);
      } else {
        this._size = c.ICollection$b1_get_Count();
        this._items = JSIL.Array.New($thisType.T.get(this), Math.max(this._size, 4));
        c.ICollection$b1_CopyTo(this._items, 0);
      }
    }
  );

  $.Method({Static:false, Public:true }, ".ctor", 
    $sig.make(0xD79, null, [$asm01.TypeRef("System.Int32")], []), 
    function List$b1__ctor (capacity) {
      if (capacity < 0) {
        throw new ($T03())("capacity");
      }
      this._items = JSIL.Array.New($thisType.T.get(this), capacity);
    }
  );

  $.Method({Static:false, Public:false}, ".ctor", 
    $sig.make(0xD7B, null, [$jsilcore.TypeRef("System.Array", [new JSIL.GenericParameter("T", "System.Collections.Generic.List`1")]), $asm01.TypeRef("System.Int32")], []), 
    function List$b1__ctor (data, size) {
      this._items = data;
      this._size = size;
    }
  );

  $.Method({Static:false, Public:true }, "Add", 
    $sig.make(0xD7E, null, [new JSIL.GenericParameter("T", "System.Collections.Generic.List`1")], []), 
    function List$b1_Add (item) {
      if (this._size === this._items.length) {
        $thisType.Of($thisType.T.get(this)).prototype.GrowIfNeeded.call(this, 1);
      }
      this._items[this._size++] = item;
      ++this._version;
    }
  );

  $.Method({Static:false, Public:false}, "AddCollection", 
    $sig.make(0xD87, null, [$asm01.TypeRef("System.Collections.Generic.ICollection`1", [new JSIL.GenericParameter("T", "System.Collections.Generic.List`1")])], []), 
    function List$b1_AddCollection (collection) {
      var collectionCount = collection.ICollection$b1_get_Count();
      if (collectionCount !== 0) {
        $thisType.Of($thisType.T.get(this)).prototype.GrowIfNeeded.call(this, collectionCount);
        collection.ICollection$b1_CopyTo(this._items, this._size);
        this._size += collectionCount;
      }
    }
  );

  $.Method({Static:false, Public:false}, "AddEnumerable", 
    $sig.make(0xD8A, null, [$asm01.TypeRef("System.Collections.Generic.IEnumerable`1", [new JSIL.GenericParameter("T", "System.Collections.Generic.List`1")])], []), 
    function List$b1_AddEnumerable (enumerable) {
      var enumerator = enumerable.IEnumerable$b1_GetEnumerator();
      try {

        while (enumerator.IEnumerator_MoveNext()) {
          var t = JSIL.CloneParameter($thisType.T.get(this), enumerator.IEnumerator$b1_get_Current());
          this.Add(JSIL.CloneParameter($thisType.T.get(this), t));
        }
      } finally {
        if (enumerator !== null) {
          enumerator.IDisposable_Dispose();
        }
      }
    }
  );

  $.Method({Static:false, Public:true }, "AddRange", 
    $sig.make(0xD97, null, [$asm01.TypeRef("System.Collections.Generic.IEnumerable`1", [new JSIL.GenericParameter("T", "System.Collections.Generic.List`1")])], []), 
    function List$b1_AddRange (collection) {
      if (collection === null) {
        throw new ($T00())("collection");
      }
      var c = $asm01.System.Collections.Generic.ICollection$b1.Of($thisType.T.get(this)).$As(collection);
      if (c !== null) {
        $thisType.Of($thisType.T.get(this)).prototype.AddCollection.call(this, c);
      } else {
        $thisType.Of($thisType.T.get(this)).prototype.AddEnumerable.call(this, collection);
      }
      ++this._version;
    }
  );

  $.Method({Static:false, Public:true }, "AsReadOnly", 
    $sig.make(0xD99, $asm01.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [new JSIL.GenericParameter("T", "System.Collections.Generic.List`1")]), [], []), 
    function List$b1_AsReadOnly () {
      return new ($asm01.System.Collections.ObjectModel.ReadOnlyCollection$b1.Of($thisType.T.get(this))) (this);
    }
  );

  $.Method({Static:false, Public:true }, "BinarySearch", 
    $sig.make(0xD9B, $asm01.TypeRef("System.Int32"), [new JSIL.GenericParameter("T", "System.Collections.Generic.List`1")], []), 
    function List$b1_BinarySearch (item) {
      return (new JSIL.MethodSignature($asm01.System.Int32, [
            $jsilcore.TypeRef("System.Array", ["!!0"]), $asm01.System.Int32, 
            $asm01.System.Int32, $asm01.System.Object
          ], ["T"])).CallStatic($T06(), "BinarySearch$b1", [$thisType.T.get(this)], this._items, 0, this._size, item);
    }
  );

  $.Method({Static:false, Public:true }, "BinarySearch", 
    $sig.make(0xD9D, $asm01.TypeRef("System.Int32"), [new JSIL.GenericParameter("T", "System.Collections.Generic.List`1"), $asm01.TypeRef("System.Collections.Generic.IComparer`1", [new JSIL.GenericParameter("T", "System.Collections.Generic.List`1")])], []), 
    function List$b1_BinarySearch (item, comparer) {
      return (new JSIL.MethodSignature($asm01.System.Int32, [
            $jsilcore.TypeRef("System.Array", ["!!0"]), $asm01.System.Int32, 
            $asm01.System.Int32, $asm01.System.Object, 
            $asm01.TypeRef("System.Collections.Generic.IComparer`1", ["!!0"])
          ], ["T"])).CallStatic($T06(), "BinarySearch$b1", [$thisType.T.get(this)], 
        this._items, 
        0, 
        this._size, 
        item, 
        comparer
      );
    }
  );

  $.Method({Static:false, Public:true }, "BinarySearch", 
    $sig.make(0xD9F, $asm01.TypeRef("System.Int32"), [
        $asm01.TypeRef("System.Int32"), $asm01.TypeRef("System.Int32"), 
        new JSIL.GenericParameter("T", "System.Collections.Generic.List`1"), $asm01.TypeRef("System.Collections.Generic.IComparer`1", [new JSIL.GenericParameter("T", "System.Collections.Generic.List`1")])
      ], []), 
    function List$b1_BinarySearch (index, count, item, comparer) {
      $thisType.Of($thisType.T.get(this)).prototype.CheckRange.call(this, index, count);
      return (new JSIL.MethodSignature($asm01.System.Int32, [
            $jsilcore.TypeRef("System.Array", ["!!0"]), $asm01.System.Int32, 
            $asm01.System.Int32, $asm01.System.Object, 
            $asm01.TypeRef("System.Collections.Generic.IComparer`1", ["!!0"])
          ], ["T"])).CallStatic($T06(), "BinarySearch$b1", [$thisType.T.get(this)], 
        this._items, 
        index, 
        count, 
        item, 
        comparer
      );
    }
  );

  $.Method({Static:false, Public:false}, "CheckIndex", 
    $sig.make(0xDD8, null, [$asm01.TypeRef("System.Int32")], []), 
    function List$b1_CheckIndex (index) {
      if (!((index >= 0) && (index <= this._size))) {
        throw new ($T03())("index");
      }
    }
  );

  $.Method({Static:true , Public:false}, "CheckMatch", 
    $sig.make(0xDB8, null, [$asm01.TypeRef("System.Predicate`1", [new JSIL.GenericParameter("T", "System.Collections.Generic.List`1")])], []), 
    function List$b1_CheckMatch (match) {
      if (match === null) {
        throw new ($T00())("match");
      }
    }
  );

  $.Method({Static:false, Public:false}, "CheckRange", 
    $sig.make(0xD83, null, [$asm01.TypeRef("System.Int32"), $asm01.TypeRef("System.Int32")], []), 
    function List$b1_CheckRange (idx, count) {
      if (idx < 0) {
        throw new ($T03())("index");
      }
      if (count < 0) {
        throw new ($T03())("count");
      }
      if (((idx + count) | 0) > this._size) {
        throw new ($T07())("index and count exceed length of list");
      }
    }
  );

  $.Method({Static:false, Public:true }, "Clear", 
    $sig.make(0xDA1, null, [], []), 
    function List$b1_Clear () {
                      (function Array_Clear(array, index, length) {
                          var defaultValue = null;
                          for (var i = 0; i<length; i++)
                              array[i+index] = defaultValue;
                      })(this._items, 0, this._items.length);;
      this._size = 0;
      ++this._version;
    }
  );

  $.Method({Static:false, Public:true }, "Contains", 
    $sig.make(0xDA3, $asm01.TypeRef("System.Boolean"), [new JSIL.GenericParameter("T", "System.Collections.Generic.List`1")], []), 
    function List$b1_Contains (item) {
      return ((                ((function Array_IndexOf(_items, item, index, count) {
                              var result = Array.prototype.indexOf.call(_items, item, index);
                              return result > count ? -1 : result;
                          })(this._items, item, 0, this._size))) !== -1);
    }
  );

  $.Method({Static:false, Public:true }, "ConvertAll", 
    $sig.make(0xDA5, $.Type, [$asm01.TypeRef("System.Converter`2", [new JSIL.GenericParameter("T", "System.Collections.Generic.List`1"), "!!0"])], ["TOutput"]), 
    function List$b1_ConvertAll$b1 (TOutput, converter) {
      if (converter === null) {
        throw new ($T00())("converter");
      }
      var u = $sig.get(0xD79, null, [$asm01.System.Int32], []).Construct($thisType.Of(TOutput), this._size);

      for (var i = 0; i < this._size; ++i) {
        u._items[i] = JSIL.CloneParameter(TOutput, converter(JSIL.CloneParameter($thisType.T.get(this), this._items[i])));
      }
      u._size = this._size;
      return u;
    }
  );

  $.Method({Static:false, Public:true }, "CopyTo", 
    $sig.make(0xDA7, null, [$jsilcore.TypeRef("System.Array", [new JSIL.GenericParameter("T", "System.Collections.Generic.List`1")])], []), 
    function List$b1_CopyTo (array) {
                      ((function(sourceArray, sourceIndex, destinationArray, destinationIndex, length) {
                          var values = [];
                          for (var i=0; i<length; i++)
                              values.push(sourceArray[i + sourceIndex]);
                          for (var i=0; i<length; i++)
                              destinationArray[i+destinationIndex] = values[i];
                      })(this._items, 0, array, 0, this._size));
    }
  );

  $.Method({Static:false, Public:true }, "CopyTo", 
    $sig.make(0xDA9, null, [$jsilcore.TypeRef("System.Array", [new JSIL.GenericParameter("T", "System.Collections.Generic.List`1")]), $asm01.TypeRef("System.Int32")], []), 
    function List$b1_CopyTo (array, arrayIndex) {
                      ((function(sourceArray, sourceIndex, destinationArray, destinationIndex, length) {
                          var values = [];
                          for (var i=0; i<length; i++)
                              values.push(sourceArray[i + sourceIndex]);
                          for (var i=0; i<length; i++)
                              destinationArray[i+destinationIndex] = values[i];
                      })(this._items, 0, array, arrayIndex, this._size));
    }
  );

  $.Method({Static:false, Public:true }, "CopyTo", 
    $sig.make(0xDAC, null, [
        $asm01.TypeRef("System.Int32"), $jsilcore.TypeRef("System.Array", [new JSIL.GenericParameter("T", "System.Collections.Generic.List`1")]), 
        $asm01.TypeRef("System.Int32"), $asm01.TypeRef("System.Int32")
      ], []), 
    function List$b1_CopyTo (index, array, arrayIndex, count) {
      $thisType.Of($thisType.T.get(this)).prototype.CheckRange.call(this, index, count);
                      ((function(sourceArray, sourceIndex, destinationArray, destinationIndex, length) {
                          var values = [];
                          for (var i=0; i<length; i++)
                              values.push(sourceArray[i + sourceIndex]);
                          for (var i=0; i<length; i++)
                              destinationArray[i+destinationIndex] = values[i];
                      })(this._items, index, array, arrayIndex, count));
    }
  );

  $.Method({Static:false, Public:true }, "Exists", 
    $sig.make(0xDAE, $asm01.TypeRef("System.Boolean"), [$asm01.TypeRef("System.Predicate`1", [new JSIL.GenericParameter("T", "System.Collections.Generic.List`1")])], []), 
    function List$b1_Exists (match) {
      $thisType.Of($thisType.T.get(this)).CheckMatch(match);
      return ($thisType.Of($thisType.T.get(this)).prototype.GetIndex.call(this, 0, this._size, match) !== -1);
    }
  );

  $.Method({Static:false, Public:true }, "Find", 
    $sig.make(0xDB4, new JSIL.GenericParameter("T", "System.Collections.Generic.List`1"), [$asm01.TypeRef("System.Predicate`1", [new JSIL.GenericParameter("T", "System.Collections.Generic.List`1")])], []), 
    function List$b1_Find (match) {
      $thisType.Of($thisType.T.get(this)).CheckMatch(match);
      var i = $thisType.Of($thisType.T.get(this)).prototype.GetIndex.call(this, 0, this._size, match);
      return ((i !== -1) ? this._items[i] : ($thisType.T.get(this).IsValueType ? JSIL.CreateInstanceOfType($thisType.T.get(this)) : null));
    }
  );

  $.Method({Static:false, Public:true }, "FindAll", 
    $sig.make(0xDBB, $.Type, [$asm01.TypeRef("System.Predicate`1", [new JSIL.GenericParameter("T", "System.Collections.Generic.List`1")])], []), 
    function List$b1_FindAll (match) {
      $thisType.Of($thisType.T.get(this)).CheckMatch(match);
      if (this._size <= 65536) {
        var result = $thisType.Of($thisType.T.get(this)).prototype.FindAllStackBits.call(this, match);
      } else {
        result = $thisType.Of($thisType.T.get(this)).prototype.FindAllList.call(this, match);
      }
      return result;
    }
  );

  $.Method({Static:false, Public:false}, "FindAllList", 
    $sig.make(0xDC0, $.Type, [$asm01.TypeRef("System.Predicate`1", [new JSIL.GenericParameter("T", "System.Collections.Generic.List`1")])], []), 
    function List$b1_FindAllList (match) {
      var results = new ($thisType.Of($thisType.T.get(this))) ();

      for (var i = 0; i < this._size; ++i) {
        if (match(JSIL.CloneParameter($thisType.T.get(this), this._items[i]))) {
          results.Add(JSIL.CloneParameter($thisType.T.get(this), this._items[i]));
        }
      }
      return results;
    }
  );

  $.Method({Static:false, Public:false}, "FindAllStackBits", 
    $sig.make(0xDBE, $.Type, [$asm01.TypeRef("System.Predicate`1", [new JSIL.GenericParameter("T", "System.Collections.Generic.List`1")])], []), 
    function List$b1_FindAllStackBits (match) {
      throw new ($T09())();
    }
  );

  $.Method({Static:false, Public:true }, "FindIndex", 
    $sig.make(0xDC1, $asm01.TypeRef("System.Int32"), [$asm01.TypeRef("System.Predicate`1", [new JSIL.GenericParameter("T", "System.Collections.Generic.List`1")])], []), 
    function List$b1_FindIndex (match) {
      $thisType.Of($thisType.T.get(this)).CheckMatch(match);
      return $thisType.Of($thisType.T.get(this)).prototype.GetIndex.call(this, 0, this._size, match);
    }
  );

  $.Method({Static:false, Public:true }, "FindIndex", 
    $sig.make(0xDC2, $asm01.TypeRef("System.Int32"), [$asm01.TypeRef("System.Int32"), $asm01.TypeRef("System.Predicate`1", [new JSIL.GenericParameter("T", "System.Collections.Generic.List`1")])], []), 
    function List$b1_FindIndex (startIndex, match) {
      $thisType.Of($thisType.T.get(this)).CheckMatch(match);
      $thisType.Of($thisType.T.get(this)).prototype.CheckIndex.call(this, startIndex);
      return $thisType.Of($thisType.T.get(this)).prototype.GetIndex.call(this, startIndex, ((this._size - startIndex) | 0), match);
    }
  );

  $.Method({Static:false, Public:true }, "FindIndex", 
    $sig.make(0xDC3, $asm01.TypeRef("System.Int32"), [
        $asm01.TypeRef("System.Int32"), $asm01.TypeRef("System.Int32"), 
        $asm01.TypeRef("System.Predicate`1", [new JSIL.GenericParameter("T", "System.Collections.Generic.List`1")])
      ], []), 
    function List$b1_FindIndex (startIndex, count, match) {
      $thisType.Of($thisType.T.get(this)).CheckMatch(match);
      $thisType.Of($thisType.T.get(this)).prototype.CheckRange.call(this, startIndex, count);
      return $thisType.Of($thisType.T.get(this)).prototype.GetIndex.call(this, startIndex, count, match);
    }
  );

  $.Method({Static:false, Public:true }, "FindLast", 
    $sig.make(0xDC5, new JSIL.GenericParameter("T", "System.Collections.Generic.List`1"), [$asm01.TypeRef("System.Predicate`1", [new JSIL.GenericParameter("T", "System.Collections.Generic.List`1")])], []), 
    function List$b1_FindLast (match) {
      $thisType.Of($thisType.T.get(this)).CheckMatch(match);
      var i = $thisType.Of($thisType.T.get(this)).prototype.GetLastIndex.call(this, 0, this._size, match);
      return ((i === -1) ? ($thisType.T.get(this).IsValueType ? JSIL.CreateInstanceOfType($thisType.T.get(this)) : null) : this.get_Item(i));
    }
  );

  $.Method({Static:false, Public:true }, "FindLastIndex", 
    $sig.make(0xDC6, $asm01.TypeRef("System.Int32"), [$asm01.TypeRef("System.Predicate`1", [new JSIL.GenericParameter("T", "System.Collections.Generic.List`1")])], []), 
    function List$b1_FindLastIndex (match) {
      $thisType.Of($thisType.T.get(this)).CheckMatch(match);
      return $thisType.Of($thisType.T.get(this)).prototype.GetLastIndex.call(this, 0, this._size, match);
    }
  );

  $.Method({Static:false, Public:true }, "FindLastIndex", 
    $sig.make(0xDC7, $asm01.TypeRef("System.Int32"), [$asm01.TypeRef("System.Int32"), $asm01.TypeRef("System.Predicate`1", [new JSIL.GenericParameter("T", "System.Collections.Generic.List`1")])], []), 
    function List$b1_FindLastIndex (startIndex, match) {
      $thisType.Of($thisType.T.get(this)).CheckMatch(match);
      $thisType.Of($thisType.T.get(this)).prototype.CheckIndex.call(this, startIndex);
      return $thisType.Of($thisType.T.get(this)).prototype.GetLastIndex.call(this, 0, ((startIndex + 1) | 0), match);
    }
  );

  $.Method({Static:false, Public:true }, "FindLastIndex", 
    $sig.make(0xDC8, $asm01.TypeRef("System.Int32"), [
        $asm01.TypeRef("System.Int32"), $asm01.TypeRef("System.Int32"), 
        $asm01.TypeRef("System.Predicate`1", [new JSIL.GenericParameter("T", "System.Collections.Generic.List`1")])
      ], []), 
    function List$b1_FindLastIndex (startIndex, count, match) {
      $thisType.Of($thisType.T.get(this)).CheckMatch(match);
      var start = ((((startIndex - count) | 0) + 1) | 0);
      $thisType.Of($thisType.T.get(this)).prototype.CheckRange.call(this, start, count);
      return $thisType.Of($thisType.T.get(this)).prototype.GetLastIndex.call(this, start, count, match);
    }
  );

  $.Method({Static:false, Public:true }, "ForEach", 
    $sig.make(0xDCA, null, [$asm01.TypeRef("System.Action`1", [new JSIL.GenericParameter("T", "System.Collections.Generic.List`1")])], []), 
    function List$b1_ForEach (action) {
      if (action === null) {
        throw new ($T00())("action");
      }

      for (var i = 0; i < this._size; ++i) {
        action(JSIL.CloneParameter($thisType.T.get(this), this._items[i]));
      }
    }
  );

  $.Method({Static:false, Public:true }, "get_Capacity", 
    $sig.make(0xCD7, $asm01.TypeRef("System.Int32"), [], []), 
    function List$b1_get_Capacity () {
      return this._items.length;
    }
  );

  $.Method({Static:false, Public:true }, "get_Count", 
    $sig.make(0xCD9, $asm01.TypeRef("System.Int32"), [], []), 
    function List$b1_get_Count () {
      return this._size;
    }
  );

  $.Method({Static:false, Public:true }, "get_Item", 
    $sig.make(0xCDA, new JSIL.GenericParameter("T", "System.Collections.Generic.List`1"), [$asm01.TypeRef("System.Int32")], []), 
    function List$b1_get_Item (index) {
      if (index >= this._size) {
        throw new ($T03())("index");
      }
      return this._items[index];
    }
  );

  $.Method({Static:false, Public:true }, "GetEnumerator", 
    $sig.make(0xDCB, $asm01.TypeRef("System.Collections.Generic.List`1/Enumerator", [new JSIL.GenericParameter("T", "System.Collections.Generic.List`1")]), [], []), 
    function List$b1_GetEnumerator () {
      return new ($asm01.System.Collections.Generic.List$b1_Enumerator.Of($thisType.T.get(this))) (this);
    }
  );

  $.Method({Static:false, Public:false}, "GetIndex", 
    $sig.make(0xDC4, $asm01.TypeRef("System.Int32"), [
        $asm01.TypeRef("System.Int32"), $asm01.TypeRef("System.Int32"), 
        $asm01.TypeRef("System.Predicate`1", [new JSIL.GenericParameter("T", "System.Collections.Generic.List`1")])
      ], []), 
    function List$b1_GetIndex (startIndex, count, match) {
      var end = ((startIndex + count) | 0);

      for (var i = startIndex; i < end; ++i) {
        if (match(JSIL.CloneParameter($thisType.T.get(this), this._items[i]))) {
          var result = i;
          return result;
        }
      }
      result = -1;
      return result;
    }
  );

  $.Method({Static:false, Public:false}, "GetLastIndex", 
    $sig.make(0xDC9, $asm01.TypeRef("System.Int32"), [
        $asm01.TypeRef("System.Int32"), $asm01.TypeRef("System.Int32"), 
        $asm01.TypeRef("System.Predicate`1", [new JSIL.GenericParameter("T", "System.Collections.Generic.List`1")])
      ], []), 
    function List$b1_GetLastIndex (startIndex, count, match) {

      for (var i = ((startIndex + count) | 0); i !== startIndex; ) {
        if (match(JSIL.CloneParameter($thisType.T.get(this), this._items[--i]))) {
          var result = i;
          return result;
        }
      }
      result = -1;
      return result;
    }
  );

  $.Method({Static:false, Public:true }, "GetRange", 
    $sig.make(0xDCC, $.Type, [$asm01.TypeRef("System.Int32"), $asm01.TypeRef("System.Int32")], []), 
    function List$b1_GetRange (index, count) {
      $thisType.Of($thisType.T.get(this)).prototype.CheckRange.call(this, index, count);
      var tmpArray = JSIL.Array.New($thisType.T.get(this), count);
                      ((function(sourceArray, sourceIndex, destinationArray, destinationIndex, length) {
                          var values = [];
                          for (var i=0; i<length; i++)
                              values.push(sourceArray[i + sourceIndex]);
                          for (var i=0; i<length; i++)
                              destinationArray[i+destinationIndex] = values[i];
                      })(this._items, index, tmpArray, 0, count));
      return new ($thisType.Of($thisType.T.get(this))) (tmpArray, count);
    }
  );

  $.Method({Static:false, Public:false}, "GrowIfNeeded", 
    $sig.make(0xD81, null, [$asm01.TypeRef("System.Int32")], []), 
    function List$b1_GrowIfNeeded (newCount) {
      var minimumSize = ((this._size + newCount) | 0);
      if (minimumSize > this._items.length) {
        $thisType.Of($thisType.T.get(this)).prototype.set_Capacity.call(this, Math.max(Math.max((($thisType.Of($thisType.T.get(this)).prototype.get_Capacity.call(this) * 2) | 0), 4), minimumSize));
      }
    }
  );

  $.Method({Static:false, Public:true }, "IndexOf", 
    $sig.make(0xDCD, $asm01.TypeRef("System.Int32"), [new JSIL.GenericParameter("T", "System.Collections.Generic.List`1")], []), 
    function List$b1_IndexOf (item) {
      return                 ((function Array_IndexOf(_items, item, index, count) {
                          var result = Array.prototype.indexOf.call(_items, item, index);
                          return result > count ? -1 : result;
                      })(this._items, item, 0, this._size));
    }
  );

  $.Method({Static:false, Public:true }, "IndexOf", 
    $sig.make(0xDCE, $asm01.TypeRef("System.Int32"), [new JSIL.GenericParameter("T", "System.Collections.Generic.List`1"), $asm01.TypeRef("System.Int32")], []), 
    function List$b1_IndexOf (item, index) {
      $thisType.Of($thisType.T.get(this)).prototype.CheckIndex.call(this, index);
      return                 ((function Array_IndexOf(_items, item, index, count) {
                          var result = Array.prototype.indexOf.call(_items, item, index);
                          return result > count ? -1 : result;
                      })(this._items, item, index, ((this._size - index) | 0)));
    }
  );

  $.Method({Static:false, Public:true }, "IndexOf", 
    $sig.make(0xDD0, $asm01.TypeRef("System.Int32"), [
        new JSIL.GenericParameter("T", "System.Collections.Generic.List`1"), $asm01.TypeRef("System.Int32"), 
        $asm01.TypeRef("System.Int32")
      ], []), 
    function List$b1_IndexOf (item, index, count) {
      if (index < 0) {
        throw new ($T03())("index");
      }
      if (count < 0) {
        throw new ($T03())("count");
      }
      if (((index + count) | 0) > this._size) {
        throw new ($T03())("index and count exceed length of list");
      }
      return                 ((function Array_IndexOf(_items, item, index, count) {
                          var result = Array.prototype.indexOf.call(_items, item, index);
                          return result > count ? -1 : result;
                      })(this._items, item, index, count));
    }
  );

  $.Method({Static:false, Public:true }, "Insert", 
    $sig.make(0xDDA, null, [$asm01.TypeRef("System.Int32"), new JSIL.GenericParameter("T", "System.Collections.Generic.List`1")], []), 
    function List$b1_Insert (index, item) {
      $thisType.Of($thisType.T.get(this)).prototype.CheckIndex.call(this, index);
      if (this._size === this._items.length) {
        $thisType.Of($thisType.T.get(this)).prototype.GrowIfNeeded.call(this, 1);
      }
      $thisType.Of($thisType.T.get(this)).prototype.Shift.call(this, index, 1);
      this._items[index] = item;
      ++this._version;
    }
  );

  $.Method({Static:false, Public:false}, "InsertCollection", 
    $sig.make(0xDE0, null, [$asm01.TypeRef("System.Int32"), $asm01.TypeRef("System.Collections.Generic.ICollection`1", [new JSIL.GenericParameter("T", "System.Collections.Generic.List`1")])], []), 
    function List$b1_InsertCollection (index, collection) {
      var collectionCount = collection.ICollection$b1_get_Count();
      $thisType.Of($thisType.T.get(this)).prototype.GrowIfNeeded.call(this, collectionCount);
      $thisType.Of($thisType.T.get(this)).prototype.Shift.call(this, index, collectionCount);
      collection.ICollection$b1_CopyTo(this._items, index);
    }
  );

  $.Method({Static:false, Public:false}, "InsertEnumeration", 
    $sig.make(0xDE4, null, [$asm01.TypeRef("System.Int32"), $asm01.TypeRef("System.Collections.Generic.IEnumerable`1", [new JSIL.GenericParameter("T", "System.Collections.Generic.List`1")])], []), 
    function List$b1_InsertEnumeration (index, enumerable) {
      var enumerator = enumerable.IEnumerable$b1_GetEnumerator();
      try {

        while (enumerator.IEnumerator_MoveNext()) {
          var t = JSIL.CloneParameter($thisType.T.get(this), enumerator.IEnumerator$b1_get_Current());
          this.Insert(index++, JSIL.CloneParameter($thisType.T.get(this), t));
        }
      } finally {
        if (enumerator !== null) {
          enumerator.IDisposable_Dispose();
        }
      }
    }
  );

  $.Method({Static:false, Public:true }, "InsertRange", 
    $sig.make(0xDDC, null, [$asm01.TypeRef("System.Int32"), $asm01.TypeRef("System.Collections.Generic.IEnumerable`1", [new JSIL.GenericParameter("T", "System.Collections.Generic.List`1")])], []), 
    function List$b1_InsertRange (index, collection) {
      if (collection === null) {
        throw new ($T00())("collection");
      }
      $thisType.Of($thisType.T.get(this)).prototype.CheckIndex.call(this, index);
      if (collection === this) {
        var buffer = JSIL.Array.New($thisType.T.get(this), this._size);
        this.CopyTo(buffer, 0);
        $thisType.Of($thisType.T.get(this)).prototype.GrowIfNeeded.call(this, this._size);
        $thisType.Of($thisType.T.get(this)).prototype.Shift.call(this, index, buffer.length);
                        ((function(sourceArray, sourceIndex, destinationArray, destinationIndex, length) {
                            var values = [];
                            for (var i=0; i<length; i++)
                                values.push(sourceArray[i + sourceIndex]);
                            for (var i=0; i<length; i++)
                                destinationArray[i+destinationIndex] = values[i];
                        })(buffer, 0, this._items, index, buffer.length));
      } else {
        var c = $asm01.System.Collections.Generic.ICollection$b1.Of($thisType.T.get(this)).$As(collection);
        if (c !== null) {
          $thisType.Of($thisType.T.get(this)).prototype.InsertCollection.call(this, index, c);
        } else {
          $thisType.Of($thisType.T.get(this)).prototype.InsertEnumeration.call(this, index, collection);
        }
      }
      ++this._version;
    }
  );

  $.Method({Static:false, Public:true }, "LastIndexOf", 
    $sig.make(0xDE7, $asm01.TypeRef("System.Int32"), [new JSIL.GenericParameter("T", "System.Collections.Generic.List`1")], []), 
    function List$b1_LastIndexOf (item) {
      return $T06().LastIndexOf$b1($thisType.T.get(this))(this._items, item, ((this._size - 1) | 0), this._size);
    }
  );

  $.Method({Static:false, Public:true }, "LastIndexOf", 
    $sig.make(0xDE9, $asm01.TypeRef("System.Int32"), [new JSIL.GenericParameter("T", "System.Collections.Generic.List`1"), $asm01.TypeRef("System.Int32")], []), 
    function List$b1_LastIndexOf (item, index) {
      $thisType.Of($thisType.T.get(this)).prototype.CheckIndex.call(this, index);
      return $T06().LastIndexOf$b1($thisType.T.get(this))(this._items, item, index, ((index + 1) | 0));
    }
  );

  $.Method({Static:false, Public:true }, "LastIndexOf", 
    $sig.make(0xDEB, $asm01.TypeRef("System.Int32"), [
        new JSIL.GenericParameter("T", "System.Collections.Generic.List`1"), $asm01.TypeRef("System.Int32"), 
        $asm01.TypeRef("System.Int32")
      ], []), 
    function List$b1_LastIndexOf (item, index, count) {
      if (index < 0) {
        throw new ($T03())("index", index, "index is negative");
      }
      if (count < 0) {
        throw new ($T03())("count", count, "count is negative");
      }
      if (((((index - count) | 0) + 1) | 0) < 0) {
        throw new ($T03())("cound", count, "count is too large");
      }
      return $T06().LastIndexOf$b1($thisType.T.get(this))(this._items, item, index, count);
    }
  );

  $.Method({Static:false, Public:true }, "Remove", 
    $sig.make(0xDEC, $asm01.TypeRef("System.Boolean"), [new JSIL.GenericParameter("T", "System.Collections.Generic.List`1")], []), 
    function List$b1_Remove (item) {
      var loc = this.IndexOf(item);
      if (loc !== -1) {
        this.RemoveAt(loc);
      }
      return (loc !== -1);
    }
  );

  $.Method({Static:false, Public:true }, "RemoveAll", 
    $sig.make(0xDEE, $asm01.TypeRef("System.Int32"), [$asm01.TypeRef("System.Predicate`1", [new JSIL.GenericParameter("T", "System.Collections.Generic.List`1")])], []), 
    function List$b1_RemoveAll (match) {
      $thisType.Of($thisType.T.get(this)).CheckMatch(match);

    $loop0: 
      for (var i = 0; i < this._size; ++i) {
        if (match(JSIL.CloneParameter($thisType.T.get(this), this._items[i]))) {
          break $loop0;
        }
      }
      if (i === this._size) {
        var result = 0;
      } else {
        ++this._version;

        for (var j = ((i + 1) | 0); j < this._size; ++j) {
          if (!match(JSIL.CloneParameter($thisType.T.get(this), this._items[j]))) {
            this._items[i++] = JSIL.CloneParameter($thisType.T.get(this), this._items[j]);
          }
        }
        if (((j - i) | 0) > 0) {
                          (function Array_Clear(array, index, length) {
                              var defaultValue = null;
                              for (var i = 0; i<length; i++)
                                  array[i+index] = defaultValue;
                          })(this._items, i, ((j - i) | 0));;
        }
        this._size = i;
        result = ((j - i) | 0);
      }
      return result;
    }
  );

  $.Method({Static:false, Public:true }, "RemoveAt", 
    $sig.make(0xDEF, null, [$asm01.TypeRef("System.Int32")], []), 
    function List$b1_RemoveAt (index) {
      if (!((index >= 0) && (index < this._size))) {
        throw new ($T03())("index");
      }
      $thisType.Of($thisType.T.get(this)).prototype.Shift.call(this, index, -1);
                      (function Array_Clear(array, index, length) {
                          var defaultValue = null;
                          for (var i = 0; i<length; i++)
                              array[i+index] = defaultValue;
                      })(this._items, this._size, 1);;
      ++this._version;
    }
  );

  $.Method({Static:false, Public:true }, "RemoveRange", 
    $sig.make(0xDF0, null, [$asm01.TypeRef("System.Int32"), $asm01.TypeRef("System.Int32")], []), 
    function List$b1_RemoveRange (index, count) {
      $thisType.Of($thisType.T.get(this)).prototype.CheckRange.call(this, index, count);
      if (count > 0) {
        $thisType.Of($thisType.T.get(this)).prototype.Shift.call(this, index, -count);
                        (function Array_Clear(array, index, length) {
                            var defaultValue = null;
                            for (var i = 0; i<length; i++)
                                array[i+index] = defaultValue;
                        })(this._items, this._size, count);;
        ++this._version;
      }
    }
  );

  $.Method({Static:false, Public:true }, "Reverse", 
    $sig.make(0xDF2, null, [], []), 
    function List$b1_Reverse () {
      $T06().Reverse(this._items, 0, this._size);
      ++this._version;
    }
  );

  $.Method({Static:false, Public:true }, "Reverse", 
    $sig.make(0xDF4, null, [$asm01.TypeRef("System.Int32"), $asm01.TypeRef("System.Int32")], []), 
    function List$b1_Reverse (index, count) {
      $thisType.Of($thisType.T.get(this)).prototype.CheckRange.call(this, index, count);
      $T06().Reverse(this._items, index, count);
      ++this._version;
    }
  );

  $.Method({Static:false, Public:true }, "set_Capacity", 
    $sig.make(0xCD8, null, [$asm01.TypeRef("System.Int32")], []), 
    function List$b1_set_Capacity (value) {
      if (value < this._size) {
        throw new ($T03())();
      }
      $T06().Resize$b1($thisType.T.get(this))(/* ref */ new JSIL.MemberReference(this, "_items"), value);
    }
  );

  $.Method({Static:false, Public:true }, "set_Item", 
    $sig.make(0xCF3, null, [$asm01.TypeRef("System.Int32"), new JSIL.GenericParameter("T", "System.Collections.Generic.List`1")], []), 
    function List$b1_set_Item (index, value) {
      $thisType.Of($thisType.T.get(this)).prototype.CheckIndex.call(this, index);
      if (index === this._size) {
        throw new ($T03())("index");
      }
      this._items[index] = value;
      ++this._version;
    }
  );

  $.Method({Static:false, Public:false}, "Shift", 
    $sig.make(0xDD2, null, [$asm01.TypeRef("System.Int32"), $asm01.TypeRef("System.Int32")], []), 
    function List$b1_Shift (start, delta) {
      if (delta < 0) {
        start -= delta;
      }
      if (start < this._size) {
                        ((function(sourceArray, sourceIndex, destinationArray, destinationIndex, length) {
                            var values = [];
                            for (var i=0; i<length; i++)
                                values.push(sourceArray[i + sourceIndex]);
                            for (var i=0; i<length; i++)
                                destinationArray[i+destinationIndex] = values[i];
                        })(this._items, start, this._items, ((start + delta) | 0), ((this._size - start) | 0)));
      }
      this._size += delta;
      if (delta < 0) {
                        (function Array_Clear(array, index, length) {
                            var defaultValue = null;
                            for (var i = 0; i<length; i++)
                                array[i+index] = defaultValue;
                        })(this._items, this._size, -delta);;
      }
    }
  );

  $.Method({Static:false, Public:true }, "Sort", 
    $sig.make(0xDF6, null, [], []), 
    function List$b1_Sort () {
      (new JSIL.MethodSignature(null, [
            $jsilcore.TypeRef("System.Array", ["!!0"]), $asm01.System.Int32, 
            $asm01.System.Int32
          ], ["T"])).CallStatic($T06(), "Sort$b1", [$thisType.T.get(this)], this._items, 0, this._size);
      ++this._version;
    }
  );

  $.Method({Static:false, Public:true }, "Sort", 
    $sig.make(0xDF7, null, [$asm01.TypeRef("System.Collections.Generic.IComparer`1", [new JSIL.GenericParameter("T", "System.Collections.Generic.List`1")])], []), 
    function List$b1_Sort (comparer) {
      (new JSIL.MethodSignature(null, [
            $jsilcore.TypeRef("System.Array", ["!!0"]), $asm01.System.Int32, 
            $asm01.System.Int32, $asm01.TypeRef("System.Collections.Generic.IComparer`1", ["!!0"])
          ], ["T"])).CallStatic($T06(), "Sort$b1", [$thisType.T.get(this)], this._items, 0, this._size, comparer);
      ++this._version;
    }
  );

  $.Method({Static:false, Public:true }, "Sort", 
    $sig.make(0xDF9, null, [$asm01.TypeRef("System.Comparison`1", [new JSIL.GenericParameter("T", "System.Collections.Generic.List`1")])], []), 
    function List$b1_Sort (comparison) {
      if (comparison === null) {
        throw new ($T00())("comparison");
      }
      $T06().SortImpl$b1($thisType.T.get(this))(this._items, this._size, comparison);
      ++this._version;
    }
  );

  $.Method({Static:false, Public:true }, "Sort", 
    $sig.make(0xDFC, null, [
        $asm01.TypeRef("System.Int32"), $asm01.TypeRef("System.Int32"), 
        $asm01.TypeRef("System.Collections.Generic.IComparer`1", [new JSIL.GenericParameter("T", "System.Collections.Generic.List`1")])
      ], []), 
    function List$b1_Sort (index, count, comparer) {
      $thisType.Of($thisType.T.get(this)).prototype.CheckRange.call(this, index, count);
      (new JSIL.MethodSignature(null, [
            $jsilcore.TypeRef("System.Array", ["!!0"]), $asm01.System.Int32, 
            $asm01.System.Int32, $asm01.TypeRef("System.Collections.Generic.IComparer`1", ["!!0"])
          ], ["T"])).CallStatic($T06(), "Sort$b1", [$thisType.T.get(this)], this._items, index, count, comparer);
      ++this._version;
    }
  );

  $.Method({Static:false, Public:false}, "ICollection`1.get_IsReadOnly", 
    $sig.make(0xD60, $asm01.TypeRef("System.Boolean"), [], []), 
    function List$b1_ICollection$b1_get_IsReadOnly () {
      return false;
    }
  );

  $.Method({Static:false, Public:false}, "IEnumerable`1.GetEnumerator", 
    $sig.make(0xE08, $asm01.TypeRef("System.Collections.Generic.IEnumerator`1", [new JSIL.GenericParameter("T", "System.Collections.Generic.List`1")]), [], []), 
    function List$b1_IEnumerable$b1_GetEnumerator () {
      return $thisType.Of($thisType.T.get(this)).prototype.GetEnumerator.call(this);
    }
  );

  $.Method({Static:false, Public:false}, "ICollection.CopyTo", 
    $sig.make(0xE0A, null, [$asm01.TypeRef("System.Array"), $asm01.TypeRef("System.Int32")], []), 
    function List$b1_ICollection_CopyTo (array, arrayIndex) {
      if (array === null) {
        throw new ($T00())("array");
      }
      if (!((array.get_Rank() <= 1) && (0 === 0))) {
        throw $sig.get(0x818, null, [$asm01.System.String, $asm01.System.String], []).Construct($T07(), "Array must be zero based and single dimentional", "array");
      }
                      ((function(sourceArray, sourceIndex, destinationArray, destinationIndex, length) {
                          var values = [];
                          for (var i=0; i<length; i++)
                              values.push(sourceArray[i + sourceIndex]);
                          for (var i=0; i<length; i++)
                              destinationArray[i+destinationIndex] = values[i];
                      })(this._items, 0, array, arrayIndex, this._size));
    }
  );

  $.Method({Static:false, Public:false}, "ICollection.get_IsSynchronized", 
    $sig.make(0xD63, $asm01.TypeRef("System.Boolean"), [], []), 
    function List$b1_ICollection_get_IsSynchronized () {
      return false;
    }
  );

  $.Method({Static:false, Public:false}, "ICollection.get_SyncRoot", 
    $sig.make(0xD68, $asm01.TypeRef("System.Object"), [], []), 
    function List$b1_ICollection_get_SyncRoot () {
      return this;
    }
  );

  $.Method({Static:false, Public:false}, "IEnumerable.GetEnumerator", 
    $sig.make(0xE0E, $asm01.TypeRef("System.Collections.IEnumerator"), [], []), 
    function List$b1_IEnumerable_GetEnumerator () {
      return $thisType.Of($thisType.T.get(this)).prototype.GetEnumerator.call(this);
    }
  );

  $.Method({Static:false, Public:false}, "IList.Add", 
    $sig.make(0xE11, $asm01.TypeRef("System.Int32"), [$asm01.TypeRef("System.Object")], []), 
    function List$b1_IList_Add (item) {
      try {
        this.Add(JSIL.CloneParameter($thisType.T.get(this), $thisType.T.get(this).$Cast(item)));
        return ((this._size - 1) | 0);
      } catch ($exception) {
        if ($T0C().$Is($exception)) {
        } else if ($T0D().$Is($exception)) {
        } else {
          throw $exception;
        }
      }
      throw new ($T07())("item");
    }
  );

  $.Method({Static:false, Public:false}, "IList.Contains", 
    $sig.make(0xE13, $asm01.TypeRef("System.Boolean"), [$asm01.TypeRef("System.Object")], []), 
    function List$b1_IList_Contains (item) {
      try {
        var result = this.Contains(JSIL.CloneParameter($thisType.T.get(this), $thisType.T.get(this).$Cast(item)));
        return result;
      } catch ($exception) {
        if ($T0C().$Is($exception)) {
        } else if ($T0D().$Is($exception)) {
        } else {
          throw $exception;
        }
      }
      result = false;
      return result;
    }
  );

  $.Method({Static:false, Public:false}, "IList.get_IsFixedSize", 
    $sig.make(0xD6C, $asm01.TypeRef("System.Boolean"), [], []), 
    function List$b1_IList_get_IsFixedSize () {
      return false;
    }
  );

  $.Method({Static:false, Public:false}, "IList.get_IsReadOnly", 
    $sig.make(0xD6F, $asm01.TypeRef("System.Boolean"), [], []), 
    function List$b1_IList_get_IsReadOnly () {
      return false;
    }
  );

  $.Method({Static:false, Public:false}, "IList.get_Item", 
    $sig.make(0xD71, $asm01.TypeRef("System.Object"), [$asm01.TypeRef("System.Int32")], []), 
    function List$b1_IList_get_Item (index) {
      return this.get_Item(index);
    }
  );

  $.Method({Static:false, Public:false}, "IList.IndexOf", 
    $sig.make(0xE16, $asm01.TypeRef("System.Int32"), [$asm01.TypeRef("System.Object")], []), 
    function List$b1_IList_IndexOf (item) {
      try {
        var result = this.IndexOf(JSIL.CloneParameter($thisType.T.get(this), $thisType.T.get(this).$Cast(item)));
        return result;
      } catch ($exception) {
        if ($T0C().$Is($exception)) {
        } else if ($T0D().$Is($exception)) {
        } else {
          throw $exception;
        }
      }
      result = -1;
      return result;
    }
  );

  $.Method({Static:false, Public:false}, "IList.Insert", 
    $sig.make(0xE19, null, [$asm01.TypeRef("System.Int32"), $asm01.TypeRef("System.Object")], []), 
    function List$b1_IList_Insert (index, item) {
      $thisType.Of($thisType.T.get(this)).prototype.CheckIndex.call(this, index);
      try {
        this.Insert(index, JSIL.CloneParameter($thisType.T.get(this), $thisType.T.get(this).$Cast(item)));
        return;
      } catch ($exception) {
        if ($T0C().$Is($exception)) {
        } else if ($T0D().$Is($exception)) {
        } else {
          throw $exception;
        }
      }
      throw new ($T07())("item");
    }
  );

  $.Method({Static:false, Public:false}, "IList.Remove", 
    $sig.make(0xE1C, null, [$asm01.TypeRef("System.Object")], []), 
    function List$b1_IList_Remove (item) {
      try {
        this.Remove(JSIL.CloneParameter($thisType.T.get(this), $thisType.T.get(this).$Cast(item)));
      } catch ($exception) {
        if ($T0C().$Is($exception)) {
        } else if ($T0D().$Is($exception)) {
        } else {
          throw $exception;
        }
      }
    }
  );

  $.Method({Static:false, Public:false}, "IList.set_Item", 
    $sig.make(0xD73, null, [$asm01.TypeRef("System.Int32"), $asm01.TypeRef("System.Object")], []), 
    function List$b1_IList_set_Item (index, value) {
      try {
        this.set_Item(index, JSIL.CloneParameter($thisType.T.get(this), $thisType.T.get(this).$Cast(value)));
        return;
      } catch ($exception) {
        if ($T0C().$Is($exception)) {
        } else if ($T0D().$Is($exception)) {
        } else {
          throw $exception;
        }
      }
      throw new ($T07())("value");
    }
  );

  $.Method({Static:false, Public:true }, "ToArray", 
    $sig.make(0xDFE, $jsilcore.TypeRef("System.Array", [new JSIL.GenericParameter("T", "System.Collections.Generic.List`1")]), [], []), 
    function List$b1_ToArray () {
      var t = JSIL.Array.New($thisType.T.get(this), this._size);
                      ((function (source, dest, length) {
                          for (var i = 0; i<length; i++)
                              dest[i] = source[i];
                      })(this._items, t, this._size));
      return t;
    }
  );

  $.Method({Static:false, Public:true }, "TrimExcess", 
    $sig.make(0xE00, null, [], []), 
    function List$b1_TrimExcess () {
      $thisType.Of($thisType.T.get(this)).prototype.set_Capacity.call(this, this._size);
    }
  );

  $.Method({Static:false, Public:true }, "TrueForAll", 
    $sig.make(0xE02, $asm01.TypeRef("System.Boolean"), [$asm01.TypeRef("System.Predicate`1", [new JSIL.GenericParameter("T", "System.Collections.Generic.List`1")])], []), 
    function List$b1_TrueForAll (match) {
      $thisType.Of($thisType.T.get(this)).CheckMatch(match);

      for (var i = 0; i < this._size; ++i) {
        if (!match(JSIL.CloneParameter($thisType.T.get(this), this._items[i]))) {
          var result = false;
          return result;
        }
      }
      result = true;
      return result;
    }
  );

  $.Constant({Static:true , Public:false}, "DefaultCapacity", 4); 
  $.Field({Static:false, Public:false}, "_items", $jsilcore.TypeRef("System.Array", [$.GenericParameter("T")])); 
  $.Field({Static:false, Public:false}, "_size", $asm01.TypeRef("System.Int32")); 
  $.Field({Static:false, Public:false}, "_version", $asm01.TypeRef("System.Int32")); 
  $.Field({Static:true , Public:false, ReadOnly:true }, "EmptyArray", $jsilcore.TypeRef("System.Array", [$.GenericParameter("T")])); 
  $.Method({Static:true , Public:false}, ".cctor", 
    $sig.make(0xE1D, null, [], []), 
    function List$b1__cctor () {
      $thisType.Of($thisType.T.get(this)).EmptyArray = JSIL.Array.New($thisType.T.get(this), 0);
    }
  );

  $.Property({Static:false, Public:true }, "Capacity", $asm01.TypeRef("System.Int32"));

  $.Property({Static:false, Public:true , Virtual:true }, "Count", $asm01.TypeRef("System.Int32"));

  $.Property({Static:false, Public:true , Virtual:true }, "Item", new JSIL.GenericParameter("T", "System.Collections.Generic.List`1"));

  $.Property({Static:false, Public:false, Virtual:true }, "ICollection`1.IsReadOnly", $asm01.TypeRef("System.Boolean"));

  $.Property({Static:false, Public:false, Virtual:true }, "ICollection.IsSynchronized", $asm01.TypeRef("System.Boolean"));

  $.Property({Static:false, Public:false, Virtual:true }, "ICollection.SyncRoot", $asm01.TypeRef("System.Object"));

  $.Property({Static:false, Public:false, Virtual:true }, "IList.IsFixedSize", $asm01.TypeRef("System.Boolean"));

  $.Property({Static:false, Public:false, Virtual:true }, "IList.IsReadOnly", $asm01.TypeRef("System.Boolean"));

  $.Property({Static:false, Public:false, Virtual:true }, "IList.Item", $asm01.TypeRef("System.Object"));

  $.ImplementInterfaces(
      $asm01.TypeRef("System.Collections.Generic.IList`1", [new JSIL.GenericParameter("T", "System.Collections.Generic.List`1")]), $asm01.TypeRef("System.Collections.Generic.ICollection`1", [new JSIL.GenericParameter("T", "System.Collections.Generic.List`1")]), 
      $asm01.TypeRef("System.Collections.Generic.IEnumerable`1", [new JSIL.GenericParameter("T", "System.Collections.Generic.List`1")]), $asm01.TypeRef("System.Collections.IList"), 
      $asm01.TypeRef("System.Collections.ICollection"), $asm01.TypeRef("System.Collections.IEnumerable")
  )
})
  .Attribute($asm01.TypeRef("System.Diagnostics.DebuggerDisplayAttribute"), function () { return ["Count={Count}"]; })
  .Attribute($asm01.TypeRef("System.Diagnostics.DebuggerTypeProxyAttribute"), function () { return [$asm01.TypeRef("System.Collections.Generic.CollectionDebuggerView`1")]; })
  .Attribute($asm01.TypeRef("System.Reflection.DefaultMemberAttribute"), function () { return ["Item"]; });

JSIL.MakeStruct($asm01.TypeRef("System.ValueType"), "System.Collections.Generic.List`1/Enumerator", false, ["T"], function ($) {
  var $thisType = $.publicInterface;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm01.System.Boolean)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm01.System.InvalidOperationException)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm01.System.ObjectDisposedException)) ();
  };

  $.Method({Static:false, Public:false}, ".ctor", 
    $sig.make(0xE4E, null, [$asm01.TypeRef("System.Collections.Generic.List`1", [new JSIL.GenericParameter("T", "System.Collections.Generic.List`1/Enumerator")])], []), 
    function Enumerator__ctor (l) {
      JSIL.CopyMembers(new ($thisType.Of($thisType.T.get(this))) (), this);
      this.l = l;
      this.ver = l._version;
    }
  );

  $.Method({Static:false, Public:true }, "Dispose", 
    $sig.make(0xE4F, null, [], []), 
    function Enumerator_Dispose () {
      this.l = null;
    }
  );

  $.Method({Static:false, Public:true }, "get_Current", 
    $sig.make(0xE49, new JSIL.GenericParameter("T", "System.Collections.Generic.List`1/Enumerator"), [], []), 
    function Enumerator_get_Current () {
      return this.current;
    }
  );

  $.Method({Static:false, Public:true }, "MoveNext", 
    $sig.make(0xE53, $asm01.TypeRef("System.Boolean"), [], []), 
    function Enumerator_MoveNext () {
      this.VerifyState();
      if (this.next < 0) {
        var result = false;
      } else if (this.next < this.l._size) {
        this.current = JSIL.CloneParameter($thisType.T.get(this), this.l._items[this.next++]);
        result = true;
      } else {
        this.next = -1;
        result = false;
      }
      return result;
    }
  );

  $.Method({Static:false, Public:false}, "IEnumerator.get_Current", 
    $sig.make(0xE4B, $asm01.TypeRef("System.Object"), [], []), 
    function Enumerator_IEnumerator_get_Current () {
      this.VerifyState();
      if (this.next <= 0) {
        throw new ($T01())();
      }
      return this.current;
    }
  );

  $.Method({Static:false, Public:false}, "IEnumerator.Reset", 
    $sig.make(0xE56, null, [], []), 
    function Enumerator_IEnumerator_Reset () {
      this.VerifyState();
      this.next = 0;
    }
  );

  $.Method({Static:false, Public:false}, "VerifyState", 
    $sig.make(0xE51, null, [], []), 
    function Enumerator_VerifyState () {
      if (this.l === null) {
        throw new ($T02())(JSIL.GetType(this).Type$FullName$value);
      }
      if (this.ver !== this.l._version) {
        throw new ($T01())("Collection was modified; enumeration operation may not execute.");
      }
    }
  );

  $.Field({Static:false, Public:false}, "l", $asm01.TypeRef("System.Collections.Generic.List`1", [$.GenericParameter("T")])); 
  $.Field({Static:false, Public:false}, "next", $asm01.TypeRef("System.Int32")); 
  $.Field({Static:false, Public:false}, "ver", $asm01.TypeRef("System.Int32")); 
  $.Field({Static:false, Public:false}, "current", $.GenericParameter("T")); 
  $.Property({Static:false, Public:true , Virtual:true }, "Current", new JSIL.GenericParameter("T", "System.Collections.Generic.List`1/Enumerator"));

  $.Property({Static:false, Public:false, Virtual:true }, "IEnumerator.Current", $asm01.TypeRef("System.Object"));

  $.ImplementInterfaces(
      $asm01.TypeRef("System.Collections.Generic.IEnumerator`1", [new JSIL.GenericParameter("T", "System.Collections.Generic.List`1/Enumerator")]), $asm01.TypeRef("System.Collections.IEnumerator"), 
      $asm01.TypeRef("System.IDisposable")
  )
});

JSIL.MakeInterface(
  "System.IDisposable", true, [], function ($) {
    $.Method({}, "Dispose", $sig.make(0x3C7, null, [], []));
  }, []);

JSIL.MakeInterface(
  "System.Collections.Generic.IEnumerator`1", true, ["T"], function ($) {
    $.Method({}, "get_Current", $sig.make(0x3CB, new JSIL.GenericParameter("T", "System.Collections.Generic.IEnumerator`1"), [], []));
    $.Property({}, "Current");
  }, [$asm01.TypeRef("System.IDisposable"), $asm01.TypeRef("System.Collections.IEnumerator")]);

JSIL.MakeStaticClass("JSIL.Builtins", true, [], function ($) {
  var $thisType = $.publicInterface;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm01.JSIL.JSGlobal)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm01.JSIL.JSLocal)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm01.System.String)) ();
  };

  $.Method({Static:true , Public:true }, "Eval", 
    $sig.make(0xE96, $asm01.TypeRef("System.Object"), [$asm01.TypeRef("System.String")], []), 
    function Builtins_Eval (expression) {
      return null;
    }
  );

  $.Method({Static:true , Public:true }, "get_This", 
    $sig.make(0xE95, $asm01.TypeRef("System.Object"), [], []), 
    function Builtins_get_This () {
      return null;
    }
  );

  $.Field({Static:true , Public:true , ReadOnly:true }, "Global", $asm01.TypeRef("JSIL.JSGlobal")); 
  $.Field({Static:true , Public:true , ReadOnly:true }, "Local", $asm01.TypeRef("JSIL.JSLocal")); 
  $.Method({Static:true , Public:false}, ".cctor", 
    $sig.make(0xE97, null, [], []), 
    function Builtins__cctor () {
      $thisType.Global = new ($T00())();
      $thisType.Local = new ($T01())();
    }
  );

  $.Property({Static:true , Public:true }, "This", $asm01.TypeRef("System.Object"));

});

JSIL.MakeStaticClass("JSIL.Verbatim", true, [], function ($) {
  var $thisType = $.publicInterface;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm01.System.String)) ();
  };

  $.Method({Static:true , Public:true }, "Expression", 
    $sig.make(0xEBE, $asm01.TypeRef("System.Object"), [$asm01.TypeRef("System.String")], []), 
    function Verbatim_Expression (javascript) {
      return null;
    }
  );

});

JSIL.MakeClass($asm01.TypeRef("System.Object"), "JSIL.JSGlobal", true, [], function ($) {
  var $thisType = $.publicInterface;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm01.System.String)) ();
  };

  $.Method({Static:false, Public:true }, ".ctor", 
    $sig.make(0xE9D, null, [], []), 
    function JSGlobal__ctor () {
    }
  );

  $.Method({Static:false, Public:true }, "get_Item", 
    $sig.make(0xE9B, $asm01.TypeRef("System.Object"), [$asm01.TypeRef("System.String")], []), 
    function JSGlobal_get_Item (name) {
      return null;
    }
  );

  $.Property({Static:false, Public:true }, "Item", $asm01.TypeRef("System.Object"));

})
  .Attribute($asm01.TypeRef("System.Reflection.DefaultMemberAttribute"), function () { return ["Item"]; });

JSIL.MakeClass($asm01.TypeRef("System.Object"), "JSIL.JSLocal", true, [], function ($) {
  var $thisType = $.publicInterface;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm01.System.String)) ();
  };

  $.Method({Static:false, Public:true }, ".ctor", 
    $sig.make(0xEAF, null, [], []), 
    function JSLocal__ctor () {
    }
  );

  $.Method({Static:false, Public:true }, "get_Item", 
    $sig.make(0xEAE, $asm01.TypeRef("System.Object"), [$asm01.TypeRef("System.String")], []), 
    function JSLocal_get_Item (name) {
      return null;
    }
  );

  $.Property({Static:false, Public:true }, "Item", $asm01.TypeRef("System.Object"));

})
  .Attribute($asm01.TypeRef("System.Reflection.DefaultMemberAttribute"), function () { return ["Item"]; });

JSIL.MakeStruct($asm01.TypeRef("System.ValueType"), "System.Void", true, [], function ($) {
  var $thisType = $.publicInterface;

});

JSIL.MakeTypeAlias($jsilcore, "System.UInt32");

JSIL.MakeClass($asm01.TypeRef("System.Object"), "System.Locale", true, [], function ($) {
  var $thisType = $.publicInterface;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm01.System.String)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize(System.Array.Of($asm01.System.Object))) ();
  };

  $.Method({Static:false, Public:true }, ".ctor", 
    $sig.make(0xEC7, null, [], []), 
    function Locale__ctor () {
    }
  );

  $.Method({Static:true , Public:true }, "GetText", 
    $sig.make(0xEC6, $asm01.TypeRef("System.String"), [$asm01.TypeRef("System.String"), $jsilcore.TypeRef("System.Array", [$asm01.TypeRef("System.Object")])], []), 
    function Locale_GetText (str, objs) {
      return str;
    }
  );

});

JSIL.MakeEnum(
  "System.Runtime.ConstrainedExecution.Cer", true, {
    None: 0, 
    MayFail: 1, 
    Success: 2
  }, false
);

JSIL.MakeClass($asm01.TypeRef("System.Object"), "System.Globalization.NumberFormatInfo", true, [], function ($) {
  var $thisType = $.publicInterface;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm01.System.String)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm01.System.Int32)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm01.System.Boolean)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm01.System.Object)) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize(System.Array.Of($asm01.System.Int32))) ();
  };
  var $T05 = function () {
    return ($T05 = JSIL.Memoize($asm01.System.Threading.Thread)) ();
  };
  var $T06 = function () {
    return ($T06 = JSIL.Memoize($asm01.System.Type)) ();
  };
  var $T07 = function () {
    return ($T07 = JSIL.Memoize($asm01.System.IFormatProvider)) ();
  };
  var $T08 = function () {
    return ($T08 = JSIL.Memoize(System.Array.Of($asm01.System.String))) ();
  };
  var $T09 = function () {
    return ($T09 = JSIL.Memoize($asm01.System.StringEx)) ();
  };
  var $T0A = function () {
    return ($T0A = JSIL.Memoize($asm01.System.Char)) ();
  };
  var $T0B = function () {
    return ($T0B = JSIL.Memoize($asm01.System.ArgumentOutOfRangeException)) ();
  };
  var $T0C = function () {
    return ($T0C = JSIL.Memoize($asm01.System.InvalidOperationException)) ();
  };
  var $T0D = function () {
    return ($T0D = JSIL.Memoize($asm01.System.ArgumentNullException)) ();
  };
  var $T0E = function () {
    return ($T0E = JSIL.Memoize($asm01.System.Globalization.CultureInfo)) ();
  };
  var $T0F = function () {
    return ($T0F = JSIL.Memoize($asm01.System.Exception)) ();
  };

  $.Method({Static:false, Public:false}, ".ctor", 
    $sig.make(0x49C, null, [$asm01.TypeRef("System.Int32"), $asm01.TypeRef("System.Boolean")], []), 
    function NumberFormatInfo__ctor (lcid, read_only) {
      this.digitPattern = "#";
      this.zeroPattern = "0";
      this.nativeDigits = $thisType.invariantNativeDigits;
      this.digitSubstitution = 1;
      this.isReadOnly = read_only;
      if (lcid !== 127) {
        lcid = 127;
      }
      if (lcid === 127) {
        this.currencyDecimalDigits = 2;
        this.currencyDecimalSeparator = ".";
        this.currencyGroupSeparator = ",";
        this.currencyGroupSizes = JSIL.Array.New($T01(), [3]);
        this.currencyNegativePattern = 0;
        this.currencyPositivePattern = 0;
        this.currencySymbol = "\xa4";
        this.nanSymbol = "NaN";
        this.negativeInfinitySymbol = "-Infinity";
        this.negativeSign = "-";
        this.numberDecimalDigits = 2;
        this.numberDecimalSeparator = ".";
        this.numberGroupSeparator = ",";
        this.numberGroupSizes = JSIL.Array.New($T01(), [3]);
        this.numberNegativePattern = 1;
        this.percentDecimalDigits = 2;
        this.percentDecimalSeparator = ".";
        this.percentGroupSeparator = ",";
        this.percentGroupSizes = JSIL.Array.New($T01(), [3]);
        this.percentNegativePattern = 0;
        this.percentPositivePattern = 0;
        this.percentSymbol = "%";
        this.perMilleSymbol = "\u2030";
        this.positiveInfinitySymbol = "Infinity";
        this.positiveSign = "+";
      }
    }
  );

  $.Method({Static:false, Public:false}, ".ctor", 
    $sig.make(0x49D, null, [$asm01.TypeRef("System.Boolean")], []), 
    function NumberFormatInfo__ctor (read_only) {
      $thisType.prototype._ctor.call(this, 127, read_only);
    }
  );

  $.Method({Static:false, Public:true }, ".ctor", 
    $sig.make(0x49E, null, [], []), 
    function NumberFormatInfo__ctor () {
      $thisType.prototype._ctor.call(this, false);
    }
  );

  $.Method({Static:false, Public:true }, "Clone", 
    $sig.make(0x4A7, $asm01.TypeRef("System.Object"), [], []), 
    function NumberFormatInfo_Clone () {
      var clone = $thisType.$Cast($T03().prototype.MemberwiseClone.call(this));
      clone.isReadOnly = false;
      return clone;
    }
  );

  $.Method({Static:false, Public:true }, "get_CurrencyDecimalDigits", 
    $sig.make(0x429, $asm01.TypeRef("System.Int32"), [], []), 
    function NumberFormatInfo_get_CurrencyDecimalDigits () {
      return this.currencyDecimalDigits;
    }
  );

  $.Method({Static:false, Public:true }, "get_CurrencyDecimalSeparator", 
    $sig.make(0x42B, $asm01.TypeRef("System.String"), [], []), 
    function NumberFormatInfo_get_CurrencyDecimalSeparator () {
      return this.currencyDecimalSeparator;
    }
  );

  $.Method({Static:false, Public:true }, "get_CurrencyGroupSeparator", 
    $sig.make(0x42D, $asm01.TypeRef("System.String"), [], []), 
    function NumberFormatInfo_get_CurrencyGroupSeparator () {
      return this.currencyGroupSeparator;
    }
  );

  $.Method({Static:false, Public:true }, "get_CurrencyGroupSizes", 
    $sig.make(0x432, $jsilcore.TypeRef("System.Array", [$asm01.TypeRef("System.Int32")]), [], []), 
    function NumberFormatInfo_get_CurrencyGroupSizes () {
      return $T04().$Cast(this.get_RawCurrencyGroupSizes().slice(0));
    }
  );

  $.Method({Static:false, Public:true }, "get_CurrencyNegativePattern", 
    $sig.make(0x43A, $asm01.TypeRef("System.Int32"), [], []), 
    function NumberFormatInfo_get_CurrencyNegativePattern () {
      return this.currencyNegativePattern;
    }
  );

  $.Method({Static:false, Public:true }, "get_CurrencyPositivePattern", 
    $sig.make(0x43D, $asm01.TypeRef("System.Int32"), [], []), 
    function NumberFormatInfo_get_CurrencyPositivePattern () {
      return this.currencyPositivePattern;
    }
  );

  $.Method({Static:false, Public:true }, "get_CurrencySymbol", 
    $sig.make(0x442, $asm01.TypeRef("System.String"), [], []), 
    function NumberFormatInfo_get_CurrencySymbol () {
      return this.currencySymbol;
    }
  );

  $.Method({Static:true , Public:true }, "get_CurrentInfo", 
    $sig.make(0x447, $.Type, [], []), 
    function NumberFormatInfo_get_CurrentInfo () {
      var nfi = $T05().Thread$CurrentThread$value.get_CurrentCulture().get_NumberFormat();
      nfi.isReadOnly = true;
      return nfi;
    }
  );

  $.Method({Static:true , Public:true }, "get_InvariantInfo", 
    $sig.make(0x449, $.Type, [], []), 
    function NumberFormatInfo_get_InvariantInfo () {
      return new $thisType(true);
    }
  );

  $.Method({Static:false, Public:true }, "get_IsReadOnly", 
    $sig.make(0x44C, $asm01.TypeRef("System.Boolean"), [], []), 
    function NumberFormatInfo_get_IsReadOnly () {
      return this.isReadOnly;
    }
  );

  $.Method({Static:false, Public:true }, "get_NaNSymbol", 
    $sig.make(0x44E, $asm01.TypeRef("System.String"), [], []), 
    function NumberFormatInfo_get_NaNSymbol () {
      return this.nanSymbol;
    }
  );

  $.Method({Static:false, Public:true }, "get_NegativeInfinitySymbol", 
    $sig.make(0x452, $asm01.TypeRef("System.String"), [], []), 
    function NumberFormatInfo_get_NegativeInfinitySymbol () {
      return this.negativeInfinitySymbol;
    }
  );

  $.Method({Static:false, Public:true }, "get_NegativeSign", 
    $sig.make(0x457, $asm01.TypeRef("System.String"), [], []), 
    function NumberFormatInfo_get_NegativeSign () {
      return this.negativeSign;
    }
  );

  $.Method({Static:false, Public:true }, "get_NumberDecimalDigits", 
    $sig.make(0x45B, $asm01.TypeRef("System.Int32"), [], []), 
    function NumberFormatInfo_get_NumberDecimalDigits () {
      return this.numberDecimalDigits;
    }
  );

  $.Method({Static:false, Public:true }, "get_NumberDecimalSeparator", 
    $sig.make(0x45E, $asm01.TypeRef("System.String"), [], []), 
    function NumberFormatInfo_get_NumberDecimalSeparator () {
      return this.numberDecimalSeparator;
    }
  );

  $.Method({Static:false, Public:true }, "get_NumberGroupSeparator", 
    $sig.make(0x462, $asm01.TypeRef("System.String"), [], []), 
    function NumberFormatInfo_get_NumberGroupSeparator () {
      return this.numberGroupSeparator;
    }
  );

  $.Method({Static:false, Public:true }, "get_NumberGroupSizes", 
    $sig.make(0x466, $jsilcore.TypeRef("System.Array", [$asm01.TypeRef("System.Int32")]), [], []), 
    function NumberFormatInfo_get_NumberGroupSizes () {
      return $T04().$Cast(this.get_RawNumberGroupSizes().slice(0));
    }
  );

  $.Method({Static:false, Public:true }, "get_NumberNegativePattern", 
    $sig.make(0x46E, $asm01.TypeRef("System.Int32"), [], []), 
    function NumberFormatInfo_get_NumberNegativePattern () {
      return this.numberNegativePattern;
    }
  );

  $.Method({Static:false, Public:true }, "get_PercentDecimalDigits", 
    $sig.make(0x473, $asm01.TypeRef("System.Int32"), [], []), 
    function NumberFormatInfo_get_PercentDecimalDigits () {
      return this.percentDecimalDigits;
    }
  );

  $.Method({Static:false, Public:true }, "get_PercentDecimalSeparator", 
    $sig.make(0x477, $asm01.TypeRef("System.String"), [], []), 
    function NumberFormatInfo_get_PercentDecimalSeparator () {
      return this.percentDecimalSeparator;
    }
  );

  $.Method({Static:false, Public:true }, "get_PercentGroupSeparator", 
    $sig.make(0x47A, $asm01.TypeRef("System.String"), [], []), 
    function NumberFormatInfo_get_PercentGroupSeparator () {
      return this.percentGroupSeparator;
    }
  );

  $.Method({Static:false, Public:true }, "get_PercentGroupSizes", 
    $sig.make(0x47F, $jsilcore.TypeRef("System.Array", [$asm01.TypeRef("System.Int32")]), [], []), 
    function NumberFormatInfo_get_PercentGroupSizes () {
      return $T04().$Cast(this.get_RawPercentGroupSizes().slice(0));
    }
  );

  $.Method({Static:false, Public:true }, "get_PercentNegativePattern", 
    $sig.make(0x485, $asm01.TypeRef("System.Int32"), [], []), 
    function NumberFormatInfo_get_PercentNegativePattern () {
      return this.percentNegativePattern;
    }
  );

  $.Method({Static:false, Public:true }, "get_PercentPositivePattern", 
    $sig.make(0x488, $asm01.TypeRef("System.Int32"), [], []), 
    function NumberFormatInfo_get_PercentPositivePattern () {
      return this.percentPositivePattern;
    }
  );

  $.Method({Static:false, Public:true }, "get_PercentSymbol", 
    $sig.make(0x48C, $asm01.TypeRef("System.String"), [], []), 
    function NumberFormatInfo_get_PercentSymbol () {
      return this.percentSymbol;
    }
  );

  $.Method({Static:false, Public:true }, "get_PerMilleSymbol", 
    $sig.make(0x491, $asm01.TypeRef("System.String"), [], []), 
    function NumberFormatInfo_get_PerMilleSymbol () {
      return this.perMilleSymbol;
    }
  );

  $.Method({Static:false, Public:true }, "get_PositiveInfinitySymbol", 
    $sig.make(0x496, $asm01.TypeRef("System.String"), [], []), 
    function NumberFormatInfo_get_PositiveInfinitySymbol () {
      return this.positiveInfinitySymbol;
    }
  );

  $.Method({Static:false, Public:true }, "get_PositiveSign", 
    $sig.make(0x499, $asm01.TypeRef("System.String"), [], []), 
    function NumberFormatInfo_get_PositiveSign () {
      return this.positiveSign;
    }
  );

  $.Method({Static:false, Public:false}, "get_RawCurrencyGroupSizes", 
    $sig.make(0x436, $jsilcore.TypeRef("System.Array", [$asm01.TypeRef("System.Int32")]), [], []), 
    function NumberFormatInfo_get_RawCurrencyGroupSizes () {
      return this.currencyGroupSizes;
    }
  );

  $.Method({Static:false, Public:false}, "get_RawNumberGroupSizes", 
    $sig.make(0x469, $jsilcore.TypeRef("System.Array", [$asm01.TypeRef("System.Int32")]), [], []), 
    function NumberFormatInfo_get_RawNumberGroupSizes () {
      return this.numberGroupSizes;
    }
  );

  $.Method({Static:false, Public:false}, "get_RawPercentGroupSizes", 
    $sig.make(0x482, $jsilcore.TypeRef("System.Array", [$asm01.TypeRef("System.Int32")]), [], []), 
    function NumberFormatInfo_get_RawPercentGroupSizes () {
      return this.percentGroupSizes;
    }
  );

  $.Method({Static:false, Public:true }, "GetFormat", 
    $sig.make(0x4A6, $asm01.TypeRef("System.Object"), [$asm01.TypeRef("System.Type")], []), 
    function NumberFormatInfo_GetFormat (formatType) {
      return ((formatType === $thisType.__Type__) ? this : null);
    }
  );

  $.Method({Static:true , Public:true }, "GetInstance", 
    $sig.make(0x4AB, $.Type, [$asm01.TypeRef("System.IFormatProvider")], []), 
    function NumberFormatInfo_GetInstance (formatProvider) {
      if (formatProvider !== null) {
        var nfi = $thisType.$Cast(formatProvider.IFormatProvider_GetFormat($thisType.__Type__));
        if (nfi !== null) {
          var result = nfi;
          return result;
        }
      }
      result = $thisType.get_CurrentInfo();
      return result;
    }
  );

  $.Method({Static:false, Public:false}, "InitPatterns", 
    $sig.make(0x4A0, null, [], []), 
    function NumberFormatInfo_InitPatterns () {
      var posNeg = $T09().Split(this.decimalFormats, JSIL.Array.New($T0A(), [";"]), 2);
      if (posNeg.length === 2) {
        var partOne = $T09().Split(posNeg[0], JSIL.Array.New($T0A(), ["."]), 2);
        if (partOne.length === 2) {
          this.numberDecimalDigits = 0;

        $loop0: 
          for (var i = 0; i < partOne[1].length; ++i) {
            if ((partOne[1][i]).charCodeAt(0) !== (this.digitPattern[0]).charCodeAt(0)) {
              break $loop0;
            }
            ++this.numberDecimalDigits;
          }
          var partTwo = $T09().Split(partOne[0], ",");
          if (partTwo.length > 1) {
            this.numberGroupSizes = JSIL.Array.New($T01(), ((partTwo.length - 1) | 0));

            for (i = 0; i < this.numberGroupSizes.length; ++i) {
              var pat = partTwo[((i + 1) | 0)];
              this.numberGroupSizes[i] = pat.length;
            }
          } else {
            var array = JSIL.Array.New($T01(), 1);
            this.numberGroupSizes = array;
          }
          if (!(!$T09().StartsWith(posNeg[1], "(") || !$T09().EndsWith(posNeg[1], ")"))) {
            this.numberNegativePattern = 0;
          } else if ($T09().StartsWith(posNeg[1], "- ")) {
            this.numberNegativePattern = 2;
          } else if ($T09().StartsWith(posNeg[1], "-")) {
            this.numberNegativePattern = 1;
          } else if ($T09().EndsWith(posNeg[1], " -")) {
            this.numberNegativePattern = 4;
          } else if ($T09().EndsWith(posNeg[1], "-")) {
            this.numberNegativePattern = 3;
          } else {
            this.numberNegativePattern = 1;
          }
        }
      }
      posNeg = $T09().Split(this.currencyFormats, JSIL.Array.New($T0A(), [";"]), 2);
      if (posNeg.length === 2) {
        partOne = $T09().Split(posNeg[0], JSIL.Array.New($T0A(), ["."]), 2);
        if (partOne.length === 2) {
          this.currencyDecimalDigits = 0;

        $loop2: 
          for (i = 0; i < partOne[1].length; ++i) {
            if ((partOne[1][i]).charCodeAt(0) !== (this.zeroPattern[0]).charCodeAt(0)) {
              break $loop2;
            }
            ++this.currencyDecimalDigits;
          }
          partTwo = $T09().Split(partOne[0], ",");
          if (partTwo.length > 1) {
            this.currencyGroupSizes = JSIL.Array.New($T01(), ((partTwo.length - 1) | 0));

            for (i = 0; i < this.currencyGroupSizes.length; ++i) {
              pat = partTwo[((i + 1) | 0)];
              this.currencyGroupSizes[i] = pat.length;
            }
          } else {
            array = JSIL.Array.New($T01(), 1);
            this.currencyGroupSizes = array;
          }
          if (!(!$T09().StartsWith(posNeg[1], "(\xa4 ") || !$T09().EndsWith(posNeg[1], ")"))) {
            this.currencyNegativePattern = 14;
          } else if (!(!$T09().StartsWith(posNeg[1], "(\xa4") || !$T09().EndsWith(posNeg[1], ")"))) {
            this.currencyNegativePattern = 0;
          } else if (!(!$T09().StartsWith(posNeg[1], "\xa4 ") || !$T09().EndsWith(posNeg[1], "-"))) {
            this.currencyNegativePattern = 11;
          } else if (!(!$T09().StartsWith(posNeg[1], "\xa4") || !$T09().EndsWith(posNeg[1], "-"))) {
            this.currencyNegativePattern = 3;
          } else if (!(!$T09().StartsWith(posNeg[1], "(") || !$T09().EndsWith(posNeg[1], " \xa4"))) {
            this.currencyNegativePattern = 15;
          } else if (!(!$T09().StartsWith(posNeg[1], "(") || !$T09().EndsWith(posNeg[1], "\xa4"))) {
            this.currencyNegativePattern = 4;
          } else if (!(!$T09().StartsWith(posNeg[1], "-") || !$T09().EndsWith(posNeg[1], " \xa4"))) {
            this.currencyNegativePattern = 8;
          } else if (!(!$T09().StartsWith(posNeg[1], "-") || !$T09().EndsWith(posNeg[1], "\xa4"))) {
            this.currencyNegativePattern = 5;
          } else if ($T09().StartsWith(posNeg[1], "-\xa4 ")) {
            this.currencyNegativePattern = 9;
          } else if ($T09().StartsWith(posNeg[1], "-\xa4")) {
            this.currencyNegativePattern = 1;
          } else if ($T09().StartsWith(posNeg[1], "\xa4 -")) {
            this.currencyNegativePattern = 12;
          } else if ($T09().StartsWith(posNeg[1], "\xa4-")) {
            this.currencyNegativePattern = 2;
          } else if ($T09().EndsWith(posNeg[1], " \xa4-")) {
            this.currencyNegativePattern = 10;
          } else if ($T09().EndsWith(posNeg[1], "\xa4-")) {
            this.currencyNegativePattern = 7;
          } else if ($T09().EndsWith(posNeg[1], "- \xa4")) {
            this.currencyNegativePattern = 13;
          } else if ($T09().EndsWith(posNeg[1], "-\xa4")) {
            this.currencyNegativePattern = 6;
          } else {
            this.currencyNegativePattern = 0;
          }
          if ($T09().StartsWith(posNeg[0], "\xa4 ")) {
            this.currencyPositivePattern = 2;
          } else if ($T09().StartsWith(posNeg[0], "\xa4")) {
            this.currencyPositivePattern = 0;
          } else if ($T09().EndsWith(posNeg[0], " \xa4")) {
            this.currencyPositivePattern = 3;
          } else if ($T09().EndsWith(posNeg[0], "\xa4")) {
            this.currencyPositivePattern = 1;
          } else {
            this.currencyPositivePattern = 0;
          }
        }
      }
      if ($T09().StartsWith(this.percentFormats, "%")) {
        this.percentPositivePattern = 2;
        this.percentNegativePattern = 2;
      } else if ($T09().EndsWith(this.percentFormats, " %")) {
        this.percentPositivePattern = 0;
        this.percentNegativePattern = 0;
      } else if ($T09().EndsWith(this.percentFormats, "%")) {
        this.percentPositivePattern = 1;
        this.percentNegativePattern = 1;
      } else {
        this.percentPositivePattern = 0;
        this.percentNegativePattern = 0;
      }
      partOne = $T09().Split(this.percentFormats, JSIL.Array.New($T0A(), ["."]), 2);
      if (partOne.length === 2) {
        this.percentDecimalDigits = 0;

      $loop4: 
        for (i = 0; i < partOne[1].length; ++i) {
          if ((partOne[1][i]).charCodeAt(0) !== (this.digitPattern[0]).charCodeAt(0)) {
            break $loop4;
          }
          ++this.percentDecimalDigits;
        }
        partTwo = $T09().Split(partOne[0], ",");
        if (partTwo.length > 1) {
          this.percentGroupSizes = JSIL.Array.New($T01(), ((partTwo.length - 1) | 0));

          for (i = 0; i < this.percentGroupSizes.length; ++i) {
            pat = partTwo[((i + 1) | 0)];
            this.percentGroupSizes[i] = pat.length;
          }
        } else {
          array = JSIL.Array.New($T01(), 1);
          this.percentGroupSizes = array;
        }
      }
    }
  );

  $.Method({Static:true , Public:true }, "ReadOnly", 
    $sig.make(0x4A9, $.Type, [$.Type], []), 
    function NumberFormatInfo_ReadOnly (nfi) {
      var copy = $thisType.$Cast(nfi.Clone());
      copy.isReadOnly = true;
      return copy;
    }
  );

  $.Method({Static:false, Public:true }, "set_CurrencyDecimalDigits", 
    $sig.make(0x42A, null, [$asm01.TypeRef("System.Int32")], []), 
    function NumberFormatInfo_set_CurrencyDecimalDigits (value) {
      if (!((value >= 0) && (value <= 99))) {
        throw new ($T0B())("The value specified for the property is less than 0 or greater than 99");
      }
      if (this.isReadOnly) {
        throw new ($T0C())("The current instance is read-only and a set operation was attempted");
      }
      this.currencyDecimalDigits = value;
    }
  );

  $.Method({Static:false, Public:true }, "set_CurrencyDecimalSeparator", 
    $sig.make(0x42C, null, [$asm01.TypeRef("System.String")], []), 
    function NumberFormatInfo_set_CurrencyDecimalSeparator (value) {
      if (value === null) {
        throw new ($T0D())("The value specified for the property is a null reference");
      }
      if (this.isReadOnly) {
        throw new ($T0C())("The current instance is read-only and a set operation was attempted");
      }
      this.currencyDecimalSeparator = value;
    }
  );

  $.Method({Static:false, Public:true }, "set_CurrencyGroupSeparator", 
    $sig.make(0x42F, null, [$asm01.TypeRef("System.String")], []), 
    function NumberFormatInfo_set_CurrencyGroupSeparator (value) {
      if (value === null) {
        throw new ($T0D())("The value specified for the property is a null reference");
      }
      if (this.isReadOnly) {
        throw new ($T0C())("The current instance is read-only and a set operation was attempted");
      }
      this.currencyGroupSeparator = value;
    }
  );

  $.Method({Static:false, Public:true }, "set_CurrencyGroupSizes", 
    $sig.make(0x434, null, [$jsilcore.TypeRef("System.Array", [$asm01.TypeRef("System.Int32")])], []), 
    function NumberFormatInfo_set_CurrencyGroupSizes (value) {
      this.set_RawCurrencyGroupSizes(value);
    }
  );

  $.Method({Static:false, Public:true }, "set_CurrencyNegativePattern", 
    $sig.make(0x43B, null, [$asm01.TypeRef("System.Int32")], []), 
    function NumberFormatInfo_set_CurrencyNegativePattern (value) {
      if (!((value >= 0) && (value <= 15))) {
        throw new ($T0B())("The value specified for the property is less than 0 or greater than 15");
      }
      if (this.isReadOnly) {
        throw new ($T0C())("The current instance is read-only and a set operation was attempted");
      }
      this.currencyNegativePattern = value;
    }
  );

  $.Method({Static:false, Public:true }, "set_CurrencyPositivePattern", 
    $sig.make(0x43F, null, [$asm01.TypeRef("System.Int32")], []), 
    function NumberFormatInfo_set_CurrencyPositivePattern (value) {
      if (!((value >= 0) && (value <= 3))) {
        throw new ($T0B())("The value specified for the property is less than 0 or greater than 3");
      }
      if (this.isReadOnly) {
        throw new ($T0C())("The current instance is read-only and a set operation was attempted");
      }
      this.currencyPositivePattern = value;
    }
  );

  $.Method({Static:false, Public:true }, "set_CurrencySymbol", 
    $sig.make(0x444, null, [$asm01.TypeRef("System.String")], []), 
    function NumberFormatInfo_set_CurrencySymbol (value) {
      if (value === null) {
        throw new ($T0D())("The value specified for the property is a null reference");
      }
      if (this.isReadOnly) {
        throw new ($T0C())("The current instance is read-only and a set operation was attempted");
      }
      this.currencySymbol = value;
    }
  );

  $.Method({Static:false, Public:true }, "set_NaNSymbol", 
    $sig.make(0x450, null, [$asm01.TypeRef("System.String")], []), 
    function NumberFormatInfo_set_NaNSymbol (value) {
      if (value === null) {
        throw new ($T0D())("The value specified for the property is a null reference");
      }
      if (this.isReadOnly) {
        throw new ($T0C())("The current instance is read-only and a set operation was attempted");
      }
      this.nanSymbol = value;
    }
  );

  $.Method({Static:false, Public:true }, "set_NegativeInfinitySymbol", 
    $sig.make(0x454, null, [$asm01.TypeRef("System.String")], []), 
    function NumberFormatInfo_set_NegativeInfinitySymbol (value) {
      if (value === null) {
        throw new ($T0D())("The value specified for the property is a null reference");
      }
      if (this.isReadOnly) {
        throw new ($T0C())("The current instance is read-only and a set operation was attempted");
      }
      this.negativeInfinitySymbol = value;
    }
  );

  $.Method({Static:false, Public:true }, "set_NegativeSign", 
    $sig.make(0x459, null, [$asm01.TypeRef("System.String")], []), 
    function NumberFormatInfo_set_NegativeSign (value) {
      if (value === null) {
        throw new ($T0D())("The value specified for the property is a null reference");
      }
      if (this.isReadOnly) {
        throw new ($T0C())("The current instance is read-only and a set operation was attempted");
      }
      this.negativeSign = value;
    }
  );

  $.Method({Static:false, Public:true }, "set_NumberDecimalDigits", 
    $sig.make(0x45C, null, [$asm01.TypeRef("System.Int32")], []), 
    function NumberFormatInfo_set_NumberDecimalDigits (value) {
      if (!((value >= 0) && (value <= 99))) {
        throw new ($T0B())("The value specified for the property is less than 0 or greater than 99");
      }
      if (this.isReadOnly) {
        throw new ($T0C())("The current instance is read-only and a set operation was attempted");
      }
      this.numberDecimalDigits = value;
    }
  );

  $.Method({Static:false, Public:true }, "set_NumberDecimalSeparator", 
    $sig.make(0x45F, null, [$asm01.TypeRef("System.String")], []), 
    function NumberFormatInfo_set_NumberDecimalSeparator (value) {
      if (value === null) {
        throw new ($T0D())("The value specified for the property is a null reference");
      }
      if (this.isReadOnly) {
        throw new ($T0C())("The current instance is read-only and a set operation was attempted");
      }
      this.numberDecimalSeparator = value;
    }
  );

  $.Method({Static:false, Public:true }, "set_NumberGroupSeparator", 
    $sig.make(0x464, null, [$asm01.TypeRef("System.String")], []), 
    function NumberFormatInfo_set_NumberGroupSeparator (value) {
      if (value === null) {
        throw new ($T0D())("The value specified for the property is a null reference");
      }
      if (this.isReadOnly) {
        throw new ($T0C())("The current instance is read-only and a set operation was attempted");
      }
      this.numberGroupSeparator = value;
    }
  );

  $.Method({Static:false, Public:true }, "set_NumberGroupSizes", 
    $sig.make(0x467, null, [$jsilcore.TypeRef("System.Array", [$asm01.TypeRef("System.Int32")])], []), 
    function NumberFormatInfo_set_NumberGroupSizes (value) {
      this.set_RawNumberGroupSizes(value);
    }
  );

  $.Method({Static:false, Public:true }, "set_NumberNegativePattern", 
    $sig.make(0x470, null, [$asm01.TypeRef("System.Int32")], []), 
    function NumberFormatInfo_set_NumberNegativePattern (value) {
      if (!((value >= 0) && (value <= 4))) {
        throw new ($T0B())("The value specified for the property is less than 0 or greater than 15");
      }
      if (this.isReadOnly) {
        throw new ($T0C())("The current instance is read-only and a set operation was attempted");
      }
      this.numberNegativePattern = value;
    }
  );

  $.Method({Static:false, Public:true }, "set_PercentDecimalDigits", 
    $sig.make(0x475, null, [$asm01.TypeRef("System.Int32")], []), 
    function NumberFormatInfo_set_PercentDecimalDigits (value) {
      if (!((value >= 0) && (value <= 99))) {
        throw new ($T0B())("The value specified for the property is less than 0 or greater than 99");
      }
      if (this.isReadOnly) {
        throw new ($T0C())("The current instance is read-only and a set operation was attempted");
      }
      this.percentDecimalDigits = value;
    }
  );

  $.Method({Static:false, Public:true }, "set_PercentDecimalSeparator", 
    $sig.make(0x478, null, [$asm01.TypeRef("System.String")], []), 
    function NumberFormatInfo_set_PercentDecimalSeparator (value) {
      if (value === null) {
        throw new ($T0D())("The value specified for the property is a null reference");
      }
      if (this.isReadOnly) {
        throw new ($T0C())("The current instance is read-only and a set operation was attempted");
      }
      this.percentDecimalSeparator = value;
    }
  );

  $.Method({Static:false, Public:true }, "set_PercentGroupSeparator", 
    $sig.make(0x47C, null, [$asm01.TypeRef("System.String")], []), 
    function NumberFormatInfo_set_PercentGroupSeparator (value) {
      if (value === null) {
        throw new ($T0D())("The value specified for the property is a null reference");
      }
      if (this.isReadOnly) {
        throw new ($T0C())("The current instance is read-only and a set operation was attempted");
      }
      this.percentGroupSeparator = value;
    }
  );

  $.Method({Static:false, Public:true }, "set_PercentGroupSizes", 
    $sig.make(0x480, null, [$jsilcore.TypeRef("System.Array", [$asm01.TypeRef("System.Int32")])], []), 
    function NumberFormatInfo_set_PercentGroupSizes (value) {
      this.set_RawPercentGroupSizes(value);
    }
  );

  $.Method({Static:false, Public:true }, "set_PercentNegativePattern", 
    $sig.make(0x487, null, [$asm01.TypeRef("System.Int32")], []), 
    function NumberFormatInfo_set_PercentNegativePattern (value) {
      if (!((value >= 0) && (value <= 2))) {
        throw new ($T0B())("The value specified for the property is less than 0 or greater than 15");
      }
      if (this.isReadOnly) {
        throw new ($T0C())("The current instance is read-only and a set operation was attempted");
      }
      this.percentNegativePattern = value;
    }
  );

  $.Method({Static:false, Public:true }, "set_PercentPositivePattern", 
    $sig.make(0x489, null, [$asm01.TypeRef("System.Int32")], []), 
    function NumberFormatInfo_set_PercentPositivePattern (value) {
      if (!((value >= 0) && (value <= 2))) {
        throw new ($T0B())("The value specified for the property is less than 0 or greater than 3");
      }
      if (this.isReadOnly) {
        throw new ($T0C())("The current instance is read-only and a set operation was attempted");
      }
      this.percentPositivePattern = value;
    }
  );

  $.Method({Static:false, Public:true }, "set_PercentSymbol", 
    $sig.make(0x48E, null, [$asm01.TypeRef("System.String")], []), 
    function NumberFormatInfo_set_PercentSymbol (value) {
      if (value === null) {
        throw new ($T0D())("The value specified for the property is a null reference");
      }
      if (this.isReadOnly) {
        throw new ($T0C())("The current instance is read-only and a set operation was attempted");
      }
      this.percentSymbol = value;
    }
  );

  $.Method({Static:false, Public:true }, "set_PerMilleSymbol", 
    $sig.make(0x493, null, [$asm01.TypeRef("System.String")], []), 
    function NumberFormatInfo_set_PerMilleSymbol (value) {
      if (value === null) {
        throw new ($T0D())("The value specified for the property is a null reference");
      }
      if (this.isReadOnly) {
        throw new ($T0C())("The current instance is read-only and a set operation was attempted");
      }
      this.perMilleSymbol = value;
    }
  );

  $.Method({Static:false, Public:true }, "set_PositiveInfinitySymbol", 
    $sig.make(0x497, null, [$asm01.TypeRef("System.String")], []), 
    function NumberFormatInfo_set_PositiveInfinitySymbol (value) {
      if (value === null) {
        throw new ($T0D())("The value specified for the property is a null reference");
      }
      if (this.isReadOnly) {
        throw new ($T0C())("The current instance is read-only and a set operation was attempted");
      }
      this.positiveInfinitySymbol = value;
    }
  );

  $.Method({Static:false, Public:true }, "set_PositiveSign", 
    $sig.make(0x49A, null, [$asm01.TypeRef("System.String")], []), 
    function NumberFormatInfo_set_PositiveSign (value) {
      if (value === null) {
        throw new ($T0D())("The value specified for the property is a null reference");
      }
      if (this.isReadOnly) {
        throw new ($T0C())("The current instance is read-only and a set operation was attempted");
      }
      this.positiveSign = value;
    }
  );

  $.Method({Static:false, Public:false}, "set_RawCurrencyGroupSizes", 
    $sig.make(0x438, null, [$jsilcore.TypeRef("System.Array", [$asm01.TypeRef("System.Int32")])], []), 
    function NumberFormatInfo_set_RawCurrencyGroupSizes (value) {
      if (value === null) {
        throw new ($T0D())("The value specified for the property is a null reference");
      }
      if (this.isReadOnly) {
        throw new ($T0C())("The current instance is read-only and a set operation was attempted");
      }
      if (value.length === 0) {
        this.currencyGroupSizes = JSIL.Array.New($T01(), 0);
      } else {
        var last = ((value.length - 1) | 0);

        for (var i = 0; i < last; ++i) {
          if (!((value[i] >= 1) && (value[i] <= 9))) {
            throw new ($T0B())("One of the elements in the array specified is not between 1 and 9");
          }
        }
        if (!((value[last] >= 0) && (value[last] <= 9))) {
          throw new ($T0B())("Last element in the array specified is not between 0 and 9");
        }
        this.currencyGroupSizes = $T04().$Cast(value.slice(0));
      }
    }
  );

  $.Method({Static:false, Public:false}, "set_RawNumberGroupSizes", 
    $sig.make(0x46A, null, [$jsilcore.TypeRef("System.Array", [$asm01.TypeRef("System.Int32")])], []), 
    function NumberFormatInfo_set_RawNumberGroupSizes (value) {
      if (value === null) {
        throw new ($T0D())("The value specified for the property is a null reference");
      }
      if (this.isReadOnly) {
        throw new ($T0C())("The current instance is read-only and a set operation was attempted");
      }
      if (value.length === 0) {
        this.numberGroupSizes = JSIL.Array.New($T01(), 0);
      } else {
        var last = ((value.length - 1) | 0);

        for (var i = 0; i < last; ++i) {
          if (!((value[i] >= 1) && (value[i] <= 9))) {
            throw new ($T0B())("One of the elements in the array specified is not between 1 and 9");
          }
        }
        if (!((value[last] >= 0) && (value[last] <= 9))) {
          throw new ($T0B())("Last element in the array specified is not between 0 and 9");
        }
        this.numberGroupSizes = $T04().$Cast(value.slice(0));
      }
    }
  );

  $.Method({Static:false, Public:false}, "set_RawPercentGroupSizes", 
    $sig.make(0x483, null, [$jsilcore.TypeRef("System.Array", [$asm01.TypeRef("System.Int32")])], []), 
    function NumberFormatInfo_set_RawPercentGroupSizes (value) {
      if (value === null) {
        throw new ($T0D())("The value specified for the property is a null reference");
      }
      if (this.isReadOnly) {
        throw new ($T0C())("The current instance is read-only and a set operation was attempted");
      }
      if (this === $T0E().get_CurrentCulture().get_NumberFormat()) {
        throw new ($T0F())("HERE the value was modified");
      }
      if (value.length === 0) {
        this.percentGroupSizes = JSIL.Array.New($T01(), 0);
      } else {
        var last = ((value.length - 1) | 0);

        for (var i = 0; i < last; ++i) {
          if (!((value[i] >= 1) && (value[i] <= 9))) {
            throw new ($T0B())("One of the elements in the array specified is not between 1 and 9");
          }
        }
        if (!((value[last] >= 0) && (value[last] <= 9))) {
          throw new ($T0B())("Last element in the array specified is not between 0 and 9");
        }
        this.percentGroupSizes = $T04().$Cast(value.slice(0));
      }
    }
  );

  $.Field({Static:false, Public:false}, "isReadOnly", $asm01.TypeRef("System.Boolean")); 
  $.Field({Static:false, Public:false}, "decimalFormats", $asm01.TypeRef("System.String")); 
  $.Field({Static:false, Public:false}, "currencyFormats", $asm01.TypeRef("System.String")); 
  $.Field({Static:false, Public:false}, "percentFormats", $asm01.TypeRef("System.String")); 
  $.Field({Static:false, Public:false}, "digitPattern", $asm01.TypeRef("System.String")); 
  $.Field({Static:false, Public:false}, "zeroPattern", $asm01.TypeRef("System.String")); 
  $.Field({Static:false, Public:false}, "currencyDecimalDigits", $asm01.TypeRef("System.Int32")); 
  $.Field({Static:false, Public:false}, "currencyDecimalSeparator", $asm01.TypeRef("System.String")); 
  $.Field({Static:false, Public:false}, "currencyGroupSeparator", $asm01.TypeRef("System.String")); 
  $.Field({Static:false, Public:false}, "currencyGroupSizes", $jsilcore.TypeRef("System.Array", [$asm01.TypeRef("System.Int32")])); 
  $.Field({Static:false, Public:false}, "currencyNegativePattern", $asm01.TypeRef("System.Int32")); 
  $.Field({Static:false, Public:false}, "currencyPositivePattern", $asm01.TypeRef("System.Int32")); 
  $.Field({Static:false, Public:false}, "currencySymbol", $asm01.TypeRef("System.String")); 
  $.Field({Static:false, Public:false}, "nanSymbol", $asm01.TypeRef("System.String")); 
  $.Field({Static:false, Public:false}, "negativeInfinitySymbol", $asm01.TypeRef("System.String")); 
  $.Field({Static:false, Public:false}, "negativeSign", $asm01.TypeRef("System.String")); 
  $.Field({Static:false, Public:false}, "numberDecimalDigits", $asm01.TypeRef("System.Int32")); 
  $.Field({Static:false, Public:false}, "numberDecimalSeparator", $asm01.TypeRef("System.String")); 
  $.Field({Static:false, Public:false}, "numberGroupSeparator", $asm01.TypeRef("System.String")); 
  $.Field({Static:false, Public:false}, "numberGroupSizes", $jsilcore.TypeRef("System.Array", [$asm01.TypeRef("System.Int32")])); 
  $.Field({Static:false, Public:false}, "numberNegativePattern", $asm01.TypeRef("System.Int32")); 
  $.Field({Static:false, Public:false}, "percentDecimalDigits", $asm01.TypeRef("System.Int32")); 
  $.Field({Static:false, Public:false}, "percentDecimalSeparator", $asm01.TypeRef("System.String")); 
  $.Field({Static:false, Public:false}, "percentGroupSeparator", $asm01.TypeRef("System.String")); 
  $.Field({Static:false, Public:false}, "percentGroupSizes", $jsilcore.TypeRef("System.Array", [$asm01.TypeRef("System.Int32")])); 
  $.Field({Static:false, Public:false}, "percentNegativePattern", $asm01.TypeRef("System.Int32")); 
  $.Field({Static:false, Public:false}, "percentPositivePattern", $asm01.TypeRef("System.Int32")); 
  $.Field({Static:false, Public:false}, "percentSymbol", $asm01.TypeRef("System.String")); 
  $.Field({Static:false, Public:false}, "perMilleSymbol", $asm01.TypeRef("System.String")); 
  $.Field({Static:false, Public:false}, "positiveInfinitySymbol", $asm01.TypeRef("System.String")); 
  $.Field({Static:false, Public:false}, "positiveSign", $asm01.TypeRef("System.String")); 
  $.Field({Static:false, Public:false}, "ansiCurrencySymbol", $asm01.TypeRef("System.String")); 
  $.Field({Static:false, Public:false}, "m_dataItem", $asm01.TypeRef("System.Int32")); 
  $.Field({Static:false, Public:false}, "m_useUserOverride", $asm01.TypeRef("System.Boolean")); 
  $.Field({Static:false, Public:false}, "validForParseAsNumber", $asm01.TypeRef("System.Boolean")); 
  $.Field({Static:false, Public:false}, "validForParseAsCurrency", $asm01.TypeRef("System.Boolean")); 
  $.Field({Static:false, Public:false}, "nativeDigits", $jsilcore.TypeRef("System.Array", [$asm01.TypeRef("System.String")])); 
  $.Field({Static:false, Public:false}, "digitSubstitution", $asm01.TypeRef("System.Int32")); 
  $.Field({Static:true , Public:false, ReadOnly:true }, "invariantNativeDigits", $jsilcore.TypeRef("System.Array", [$asm01.TypeRef("System.String")])); 
  $.Method({Static:true , Public:false}, ".cctor", 
    $sig.make(0x4AE, null, [], []), 
    function NumberFormatInfo__cctor () {
      $thisType.invariantNativeDigits = JSIL.Array.New($T00(), ["0", "1", "2", "3", "4", "5", "6", "7", "8", "9"]);
    }
  );

  $.Property({Static:false, Public:true }, "CurrencyDecimalDigits", $asm01.TypeRef("System.Int32"));

  $.Property({Static:false, Public:true }, "CurrencyDecimalSeparator", $asm01.TypeRef("System.String"));

  $.Property({Static:false, Public:true }, "CurrencyGroupSeparator", $asm01.TypeRef("System.String"));

  $.Property({Static:false, Public:true }, "CurrencyGroupSizes", $jsilcore.TypeRef("System.Array", [$asm01.TypeRef("System.Int32")]));

  $.Property({Static:false, Public:false}, "RawCurrencyGroupSizes", $jsilcore.TypeRef("System.Array", [$asm01.TypeRef("System.Int32")]));

  $.Property({Static:false, Public:true }, "CurrencyNegativePattern", $asm01.TypeRef("System.Int32"));

  $.Property({Static:false, Public:true }, "CurrencyPositivePattern", $asm01.TypeRef("System.Int32"));

  $.Property({Static:false, Public:true }, "CurrencySymbol", $asm01.TypeRef("System.String"));

  $.Property({Static:true , Public:true }, "CurrentInfo", $.Type);

  $.Property({Static:true , Public:true }, "InvariantInfo", $.Type);

  $.Property({Static:false, Public:true }, "IsReadOnly", $asm01.TypeRef("System.Boolean"));

  $.Property({Static:false, Public:true }, "NaNSymbol", $asm01.TypeRef("System.String"));

  $.Property({Static:false, Public:true }, "NegativeInfinitySymbol", $asm01.TypeRef("System.String"));

  $.Property({Static:false, Public:true }, "NegativeSign", $asm01.TypeRef("System.String"));

  $.Property({Static:false, Public:true }, "NumberDecimalDigits", $asm01.TypeRef("System.Int32"));

  $.Property({Static:false, Public:true }, "NumberDecimalSeparator", $asm01.TypeRef("System.String"));

  $.Property({Static:false, Public:true }, "NumberGroupSeparator", $asm01.TypeRef("System.String"));

  $.Property({Static:false, Public:true }, "NumberGroupSizes", $jsilcore.TypeRef("System.Array", [$asm01.TypeRef("System.Int32")]));

  $.Property({Static:false, Public:false}, "RawNumberGroupSizes", $jsilcore.TypeRef("System.Array", [$asm01.TypeRef("System.Int32")]));

  $.Property({Static:false, Public:true }, "NumberNegativePattern", $asm01.TypeRef("System.Int32"));

  $.Property({Static:false, Public:true }, "PercentDecimalDigits", $asm01.TypeRef("System.Int32"));

  $.Property({Static:false, Public:true }, "PercentDecimalSeparator", $asm01.TypeRef("System.String"));

  $.Property({Static:false, Public:true }, "PercentGroupSeparator", $asm01.TypeRef("System.String"));

  $.Property({Static:false, Public:true }, "PercentGroupSizes", $jsilcore.TypeRef("System.Array", [$asm01.TypeRef("System.Int32")]));

  $.Property({Static:false, Public:false}, "RawPercentGroupSizes", $jsilcore.TypeRef("System.Array", [$asm01.TypeRef("System.Int32")]));

  $.Property({Static:false, Public:true }, "PercentNegativePattern", $asm01.TypeRef("System.Int32"));

  $.Property({Static:false, Public:true }, "PercentPositivePattern", $asm01.TypeRef("System.Int32"));

  $.Property({Static:false, Public:true }, "PercentSymbol", $asm01.TypeRef("System.String"));

  $.Property({Static:false, Public:true }, "PerMilleSymbol", $asm01.TypeRef("System.String"));

  $.Property({Static:false, Public:true }, "PositiveInfinitySymbol", $asm01.TypeRef("System.String"));

  $.Property({Static:false, Public:true }, "PositiveSign", $asm01.TypeRef("System.String"));

  $.ImplementInterfaces($asm01.TypeRef("System.ICloneable"), $asm01.TypeRef("System.IFormatProvider"))
})
  .Attribute($asm01.TypeRef("System.Runtime.InteropServices.ComVisibleAttribute"), function () { return [true]; });

JSIL.MakeStruct($asm01.TypeRef("System.ValueType"), "System.Collections.Generic.KeyValuePair`2", true, ["TKey", "TValue"], function ($) {
  var $thisType = $.publicInterface;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize(System.Array.Of($asm01.System.String))) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm01.System.String)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm01.System.Object)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm01.System.Void)) ();
  };

  $.Method({Static:false, Public:true }, ".ctor", 
    $sig.make(0x4DB, null, [new JSIL.GenericParameter("TKey", "System.Collections.Generic.KeyValuePair`2"), new JSIL.GenericParameter("TValue", "System.Collections.Generic.KeyValuePair`2")], []), 
    function KeyValuePair$b2__ctor (key, value) {
      this.key = JSIL.CloneParameter($thisType.TKey.get(this), key);
      this.value = JSIL.CloneParameter($thisType.TValue.get(this), value);
    }
  );

  $.Method({Static:false, Public:true }, "get_Key", 
    $sig.make(0x4D5, new JSIL.GenericParameter("TKey", "System.Collections.Generic.KeyValuePair`2"), [], []), 
    function KeyValuePair$b2_get_Key () {
      return this.key;
    }
  );

  $.Method({Static:false, Public:true }, "get_Value", 
    $sig.make(0x4D8, new JSIL.GenericParameter("TValue", "System.Collections.Generic.KeyValuePair`2"), [], []), 
    function KeyValuePair$b2_get_Value () {
      return this.value;
    }
  );

  $.Method({Static:false, Public:false}, "set_Key", 
    $sig.make(0x4D7, null, [new JSIL.GenericParameter("TKey", "System.Collections.Generic.KeyValuePair`2")], []), 
    function KeyValuePair$b2_set_Key (value) {
      this.key = JSIL.CloneParameter($thisType.TKey.get(this), value);
    }
  );

  $.Method({Static:false, Public:false}, "set_Value", 
    $sig.make(0x4DA, null, [new JSIL.GenericParameter("TValue", "System.Collections.Generic.KeyValuePair`2")], []), 
    function KeyValuePair$b2_set_Value (value) {
      this.value = JSIL.CloneParameter($thisType.TValue.get(this), value);
    }
  );

  $.Method({Static:false, Public:true }, "toString", 
    $sig.make(0x4DD, $asm01.TypeRef("System.String"), [], []), 
    function KeyValuePair$b2_toString () {
      var array = JSIL.Array.New($T01(), 5);
      array[0] = "[";
      if (this.get_Key() === null) {
        var arg_3A_2 = $T01().Empty;
      } else {
        var tKey = this.get_Key();
        arg_3A_2 = tKey.toString();
      }
      array[1] = arg_3A_2;
      array[2] = ", ";
      if (this.get_Value() === null) {
        var arg_6D_2 = $T01().Empty;
      } else {
        var tValue = this.get_Value();
        arg_6D_2 = tValue.toString();
      }
      array[3] = arg_6D_2;
      array[4] = "]";
      return JSIL.ConcatString.apply(null, array);
    }
  );

  $.Field({Static:false, Public:false}, "key", $.GenericParameter("TKey")); 
  $.Field({Static:false, Public:false}, "value", $.GenericParameter("TValue")); 
  $.Property({Static:false, Public:true }, "Key", new JSIL.GenericParameter("TKey", "System.Collections.Generic.KeyValuePair`2"));

  $.Property({Static:false, Public:true }, "Value", new JSIL.GenericParameter("TValue", "System.Collections.Generic.KeyValuePair`2"));

})
  .Attribute($asm01.TypeRef("System.Diagnostics.DebuggerDisplayAttribute"), function () { return ["{value}"]; });

JSIL.MakeTypeAlias($jsilcore, "System.UInt64");

JSIL.DeclareNamespace("System.Text");
JSIL.MakeClass($asm01.TypeRef("System.Object"), "System.Text.Encoding", true, [], function ($) {
  var $thisType = $.publicInterface;

  $.Method({Static:false, Public:true }, ".ctor", 
    $sig.make(0x815, null, [], []), 
    function Encoding__ctor () {
    }
  );

});

JSIL.MakeClass($asm01.TypeRef("System.Object"), "System.NumberFormatter", false, [], function ($) {
  var $thisType = $.publicInterface;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm01.System.Char)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm01.System.Int64)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm01.System.Int32)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm01.System.UInt64)) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize($asm01.System.Threading.Thread)) ();
  };
  var $T05 = function () {
    return ($T05 = JSIL.Memoize($asm01.System.UInt32)) ();
  };
  var $T06 = function () {
    return ($T06 = JSIL.Memoize($asm01.System.String)) ();
  };
  var $T07 = function () {
    return ($T07 = JSIL.Memoize($asm01.System.Text.StringBuilder)) ();
  };
  var $T08 = function () {
    return ($T08 = JSIL.Memoize($asm01.System.Globalization.NumberFormatInfo)) ();
  };
  var $T09 = function () {
    return ($T09 = JSIL.Memoize(System.Array.Of($asm01.System.Int32))) ();
  };
  var $T0A = function () {
    return ($T0A = JSIL.Memoize($asm01.System.ArgumentException)) ();
  };
  var $T0B = function () {
    return ($T0B = JSIL.Memoize($asm01.System.Boolean)) ();
  };
  var $T0C = function () {
    return ($T0C = JSIL.Memoize($asm01.System.IFormatProvider)) ();
  };
  var $T0D = function () {
    return ($T0D = JSIL.Memoize($asm01.System.NumberFormatter_CustomInfo)) ();
  };
  var $T0E = function () {
    return ($T0E = JSIL.Memoize($asm01.System.Void)) ();
  };
  var $T0F = function () {
    return ($T0F = JSIL.Memoize($asm01.System.Double)) ();
  };
  var $T10 = function () {
    return ($T10 = JSIL.Memoize($asm01.System.Single)) ();
  };
  var $T11 = function () {
    return ($T11 = JSIL.Memoize($asm01.System.Object)) ();
  };
  var $T12 = function () {
    return ($T12 = JSIL.Memoize($asm01.System.BitConverter)) ();
  };
  var $T13 = function () {
    return ($T13 = JSIL.Memoize($asm01.System.Math)) ();
  };
  var $T14 = function () {
    return ($T14 = JSIL.Memoize($asm01.System.FormatException)) ();
  };
  var $T15 = function () {
    return ($T15 = JSIL.Memoize($asm01.System.SByte)) ();
  };
  var $T16 = function () {
    return ($T16 = JSIL.Memoize($asm01.System.Byte)) ();
  };
  var $T17 = function () {
    return ($T17 = JSIL.Memoize($asm01.System.UInt16)) ();
  };
  var $T18 = function () {
    return ($T18 = JSIL.Memoize($asm01.System.Int16)) ();
  };
  var $T19 = function () {
    return ($T19 = JSIL.Memoize(System.Array.Of($asm01.System.Char))) ();
  };
  var $T1A = function () {
    return ($T1A = JSIL.Memoize($asm01.System.Globalization.CultureInfo)) ();
  };

  $.Method({Static:false, Public:true }, ".ctor", 
    $sig.make(0x8C3, null, [$asm01.TypeRef("System.Threading.Thread")], []), 
    function NumberFormatter__ctor (current) {
      this._cbuf = JSIL.Array.New($T00(), 0);
      if (current !== null) {
        this.set_CurrentCulture(current.get_CurrentCulture());
      }
    }
  );

  $.Method({Static:false, Public:false}, "AddOneToDecHex", 
    $sig.make(0x8FA, null, [], []), 
    function NumberFormatter_AddOneToDecHex () {
      if (this._val1 === -1717986919) {
        this._val1 = 0;
        if (this._val2 === -1717986919) {
          this._val2 = 0;
          if (this._val3 === -1717986919) {
            this._val3 = 0;
            this._val4 = $thisType.AddOneToDecHex(this._val4);
          } else {
            this._val3 = $thisType.AddOneToDecHex(this._val3);
          }
        } else {
          this._val2 = $thisType.AddOneToDecHex(this._val2);
        }
      } else {
        this._val1 = $thisType.AddOneToDecHex(this._val1);
      }
    }
  );

  $.Method({Static:true , Public:false}, "AddOneToDecHex", 
    $sig.make(0x8FC, $asm01.TypeRef("System.UInt32"), [$asm01.TypeRef("System.UInt32")], []), 
    function NumberFormatter_AddOneToDecHex (val) {
      if ((val & 65535) === 39321) {
        if ((val & 16777215) === 10066329) {
          if ((val & 268435455) === 161061273) {
            var result = (val + 107374183);
          } else {
            result = (val + 6710887);
          }
        } else if ((val & 1048575) === 629145) {
          result = (val + 419431);
        } else {
          result = (val + 26215);
        }
      } else if ((val & 255) === 153) {
        if ((val & 4095) === 2457) {
          result = (val + 1639);
        } else {
          result = (val + 103);
        }
      } else if ((val & 15) === 9) {
        result = (val + 7);
      } else {
        result = (val + 1);
      }
      return result;
    }
  );

  $.Method({Static:false, Public:false}, "Append", 
    $sig.make(0x8E8, null, [$asm01.TypeRef("System.Char")], []), 
    function NumberFormatter_Append (c) {
      if (this._ind === this._cbuf.length) {
        this.Resize(((this._ind + 10) | 0));
      }
      this._cbuf[this._ind++] = c;
    }
  );

  $.Method({Static:false, Public:false}, "Append", 
    $sig.make(0x8EB, null, [$asm01.TypeRef("System.Char"), $asm01.TypeRef("System.Int32")], []), 
    function NumberFormatter_Append (c, cnt) {
      if (((this._ind + cnt) | 0) > this._cbuf.length) {
        this.Resize(((((this._ind + cnt) | 0) + 10) | 0));
      }

      while (cnt-- > 0) {
        this._cbuf[this._ind++] = c;
      }
    }
  );

  $.Method({Static:false, Public:false}, "Append", 
    $sig.make(0x8ED, null, [$asm01.TypeRef("System.String")], []), 
    function NumberFormatter_Append (s) {
      var slen = s.length;
      if (((this._ind + slen) | 0) > this._cbuf.length) {
        this.Resize(((((this._ind + slen) | 0) + 10) | 0));
      }

      for (var i = 0; i < slen; ++i) {
        this._cbuf[this._ind++] = (s[i]);
      }
    }
  );

  $.Method({Static:false, Public:false}, "AppendDecimalString", 
    $sig.make(0xA02, null, [$asm01.TypeRef("System.Int32"), $asm01.TypeRef("System.Text.StringBuilder")], []), 
    function NumberFormatter_AppendDecimalString (precision, sb) {
      this.AppendDigits(((((this._digitsLen - precision) | 0) - this._decPointPos) | 0), ((this._digitsLen - this._decPointPos) | 0), sb);
    }
  );

  $.Method({Static:false, Public:false}, "AppendDecimalString", 
    $sig.make(0xA03, null, [$asm01.TypeRef("System.Int32")], []), 
    function NumberFormatter_AppendDecimalString (precision) {
      this.AppendDigits(((((this._digitsLen - precision) | 0) - this._decPointPos) | 0), ((this._digitsLen - this._decPointPos) | 0));
    }
  );

  $.Method({Static:false, Public:false}, "AppendDigits", 
    $sig.make(0xA0E, null, [$asm01.TypeRef("System.Int32"), $asm01.TypeRef("System.Int32")], []), 
    function NumberFormatter_AppendDigits (start, end) {
      if (start < end) {
        var i = ((this._ind + ((end - start) | 0)) | 0);
        if (i > this._cbuf.length) {
          this.Resize(((i + 10) | 0));
        }
        this._ind = i;
        end += this._offset;
        start += this._offset;
        var next = ((((start + 8) | 0) - ((start & 7) | 0)) | 0);

      $loop0: 
        while (true) {

          var $label0 = 0;
        $labelgroup0: 
          while (true) {
            switch ($label0) {
              case 0: /* $entry0 */ 
                if (next === 8) {
                  var v = this._val1;
                } else if (next === 16) {
                  v = this._val2;
                } else if (next === 24) {
                  v = this._val3;
                } else if (next === 32) {
                  v = this._val4;
                } else {
                  v = 0;
                }
                v = (v >>> ((((start & 7) | 0) << 2) | 0));
                if (next > end) {
                  next = end;
                }
                this._cbuf[--i] = (String.fromCharCode((48 | (v & 15)))).charCodeAt(0);
                switch ((next - start | 0)) {
                  case 1: 
                    $label0 = 2 /* goto IL_1C9 */ ;
                    continue $labelgroup0;

                  case 2: 
                    $label0 = 3 /* goto IL_1AF */ ;
                    continue $labelgroup0;

                  case 3: 
                    $label0 = 4 /* goto IL_195 */ ;
                    continue $labelgroup0;

                  case 4: 
                    $label0 = 5 /* goto IL_17B */ ;
                    continue $labelgroup0;

                  case 5: 
                    $label0 = 6 /* goto IL_161 */ ;
                    continue $labelgroup0;

                  case 6: 
                    $label0 = 7 /* goto IL_147 */ ;
                    continue $labelgroup0;

                  case 7: 
                    $label0 = 8 /* goto IL_12D */ ;
                    continue $labelgroup0;

                  case 8: 
                    this._cbuf[--i] = (String.fromCharCode((48 | ((v = (v >>> 4)) & 15)))).charCodeAt(0);
                    $label0 = 8 /* goto IL_12D */ ;
                    continue $labelgroup0;

                }

                $label0 = 1 /* goto IL_1D9 */ ;
                continue $labelgroup0;
              case 1: /* IL_1D9 */ 
                start = next;
                next += 8;
                continue $loop0;

              case 2: /* IL_1C9 */ 
                if (next === end) {
                  break $loop0;
                }
                $label0 = 1 /* goto IL_1D9 */ ;
                continue $labelgroup0;

              case 3: /* IL_1AF */ 
                this._cbuf[--i] = (String.fromCharCode((48 | ((v >>> 4) & 15)))).charCodeAt(0);
                $label0 = 2 /* goto IL_1C9 */ ;
                continue $labelgroup0;

              case 4: /* IL_195 */ 
                this._cbuf[--i] = (String.fromCharCode((48 | ((v = (v >>> 4)) & 15)))).charCodeAt(0);
                $label0 = 3 /* goto IL_1AF */ ;
                continue $labelgroup0;

              case 5: /* IL_17B */ 
                this._cbuf[--i] = (String.fromCharCode((48 | ((v = (v >>> 4)) & 15)))).charCodeAt(0);
                $label0 = 4 /* goto IL_195 */ ;
                continue $labelgroup0;

              case 6: /* IL_161 */ 
                this._cbuf[--i] = (String.fromCharCode((48 | ((v = (v >>> 4)) & 15)))).charCodeAt(0);
                $label0 = 5 /* goto IL_17B */ ;
                continue $labelgroup0;

              case 7: /* IL_147 */ 
                this._cbuf[--i] = (String.fromCharCode((48 | ((v = (v >>> 4)) & 15)))).charCodeAt(0);
                $label0 = 6 /* goto IL_161 */ ;
                continue $labelgroup0;

              case 8: /* IL_12D */ 
                this._cbuf[--i] = (String.fromCharCode((48 | ((v = (v >>> 4)) & 15)))).charCodeAt(0);
                $label0 = 7 /* goto IL_147 */ ;
                continue $labelgroup0;

            }
          }
        }
      }
    }
  );

  $.Method({Static:false, Public:false}, "AppendDigits", 
    $sig.make(0xA15, null, [
        $asm01.TypeRef("System.Int32"), $asm01.TypeRef("System.Int32"), 
        $asm01.TypeRef("System.Text.StringBuilder")
      ], []), 
    function NumberFormatter_AppendDigits (start, end, sb) {
      if (start < end) {
        var i = ((sb.get_Length() + ((end - start) | 0)) | 0);
        sb.set_Length(i);
        end += this._offset;
        start += this._offset;
        var next = ((((start + 8) | 0) - ((start & 7) | 0)) | 0);

      $loop0: 
        while (true) {

          var $label0 = 0;
        $labelgroup0: 
          while (true) {
            switch ($label0) {
              case 0: /* $entry0 */ 
                if (next === 8) {
                  var v = this._val1;
                } else if (next === 16) {
                  v = this._val2;
                } else if (next === 24) {
                  v = this._val3;
                } else if (next === 32) {
                  v = this._val4;
                } else {
                  v = 0;
                }
                v = (v >>> ((((start & 7) | 0) << 2) | 0));
                if (next > end) {
                  next = end;
                }
                sb.set_Chars(--i, (String.fromCharCode((48 | (v & 15)))).charCodeAt(0));
                switch ((next - start | 0)) {
                  case 1: 
                    $label0 = 2 /* goto IL_1AD */ ;
                    continue $labelgroup0;

                  case 2: 
                    $label0 = 3 /* goto IL_193 */ ;
                    continue $labelgroup0;

                  case 3: 
                    $label0 = 4 /* goto IL_179 */ ;
                    continue $labelgroup0;

                  case 4: 
                    $label0 = 5 /* goto IL_15F */ ;
                    continue $labelgroup0;

                  case 5: 
                    $label0 = 6 /* goto IL_145 */ ;
                    continue $labelgroup0;

                  case 6: 
                    $label0 = 7 /* goto IL_12B */ ;
                    continue $labelgroup0;

                  case 7: 
                    $label0 = 8 /* goto IL_111 */ ;
                    continue $labelgroup0;

                  case 8: 
                    sb.set_Chars(--i, (String.fromCharCode((48 | ((v = (v >>> 4)) & 15)))).charCodeAt(0));
                    $label0 = 8 /* goto IL_111 */ ;
                    continue $labelgroup0;

                }

                $label0 = 1 /* goto IL_1BD */ ;
                continue $labelgroup0;
              case 1: /* IL_1BD */ 
                start = next;
                next += 8;
                continue $loop0;

              case 2: /* IL_1AD */ 
                if (next === end) {
                  break $loop0;
                }
                $label0 = 1 /* goto IL_1BD */ ;
                continue $labelgroup0;

              case 3: /* IL_193 */ 
                sb.set_Chars(--i, (String.fromCharCode((48 | ((v >>> 4) & 15)))).charCodeAt(0));
                $label0 = 2 /* goto IL_1AD */ ;
                continue $labelgroup0;

              case 4: /* IL_179 */ 
                sb.set_Chars(--i, (String.fromCharCode((48 | ((v = (v >>> 4)) & 15)))).charCodeAt(0));
                $label0 = 3 /* goto IL_193 */ ;
                continue $labelgroup0;

              case 5: /* IL_15F */ 
                sb.set_Chars(--i, (String.fromCharCode((48 | ((v = (v >>> 4)) & 15)))).charCodeAt(0));
                $label0 = 4 /* goto IL_179 */ ;
                continue $labelgroup0;

              case 6: /* IL_145 */ 
                sb.set_Chars(--i, (String.fromCharCode((48 | ((v = (v >>> 4)) & 15)))).charCodeAt(0));
                $label0 = 5 /* goto IL_15F */ ;
                continue $labelgroup0;

              case 7: /* IL_12B */ 
                sb.set_Chars(--i, (String.fromCharCode((48 | ((v = (v >>> 4)) & 15)))).charCodeAt(0));
                $label0 = 6 /* goto IL_145 */ ;
                continue $labelgroup0;

              case 8: /* IL_111 */ 
                sb.set_Chars(--i, (String.fromCharCode((48 | ((v = (v >>> 4)) & 15)))).charCodeAt(0));
                $label0 = 7 /* goto IL_12B */ ;
                continue $labelgroup0;

            }
          }
        }
      }
    }
  );

  $.Method({Static:false, Public:false}, "AppendExponent", 
    $sig.make(0xA08, null, [
        $asm01.TypeRef("System.Globalization.NumberFormatInfo"), $asm01.TypeRef("System.Int32"), 
        $asm01.TypeRef("System.Int32")
      ], []), 
    function NumberFormatter_AppendExponent (nfi, exponent, minDigits) {
      if (!(!this._specifierIsUpper && (this._specifier.charCodeAt(0) !== "R".charCodeAt(0)))) {
        $sig.get(0x8E8, null, [$asm01.System.Char], []).CallVirtual("Append", null, this, "E");
      } else {
        $sig.get(0x8E8, null, [$asm01.System.Char], []).CallVirtual("Append", null, this, "e");
      }
      if (exponent >= 0) {
        $sig.get(0x8ED, null, [$asm01.System.String], []).CallVirtual("Append", null, this, nfi.get_PositiveSign());
      } else {
        $sig.get(0x8ED, null, [$asm01.System.String], []).CallVirtual("Append", null, this, nfi.get_NegativeSign());
        exponent = -exponent;
      }
      if (exponent === 0) {
        this.Append("0", minDigits);
      } else if (exponent < 10) {
        this.Append("0", ((minDigits - 1) | 0));
        $sig.get(0x8E8, null, [$asm01.System.Char], []).CallVirtual("Append", null, this, (String.fromCharCode(((48 | exponent) | 0))).charCodeAt(0));
      } else {
        var hexDigit = $thisType.FastToDecHex(exponent);
        if (!((exponent < 100) && (minDigits !== 3))) {
          $sig.get(0x8E8, null, [$asm01.System.Char], []).CallVirtual("Append", null, this, (String.fromCharCode((48 | (hexDigit >>> 8)))).charCodeAt(0));
        }
        $sig.get(0x8E8, null, [$asm01.System.Char], []).CallVirtual("Append", null, this, (String.fromCharCode((48 | ((hexDigit >>> 4) & 15)))).charCodeAt(0));
        $sig.get(0x8E8, null, [$asm01.System.Char], []).CallVirtual("Append", null, this, (String.fromCharCode((48 | (hexDigit & 15)))).charCodeAt(0));
      }
    }
  );

  $.Method({Static:false, Public:false}, "AppendIntegerString", 
    $sig.make(0x9FF, null, [$asm01.TypeRef("System.Int32"), $asm01.TypeRef("System.Text.StringBuilder")], []), 
    function NumberFormatter_AppendIntegerString (minLength, sb) {
      if (this._decPointPos <= 0) {
        sb.Append("0", minLength);
      } else {
        if (this._decPointPos < minLength) {
          sb.Append("0", ((minLength - this._decPointPos) | 0));
        }
        this.AppendDigits(((this._digitsLen - this._decPointPos) | 0), this._digitsLen, sb);
      }
    }
  );

  $.Method({Static:false, Public:false}, "AppendIntegerString", 
    $sig.make(0xA00, null, [$asm01.TypeRef("System.Int32")], []), 
    function NumberFormatter_AppendIntegerString (minLength) {
      if (this._decPointPos <= 0) {
        this.Append("0", minLength);
      } else {
        if (this._decPointPos < minLength) {
          this.Append("0", ((minLength - this._decPointPos) | 0));
        }
        this.AppendDigits(((this._digitsLen - this._decPointPos) | 0), this._digitsLen);
      }
    }
  );

  $.Method({Static:false, Public:false}, "AppendIntegerStringWithGroupSeparator", 
    $sig.make(0xA06, null, [$jsilcore.TypeRef("System.Array", [$asm01.TypeRef("System.Int32")]), $asm01.TypeRef("System.String")], []), 
    function NumberFormatter_AppendIntegerStringWithGroupSeparator (groups, groupSeparator) {
      var lastGroupMod = 0;
      if (this.get_IsZeroInteger()) {
        $sig.get(0x8E8, null, [$asm01.System.Char], []).CallVirtual("Append", null, this, "0");
      } else {
        var total = 0;
        var groupIndex = 0;

      $loop0: 
        for (var i = 0; i < groups.length; ++i) {
          total += groups[i];
          if (total > this._decPointPos) {
            break $loop0;
          }
          groupIndex = i;
        }
        if (!((groups.length <= 0) || (total <= 0))) {
          var groupSize = groups[groupIndex];
          var fraction = ((this._decPointPos > total) ? ((this._decPointPos - total) | 0) : 0);
          if (groupSize === 0) {

            for (; (groupIndex >= 0) && (groups[groupIndex] === 0); --groupIndex) {
            }
            groupSize = ((fraction > 0) ? fraction : groups[groupIndex]);
          }
          if (fraction === 0) {
            var counter = groupSize;
          } else {
            groupIndex += ((fraction / groupSize) | 0);
            counter = ((fraction % groupSize) | 0);
            if (counter === 0) {
              counter = groupSize;
            } else {
              ++groupIndex;
            }
          }
          if (total >= this._decPointPos) {
            var lastGroupSize = groups[0];
            if (total > lastGroupSize) {
              var lastGroupDiff = -((lastGroupSize - this._decPointPos) | 0);
              if (lastGroupDiff < lastGroupSize) {
                counter = lastGroupDiff;
              } else if (!((lastGroupSize <= 0) || ((lastGroupMod = ((this._decPointPos % lastGroupSize) | 0)) <= 0))) {
                counter = lastGroupMod;
              }
            }
          }

          for (i = 0; (((this._decPointPos - i) | 0) > counter) && (counter !== 0); ) {
            this.AppendDigits(((((this._digitsLen - i) | 0) - counter) | 0), ((this._digitsLen - i) | 0));
            i += counter;
            $sig.get(0x8ED, null, [$asm01.System.String], []).CallVirtual("Append", null, this, groupSeparator);
            if (!((--groupIndex >= groups.length) || (groupIndex < 0))) {
              groupSize = groups[groupIndex];
            }
            counter = groupSize;
          }
          this.AppendDigits(((this._digitsLen - this._decPointPos) | 0), ((this._digitsLen - i) | 0));
        } else {
          this.AppendDigits(((this._digitsLen - this._decPointPos) | 0), this._digitsLen);
        }
      }
    }
  );

  $.Method({Static:true , Public:false}, "AppendNonNegativeNumber", 
    $sig.make(0x9FD, null, [$asm01.TypeRef("System.Text.StringBuilder"), $asm01.TypeRef("System.Int32")], []), 
    function NumberFormatter_AppendNonNegativeNumber (sb, v) {
      if (v < 0) {
        throw new ($T0A())();
      }
      var i = (($thisType.ScaleOrder($T01().FromNumber(v)) - 1) | 0);

      do {
        var j = ((v / $thisType.GetTenPowerOf(i).ToNumber()) | 0);
        $sig.get(0xB55, $asm01.System.Text.StringBuilder, [$asm01.System.Char], []).CallVirtual("Append", null, sb, (String.fromCharCode(((48 | j) | 0))).charCodeAt(0));
        v -= (($thisType.GetTenPowerOf(i--).ToNumber() * j) | 0);
      } while (i >= 0);
    }
  );

  $.Method({Static:false, Public:false}, "AppendOneDigit", 
    $sig.make(0xA09, null, [$asm01.TypeRef("System.Int32")], []), 
    function NumberFormatter_AppendOneDigit (start) {
      if (this._ind === this._cbuf.length) {
        this.Resize(((this._ind + 10) | 0));
      }
      start += this._offset;
      if (start < 0) {
        var v = 0;
      } else if (start < 8) {
        v = this._val1;
      } else if (start < 16) {
        v = this._val2;
      } else if (start < 24) {
        v = this._val3;
      } else if (start < 32) {
        v = this._val4;
      } else {
        v = 0;
      }
      v = (v >>> ((((start & 7) | 0) << 2) | 0));
      this._cbuf[this._ind++] = (String.fromCharCode((48 | (v & 15)))).charCodeAt(0);
    }
  );

  $.Method({Static:false, Public:false}, "CountTrailingZeros", 
    $sig.make(0x8FE, $asm01.TypeRef("System.Int32"), [], []), 
    function NumberFormatter_CountTrailingZeros () {
      if (this._val1 !== 0) {
        var result = $thisType.CountTrailingZeros(this._val1);
      } else if (this._val2 !== 0) {
        result = (($thisType.CountTrailingZeros(this._val2) + 8) | 0);
      } else if (this._val3 !== 0) {
        result = (($thisType.CountTrailingZeros(this._val3) + 16) | 0);
      } else if (this._val4 !== 0) {
        result = (($thisType.CountTrailingZeros(this._val4) + 24) | 0);
      } else {
        result = this._digitsLen;
      }
      return result;
    }
  );

  $.Method({Static:true , Public:false}, "CountTrailingZeros", 
    $sig.make(0x900, $asm01.TypeRef("System.Int32"), [$asm01.TypeRef("System.UInt32")], []), 
    function NumberFormatter_CountTrailingZeros (val) {
      if ((val & 65535) === 0) {
        if ((val & 16777215) === 0) {
          if ((val & 268435455) === 0) {
            var result = 7;
          } else {
            result = 6;
          }
        } else if ((val & 1048575) === 0) {
          result = 5;
        } else {
          result = 4;
        }
      } else if ((val & 255) === 0) {
        if ((val & 4095) === 0) {
          result = 3;
        } else {
          result = 2;
        }
      } else if ((val & 15) === 0) {
        result = 1;
      } else {
        result = 0;
      }
      return result;
    }
  );

  $.Method({Static:true , Public:false}, "DecHexLen", 
    $sig.make(0x8B7, $asm01.TypeRef("System.Int32"), [$asm01.TypeRef("System.UInt32")], []), 
    function NumberFormatter_DecHexLen (val) {
      if (val < 65536) {
        var result = $thisType.FastDecHexLen(val);
      } else {
        result = ((4 + $thisType.FastDecHexLen((val >>> 16))) | 0);
      }
      return result;
    }
  );

  $.Method({Static:false, Public:false}, "DecHexLen", 
    $sig.make(0x8B8, $asm01.TypeRef("System.Int32"), [], []), 
    function NumberFormatter_DecHexLen () {
      if (this._val4 !== 0) {
        var result = (($thisType.DecHexLen(this._val4) + 24) | 0);
      } else if (this._val3 !== 0) {
        result = (($thisType.DecHexLen(this._val3) + 16) | 0);
      } else if (this._val2 !== 0) {
        result = (($thisType.DecHexLen(this._val2) + 8) | 0);
      } else if (this._val1 !== 0) {
        result = $thisType.DecHexLen(this._val1);
      } else {
        result = 0;
      }
      return result;
    }
  );

  $.Method({Static:false, Public:false}, "Divide10", 
    $sig.make(0xA1D, null, [$asm01.TypeRef("System.Int32")], []), 
    function NumberFormatter_Divide10 (count) {
      if ((count > 0) && (this._digitsLen !== 0)) {
        this._decPointPos -= count;
      }
    }
  );

  $.Method({Static:false, Public:false}, "FastAppendDigits", 
    $sig.make(0xA0B, null, [$asm01.TypeRef("System.Int32"), $asm01.TypeRef("System.Boolean")], []), 
    function NumberFormatter_FastAppendDigits (val, force) {
      var i = this._ind;
      if (!(!force && (val < 100))) {
        var v = ((((val * 5243) | 0) >> 19) | 0);
        var digits = $thisType.DecHexDigits[v];
        if (!(!force && (val < 1000))) {
          this._cbuf[i++] = (String.fromCharCode(((48 | ((digits >> 4) | 0)) | 0))).charCodeAt(0);
        }
        this._cbuf[i++] = (String.fromCharCode(((48 | ((digits & 15) | 0)) | 0))).charCodeAt(0);
        digits = $thisType.DecHexDigits[((val - ((v * 100) | 0)) | 0)];
      } else {
        digits = $thisType.DecHexDigits[val];
      }
      if (!(!force && (val < 10))) {
        this._cbuf[i++] = (String.fromCharCode(((48 | ((digits >> 4) | 0)) | 0))).charCodeAt(0);
      }
      this._cbuf[i++] = (String.fromCharCode(((48 | ((digits & 15) | 0)) | 0))).charCodeAt(0);
      this._ind = i;
    }
  );

  $.Method({Static:true , Public:false}, "FastDecHexLen", 
    $sig.make(0x8B6, $asm01.TypeRef("System.Int32"), [$asm01.TypeRef("System.Int32")], []), 
    function NumberFormatter_FastDecHexLen (val) {
      if (val < 256) {
        if (val < 16) {
          var result = 1;
        } else {
          result = 2;
        }
      } else if (val < 4096) {
        result = 3;
      } else {
        result = 4;
      }
      return result;
    }
  );

  $.Method({Static:false, Public:false}, "FastIntegerToString", 
    $sig.make(0x9D9, $asm01.TypeRef("System.String"), [$asm01.TypeRef("System.Int32"), $asm01.TypeRef("System.IFormatProvider")], []), 
    function NumberFormatter_FastIntegerToString (value, fp) {
      if (value < 0) {
        var sign = this.GetNumberFormatInstance(fp).get_NegativeSign();
        this.ResetCharBuf(((8 + sign.length) | 0));
        value = -value;
        $sig.get(0x8ED, null, [$asm01.System.String], []).CallVirtual("Append", null, this, sign);
      } else {
        this.ResetCharBuf(8);
      }
      if (value >= 10000) {
        var v = ((value / 10000) | 0);
        this.FastAppendDigits(v, false);
        this.FastAppendDigits(((value - ((v * 10000) | 0)) | 0), true);
      } else {
        this.FastAppendDigits(value, false);
      }
      return new ($T06())(this._cbuf, 0, this._ind);
    }
  );

  $.Method({Static:true , Public:false}, "FastToDecHex", 
    $sig.make(0x8B3, $asm01.TypeRef("System.UInt32"), [$asm01.TypeRef("System.Int32")], []), 
    function NumberFormatter_FastToDecHex (val) {
      if (val < 100) {
        var result = $thisType.DecHexDigits[val];
      } else {
        var v = ((((val * 5243) | 0) >> 19) | 0);
        result = (((($thisType.DecHexDigits[v] << 8) | 0) | $thisType.DecHexDigits[((val - ((v * 100) | 0)) | 0)]) | 0);
      }
      return result;
    }
  );

  $.Method({Static:false, Public:true }, "FormatCurrency", 
    $sig.make(0x9DF, $asm01.TypeRef("System.String"), [$asm01.TypeRef("System.Int32"), $asm01.TypeRef("System.Globalization.NumberFormatInfo")], []), 
    function NumberFormatter_FormatCurrency (precision, nfi) {
      precision = ((precision >= 0) ? precision : nfi.get_CurrencyDecimalDigits());
      this.RoundDecimal(precision);
      this.ResetCharBuf(((((((this.get_IntegerDigits() * 2) | 0) + ((precision * 2) | 0)) | 0) + 16) | 0));
      if (this._positive) {
        switch (nfi.get_CurrencyPositivePattern()) {
          case 0: 
            $sig.get(0x8ED, null, [$asm01.System.String], []).CallVirtual("Append", null, this, nfi.get_CurrencySymbol());
            break;

          case 2: 
            $sig.get(0x8ED, null, [$asm01.System.String], []).CallVirtual("Append", null, this, nfi.get_CurrencySymbol());
            $sig.get(0x8E8, null, [$asm01.System.Char], []).CallVirtual("Append", null, this, " ");
            break;

        }
      } else {
        switch (nfi.get_CurrencyNegativePattern()) {
          case 0: 
            $sig.get(0x8E8, null, [$asm01.System.Char], []).CallVirtual("Append", null, this, "(");
            $sig.get(0x8ED, null, [$asm01.System.String], []).CallVirtual("Append", null, this, nfi.get_CurrencySymbol());
            break;

          case 1: 
            $sig.get(0x8ED, null, [$asm01.System.String], []).CallVirtual("Append", null, this, nfi.get_NegativeSign());
            $sig.get(0x8ED, null, [$asm01.System.String], []).CallVirtual("Append", null, this, nfi.get_CurrencySymbol());
            break;

          case 2: 
            $sig.get(0x8ED, null, [$asm01.System.String], []).CallVirtual("Append", null, this, nfi.get_CurrencySymbol());
            $sig.get(0x8ED, null, [$asm01.System.String], []).CallVirtual("Append", null, this, nfi.get_NegativeSign());
            break;

          case 3: 
            $sig.get(0x8ED, null, [$asm01.System.String], []).CallVirtual("Append", null, this, nfi.get_CurrencySymbol());
            break;

          case 4: 
            $sig.get(0x8E8, null, [$asm01.System.Char], []).CallVirtual("Append", null, this, "(");
            break;

          case 5: 
            $sig.get(0x8ED, null, [$asm01.System.String], []).CallVirtual("Append", null, this, nfi.get_NegativeSign());
            break;

          case 8: 
            $sig.get(0x8ED, null, [$asm01.System.String], []).CallVirtual("Append", null, this, nfi.get_NegativeSign());
            break;

          case 9: 
            $sig.get(0x8ED, null, [$asm01.System.String], []).CallVirtual("Append", null, this, nfi.get_NegativeSign());
            $sig.get(0x8ED, null, [$asm01.System.String], []).CallVirtual("Append", null, this, nfi.get_CurrencySymbol());
            $sig.get(0x8E8, null, [$asm01.System.Char], []).CallVirtual("Append", null, this, " ");
            break;

          case 11: 
            $sig.get(0x8ED, null, [$asm01.System.String], []).CallVirtual("Append", null, this, nfi.get_CurrencySymbol());
            $sig.get(0x8E8, null, [$asm01.System.Char], []).CallVirtual("Append", null, this, " ");
            break;

          case 12: 
            $sig.get(0x8ED, null, [$asm01.System.String], []).CallVirtual("Append", null, this, nfi.get_CurrencySymbol());
            $sig.get(0x8E8, null, [$asm01.System.Char], []).CallVirtual("Append", null, this, " ");
            $sig.get(0x8ED, null, [$asm01.System.String], []).CallVirtual("Append", null, this, nfi.get_NegativeSign());
            break;

          case 14: 
            $sig.get(0x8E8, null, [$asm01.System.Char], []).CallVirtual("Append", null, this, "(");
            $sig.get(0x8ED, null, [$asm01.System.String], []).CallVirtual("Append", null, this, nfi.get_CurrencySymbol());
            $sig.get(0x8E8, null, [$asm01.System.Char], []).CallVirtual("Append", null, this, " ");
            break;

          case 15: 
            $sig.get(0x8E8, null, [$asm01.System.Char], []).CallVirtual("Append", null, this, "(");
            break;

        }
      }
      this.AppendIntegerStringWithGroupSeparator(
        nfi.get_RawCurrencyGroupSizes(), 
        nfi.get_CurrencyGroupSeparator()
      );
      if (precision > 0) {
        $sig.get(0x8ED, null, [$asm01.System.String], []).CallVirtual("Append", null, this, nfi.get_CurrencyDecimalSeparator());
        this.AppendDecimalString(precision);
      }
      if (this._positive) {
        switch (nfi.get_CurrencyPositivePattern()) {
          case 1: 
            $sig.get(0x8ED, null, [$asm01.System.String], []).CallVirtual("Append", null, this, nfi.get_CurrencySymbol());
            break;

          case 3: 
            $sig.get(0x8E8, null, [$asm01.System.Char], []).CallVirtual("Append", null, this, " ");
            $sig.get(0x8ED, null, [$asm01.System.String], []).CallVirtual("Append", null, this, nfi.get_CurrencySymbol());
            break;

        }
      } else {
        switch (nfi.get_CurrencyNegativePattern()) {
          case 0: 
            $sig.get(0x8E8, null, [$asm01.System.Char], []).CallVirtual("Append", null, this, ")");
            break;

          case 3: 
            $sig.get(0x8ED, null, [$asm01.System.String], []).CallVirtual("Append", null, this, nfi.get_NegativeSign());
            break;

          case 4: 
            $sig.get(0x8ED, null, [$asm01.System.String], []).CallVirtual("Append", null, this, nfi.get_CurrencySymbol());
            $sig.get(0x8E8, null, [$asm01.System.Char], []).CallVirtual("Append", null, this, ")");
            break;

          case 5: 
            $sig.get(0x8ED, null, [$asm01.System.String], []).CallVirtual("Append", null, this, nfi.get_CurrencySymbol());
            break;

          case 6: 
            $sig.get(0x8ED, null, [$asm01.System.String], []).CallVirtual("Append", null, this, nfi.get_NegativeSign());
            $sig.get(0x8ED, null, [$asm01.System.String], []).CallVirtual("Append", null, this, nfi.get_CurrencySymbol());
            break;

          case 7: 
            $sig.get(0x8ED, null, [$asm01.System.String], []).CallVirtual("Append", null, this, nfi.get_CurrencySymbol());
            $sig.get(0x8ED, null, [$asm01.System.String], []).CallVirtual("Append", null, this, nfi.get_NegativeSign());
            break;

          case 8: 
            $sig.get(0x8E8, null, [$asm01.System.Char], []).CallVirtual("Append", null, this, " ");
            $sig.get(0x8ED, null, [$asm01.System.String], []).CallVirtual("Append", null, this, nfi.get_CurrencySymbol());
            break;

          case 10: 
            $sig.get(0x8E8, null, [$asm01.System.Char], []).CallVirtual("Append", null, this, " ");
            $sig.get(0x8ED, null, [$asm01.System.String], []).CallVirtual("Append", null, this, nfi.get_CurrencySymbol());
            $sig.get(0x8ED, null, [$asm01.System.String], []).CallVirtual("Append", null, this, nfi.get_NegativeSign());
            break;

          case 11: 
            $sig.get(0x8ED, null, [$asm01.System.String], []).CallVirtual("Append", null, this, nfi.get_NegativeSign());
            break;

          case 13: 
            $sig.get(0x8ED, null, [$asm01.System.String], []).CallVirtual("Append", null, this, nfi.get_NegativeSign());
            $sig.get(0x8E8, null, [$asm01.System.Char], []).CallVirtual("Append", null, this, " ");
            $sig.get(0x8ED, null, [$asm01.System.String], []).CallVirtual("Append", null, this, nfi.get_CurrencySymbol());
            break;

          case 14: 
            $sig.get(0x8E8, null, [$asm01.System.Char], []).CallVirtual("Append", null, this, ")");
            break;

          case 15: 
            $sig.get(0x8E8, null, [$asm01.System.Char], []).CallVirtual("Append", null, this, " ");
            $sig.get(0x8ED, null, [$asm01.System.String], []).CallVirtual("Append", null, this, nfi.get_CurrencySymbol());
            $sig.get(0x8E8, null, [$asm01.System.Char], []).CallVirtual("Append", null, this, ")");
            break;

        }
      }
      return new ($T06())(this._cbuf, 0, this._ind);
    }
  );

  $.Method({Static:false, Public:true }, "FormatCustom", 
    $sig.make(0x9F4, $asm01.TypeRef("System.String"), [$asm01.TypeRef("System.String"), $asm01.TypeRef("System.Globalization.NumberFormatInfo")], []), 
    function NumberFormatter_FormatCustom (format, nfi) {
      var p = new JSIL.Variable(this._positive);
      var offset = new JSIL.Variable(0);
      var length = new JSIL.Variable(0);
      $T0D().GetActiveSection(
        format, 
        /* ref */ p, 
        this.get_IsZero(), 
        /* ref */ offset, 
        /* ref */ length
      );
      if (length.value === 0) {
        var result = (this._positive ? $T06().Empty : nfi.get_NegativeSign());
      } else {
        this._positive = p.value;
        var info = $T0D().Parse(format, offset.value, length.value, nfi);
        var sb_int = $sig.get(0xB02, null, [$asm01.System.Int32], []).Construct($T07(), ((info.IntegerDigits * 2) | 0));
        var sb_dec = $sig.get(0xB02, null, [$asm01.System.Int32], []).Construct($T07(), ((info.DecimalDigits * 2) | 0));
        var sb_exp = (info.UseExponent ? $sig.get(0xB02, null, [$asm01.System.Int32], []).Construct($T07(), ((info.ExponentDigits * 2) | 0)) : null);
        var diff = 0;
        if (info.Percents > 0) {
          this.Multiply10(((2 * info.Percents) | 0));
        }
        if (info.Permilles > 0) {
          this.Multiply10(((3 * info.Permilles) | 0));
        }
        if (info.DividePlaces > 0) {
          this.Divide10(info.DividePlaces);
        }
        var expPositive = true;
        if (!(!info.UseExponent || ((info.DecimalDigits <= 0) && 
              (info.IntegerDigits <= 0)))) {
          if (!this.get_IsZero()) {
            this.RoundPos(((info.DecimalDigits + info.IntegerDigits) | 0));
            diff -= ((this._decPointPos - info.IntegerDigits) | 0);
            this._decPointPos = info.IntegerDigits;
          }
          expPositive = (diff <= 0);
          $thisType.AppendNonNegativeNumber(sb_exp, ((diff < 0) ? -diff : diff));
        } else {
          this.RoundDecimal(info.DecimalDigits);
        }
        if (!((info.IntegerDigits === 0) && this.get_IsZeroInteger())) {
          this.AppendIntegerString(this.get_IntegerDigits(), sb_int);
        }
        this.AppendDecimalString(this.get_DecimalDigits(), sb_dec);
        if (info.UseExponent) {
          if (!((info.DecimalDigits > 0) || (info.IntegerDigits > 0))) {
            this._positive = true;
          }
          if (sb_int.get_Length() < info.IntegerDigits) {
            sb_int.Insert(0, "0", ((info.IntegerDigits - sb_int.get_Length()) | 0));
          }

          while (sb_exp.get_Length() < ((info.ExponentDigits - info.ExponentTailSharpDigits) | 0)) {
            $sig.get(0xB71, $asm01.System.Text.StringBuilder, [$asm01.System.Int32, $asm01.System.Char], []).CallVirtual("Insert", null, sb_exp, 0, "0");
          }
          if (!(!expPositive || info.ExponentNegativeSignOnly)) {
            $sig.get(0xB6B, $asm01.System.Text.StringBuilder, [$asm01.System.Int32, $asm01.System.String], []).CallVirtual("Insert", null, sb_exp, 0, nfi.get_PositiveSign());
          } else if (!expPositive) {
            $sig.get(0xB6B, $asm01.System.Text.StringBuilder, [$asm01.System.Int32, $asm01.System.String], []).CallVirtual("Insert", null, sb_exp, 0, nfi.get_NegativeSign());
          }
        } else {
          if (sb_int.get_Length() < ((info.IntegerDigits - info.IntegerHeadSharpDigits) | 0)) {
            sb_int.Insert(0, "0", ((((info.IntegerDigits - info.IntegerHeadSharpDigits) | 0) - sb_int.get_Length()) | 0));
          }
          if (!((info.IntegerDigits !== info.IntegerHeadSharpDigits) || !$thisType.IsZeroOnly(sb_int))) {
            sb_int.Remove(0, sb_int.get_Length());
          }
        }
        $thisType.ZeroTrimEnd(sb_dec, true);

        while (sb_dec.get_Length() < ((info.DecimalDigits - info.DecimalTailSharpDigits) | 0)) {
          $sig.get(0xB55, $asm01.System.Text.StringBuilder, [$asm01.System.Char], []).CallVirtual("Append", null, sb_dec, "0");
        }
        if (sb_dec.get_Length() > info.DecimalDigits) {
          sb_dec.Remove(info.DecimalDigits, ((sb_dec.get_Length() - info.DecimalDigits) | 0));
        }
        result = info.Format(
          format, 
          offset.value, 
          length.value, 
          nfi, 
          this._positive, 
          sb_int, 
          sb_dec, 
          sb_exp
        );
      }
      return result;
    }
  );

  $.Method({Static:false, Public:false}, "FormatDecimal", 
    $sig.make(0x9E1, $asm01.TypeRef("System.String"), [$asm01.TypeRef("System.Int32"), $asm01.TypeRef("System.Globalization.NumberFormatInfo")], []), 
    function NumberFormatter_FormatDecimal (precision, nfi) {
      if (precision < this._digitsLen) {
        precision = this._digitsLen;
      }
      if (precision === 0) {
        var result = "0";
      } else {
        this.ResetCharBuf(((precision + 1) | 0));
        if (!this._positive) {
          $sig.get(0x8ED, null, [$asm01.System.String], []).CallVirtual("Append", null, this, nfi.get_NegativeSign());
        }
        this.AppendDigits(0, precision);
        result = new ($T06())(this._cbuf, 0, this._ind);
      }
      return result;
    }
  );

  $.Method({Static:false, Public:true }, "FormatExponential", 
    $sig.make(0x9F1, $asm01.TypeRef("System.String"), [$asm01.TypeRef("System.Int32"), $asm01.TypeRef("System.Globalization.NumberFormatInfo")], []), 
    function NumberFormatter_FormatExponential (precision, nfi) {
      if (precision === -1) {
        precision = 6;
      }
      this.RoundPos(((precision + 1) | 0));
      return this.FormatExponential(precision, nfi, 3);
    }
  );

  $.Method({Static:false, Public:false}, "FormatExponential", 
    $sig.make(0x9F2, $asm01.TypeRef("System.String"), [
        $asm01.TypeRef("System.Int32"), $asm01.TypeRef("System.Globalization.NumberFormatInfo"), 
        $asm01.TypeRef("System.Int32")
      ], []), 
    function NumberFormatter_FormatExponential (precision, nfi, expDigits) {
      var digits = this._digitsLen;
      this.ResetCharBuf(((precision + 8) | 0));
      if (!this._positive) {
        $sig.get(0x8ED, null, [$asm01.System.String], []).CallVirtual("Append", null, this, nfi.get_NegativeSign());
      }
      this.AppendOneDigit(((digits - 1) | 0));
      if (precision > 0) {
        $sig.get(0x8ED, null, [$asm01.System.String], []).CallVirtual("Append", null, this, nfi.get_NumberDecimalSeparator());
        this.AppendDigits(((((digits - precision) | 0) - 1) | 0), ((digits - this._decPointPos) | 0));
      }
      this.AppendExponent(nfi, ((this._decPointPos - 1) | 0), expDigits);
      return new ($T06())(this._cbuf, 0, this._ind);
    }
  );

  $.Method({Static:false, Public:true }, "FormatFixedPoint", 
    $sig.make(0x9E7, $asm01.TypeRef("System.String"), [$asm01.TypeRef("System.Int32"), $asm01.TypeRef("System.Globalization.NumberFormatInfo")], []), 
    function NumberFormatter_FormatFixedPoint (precision, nfi) {
      if (precision === -1) {
        precision = nfi.get_NumberDecimalDigits();
      }
      this.RoundDecimal(precision);
      this.ResetCharBuf(((((this.get_IntegerDigits() + precision) | 0) + 2) | 0));
      if (!this._positive) {
        $sig.get(0x8ED, null, [$asm01.System.String], []).CallVirtual("Append", null, this, nfi.get_NegativeSign());
      }
      this.AppendIntegerString(this.get_IntegerDigits());
      if (precision > 0) {
        $sig.get(0x8ED, null, [$asm01.System.String], []).CallVirtual("Append", null, this, nfi.get_NumberDecimalSeparator());
        this.AppendDecimalString(precision);
      }
      return new ($T06())(this._cbuf, 0, this._ind);
    }
  );

  $.Method({Static:false, Public:false}, "FormatGeneral", 
    $sig.make(0x9ED, $asm01.TypeRef("System.String"), [$asm01.TypeRef("System.Int32"), $asm01.TypeRef("System.Globalization.NumberFormatInfo")], []), 
    function NumberFormatter_FormatGeneral (precision, nfi) {
      if (precision === -1) {
        var enableExp = this.get_IsFloatingSource();
        precision = this._defPrecision;
      } else {
        enableExp = true;
        if (precision === 0) {
          precision = this._defPrecision;
        }
        this.RoundPos(precision);
      }
      var intDigits = this._decPointPos;
      var digits = this._digitsLen;
      var decDigits = ((digits - intDigits) | 0);
      if (!(((intDigits <= precision) && 
            (intDigits > -4)) || !enableExp)) {
        var result = this.FormatExponential(((digits - 1) | 0), nfi, 2);
      } else {
        if (decDigits < 0) {
          decDigits = 0;
        }
        if (intDigits < 0) {
          intDigits = 0;
        }
        this.ResetCharBuf(((((decDigits + intDigits) | 0) + 3) | 0));
        if (!this._positive) {
          $sig.get(0x8ED, null, [$asm01.System.String], []).CallVirtual("Append", null, this, nfi.get_NegativeSign());
        }
        if (intDigits === 0) {
          $sig.get(0x8E8, null, [$asm01.System.Char], []).CallVirtual("Append", null, this, "0");
        } else {
          this.AppendDigits(((digits - intDigits) | 0), digits);
        }
        if (decDigits > 0) {
          $sig.get(0x8ED, null, [$asm01.System.String], []).CallVirtual("Append", null, this, nfi.get_NumberDecimalSeparator());
          this.AppendDigits(0, decDigits);
        }
        result = new ($T06())(this._cbuf, 0, this._ind);
      }
      return result;
    }
  );

  $.Method({Static:false, Public:false}, "FormatHexadecimal", 
    $sig.make(0x9E5, $asm01.TypeRef("System.String"), [$asm01.TypeRef("System.Int32")], []), 
    function NumberFormatter_FormatHexadecimal (precision) {
      var size = (Math.max(precision, this._decPointPos));
      this.ResetCharBuf(size);
      this._ind = size;
      var val = $T03().op_BitwiseOr(
        $T03().FromNumber(this._val1), 
        $T03().op_LeftShift($T03().FromNumber(this._val2), 32)
      );

      while (size > 0) {
        this._cbuf[--size] = (this._specifierIsUpper ? $thisType.DigitUpperTable : $thisType.DigitLowerTable)[($T03().op_BitwiseAnd(val, $T03().Create(15, 0, 0))).ToNumber()];
        val = $T03().op_RightShift(val, 4);
      }
      return new ($T06())(this._cbuf, 0, this._ind);
    }
  );

  $.Method({Static:false, Public:true }, "FormatNumber", 
    $sig.make(0x9EF, $asm01.TypeRef("System.String"), [$asm01.TypeRef("System.Int32"), $asm01.TypeRef("System.Globalization.NumberFormatInfo")], []), 
    function NumberFormatter_FormatNumber (precision, nfi) {
      precision = ((precision >= 0) ? precision : nfi.get_NumberDecimalDigits());
      this.ResetCharBuf(((((this.get_IntegerDigits() * 3) | 0) + precision) | 0));
      this.RoundDecimal(precision);
      if (!this._positive) {
        switch (nfi.get_NumberNegativePattern()) {
          case 0: 
            $sig.get(0x8E8, null, [$asm01.System.Char], []).CallVirtual("Append", null, this, "(");
            break;

          case 1: 
            $sig.get(0x8ED, null, [$asm01.System.String], []).CallVirtual("Append", null, this, nfi.get_NegativeSign());
            break;

          case 2: 
            $sig.get(0x8ED, null, [$asm01.System.String], []).CallVirtual("Append", null, this, nfi.get_NegativeSign());
            $sig.get(0x8E8, null, [$asm01.System.Char], []).CallVirtual("Append", null, this, " ");
            break;

        }
      }
      this.AppendIntegerStringWithGroupSeparator(
        nfi.get_RawNumberGroupSizes(), 
        nfi.get_NumberGroupSeparator()
      );
      if (precision > 0) {
        $sig.get(0x8ED, null, [$asm01.System.String], []).CallVirtual("Append", null, this, nfi.get_NumberDecimalSeparator());
        this.AppendDecimalString(precision);
      }
      if (!this._positive) {
        switch (nfi.get_NumberNegativePattern()) {
          case 0: 
            $sig.get(0x8E8, null, [$asm01.System.Char], []).CallVirtual("Append", null, this, ")");
            break;

          case 3: 
            $sig.get(0x8ED, null, [$asm01.System.String], []).CallVirtual("Append", null, this, nfi.get_NegativeSign());
            break;

          case 4: 
            $sig.get(0x8E8, null, [$asm01.System.Char], []).CallVirtual("Append", null, this, " ");
            $sig.get(0x8ED, null, [$asm01.System.String], []).CallVirtual("Append", null, this, nfi.get_NegativeSign());
            break;

        }
      }
      return new ($T06())(this._cbuf, 0, this._ind);
    }
  );

  $.Method({Static:false, Public:true }, "FormatPercent", 
    $sig.make(0x9F0, $asm01.TypeRef("System.String"), [$asm01.TypeRef("System.Int32"), $asm01.TypeRef("System.Globalization.NumberFormatInfo")], []), 
    function NumberFormatter_FormatPercent (precision, nfi) {
      precision = ((precision >= 0) ? precision : nfi.get_PercentDecimalDigits());
      this.Multiply10(2);
      this.RoundDecimal(precision);
      this.ResetCharBuf(((((((this.get_IntegerDigits() * 2) | 0) + precision) | 0) + 16) | 0));
      if (this._positive) {
        if (nfi.get_PercentPositivePattern() === 2) {
          $sig.get(0x8ED, null, [$asm01.System.String], []).CallVirtual("Append", null, this, nfi.get_PercentSymbol());
        }
      } else {
        switch (nfi.get_PercentNegativePattern()) {
          case 0: 
            $sig.get(0x8ED, null, [$asm01.System.String], []).CallVirtual("Append", null, this, nfi.get_NegativeSign());
            break;

          case 1: 
            $sig.get(0x8ED, null, [$asm01.System.String], []).CallVirtual("Append", null, this, nfi.get_NegativeSign());
            break;

          case 2: 
            $sig.get(0x8ED, null, [$asm01.System.String], []).CallVirtual("Append", null, this, nfi.get_NegativeSign());
            $sig.get(0x8ED, null, [$asm01.System.String], []).CallVirtual("Append", null, this, nfi.get_PercentSymbol());
            break;

        }
      }
      this.AppendIntegerStringWithGroupSeparator(
        nfi.get_RawPercentGroupSizes(), 
        nfi.get_PercentGroupSeparator()
      );
      if (precision > 0) {
        $sig.get(0x8ED, null, [$asm01.System.String], []).CallVirtual("Append", null, this, nfi.get_PercentDecimalSeparator());
        this.AppendDecimalString(precision);
      }
      if (this._positive) {
        switch (nfi.get_PercentPositivePattern()) {
          case 0: 
            $sig.get(0x8E8, null, [$asm01.System.Char], []).CallVirtual("Append", null, this, " ");
            $sig.get(0x8ED, null, [$asm01.System.String], []).CallVirtual("Append", null, this, nfi.get_PercentSymbol());
            break;

          case 1: 
            $sig.get(0x8ED, null, [$asm01.System.String], []).CallVirtual("Append", null, this, nfi.get_PercentSymbol());
            break;

        }
      } else {
        switch (nfi.get_PercentNegativePattern()) {
          case 0: 
            $sig.get(0x8E8, null, [$asm01.System.Char], []).CallVirtual("Append", null, this, " ");
            $sig.get(0x8ED, null, [$asm01.System.String], []).CallVirtual("Append", null, this, nfi.get_PercentSymbol());
            break;

          case 1: 
            $sig.get(0x8ED, null, [$asm01.System.String], []).CallVirtual("Append", null, this, nfi.get_PercentSymbol());
            break;

        }
      }
      return new ($T06())(this._cbuf, 0, this._ind);
    }
  );

  $.Method({Static:false, Public:false}, "FormatRoundtrip", 
    $sig.make(0x9E9, $asm01.TypeRef("System.String"), [$asm01.TypeRef("System.Double"), $asm01.TypeRef("System.Globalization.NumberFormatInfo")], []), 
    function NumberFormatter_FormatRoundtrip (origval, nfi) {
      var nfc = this.GetClone();
      if (!((origval < -1.79769313486231E+308) || (origval > 1.79769313486231E+308))) {
        var shortRep = this.FormatGeneral(this._defPrecision, nfi);
        if (origval === $T0F().Parse(shortRep, nfi)) {
          var result = shortRep;
          return result;
        }
      }
      result = nfc.FormatGeneral(((this._defPrecision + 2) | 0), nfi);
      return result;
    }
  );

  $.Method({Static:false, Public:false}, "FormatRoundtrip", 
    $sig.make(0x9EB, $asm01.TypeRef("System.String"), [$asm01.TypeRef("System.Single"), $asm01.TypeRef("System.Globalization.NumberFormatInfo")], []), 
    function NumberFormatter_FormatRoundtrip (origval, nfi) {
      var nfc = this.GetClone();
      var shortRep = this.FormatGeneral(this._defPrecision, nfi);
      if (origval === $T10().Parse(shortRep, nfi)) {
        var result = shortRep;
      } else {
        result = nfc.FormatGeneral(((this._defPrecision + 2) | 0), nfi);
      }
      return result;
    }
  );

  $.Method({Static:false, Public:false}, "get_DecimalDigits", 
    $sig.make(0x899, $asm01.TypeRef("System.Int32"), [], []), 
    function NumberFormatter_get_DecimalDigits () {
      return ((this._digitsLen > this._decPointPos) ? ((this._digitsLen - this._decPointPos) | 0) : 0);
    }
  );

  $.Method({Static:false, Public:false}, "get_IntegerDigits", 
    $sig.make(0x895, $asm01.TypeRef("System.Int32"), [], []), 
    function NumberFormatter_get_IntegerDigits () {
      return ((this._decPointPos > 0) ? this._decPointPos : 1);
    }
  );

  $.Method({Static:false, Public:false}, "get_IsFloatingSource", 
    $sig.make(0x8A0, $asm01.TypeRef("System.Boolean"), [], []), 
    function NumberFormatter_get_IsFloatingSource () {
      return ((this._defPrecision === 15) || (this._defPrecision === 7));
    }
  );

  $.Method({Static:false, Public:false}, "get_IsZero", 
    $sig.make(0x8A6, $asm01.TypeRef("System.Boolean"), [], []), 
    function NumberFormatter_get_IsZero () {
      return (this._digitsLen === 0);
    }
  );

  $.Method({Static:false, Public:false}, "get_IsZeroInteger", 
    $sig.make(0x8A9, $asm01.TypeRef("System.Boolean"), [], []), 
    function NumberFormatter_get_IsZeroInteger () {
      return ((this._digitsLen === 0) || (this._decPointPos <= 0));
    }
  );

  $.Method({Static:false, Public:false}, "GetClone", 
    $sig.make(0xA21, $.Type, [], []), 
    function NumberFormatter_GetClone () {
      return $thisType.$Cast($T11().prototype.MemberwiseClone.call(this));
    }
  );

  $.Method({Static:true , Public:false}, "GetInstance", 
    $sig.make(0x902, $.Type, [], []), 
    function NumberFormatter_GetInstance () {
      var res = $thisType.threadNumberFormatter;
      $thisType.threadNumberFormatter = null;
      if (res === null) {
        var result = new $thisType($T04().Thread$CurrentThread$value);
      } else {
        result = res;
      }
      return result;
    }
  );

  $.Method({Static:false, Public:false}, "GetNumberFormatInstance", 
    $sig.make(0x8EF, $asm01.TypeRef("System.Globalization.NumberFormatInfo"), [$asm01.TypeRef("System.IFormatProvider")], []), 
    function NumberFormatter_GetNumberFormatInstance (fp) {
      if (!((this._nfi === null) || (fp !== null))) {
        var result = this._nfi;
      } else {
        result = $T08().GetInstance(fp);
      }
      return result;
    }
  );

  $.Method({Static:true , Public:false}, "GetTenPowerOf", 
    $sig.make(0x8AB, $asm01.TypeRef("System.Int64"), [$asm01.TypeRef("System.Int32")], []), 
    function NumberFormatter_GetTenPowerOf (i) {
      return $thisType.TenPowersList[i];
    }
  );

  $.Method({Static:false, Public:false}, "Init", 
    $sig.make(0x8C6, null, [$asm01.TypeRef("System.String")], []), 
    function NumberFormatter_Init (format) {
      this._val1 = (this._val2 = (this._val3 = (this._val4 = 0)));
      this._offset = 0;
      this._NaN = (this._infinity = false);
      this._isCustomFormat = false;
      this._specifierIsUpper = true;
      this._precision = -1;
      if (!((format !== null) && (format.length !== 0))) {
        this._specifier = "G";
      } else {
        var specifier = (format[0]);
        if (!((specifier.charCodeAt(0) < "a".charCodeAt(0)) || (specifier.charCodeAt(0) > "z".charCodeAt(0)))) {
          specifier = String.fromCharCode((String.fromCharCode(((String.fromCharCode((specifier.charCodeAt(0) - "a".charCodeAt(0)))).charCodeAt(0) + "A".charCodeAt(0)))).charCodeAt(0));
          this._specifierIsUpper = false;
        } else if (!((specifier.charCodeAt(0) >= "A".charCodeAt(0)) && (specifier.charCodeAt(0) <= "Z".charCodeAt(0)))) {
          this._isCustomFormat = true;
          this._specifier = "0";
          return;
        }
        this._specifier = specifier;
        if (format.length > 1) {
          this._precision = $thisType.ParsePrecision(format);
          if (this._precision === -2) {
            this._isCustomFormat = true;
            this._specifier = "0";
            this._precision = -1;
          }
        }
      }
    }
  );

  $.Method({Static:false, Public:false}, "Init", 
    $sig.make(0x8CD, null, [
        $asm01.TypeRef("System.String"), $asm01.TypeRef("System.Int32"), 
        $asm01.TypeRef("System.Int32")
      ], []), 
    function NumberFormatter_Init (format, value, defPrecision) {
      this.Init(format);
      this._defPrecision = defPrecision;
      this._positive = (value >= 0);
      if (!((value !== 0) && (this._specifier.charCodeAt(0) !== "X".charCodeAt(0)))) {
        this.InitHex($T01().FromNumber(value).ToUInt64());
      } else {
        if (value < 0) {
          value = -value;
        }
        $sig.get(0x8AD, null, [$asm01.System.UInt32], []).CallVirtual("InitDecHexDigits", null, this, value);
        this._decPointPos = (this._digitsLen = this.DecHexLen());
      }
    }
  );

  $.Method({Static:false, Public:false}, "Init", 
    $sig.make(0x8D1, null, [
        $asm01.TypeRef("System.String"), $asm01.TypeRef("System.UInt32"), 
        $asm01.TypeRef("System.Int32")
      ], []), 
    function NumberFormatter_Init (format, value, defPrecision) {
      this.Init(format);
      this._defPrecision = defPrecision;
      this._positive = true;
      if (!((value !== 0) && (this._specifier.charCodeAt(0) !== "X".charCodeAt(0)))) {
        this.InitHex($T03().FromNumber(value));
      } else {
        $sig.get(0x8AD, null, [$asm01.System.UInt32], []).CallVirtual("InitDecHexDigits", null, this, value);
        this._decPointPos = (this._digitsLen = this.DecHexLen());
      }
    }
  );

  $.Method({Static:false, Public:false}, "Init", 
    $sig.make(0x8D5, null, [$asm01.TypeRef("System.String"), $asm01.TypeRef("System.Int64")], []), 
    function NumberFormatter_Init (format, value) {
      this.Init(format);
      this._defPrecision = 19;
      this._positive = $T01().op_GreaterThanOrEqual(value, $T01().Create(0, 0, 0));
      if (!($T01().op_Inequality(value, $T01().Create(0, 0, 0)) && ((this._specifier.charCodeAt(0) !== "X".charCodeAt(0))).valueOf())) {
        this.InitHex(value.ToUInt64());
      } else {
        if (!$T01().op_GreaterThanOrEqual(value, $T01().Create(0, 0, 0))) {
          value = $T01().op_UnaryNegation(value);
        }
        $sig.get(0x8AF, null, [$asm01.System.UInt64], []).CallVirtual("InitDecHexDigits", null, this, value.ToUInt64());
        this._decPointPos = (this._digitsLen = this.DecHexLen());
      }
    }
  );

  $.Method({Static:false, Public:false}, "Init", 
    $sig.make(0x8DA, null, [$asm01.TypeRef("System.String"), $asm01.TypeRef("System.UInt64")], []), 
    function NumberFormatter_Init (format, value) {
      this.Init(format);
      this._defPrecision = 20;
      this._positive = true;
      if (!($T03().op_Inequality(value, $T03().Create(0, 0, 0)) && ((this._specifier.charCodeAt(0) !== "X".charCodeAt(0))).valueOf())) {
        this.InitHex(value);
      } else {
        $sig.get(0x8AF, null, [$asm01.System.UInt64], []).CallVirtual("InitDecHexDigits", null, this, value);
        this._decPointPos = (this._digitsLen = this.DecHexLen());
      }
    }
  );

  $.Method({Static:false, Public:false}, "Init", 
    $sig.make(0x8E1, null, [
        $asm01.TypeRef("System.String"), $asm01.TypeRef("System.Double"), 
        $asm01.TypeRef("System.Int32")
      ], []), 
    function NumberFormatter_Init (format, value, defPrecision) {
      this.Init(format);
      this._defPrecision = defPrecision;
      var bits = $T12().DoubleToInt64Bits(value);
      this._positive = $T01().op_GreaterThanOrEqual(bits, $T01().Create(0, 0, 0));
      bits = $T01().op_BitwiseAnd(bits, $T01().Create(16777215, 16777215, 32767));
      if (!$T01().op_Inequality(bits, $T01().Create(0, 0, 0))) {
        this._decPointPos = 1;
        this._digitsLen = 0;
        this._positive = true;
      } else {
        var e = ($T01().op_RightShift(bits, 52)).ToNumber();
        var i = $T01().op_BitwiseAnd(bits, $T01().Create(16777215, 16777215, 15));
        if (e === 2047) {
          this._NaN = $T01().op_Inequality(i, $T01().Create(0, 0, 0));
          this._infinity = $T01().op_Equality(i, $T01().Create(0, 0, 0));
        } else {
          var expAdjust = 0;
          if (e === 0) {
            e = 1;
            var scale = $thisType.ScaleOrder(i);
            if (scale < 15) {
              expAdjust = ((scale - 15) | 0);
              i = $T01().op_Multiplication(i, $thisType.GetTenPowerOf(-expAdjust));
            }
          } else {
            i = $T01().op_Multiplication(
              $T01().op_Addition(
                $T01().op_Addition(i, $T01().Create(16777215, 16777215, 15)), 
                $T01().Create(1, 0, 0)
              ), 
              $T01().Create(10, 0, 0)
            );
            expAdjust = -1;
          }
          var lo = $T03().FromNumber(i.ToNumber());
          var hi = $T03().op_RightShift(i.ToUInt64(), 32);
          var lo2 = $thisType.MantissaBitsTable[e];
          var hi2 = $T03().op_RightShift(lo2, 32);
          lo2 = $T03().FromNumber(lo2.ToNumber());
          var mm = $T03().op_Addition(
            $T03().op_Addition(
              $T03().op_Multiplication(hi, lo2), 
              $T03().op_Multiplication(lo, hi2)
            ), 
            $T03().op_RightShift($T03().op_Multiplication(lo, lo2), 32)
          );
          var res = ($T03().op_Addition(
              $T03().op_Multiplication(hi, hi2), 
              $T03().op_RightShift(mm, 32)
            )).ToInt64();

          while ($T01().op_LessThan(res, $T01().Create(12648448, 8843887, 35))) {
            mm = $T03().op_Multiplication(
              $T03().op_BitwiseAnd(mm, $T05().MaxValue), 
              $T03().Create(10, 0, 0)
            );
            res = $T01().op_Addition(
              $T01().op_Multiplication(res, $T01().Create(10, 0, 0)), 
              ($T03().op_RightShift(mm, 32)).ToInt64()
            );
            --expAdjust;
          }
          if (!$T03().op_Equality(
              $T03().op_BitwiseAnd(mm, $T03().FromNumber(-2147483648)), 
              $T03().Create(0, 0, 0)
            )) {
            res = $T01().op_Addition(res, $T01().Create(1, 0, 0));
          }
          var order = 17;
          this._decPointPos = (((($thisType.TensExponentTable[e] + expAdjust) | 0) + order) | 0);
          var initialPrecision = this.InitialFloatingPrecision();
          if (order > initialPrecision) {
            var val = $thisType.GetTenPowerOf(((order - initialPrecision) | 0));
            res = $T01().op_Division($T01().op_Addition(res, $T01().op_RightShift(val, 1)), val);
            order = initialPrecision;
          }
          if (!$T01().op_LessThan(res, $thisType.GetTenPowerOf(order))) {
            ++order;
            ++this._decPointPos;
          }
          $sig.get(0x8AF, null, [$asm01.System.UInt64], []).CallVirtual("InitDecHexDigits", null, this, res.ToUInt64());
          this._offset = this.CountTrailingZeros();
          this._digitsLen = ((order - this._offset) | 0);
        }
      }
    }
  );

  $.Method({Static:false, Public:false}, "InitDecHexDigits", 
    $sig.make(0x8AD, null, [$asm01.TypeRef("System.UInt32")], []), 
    function NumberFormatter_InitDecHexDigits (value) {
      if (value >= 100000000) {
        var div = ((value / 100000000) | 0);
        value -= ((100000000 * div) | 0);
        this._val2 = $thisType.FastToDecHex(div);
      }
      this._val1 = $thisType.ToDecHex(value);
    }
  );

  $.Method({Static:false, Public:false}, "InitDecHexDigits", 
    $sig.make(0x8AF, null, [$asm01.TypeRef("System.UInt64")], []), 
    function NumberFormatter_InitDecHexDigits (value) {
      if (!$T03().op_LessThan(value, $T03().Create(16113920, 5, 0))) {
        var div = ($T03().op_Division(value, $T03().Create(16113920, 5, 0))).ToInt64();
        value = $T03().op_Subtraction(value, ($T01().op_Multiplication($T01().Create(16113920, 5, 0), div)).ToUInt64());
        if (!$T01().op_LessThan(div, $T01().Create(16113920, 5, 0))) {
          var div2 = ($T01().op_Division(div, $T01().Create(16113920, 5, 0))).ToNumber();
          div = $T01().op_Subtraction(div, $T01().op_Multiplication(
              $T01().FromNumber(div2), 
              $T01().Create(16113920, 5, 0)
            ));
          this._val3 = $thisType.ToDecHex(div2);
        }
        if (!$T01().op_Equality(div, $T01().Create(0, 0, 0))) {
          this._val2 = $thisType.ToDecHex(div.ToNumber());
        }
      }
      if (!$T03().op_Equality(value, $T03().Create(0, 0, 0))) {
        this._val1 = $thisType.ToDecHex(value.ToNumber());
      }
    }
  );

  $.Method({Static:false, Public:false}, "InitDecHexDigits", 
    $sig.make(0x8B1, null, [$asm01.TypeRef("System.UInt32"), $asm01.TypeRef("System.UInt64")], []), 
    function NumberFormatter_InitDecHexDigits (hi, lo) {
      if (hi === 0) {
        $sig.get(0x8AF, null, [$asm01.System.UInt64], []).CallVirtual("InitDecHexDigits", null, this, lo);
      } else {
        var divhi = ((hi / 100000000) | 0);
        var remhi = $T03().FromNumber((hi - (divhi * 100000000)));
        var divlo = $T03().op_Division(lo, $T03().Create(16113920, 5, 0));
        var remlo = $T03().op_Addition(
          $T03().op_Subtraction(lo, $T03().op_Multiplication(divlo, $T03().Create(16113920, 5, 0))), 
          $T03().op_Multiplication(remhi, $T03().Create(9551616, 0, 0))
        );
        hi = divhi;
        lo = $T03().op_Addition(divlo, $T03().op_Multiplication(remhi, $T03().Create(1950817, 10995, 0)));
        divlo = $T03().op_Division(remlo, $T03().Create(16113920, 5, 0));
        remlo = $T03().op_Subtraction(remlo, $T03().op_Multiplication(divlo, $T03().Create(16113920, 5, 0)));
        lo = $T03().op_Addition(lo, divlo);
        this._val1 = $thisType.ToDecHex(remlo.ToNumber());
        divlo = $T03().op_Division(lo, $T03().Create(16113920, 5, 0));
        remlo = $T03().op_Subtraction(lo, $T03().op_Multiplication(divlo, $T03().Create(16113920, 5, 0)));
        lo = divlo;
        if (hi !== 0) {
          lo = $T03().op_Addition(lo, $T03().op_Multiplication(
              $T03().FromNumber(hi), 
              $T03().Create(1950817, 10995, 0)
            ));
          remlo = $T03().op_Addition(remlo, $T03().op_Multiplication(
              $T03().FromNumber(hi), 
              $T03().Create(9551616, 0, 0)
            ));
          divlo = $T03().op_Division(remlo, $T03().Create(16113920, 5, 0));
          lo = $T03().op_Addition(lo, divlo);
          remlo = $T03().op_Subtraction(remlo, $T03().op_Multiplication(divlo, $T03().Create(16113920, 5, 0)));
        }
        this._val2 = $thisType.ToDecHex(remlo.ToNumber());
        if (!$T03().op_LessThan(lo, $T03().Create(16113920, 5, 0))) {
          divlo = $T03().op_Division(lo, $T03().Create(16113920, 5, 0));
          lo = $T03().op_Subtraction(lo, $T03().op_Multiplication(divlo, $T03().Create(16113920, 5, 0)));
          this._val4 = $thisType.ToDecHex(divlo.ToNumber());
        }
        this._val3 = $thisType.ToDecHex(lo.ToNumber());
      }
    }
  );

  $.Method({Static:false, Public:false}, "InitHex", 
    $sig.make(0x8CA, null, [$asm01.TypeRef("System.UInt64")], []), 
    function NumberFormatter_InitHex (value) {
      var defPrecision = this._defPrecision;
      switch (defPrecision) {
        case 3: 
          value = $T03().FromNumber(value.ToNumber());
          break;

        case 4: 
          break;

        case 5: 
          value = $T03().FromNumber(value.ToNumber());
          break;

        default: 
          if (defPrecision === 10) {
            value = $T03().FromNumber(value.ToNumber());
          }
          break;

      }
      this._val1 = value.ToNumber();
      this._val2 = ($T03().op_RightShift(value, 32)).ToNumber();
      this._decPointPos = (this._digitsLen = this.DecHexLen());
      if (!$T03().op_Inequality(value, $T03().Create(0, 0, 0))) {
        this._decPointPos = 1;
      }
    }
  );

  $.Method({Static:false, Public:false}, "InitialFloatingPrecision", 
    $sig.make(0x8BC, $asm01.TypeRef("System.Int32"), [], []), 
    function NumberFormatter_InitialFloatingPrecision () {
      if (this._specifier.charCodeAt(0) === "R".charCodeAt(0)) {
        var result = ((this._defPrecision + 2) | 0);
      } else if (this._precision < this._defPrecision) {
        result = this._defPrecision;
      } else if (this._specifier.charCodeAt(0) === "G".charCodeAt(0)) {
        result = $T13().Min(((this._defPrecision + 2) | 0), this._precision);
      } else if (this._specifier.charCodeAt(0) === "E".charCodeAt(0)) {
        result = $T13().Min(((this._defPrecision + 2) | 0), ((this._precision + 1) | 0));
      } else {
        result = this._defPrecision;
      }
      return result;
    }
  );

  $.Method({Static:false, Public:false}, "IntegerToString", 
    $sig.make(0x9DA, $asm01.TypeRef("System.String"), [$asm01.TypeRef("System.String"), $asm01.TypeRef("System.IFormatProvider")], []), 
    function NumberFormatter_IntegerToString (format, fp) {
      var nfi = this.GetNumberFormatInstance(fp);
      var specifier = this._specifier;
      switch (specifier) {
        case "C": 
          var result = this.FormatCurrency(this._precision, nfi);
          break;

        case "D": 
          result = this.FormatDecimal(this._precision, nfi);
          break;

        case "E": 
          result = this.FormatExponential(this._precision, nfi);
          break;

        case "F": 
          result = this.FormatFixedPoint(this._precision, nfi);
          break;

        case "G": 
          if (this._precision <= 0) {
            result = this.FormatDecimal(-1, nfi);
          } else {
            result = this.FormatGeneral(this._precision, nfi);
          }
          break;

        default: 
          switch (specifier) {
            case "N": 
              result = this.FormatNumber(this._precision, nfi);
              return result;

            case "O": 
              break;

            case "P": 
              result = this.FormatPercent(this._precision, nfi);
              return result;

            default: 
              if (specifier.charCodeAt(0) === "X".charCodeAt(0)) {
                result = this.FormatHexadecimal(this._precision);
                return result;
              }
              break;

          }
          if (!this._isCustomFormat) {
            throw new ($T14())(("The specified format '" + format + "' is invalid"));
          }
          result = this.FormatCustom(format, nfi);
          break;

      }
      return result;
    }
  );

  $.Method({Static:true , Public:false}, "IsZeroOnly", 
    $sig.make(0x9FA, $asm01.TypeRef("System.Boolean"), [$asm01.TypeRef("System.Text.StringBuilder")], []), 
    function NumberFormatter_IsZeroOnly (sb) {

      for (var i = 0; i < sb.get_Length(); ++i) {
        if (!(!(("0123456789".indexOf(sb.get_Chars(i)) !== -1)) || (sb.get_Chars(i).charCodeAt(0) === "0".charCodeAt(0)))) {
          var result = false;
          return result;
        }
      }
      result = true;
      return result;
    }
  );

  $.Method({Static:false, Public:false}, "Multiply10", 
    $sig.make(0xA1A, null, [$asm01.TypeRef("System.Int32")], []), 
    function NumberFormatter_Multiply10 (count) {
      if ((count > 0) && (this._digitsLen !== 0)) {
        this._decPointPos += count;
      }
    }
  );

  $.Method({Static:true , Public:true }, "NumberToString", 
    $sig.make(0x909, $asm01.TypeRef("System.String"), [
        $asm01.TypeRef("System.String"), $asm01.TypeRef("System.SByte"), 
        $asm01.TypeRef("System.IFormatProvider")
      ], []), 
    function NumberFormatter_NumberToString (format, value, fp) {
      var inst = $thisType.GetInstance();
      $sig.get(0x8CD, null, [
          $asm01.System.String, $asm01.System.Int32, 
          $asm01.System.Int32
        ], []).CallVirtual("Init", null, inst, format, value, 3);
      var res = inst.IntegerToString(format, fp);
      inst.Release();
      return res;
    }
  );

  $.Method({Static:true , Public:true }, "NumberToString", 
    $sig.make(0x90A, $asm01.TypeRef("System.String"), [
        $asm01.TypeRef("System.String"), $asm01.TypeRef("System.Byte"), 
        $asm01.TypeRef("System.IFormatProvider")
      ], []), 
    function NumberFormatter_NumberToString (format, value, fp) {
      var inst = $thisType.GetInstance();
      $sig.get(0x8CD, null, [
          $asm01.System.String, $asm01.System.Int32, 
          $asm01.System.Int32
        ], []).CallVirtual("Init", null, inst, format, value, 3);
      var res = inst.IntegerToString(format, fp);
      inst.Release();
      return res;
    }
  );

  $.Method({Static:true , Public:true }, "NumberToString", 
    $sig.make(0x90C, $asm01.TypeRef("System.String"), [
        $asm01.TypeRef("System.String"), $asm01.TypeRef("System.UInt16"), 
        $asm01.TypeRef("System.IFormatProvider")
      ], []), 
    function NumberFormatter_NumberToString (format, value, fp) {
      var inst = $thisType.GetInstance();
      $sig.get(0x8CD, null, [
          $asm01.System.String, $asm01.System.Int32, 
          $asm01.System.Int32
        ], []).CallVirtual("Init", null, inst, format, value, 5);
      var res = inst.IntegerToString(format, fp);
      inst.Release();
      return res;
    }
  );

  $.Method({Static:true , Public:true }, "NumberToString", 
    $sig.make(0x90E, $asm01.TypeRef("System.String"), [
        $asm01.TypeRef("System.String"), $asm01.TypeRef("System.Int16"), 
        $asm01.TypeRef("System.IFormatProvider")
      ], []), 
    function NumberFormatter_NumberToString (format, value, fp) {
      var inst = $thisType.GetInstance();
      $sig.get(0x8CD, null, [
          $asm01.System.String, $asm01.System.Int32, 
          $asm01.System.Int32
        ], []).CallVirtual("Init", null, inst, format, value, 5);
      var res = inst.IntegerToString(format, fp);
      inst.Release();
      return res;
    }
  );

  $.Method({Static:true , Public:true }, "NumberToString", 
    $sig.make(0x910, $asm01.TypeRef("System.String"), [
        $asm01.TypeRef("System.String"), $asm01.TypeRef("System.UInt32"), 
        $asm01.TypeRef("System.IFormatProvider")
      ], []), 
    function NumberFormatter_NumberToString (format, value, fp) {
      var inst = $thisType.GetInstance();
      $sig.get(0x8D1, null, [
          $asm01.System.String, $asm01.System.UInt32, 
          $asm01.System.Int32
        ], []).CallVirtual("Init", null, inst, format, value, 10);
      var res = inst.IntegerToString(format, fp);
      inst.Release();
      return res;
    }
  );

  $.Method({Static:true , Public:true }, "NumberToString", 
    $sig.make(0x913, $asm01.TypeRef("System.String"), [
        $asm01.TypeRef("System.String"), $asm01.TypeRef("System.Int32"), 
        $asm01.TypeRef("System.IFormatProvider")
      ], []), 
    function NumberFormatter_NumberToString (format, value, fp) {
      var inst = $thisType.GetInstance();
      $sig.get(0x8CD, null, [
          $asm01.System.String, $asm01.System.Int32, 
          $asm01.System.Int32
        ], []).CallVirtual("Init", null, inst, format, value, 10);
      var res = inst.IntegerToString(format, fp);
      inst.Release();
      return res;
    }
  );

  $.Method({Static:true , Public:true }, "NumberToString", 
    $sig.make(0x918, $asm01.TypeRef("System.String"), [
        $asm01.TypeRef("System.String"), $asm01.TypeRef("System.UInt64"), 
        $asm01.TypeRef("System.IFormatProvider")
      ], []), 
    function NumberFormatter_NumberToString (format, value, fp) {
      var inst = $thisType.GetInstance();
      $sig.get(0x8DA, null, [$asm01.System.String, $asm01.System.UInt64], []).CallVirtual("Init", null, inst, format, value);
      var res = inst.IntegerToString(format, fp);
      inst.Release();
      return res;
    }
  );

  $.Method({Static:true , Public:true }, "NumberToString", 
    $sig.make(0x91A, $asm01.TypeRef("System.String"), [
        $asm01.TypeRef("System.String"), $asm01.TypeRef("System.Int64"), 
        $asm01.TypeRef("System.IFormatProvider")
      ], []), 
    function NumberFormatter_NumberToString (format, value, fp) {
      var inst = $thisType.GetInstance();
      $sig.get(0x8D5, null, [$asm01.System.String, $asm01.System.Int64], []).CallVirtual("Init", null, inst, format, value);
      var res = inst.IntegerToString(format, fp);
      inst.Release();
      return res;
    }
  );

  $.Method({Static:true , Public:true }, "NumberToString", 
    $sig.make(0x920, $asm01.TypeRef("System.String"), [
        $asm01.TypeRef("System.String"), $asm01.TypeRef("System.Single"), 
        $asm01.TypeRef("System.IFormatProvider")
      ], []), 
    function NumberFormatter_NumberToString (format, value, fp) {
      var inst = $thisType.GetInstance();
      $sig.get(0x8E1, null, [
          $asm01.System.String, $asm01.System.Double, 
          $asm01.System.Int32
        ], []).CallVirtual("Init", null, inst, format, value, 7);
      var nfi = inst.GetNumberFormatInstance(fp);
      if (inst._NaN) {
        var res = nfi.get_NaNSymbol();
      } else if (inst._infinity) {
        if (inst._positive) {
          res = nfi.get_PositiveInfinitySymbol();
        } else {
          res = nfi.get_NegativeInfinitySymbol();
        }
      } else if (inst._specifier.charCodeAt(0) === "R".charCodeAt(0)) {
        res = $sig.get(0x9EB, $asm01.System.String, [$asm01.System.Single, $asm01.System.Globalization.NumberFormatInfo], []).CallVirtual("FormatRoundtrip", null, inst, value, nfi);
      } else {
        res = $sig.get(0x9DD, $asm01.System.String, [$asm01.System.String, $asm01.System.Globalization.NumberFormatInfo], []).CallVirtual("NumberToString", null, inst, format, nfi);
      }
      inst.Release();
      return res;
    }
  );

  $.Method({Static:true , Public:true }, "NumberToString", 
    $sig.make(0x924, $asm01.TypeRef("System.String"), [
        $asm01.TypeRef("System.String"), $asm01.TypeRef("System.Double"), 
        $asm01.TypeRef("System.IFormatProvider")
      ], []), 
    function NumberFormatter_NumberToString (format, value, fp) {
      var inst = $thisType.GetInstance();
      $sig.get(0x8E1, null, [
          $asm01.System.String, $asm01.System.Double, 
          $asm01.System.Int32
        ], []).CallVirtual("Init", null, inst, format, value, 15);
      var nfi = inst.GetNumberFormatInstance(fp);
      if (inst._NaN) {
        var res = nfi.get_NaNSymbol();
      } else if (inst._infinity) {
        if (inst._positive) {
          res = nfi.get_PositiveInfinitySymbol();
        } else {
          res = nfi.get_NegativeInfinitySymbol();
        }
      } else if (inst._specifier.charCodeAt(0) === "R".charCodeAt(0)) {
        res = $sig.get(0x9E9, $asm01.System.String, [$asm01.System.Double, $asm01.System.Globalization.NumberFormatInfo], []).CallVirtual("FormatRoundtrip", null, inst, value, nfi);
      } else {
        res = $sig.get(0x9DD, $asm01.System.String, [$asm01.System.String, $asm01.System.Globalization.NumberFormatInfo], []).CallVirtual("NumberToString", null, inst, format, nfi);
      }
      inst.Release();
      return res;
    }
  );

  $.Method({Static:true , Public:true }, "NumberToString", 
    $sig.make(0x925, $asm01.TypeRef("System.String"), [$asm01.TypeRef("System.UInt32"), $asm01.TypeRef("System.IFormatProvider")], []), 
    function NumberFormatter_NumberToString (value, fp) {
      if (value >= 100000000) {
        var result = $sig.get(0x910, $asm01.System.String, [
            $asm01.System.String, $asm01.System.UInt32, 
            $asm01.System.IFormatProvider
          ], []).CallStatic($thisType, "NumberToString", null, null, value, fp);
      } else {
        var inst = $thisType.GetInstance();
        var res = inst.FastIntegerToString(value, fp);
        inst.Release();
        result = res;
      }
      return result;
    }
  );

  $.Method({Static:true , Public:true }, "NumberToString", 
    $sig.make(0x946, $asm01.TypeRef("System.String"), [$asm01.TypeRef("System.Int32"), $asm01.TypeRef("System.IFormatProvider")], []), 
    function NumberFormatter_NumberToString (value, fp) {
      if (!((value < 100000000) && (value > -100000000))) {
        var result = $sig.get(0x913, $asm01.System.String, [
            $asm01.System.String, $asm01.System.Int32, 
            $asm01.System.IFormatProvider
          ], []).CallStatic($thisType, "NumberToString", null, null, value, fp);
      } else {
        var inst = $thisType.GetInstance();
        var res = inst.FastIntegerToString(value, fp);
        inst.Release();
        result = res;
      }
      return result;
    }
  );

  $.Method({Static:true , Public:true }, "NumberToString", 
    $sig.make(0x949, $asm01.TypeRef("System.String"), [$asm01.TypeRef("System.UInt64"), $asm01.TypeRef("System.IFormatProvider")], []), 
    function NumberFormatter_NumberToString (value, fp) {
      if (!$T03().op_LessThan(value, $T03().Create(16113920, 5, 0))) {
        var result = $sig.get(0x918, $asm01.System.String, [
            $asm01.System.String, $asm01.System.UInt64, 
            $asm01.System.IFormatProvider
          ], []).CallStatic($thisType, "NumberToString", null, null, value, fp);
      } else {
        var inst = $thisType.GetInstance();
        var res = inst.FastIntegerToString(value.ToNumber(), fp);
        inst.Release();
        result = res;
      }
      return result;
    }
  );

  $.Method({Static:true , Public:true }, "NumberToString", 
    $sig.make(0x94C, $asm01.TypeRef("System.String"), [$asm01.TypeRef("System.Int64"), $asm01.TypeRef("System.IFormatProvider")], []), 
    function NumberFormatter_NumberToString (value, fp) {
      if (!($T01().op_LessThan(value, $T01().Create(16113920, 5, 0)) && $T01().op_GreaterThan(value, $T01().Create(663296, 16777210, 65535)))) {
        var result = $sig.get(0x91A, $asm01.System.String, [
            $asm01.System.String, $asm01.System.Int64, 
            $asm01.System.IFormatProvider
          ], []).CallStatic($thisType, "NumberToString", null, null, value, fp);
      } else {
        var inst = $thisType.GetInstance();
        var res = inst.FastIntegerToString(value.ToNumber(), fp);
        inst.Release();
        result = res;
      }
      return result;
    }
  );

  $.Method({Static:true , Public:true }, "NumberToString", 
    $sig.make(0x9B9, $asm01.TypeRef("System.String"), [$asm01.TypeRef("System.Single"), $asm01.TypeRef("System.IFormatProvider")], []), 
    function NumberFormatter_NumberToString (value, fp) {
      var inst = $thisType.GetInstance();
      $sig.get(0x8E1, null, [
          $asm01.System.String, $asm01.System.Double, 
          $asm01.System.Int32
        ], []).CallVirtual("Init", null, inst, null, value, 7);
      var nfi = inst.GetNumberFormatInstance(fp);
      if (inst._NaN) {
        var res = nfi.get_NaNSymbol();
      } else if (inst._infinity) {
        if (inst._positive) {
          res = nfi.get_PositiveInfinitySymbol();
        } else {
          res = nfi.get_NegativeInfinitySymbol();
        }
      } else {
        res = inst.FormatGeneral(-1, nfi);
      }
      inst.Release();
      return res;
    }
  );

  $.Method({Static:true , Public:true }, "NumberToString", 
    $sig.make(0x9D2, $asm01.TypeRef("System.String"), [$asm01.TypeRef("System.Double"), $asm01.TypeRef("System.IFormatProvider")], []), 
    function NumberFormatter_NumberToString (value, fp) {
      var inst = $thisType.GetInstance();
      var nfi = inst.GetNumberFormatInstance(fp);
      $sig.get(0x8E1, null, [
          $asm01.System.String, $asm01.System.Double, 
          $asm01.System.Int32
        ], []).CallVirtual("Init", null, inst, null, value, 15);
      if (inst._NaN) {
        var res = nfi.get_NaNSymbol();
      } else if (inst._infinity) {
        if (inst._positive) {
          res = nfi.get_PositiveInfinitySymbol();
        } else {
          res = nfi.get_NegativeInfinitySymbol();
        }
      } else {
        res = inst.FormatGeneral(-1, nfi);
      }
      inst.Release();
      return res;
    }
  );

  $.Method({Static:false, Public:false}, "NumberToString", 
    $sig.make(0x9DD, $asm01.TypeRef("System.String"), [$asm01.TypeRef("System.String"), $asm01.TypeRef("System.Globalization.NumberFormatInfo")], []), 
    function NumberFormatter_NumberToString (format, nfi) {
      var specifier = this._specifier;
      switch (specifier) {
        case "C": 
          var result = this.FormatCurrency(this._precision, nfi);
          return result;

        case "D": 
          break;

        case "E": 
          result = this.FormatExponential(this._precision, nfi);
          return result;

        case "F": 
          result = this.FormatFixedPoint(this._precision, nfi);
          return result;

        case "G": 
          result = this.FormatGeneral(this._precision, nfi);
          return result;

        default: 
          switch (specifier) {
            case "N": 
              result = this.FormatNumber(this._precision, nfi);
              return result;

            case "O": 
              break;

            case "P": 
              result = this.FormatPercent(this._precision, nfi);
              return result;

            default: 
              if (specifier.charCodeAt(0) !== "X".charCodeAt(0)) {
              }
              break;

          }
          break;

      }
      if (!this._isCustomFormat) {
        throw new ($T14())(("The specified format '" + format + "' is invalid"));
      }
      result = this.FormatCustom(format, nfi);
      return result;
    }
  );

  $.Method({Static:true , Public:false}, "ParsePrecision", 
    $sig.make(0x8C0, $asm01.TypeRef("System.Int32"), [$asm01.TypeRef("System.String")], []), 
    function NumberFormatter_ParsePrecision (format) {
      var precision = 0;

      for (var i = 1; i < format.length; ++i) {
        var val = (String.fromCharCode((format[i].charCodeAt(0) - "0".charCodeAt(0)))).charCodeAt(0);
        precision = ((((precision * 10) | 0) + val) | 0);
        if (!(!((val < 0) || 
              (val > 9)) && (precision <= 99))) {
          var result = -2;
          return result;
        }
      }
      result = precision;
      return result;
    }
  );

  $.Method({Static:false, Public:false}, "Release", 
    $sig.make(0x906, null, [], []), 
    function NumberFormatter_Release () {
      $thisType.threadNumberFormatter = this;
    }
  );

  $.Method({Static:false, Public:false}, "RemoveTrailingZeros", 
    $sig.make(0x8F7, null, [], []), 
    function NumberFormatter_RemoveTrailingZeros () {
      this._offset = this.CountTrailingZeros();
      this._digitsLen -= this._offset;
      if (this._digitsLen === 0) {
        this._offset = 0;
        this._decPointPos = 1;
        this._positive = true;
      }
    }
  );

  $.Method({Static:false, Public:false}, "ResetCharBuf", 
    $sig.make(0x8E4, null, [$asm01.TypeRef("System.Int32")], []), 
    function NumberFormatter_ResetCharBuf (size) {
      this._ind = 0;
      if (this._cbuf.length < size) {
        this._cbuf = JSIL.Array.New($T00(), size);
      }
    }
  );

  $.Method({Static:false, Public:false}, "Resize", 
    $sig.make(0x8E6, null, [$asm01.TypeRef("System.Int32")], []), 
    function NumberFormatter_Resize (len) {
      var newBuf = JSIL.Array.New($T00(), len);
                      ((function (source, dest, length) {
                          for (var i = 0; i<length; i++)
                              dest[i] = source[i];
                      })(this._cbuf, newBuf, this._ind));
      this._cbuf = newBuf;
    }
  );

  $.Method({Static:false, Public:false}, "RoundBits", 
    $sig.make(0x8F5, $asm01.TypeRef("System.Boolean"), [$asm01.TypeRef("System.Int32")], []), 
    function NumberFormatter_RoundBits (shift) {
      if (shift <= 0) {
        var result = false;
      } else if (shift > this._digitsLen) {
        this._digitsLen = 0;
        this._decPointPos = 1;
        this._val1 = (this._val2 = (this._val3 = (this._val4 = 0)));
        this._positive = true;
        result = false;
      } else {
        shift += this._offset;
        this._digitsLen += this._offset;

        for (; shift > 8; shift -= 8) {
          this._val1 = this._val2;
          this._val2 = this._val3;
          this._val3 = this._val4;
          this._val4 = 0;
          this._digitsLen -= 8;
        }
        shift = ((((shift - 1) | 0) << 2) | 0);
        var v = (this._val1 >>> shift);
        var rem16 = (v & 15);
        this._val1 = ((v ^ rem16) << shift);
        var res = false;
        if (rem16 >= 5) {
          this._val1 = (this._val1 | (-1717986919 >>> ((28 - shift) | 0)));
          this.AddOneToDecHex();
          var newlen = this.DecHexLen();
          res = (newlen !== this._digitsLen);
          this._decPointPos = ((((this._decPointPos + newlen) | 0) - this._digitsLen) | 0);
          this._digitsLen = newlen;
        }
        this.RemoveTrailingZeros();
        result = res;
      }
      return result;
    }
  );

  $.Method({Static:false, Public:false}, "RoundDecimal", 
    $sig.make(0x8F3, $asm01.TypeRef("System.Boolean"), [$asm01.TypeRef("System.Int32")], []), 
    function NumberFormatter_RoundDecimal (decimals) {
      return this.RoundBits(((((this._digitsLen - this._decPointPos) | 0) - decimals) | 0));
    }
  );

  $.Method({Static:false, Public:false}, "RoundPos", 
    $sig.make(0x8F1, null, [$asm01.TypeRef("System.Int32")], []), 
    function NumberFormatter_RoundPos (pos) {
      this.RoundBits(((this._digitsLen - pos) | 0));
    }
  );

  $.Method({Static:true , Public:false}, "ScaleOrder", 
    $sig.make(0x8BA, $asm01.TypeRef("System.Int32"), [$asm01.TypeRef("System.Int64")], []), 
    function NumberFormatter_ScaleOrder (hi) {

      for (var i = 18; i >= 0; --i) {
        if (!$T01().op_LessThan(hi, $thisType.GetTenPowerOf(i))) {
          var result = ((i + 1) | 0);
          return result;
        }
      }
      result = 1;
      return result;
    }
  );

  $.Method({Static:false, Public:true }, "set_CurrentCulture", 
    $sig.make(0x891, null, [$asm01.TypeRef("System.Globalization.CultureInfo")], []), 
    function NumberFormatter_set_CurrentCulture (value) {
      if (!((value === null) || !value.get_IsReadOnly())) {
        this._nfi = value.get_NumberFormat();
      } else {
        this._nfi = null;
      }
    }
  );

  $.Method({Static:true , Public:false}, "SetThreadCurrentCulture", 
    $sig.make(0x908, null, [$asm01.TypeRef("System.Globalization.CultureInfo")], []), 
    function NumberFormatter_SetThreadCurrentCulture (culture) {
      if ($thisType.threadNumberFormatter !== null) {
        $thisType.threadNumberFormatter.set_CurrentCulture(culture);
      }
    }
  );

  $.Method({Static:true , Public:false}, "ToDecHex", 
    $sig.make(0x8B5, $asm01.TypeRef("System.UInt32"), [$asm01.TypeRef("System.Int32")], []), 
    function NumberFormatter_ToDecHex (val) {
      var res = 0;
      if (val >= 10000) {
        var v = ((val / 10000) | 0);
        val -= ((v * 10000) | 0);
        res = ($thisType.FastToDecHex(v) << 16);
      }
      return (res | $thisType.FastToDecHex(val));
    }
  );

  $.Method({Static:true , Public:false}, "ZeroTrimEnd", 
    $sig.make(0x9F6, null, [$asm01.TypeRef("System.Text.StringBuilder"), $asm01.TypeRef("System.Boolean")], []), 
    function NumberFormatter_ZeroTrimEnd (sb, canEmpty) {
      var len = 0;

    $loop0: 
      for (var i = ((sb.get_Length() - 1) | 0); (canEmpty ? (i >= 0) : (i > 0)); --i) {
        if (sb.get_Chars(i).charCodeAt(0) !== "0".charCodeAt(0)) {
          break $loop0;
        }
        ++len;
      }
      if (len > 0) {
        sb.Remove(((sb.get_Length() - len) | 0), len);
      }
    }
  );

  $.Constant({Static:true , Public:false}, "DefaultExpPrecision", 6); 
  $.Constant({Static:true , Public:false}, "HundredMillion", 100000000); 
  $.Constant({Static:true , Public:false}, "SeventeenDigitsThreshold", 10000000000000000); 
  $.Constant({Static:true , Public:false}, "ULongDivHundredMillion", 184467440737); 
  $.Constant({Static:true , Public:false}, "ULongModHundredMillion", 9551616); 
  $.Constant({Static:true , Public:false}, "DoubleBitsExponentShift", 52); 
  $.Constant({Static:true , Public:false}, "DoubleBitsExponentMask", 2047); 
  $.Constant({Static:true , Public:false}, "DoubleBitsMantissaMask", 4503599627370495); 
  $.Constant({Static:true , Public:false}, "DecimalBitsScaleMask", 2031616); 
  $.Constant({Static:true , Public:false}, "SingleDefPrecision", 7); 
  $.Constant({Static:true , Public:false}, "DoubleDefPrecision", 15); 
  $.Constant({Static:true , Public:false}, "Int8DefPrecision", 3); 
  $.Constant({Static:true , Public:false}, "UInt8DefPrecision", 3); 
  $.Constant({Static:true , Public:false}, "Int16DefPrecision", 5); 
  $.Constant({Static:true , Public:false}, "UInt16DefPrecision", 5); 
  $.Constant({Static:true , Public:false}, "Int32DefPrecision", 10); 
  $.Constant({Static:true , Public:false}, "UInt32DefPrecision", 10); 
  $.Constant({Static:true , Public:false}, "Int64DefPrecision", 19); 
  $.Constant({Static:true , Public:false}, "UInt64DefPrecision", 20); 
  $.Constant({Static:true , Public:false}, "DecimalDefPrecision", 100); 
  $.Constant({Static:true , Public:false}, "TenPowersListLength", 19); 
  $.Constant({Static:true , Public:false}, "MinRoundtripVal", -1.79769313486231E+308); 
  $.Constant({Static:true , Public:false}, "MaxRoundtripVal", 1.79769313486231E+308); 
  $.Field({Static:false, Public:false}, "_nfi", $asm01.TypeRef("System.Globalization.NumberFormatInfo")); 
  $.Field({Static:false, Public:false}, "_cbuf", $jsilcore.TypeRef("System.Array", [$asm01.TypeRef("System.Char")])); 
  $.Field({Static:false, Public:false}, "_NaN", $asm01.TypeRef("System.Boolean")); 
  $.Field({Static:false, Public:false}, "_infinity", $asm01.TypeRef("System.Boolean")); 
  $.Field({Static:false, Public:false}, "_isCustomFormat", $asm01.TypeRef("System.Boolean")); 
  $.Field({Static:false, Public:false}, "_specifierIsUpper", $asm01.TypeRef("System.Boolean")); 
  $.Field({Static:false, Public:false}, "_positive", $asm01.TypeRef("System.Boolean")); 
  $.Field({Static:false, Public:false}, "_specifier", $asm01.TypeRef("System.Char")); 
  $.Field({Static:false, Public:false}, "_precision", $asm01.TypeRef("System.Int32")); 
  $.Field({Static:false, Public:false}, "_defPrecision", $asm01.TypeRef("System.Int32")); 
  $.Field({Static:false, Public:false}, "_digitsLen", $asm01.TypeRef("System.Int32")); 
  $.Field({Static:false, Public:false}, "_offset", $asm01.TypeRef("System.Int32")); 
  $.Field({Static:false, Public:false}, "_decPointPos", $asm01.TypeRef("System.Int32")); 
  $.Field({Static:false, Public:false}, "_val1", $asm01.TypeRef("System.UInt32")); 
  $.Field({Static:false, Public:false}, "_val2", $asm01.TypeRef("System.UInt32")); 
  $.Field({Static:false, Public:false}, "_val3", $asm01.TypeRef("System.UInt32")); 
  $.Field({Static:false, Public:false}, "_val4", $asm01.TypeRef("System.UInt32")); 
  $.Field({Static:false, Public:false}, "_ind", $asm01.TypeRef("System.Int32")); 
  $.Field({Static:true , Public:false}, "threadNumberFormatter", $.Type)
    .Attribute($asm01.TypeRef("System.ThreadStaticAttribute")); 
  $.Field({Static:true , Public:false, ReadOnly:true }, "DigitLowerTable", $jsilcore.TypeRef("System.Array", [$asm01.TypeRef("System.Char")])); 
  $.Field({Static:true , Public:false, ReadOnly:true }, "DigitUpperTable", $jsilcore.TypeRef("System.Array", [$asm01.TypeRef("System.Char")])); 
  $.Field({Static:true , Public:false, ReadOnly:true }, "TenPowersList", $jsilcore.TypeRef("System.Array", [$asm01.TypeRef("System.Int64")])); 
  $.Field({Static:true , Public:false, ReadOnly:true }, "DecHexDigits", $jsilcore.TypeRef("System.Array", [$asm01.TypeRef("System.Int32")])); 
  $.Field({Static:true , Public:false, ReadOnly:true }, "MantissaBitsTable", $jsilcore.TypeRef("System.Array", [$asm01.TypeRef("System.UInt64")])); 
  $.Field({Static:true , Public:false, ReadOnly:true }, "TensExponentTable", $jsilcore.TypeRef("System.Array", [$asm01.TypeRef("System.Int32")])); 
  $.Method({Static:true , Public:false}, ".cctor", 
    $sig.make(0xA26, null, [], []), 
    function NumberFormatter__cctor () {
      $thisType.DigitLowerTable = JSIL.Array.New($T00(), ["0", "1", "2", "3", "4", "5", "6", "7", "8", "9", "a", "b", "c", "d", "e", "f"]);
      $thisType.DigitUpperTable = JSIL.Array.New($T00(), ["0", "1", "2", "3", "4", "5", "6", "7", "8", "9", "A", "B", "C", "D", "E", "F"]);
      $thisType.TenPowersList = JSIL.Array.New($T01(), [$T01().Create(1, 0, 0), $T01().Create(10, 0, 0), $T01().Create(100, 0, 0), $T01().Create(1000, 0, 0), $T01().Create(10000, 0, 0), $T01().Create(100000, 0, 0), $T01().Create(1000000, 0, 0), $T01().Create(10000000, 0, 0), $T01().Create(16113920, 5, 0), $T01().Create(10144256, 59, 0), $T01().Create(779264, 596, 0), $T01().Create(7792640, 5960, 0), $T01().Create(10817536, 59604, 0), $T01().Create(7512064, 596046, 0), $T01().Create(8011776, 5960464, 0), $T01().Create(13008896, 9272996, 3), $T01().Create(12648448, 8843887, 35), $T01().Create(9043968, 4552797, 355), $T01().Create(6553600, 11973543, 3552)]);
      $thisType.DecHexDigits = JSIL.Array.New($T02(), [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153]);
      $thisType.MantissaBitsTable = JSIL.Array.New($T03(), [$T03().Create(9308944, 9111419, 16189), $T03().Create(1840673, 1445623, 32379), $T03().Create(7079021, 13710897, 6475), $T03().Create(14158042, 10644578, 12951), $T03().Create(11538868, 4511941, 25903), $T03().Create(6300520, 9023883, 51806), $T03().Create(14681876, 5160219, 10361), $T03().Create(12586537, 10320439, 20722), $T03().Create(8395859, 3863663, 41445), $T03().Create(11745501, 772732, 8289), $T03().Create(6713786, 1545465, 16578), $T03().Create(13427573, 3090930, 33156), $T03().Create(6040957, 3973629, 6631), $T03().Create(12081915, 7947258, 13262), $T03().Create(7386615, 15894517, 26524), $T03().Create(14773231, 15011818, 53049), $T03().Create(9665532, 16424136, 10609), $T03().Create(2553849, 16071057, 21219), $T03().Create(5107699, 15364898, 42439), $T03().Create(7732426, 16494752, 8487), $T03().Create(15464852, 16212288, 16975), $T03().Create(14152488, 15647361, 33951), $T03().Create(9541384, 6484915, 6790), $T03().Create(2305552, 12969831, 13580), $T03().Create(4611104, 9162446, 27161), $T03().Create(9222209, 1547676, 54323), $T03().Create(15266214, 10375864, 10864), $T03().Create(13755213, 3974513, 21729), $T03().Create(10733210, 7949027, 43458), $T03().Create(2146642, 11656135, 8691), $T03().Create(4293284, 6535054, 17383), $T03().Create(8586568, 13070108, 34766), $T03().Create(15139086, 5969464, 6953), $T03().Create(13500957, 11938929, 13906), $T03().Create(10224698, 7100643, 27813), $T03().Create(3672180, 14201287, 55626), $T03().Create(10800765, 6195700, 11125), $T03().Create(4824315, 12391401, 22250), $T03().Create(9648630, 8005586, 44501), $T03().Create(8640612, 4956560, 8900), $T03().Create(504008, 9913121, 17800), $T03().Create(1008017, 3049026, 35601), $T03().Create(6912489, 3965248, 7120), $T03().Create(13824979, 7930496, 14240), $T03().Create(10872743, 15860993, 28480), $T03().Create(4968271, 14944771, 56961), $T03().Create(7704540, 6344397, 11392), $T03().Create(15409081, 12688794, 22784), $T03().Create(14040947, 8600373, 45569), $T03().Create(9519075, 15141847, 9113), $T03().Create(2260935, 13506479, 18227), $T03().Create(4521871, 10235742, 36455), $T03().Create(7615260, 2047148, 7291), $T03().Create(15230521, 4094296, 14582), $T03().Create(13683826, 8188593, 29164), $T03().Create(10590437, 16377187, 58328), $T03().Create(2118087, 13341767, 11665), $T03().Create(4236174, 9906318, 23331), $T03().Create(8472349, 3035420, 46663), $T03().Create(11760799, 10673413, 9332), $T03().Create(6744383, 4569611, 18665), $T03().Create(13488766, 9139222, 37330), $T03().Create(9408639, 1827844, 7466), $T03().Create(2040063, 3655689, 14932), $T03().Create(4080126, 7311378, 29864), $T03().Create(8160253, 14622756, 59728), $T03().Create(15053823, 12990880, 11945), $T03().Create(13330430, 9204545, 23891), $T03().Create(9883645, 1631875, 47783), $T03().Create(12043058, 10392704, 9556), $T03().Create(7308901, 4008193, 19113), $T03().Create(14617803, 8016386, 38226), $T03().Create(9634447, 4958720, 7645), $T03().Create(2491678, 9917441, 15290), $T03().Create(4983356, 3057666, 30581), $T03().Create(9966712, 6115332, 61162), $T03().Create(15415115, 7933952, 12232), $T03().Create(14053014, 15867905, 24464), $T03().Create(11328812, 14958595, 48929), $T03().Create(15687535, 16413491, 9785), $T03().Create(14597854, 16049767, 19571), $T03().Create(12418493, 15322319, 39143), $T03().Create(9194585, 13130793, 7828), $T03().Create(1611954, 9484371, 15657), $T03().Create(3223908, 2191526, 31315), $T03().Create(6447816, 4383052, 62630), $T03().Create(8000449, 876610, 12526), $T03().Create(16000899, 1753220, 25052), $T03().Create(15224583, 3506441, 50104), $T03().Create(3044916, 14123061, 10020), $T03().Create(6089833, 11468906, 20041), $T03().Create(12179666, 6160596, 40083), $T03().Create(15857706, 11298448, 8016), $T03().Create(14938196, 5819681, 16033), $T03().Create(13099176, 11639363, 32066), $T03().Create(9421136, 6501511, 64133), $T03().Create(15306000, 11366631, 12826), $T03().Create(13834784, 5956047, 25653), $T03().Create(10892352, 11912095, 51306), $T03().Create(5533913, 5737862, 10261), $T03().Create(11067827, 11475724, 20522), $T03().Create(5358438, 6174233, 41045), $T03().Create(11138017, 1234846, 8209), $T03().Create(5498818, 2469693, 16418), $T03().Create(10997637, 4939386, 32836), $T03().Create(8910413, 4343320, 6567), $T03().Create(1043611, 8686641, 13134), $T03().Create(2087223, 596066, 26269), $T03().Create(4174447, 1192132, 52538), $T03().Create(834889, 10304756, 10507), $T03().Create(1669778, 3832296, 21015), $T03().Create(3339557, 7664592, 42030), $T03().Create(7378797, 1532918, 8406), $T03().Create(14757595, 3065836, 16812), $T03().Create(12737975, 6131673, 33624), $T03().Create(9258481, 14648107, 6724), $T03().Create(1739747, 12518999, 13449), $T03().Create(3479494, 8260782, 26899), $T03().Create(6958988, 16521564, 53798), $T03().Create(8102684, 13370642, 10759), $T03().Create(16205368, 9964068, 21519), $T03().Create(15633520, 3150921, 43039), $T03().Create(3126704, 14051957, 8607), $T03().Create(6253408, 11326698, 17215), $T03().Create(12506816, 5876180, 34431), $T03().Create(5856806, 4530679, 6886), $T03().Create(11713612, 9061358, 13772), $T03().Create(6650009, 1345501, 27545), $T03().Create(13300019, 2691002, 55090), $T03().Create(9370890, 538200, 11018), $T03().Create(1964564, 1076401, 22036), $T03().Create(3929129, 2152802, 44072), $T03().Create(14207598, 7141446, 8814), $T03().Create(11637981, 14282893, 17628), $T03().Create(6498746, 11788571, 35257), $T03().Create(11366078, 9068600, 7051), $T03().Create(5954941, 1359985, 14103), $T03().Create(11909883, 2719970, 28206), $T03().Create(7042551, 5439941, 56412), $T03().Create(11474839, 7798874, 11282), $T03().Create(6172463, 15597749, 22564), $T03().Create(12344927, 14418282, 45129), $T03().Create(5824428, 16305429, 9025), $T03().Create(11648857, 15833642, 18051), $T03().Create(6520498, 14890069, 36103), $T03().Create(8014986, 13044343, 7220), $T03().Create(16029972, 9311470, 14441), $T03().Create(15282728, 1845725, 28883), $T03().Create(13788241, 3691451, 57766), $T03().Create(9468534, 4093733, 11553), $T03().Create(2159853, 8187467, 23106), $T03().Create(4319706, 16374934, 46212), $T03().Create(4219384, 9985873, 9242), $T03().Create(8438769, 3194530, 18485), $T03().Create(100322, 6389061, 36970), $T03().Create(3375507, 1277812, 7394), $T03().Create(6751015, 2555624, 14788), $T03().Create(13502030, 5111248, 29576), $T03().Create(10226845, 10222497, 59152), $T03().Create(15467141, 8755385, 11830), $T03().Create(14157067, 733555, 23661), $T03().Create(11536919, 1467111, 47322), $T03().Create(12373713, 7004308, 9464), $T03().Create(7970210, 14008617, 18928), $T03().Create(15940421, 11240018, 37857), $T03().Create(3188084, 8958890, 7571), $T03().Create(6376168, 1140564, 15143), $T03().Create(12752337, 2281128, 30286), $T03().Create(8727458, 4562257, 60572), $T03().Create(15167264, 7623337, 12114), $T03().Create(13557313, 15246675, 24228), $T03().Create(10337410, 13716135, 48457), $T03().Create(8778368, 9454113, 9691), $T03().Create(779520, 2131011, 19383), $T03().Create(1559041, 4262022, 38766), $T03().Create(10378137, 4207847, 7753), $T03().Create(3979059, 8415695, 15506), $T03().Create(7958119, 54174, 31013), $T03().Create(15916239, 108348, 62026), $T03().Create(16605020, 3377112, 12405), $T03().Create(16432825, 6754225, 24810), $T03().Create(16088434, 13508451, 49620), $T03().Create(6573130, 2701690, 9924), $T03().Create(13146260, 5403380, 19848), $T03().Create(9515304, 10806761, 39696), $T03().Create(8613947, 5516795, 7939), $T03().Create(450678, 11033591, 15878), $T03().Create(901357, 5289966, 31757), $T03().Create(1802714, 10579932, 63514), $T03().Create(3715986, 15537759, 12702), $T03().Create(7431972, 14298302, 25405), $T03().Create(14863944, 11819388, 50811), $T03().Create(16394561, 5719320, 10162), $T03().Create(16011907, 11438641, 20324), $T03().Create(15246598, 6100067, 40649), $T03().Create(6404762, 14641786, 8129), $T03().Create(12809525, 12506356, 16259), $T03().Create(8841835, 8235497, 32519), $T03().Create(5123810, 15068872, 6503), $T03().Create(10247620, 13360528, 13007), $T03().Create(3718025, 9943841, 26015), $T03().Create(7436051, 3110466, 52031), $T03().Create(8198096, 3977536, 10406), $T03().Create(16396193, 7955072, 20812), $T03().Create(16015170, 15910145, 41624), $T03().Create(16624806, 16603801, 8324), $T03().Create(16472397, 16430387, 16649), $T03().Create(16167579, 16083559, 33299), $T03().Create(13299845, 16638484, 6659), $T03().Create(9822475, 16499753, 13319), $T03().Create(2867734, 16222291, 26639), $T03().Create(5735468, 15667366, 53279), $T03().Create(1147093, 16555246, 10655), $T03().Create(2294187, 16333276, 21311), $T03().Create(4588374, 15889336, 42623), $T03().Create(14339447, 13244196, 8524), $T03().Create(11901679, 9711177, 17049), $T03().Create(7026142, 2645139, 34099), $T03().Create(11471558, 13950800, 6819), $T03().Create(6165900, 11124385, 13639), $T03().Create(12331800, 5471554, 27279), $T03().Create(7886385, 10943109, 54558), $T03().Create(8288163, 12254951, 10911), $T03().Create(16576326, 7732686, 21823), $T03().Create(16375437, 15465373, 43646), $T03().Create(16696860, 6448517, 8729), $T03().Create(16616504, 12897035, 17458), $T03().Create(16455793, 9016855, 34917), $T03().Create(10002045, 8514257, 6983), $T03().Create(3226874, 251299, 13967), $T03().Create(6453748, 502598, 27934), $T03().Create(12907496, 1005196, 55868), $T03().Create(16003272, 10267368, 11173), $T03().Create(15229328, 3757521, 22347), $T03().Create(13681440, 7515043, 44694), $T03().Create(9447174, 14924781, 8938), $T03().Create(2117133, 13072347, 17877), $T03().Create(4234266, 9367478, 35755), $T03().Create(10913182, 1873495, 7151), $T03().Create(5049149, 3746991, 14302), $T03().Create(10098299, 7493982, 28604), $T03().Create(3419382, 14987965, 57208), $T03().Create(10750206, 13063922, 11441), $T03().Create(4723196, 9350629, 22883), $T03().Create(9446392, 1924042, 45767), $T03().Create(15311051, 7095694, 9153), $T03().Create(13844886, 14191389, 18306), $T03().Create(10912557, 11605563, 36613), $T03().Create(5537954, 12387442, 7322), $T03().Create(11075909, 7997668, 14645), $T03().Create(5374602, 15995337, 29290), $T03().Create(10749205, 15213458, 58581), $T03().Create(15571613, 6398134, 11716), $T03().Create(14366011, 12796269, 23432), $T03().Create(11954807, 8815323, 46865), $T03().Create(12457291, 1763064, 9373), $T03().Create(8137366, 3526129, 18746), $T03().Create(16274732, 7052258, 37492), $T03().Create(3254946, 8121338, 7498), $T03().Create(6509892, 16242676, 14996), $T03().Create(13019785, 15708136, 29993), $T03().Create(9262355, 14639057, 59987), $T03().Create(15274243, 9638697, 11997), $T03().Create(13771271, 2500179, 23995), $T03().Create(10765327, 5000359, 47990), $T03().Create(15574838, 1000071, 9598), $T03().Create(14372460, 2000143, 19196), $T03().Create(11967705, 4000287, 38392), $T03().Create(15815313, 7510943, 7678), $T03().Create(14853411, 15021887, 15356), $T03().Create(12929607, 13266559, 30713), $T03().Create(9081998, 9755903, 61427), $T03().Create(1816399, 8662067, 12285), $T03().Create(3632799, 546918, 24571), $T03().Create(7265599, 1093836, 49142), $T03().Create(11519449, 6929653, 9828), $T03().Create(6261682, 13859307, 19656), $T03().Create(12523365, 10941398, 39313), $T03().Create(5860116, 12254609, 7862), $T03().Create(11720232, 7732002, 15725), $T03().Create(6663249, 15464005, 31450), $T03().Create(13326498, 14150794, 62901), $T03().Create(2665299, 6185602, 12580), $T03().Create(5330599, 12371204, 25160), $T03().Create(10661198, 7965192, 50321), $T03().Create(12198569, 4948481, 10064), $T03().Create(7619922, 9896963, 20128), $T03().Create(15239845, 3016710, 40257), $T03().Create(9758855, 7314228, 8051), $T03().Create(2740495, 14628457, 16102), $T03().Create(5480990, 12479698, 32205), $T03().Create(11162527, 2495939, 6441), $T03().Create(5547839, 4991879, 12882), $T03().Create(11095678, 9983758, 25764), $T03().Create(5414140, 3190301, 51529), $T03().Create(1082828, 14059833, 10305), $T03().Create(2165656, 11342450, 20611), $T03().Create(4331312, 5907684, 41223), $T03().Create(7577148, 11247866, 8244), $T03().Create(15154297, 5718516, 16489), $T03().Create(13531379, 11437033, 32978), $T03().Create(6061719, 12353736, 6595), $T03().Create(12123438, 7930256, 13191), $T03().Create(7469660, 15860513, 26382), $T03().Create(14939321, 14943810, 52765), $T03().Create(2987864, 2988762, 10553), $T03().Create(5975728, 5977524, 21106), $T03().Create(11951456, 11955048, 42212), $T03().Create(2390291, 9101896, 8442), $T03().Create(4780582, 1426576, 16885), $T03().Create(9561165, 2853152, 33770), $T03().Create(8623119, 570630, 6754), $T03().Create(469023, 1141261, 13508), $T03().Create(938046, 2282522, 27016), $T03().Create(1876092, 4565044, 54032), $T03().Create(3730661, 7623895, 10806), $T03().Create(7461323, 15247790, 21612), $T03().Create(14922646, 13718364, 43225), $T03().Create(16406302, 2743672, 8645), $T03().Create(16035388, 5487345, 17290), $T03().Create(15293560, 10974691, 34580), $T03().Create(6414155, 2194938, 6916), $T03().Create(12828310, 4389876, 13832), $T03().Create(8879405, 8779753, 27664), $T03().Create(981594, 782291, 55329), $T03().Create(196318, 13578231, 11065), $T03().Create(392637, 10379246, 22131), $T03().Create(785275, 3981276, 44263), $T03().Create(13578827, 10862584, 8852), $T03().Create(10380439, 4947953, 17705), $T03().Create(3983663, 9895907, 35410), $T03().Create(7507619, 1979181, 7082), $T03().Create(15015238, 3958362, 14164), $T03().Create(13253260, 7916725, 28328), $T03().Create(9729304, 15833451, 56656), $T03().Create(8656747, 6522133, 11331), $T03().Create(536278, 13044267, 22662), $T03().Create(1072557, 9311318, 45325), $T03().Create(10280841, 1862263, 9065), $T03().Create(3784466, 3724527, 18130), $T03().Create(7568932, 7449054, 36260), $T03().Create(14935559, 1489810, 7252), $T03().Create(13093902, 2979621, 14504), $T03().Create(9410589, 5959243, 29008), $T03().Create(2043962, 11918487, 58016), $T03().Create(10475122, 5739140, 11603), $T03().Create(4173028, 11478281, 23206), $T03().Create(8346056, 6179346, 46413), $T03().Create(15090984, 11302198, 9282), $T03().Create(13404752, 5827181, 18565), $T03().Create(10032288, 11654363, 37130), $T03().Create(12072787, 2330872, 7426), $T03().Create(7368358, 4661745, 14852), $T03().Create(14736716, 9323490, 29704), $T03().Create(12696217, 1869765, 59409), $T03().Create(15961016, 13795725, 11881), $T03().Create(15144816, 10814235, 23763), $T03().Create(13512417, 4851255, 47527), $T03().Create(9413369, 7681137, 9505), $T03().Create(2049523, 15362275, 19010), $T03().Create(4099047, 13947334, 38021), $T03().Create(819809, 6144910, 7604), $T03().Create(1639619, 12289820, 15208), $T03().Create(3279238, 7802424, 30417), $T03().Create(6558476, 15604848, 60834), $T03().Create(8022581, 16542742, 12166), $T03().Create(16045163, 16308268, 24333), $T03().Create(15313110, 15839321, 48667), $T03().Create(13128951, 9878750, 9733), $T03().Create(9480687, 2980285, 19467), $T03().Create(2184158, 5960571, 38934), $T03().Create(436831, 14613887, 7786), $T03().Create(873663, 12450558, 15573), $T03().Create(1747327, 8123900, 31147), $T03().Create(3494654, 16247800, 62294), $T03().Create(14120703, 16671332, 12458), $T03().Create(11464191, 16565449, 24917), $T03().Create(6151166, 16353683, 49835), $T03().Create(11296562, 3270736, 9967), $T03().Create(5815909, 6541473, 19934), $T03().Create(11631819, 13082946, 39868), $T03().Create(15748136, 12682918, 7973), $T03().Create(14719057, 8588621, 15947), $T03().Create(12660898, 400027, 31895), $T03().Create(8544581, 800055, 63790), $T03().Create(1708916, 160011, 12758), $T03().Create(3417832, 320022, 25516), $T03().Create(6835665, 640044, 51032), $T03().Create(4722576, 6838895, 10206), $T03().Create(9445152, 13677790, 20412), $T03().Create(2113089, 10578365, 40825), $T03().Create(422617, 2115673, 8165), $T03().Create(845235, 4231346, 16330), $T03().Create(1690471, 8462692, 32660), $T03().Create(7048980, 1692538, 6532), $T03().Create(14097961, 3385076, 13064), $T03().Create(11418706, 6770153, 26128), $T03().Create(6060197, 13540307, 52256), $T03().Create(11278369, 6063504, 10451), $T03().Create(5779522, 12127009, 20902), $T03().Create(11559044, 7476802, 41805), $T03().Create(9022695, 1495360, 8361), $T03().Create(1268174, 2990721, 16722), $T03().Create(2536348, 5981442, 33444), $T03().Create(3862712, 14618061, 6688), $T03().Create(7725425, 12458906, 13377), $T03().Create(15450851, 8140596, 26755), $T03().Create(14124487, 16281193, 53510), $T03().Create(12891227, 3256238, 10702), $T03().Create(9005238, 6512477, 21404), $T03().Create(1233260, 13024955, 42808), $T03().Create(10312981, 12671320, 8561), $T03().Create(3848747, 8565425, 17123), $T03().Create(7697494, 353634, 34247), $T03().Create(4894942, 6781613, 6849), $T03().Create(9789884, 13563226, 13698), $T03().Create(2802552, 10349237, 27397), $T03().Create(5605105, 3921258, 54795), $T03().Create(11187350, 784251, 10959), $T03().Create(5597485, 1568503, 21918), $T03().Create(11194970, 3137006, 43836), $T03().Create(8949880, 3982844, 8767), $T03().Create(1122545, 7965689, 17534), $T03().Create(2245090, 15931378, 35068), $T03().Create(3804461, 13252605, 7013), $T03().Create(7608922, 9727994, 14027), $T03().Create(15217845, 2678772, 28055), $T03().Create(13658474, 5357545, 56110), $T03().Create(2731694, 1071509, 11222), $T03().Create(5463389, 2143018, 22444), $T03().Create(10926779, 4286036, 44888), $T03().Create(15607128, 10923536, 8977), $T03().Create(14437041, 5069857, 17955), $T03().Create(12096866, 10139715, 35910), $T03().Create(2419373, 2027943, 7182), $T03().Create(4838746, 4055886, 14364), $T03().Create(9677493, 8111772, 28728), $T03().Create(2577770, 16223545, 57456), $T03().Create(3870997, 6600152, 11491), $T03().Create(7741994, 13200304, 22982), $T03().Create(15483989, 9623392, 45965), $T03().Create(9807684, 1924678, 9193), $T03().Create(2838152, 3849357, 18386), $T03().Create(5676304, 7698714, 36772), $T03().Create(4490704, 8250629, 7354), $T03().Create(8981408, 16501258, 14708), $T03().Create(1185600, 16225301, 29417), $T03().Create(2371201, 15673386, 58835), $T03().Create(3829683, 3134677, 11767), $T03().Create(7659367, 6269354, 23534), $T03().Create(15318734, 12538708, 47068), $T03().Create(6419190, 12574071, 9413), $T03().Create(12838380, 8370926, 18827), $T03().Create(8899544, 16741853, 37654), $T03().Create(8490795, 16770143, 7530), $T03().Create(204374, 16763071, 15061), $T03().Create(408748, 16748926, 30123), $T03().Create(817497, 16720636, 60247), $T03().Create(10229829, 10055013, 12049), $T03().Create(3682442, 3332811, 24099), $T03().Create(7364884, 6665622, 48198), $T03().Create(1472976, 11399454, 9639), $T03().Create(2945953, 6021692, 19279), $T03().Create(5891907, 12043384, 38558), $T03().Create(7889267, 12475006, 7711), $T03().Create(15778535, 8172796, 15423), $T03().Create(14779855, 16345593, 30846), $T03().Create(12782495, 15913971, 61693), $T03().Create(15978271, 13249123, 12338), $T03().Create(15179327, 9721031, 24677), $T03().Create(13581439, 2664847, 49355), $T03().Create(9427174, 532969, 9871), $T03().Create(2077132, 1065939, 19742), $T03().Create(4154265, 2131878, 39484), $T03().Create(7541739, 13848148, 7896), $T03().Create(15083478, 10919080, 15793), $T03().Create(13389741, 5060945, 31587), $T03().Create(10002267, 10121891, 63174), $T03().Create(2000453, 15446151, 12634), $T03().Create(4000907, 14115086, 25269), $T03().Create(8001814, 11452956, 50539), $T03().Create(1600362, 15712364, 10107), $T03().Create(3200725, 14647512, 20215), $T03().Create(6401451, 12517808, 40431), $T03().Create(14702063, 5859004, 8086), $T03().Create(12626910, 11718009, 16172), $T03().Create(8476604, 6658803, 32345), $T03().Create(11761650, 1331760, 6469), $T03().Create(6746084, 2663521, 12938), $T03().Create(13492169, 5327042, 25876), $T03().Create(10207123, 10654085, 51752), $T03().Create(8752311, 8841703, 10350), $T03().Create(727406, 906191, 20701), $T03().Create(1454812, 1812382, 41402), $T03().Create(13712735, 7073362, 8280), $T03().Create(10648254, 14146725, 16560), $T03().Create(4519293, 11516235, 33121), $T03().Create(4259301, 5658690, 6624), $T03().Create(8518603, 11317380, 13248), $T03().Create(259991, 5857545, 26497), $T03().Create(519982, 11715090, 52994), $T03().Create(13525769, 15764790, 10598), $T03().Create(10274322, 14752365, 21197), $T03().Create(3771429, 12727515, 42395), $T03().Create(754285, 2545503, 8479), $T03().Create(1508571, 5091006, 16958), $T03().Create(3017143, 10182012, 33916), $T03().Create(10669758, 5391845, 6783), $T03().Create(4562300, 10783691, 13566), $T03().Create(9124601, 4790166, 27133), $T03().Create(1471986, 9580333, 54266), $T03().Create(13716170, 5271509, 10853), $T03().Create(10655124, 10543019, 21706), $T03().Create(4533032, 4308823, 43413), $T03().Create(4262049, 10928094, 8682), $T03().Create(8524099, 5078972, 17365), $T03().Create(270982, 10157945, 34730), $T03().Create(54196, 2031589, 6946), $T03().Create(108393, 4063178, 13892), $T03().Create(216786, 8126356, 27784), $T03().Create(433572, 16252712, 55568), $T03().Create(86714, 13316872, 11113), $T03().Create(173428, 9856528, 22227), $T03().Create(346857, 2935840, 44455), $T03().Create(69371, 587168, 8891), $T03().Create(138743, 1174336, 17782), $T03().Create(277486, 2348672, 35564), $T03().Create(3410940, 13891507, 7112), $T03().Create(6821880, 11005798, 14225), $T03().Create(13643761, 5234380, 28451), $T03().Create(10510307, 10468761, 56902), $T03().Create(12168391, 8804638, 11380), $T03().Create(7559566, 832061, 22761), $T03().Create(15119132, 1664122, 45522), $T03().Create(16445599, 7043710, 9104), $T03().Create(16113982, 14087421, 18208), $T03().Create(15450749, 11397627, 36417), $T03().Create(16511922, 8990411, 7283), $T03().Create(16246629, 1203607, 14567), $T03().Create(15716042, 2407215, 29134), $T03().Create(14654868, 4814431, 58268), $T03().Create(16352746, 11029215, 11653), $T03().Create(15928277, 5281215, 23307), $T03().Create(15079338, 10562431, 46614), $T03().Create(3015867, 15534259, 9322), $T03().Create(6031735, 14291302, 18645), $T03().Create(12063470, 11805388, 37291), $T03().Create(15834466, 5716520, 7458), $T03().Create(14891717, 11433041, 14916), $T03().Create(13006219, 6088867, 29833), $T03().Create(9235223, 12177735, 59666), $T03().Create(5202487, 5790990, 11933), $T03().Create(10404975, 11581980, 23866), $T03().Create(4032735, 6386745, 47733), $T03().Create(10872876, 11343678, 9546), $T03().Create(4968537, 5910141, 19093), $T03().Create(9937074, 11820282, 38186), $T03().Create(12053744, 5719499, 7637), $T03().Create(7330273, 11438999, 15274), $T03().Create(14660546, 6100782, 30549), $T03().Create(12543876, 12201565, 61098), $T03().Create(12575104, 12506642, 12219), $T03().Create(8372993, 8236069, 24439), $T03().Create(16745987, 16472138, 48878), $T03().Create(6704640, 13360757, 9775), $T03().Create(13409281, 9944298, 19551), $T03().Create(10041346, 3111381, 39103), $T03().Create(15430042, 10688605, 7820), $T03().Create(14082868, 4599995, 15641), $T03().Create(11388520, 9199991, 31282), $T03().Create(5999825, 1622767, 62565), $T03().Create(7910851, 324553, 12513), $T03().Create(15821702, 649106, 25026), $T03().Create(14866189, 1298213, 50052), $T03().Create(2973237, 6970529, 10010), $T03().Create(5946475, 13941058, 20020), $T03().Create(11892951, 11104900, 40041), $T03().Create(5734033, 5576423, 8008), $T03().Create(11468067, 11152846, 16016), $T03().Create(6158918, 5528477, 32033), $T03().Create(12317836, 11056954, 64066), $T03().Create(2463567, 5566834, 12813), $T03().Create(4927134, 11133668, 25626), $T03().Create(9854269, 5490120, 51253), $T03().Create(12037183, 11164353, 10250), $T03().Create(7297150, 5551491, 20501), $T03().Create(14594301, 11102982, 41002), $T03().Create(16340633, 8931482, 8200), $T03().Create(15904050, 1085749, 16401), $T03().Create(15030884, 2171499, 32802), $T03().Create(6361620, 7145186, 6560), $T03().Create(12723240, 14290372, 13120), $T03().Create(8669264, 11803529, 26241), $T03().Create(561313, 6829843, 52483), $T03().Create(3467705, 11432298, 10496), $T03().Create(6935411, 6087380, 20993), $T03().Create(13870823, 12174760, 41986), $T03().Create(6129607, 5790395, 8397), $T03().Create(12259215, 11580790, 16794), $T03().Create(7741215, 6384365, 33589), $T03().Create(14970015, 14698645, 6717), $T03().Create(13162815, 12620075, 13435), $T03().Create(9548415, 8462935, 26871), $T03().Create(2319615, 148655, 53743), $T03().Create(10530252, 10096060, 10748), $T03().Create(4283289, 3414905, 21497), $T03().Create(8566578, 6829810, 42994), $T03().Create(15135088, 14787734, 8598), $T03().Create(13492961, 12798253, 17197), $T03().Create(10208706, 8819291, 34395), $T03().Create(5397184, 1763858, 6879), $T03().Create(10794368, 3527716, 13758), $T03().Create(4811521, 7055433, 27516), $T03().Create(9623043, 14110866, 55032), $T03().Create(11990938, 9533059, 11006), $T03().Create(7204660, 2288903, 22013), $T03().Create(14409321, 4577806, 44026), $T03().Create(9592750, 4271004, 8805), $T03().Create(2408285, 8542009, 17610), $T03().Create(4816570, 306802, 35221), $T03().Create(11029643, 3416803, 7044), $T03().Create(5282071, 6833607, 14088), $T03().Create(10564142, 13667214, 28176), $T03().Create(4351069, 10557213, 56353), $T03().Create(4225657, 12177772, 11270), $T03().Create(8451314, 7578328, 22541), $T03().Create(125412, 15156657, 45082), $T03().Create(13446855, 9742217, 9016), $T03().Create(10116494, 2707219, 18033), $T03().Create(3455773, 5414439, 36066), $T03().Create(691154, 4438331, 7213), $T03().Create(1382309, 8876662, 14426), $T03().Create(2764618, 976108, 28853), $T03().Create(5529236, 1952216, 57706), $T03().Create(7816733, 3745886, 11541), $T03().Create(15633467, 7491772, 23082), $T03().Create(14489719, 14983545, 46164), $T03().Create(16319716, 16418481, 9232), $T03().Create(15862217, 16059747, 18465), $T03().Create(14947218, 15342279, 36931), $T03().Create(2989443, 6423899, 7386), $T03().Create(5978887, 12847798, 14772), $T03().Create(11957774, 8918380, 29545), $T03().Create(7138333, 1059545, 59091), $T03().Create(4783109, 3567352, 11818), $T03().Create(9566219, 7134704, 23636), $T03().Create(2355223, 14269409, 47272), $T03().Create(3826487, 9564768, 9454), $T03().Create(7652975, 2352320, 18909), $T03().Create(15305951, 4704640, 37818), $T03().Create(13127519, 11007257, 7563), $T03().Create(9477823, 5237299, 15127), $T03().Create(2178431, 10474599, 30254), $T03().Create(4356863, 4171982, 60509), $T03().Create(4226815, 14256169, 12101), $T03().Create(8453631, 11735122, 24203), $T03().Create(130047, 6693029, 48407), $T03().Create(3381452, 8049492, 9681), $T03().Create(6762905, 16098984, 19362), $T03().Create(13525810, 15420752, 38725), $T03().Create(9416048, 3084150, 7745), $T03().Create(2054881, 6168301, 15490), $T03().Create(4109762, 12336602, 30980), $T03().Create(8219524, 7895988, 61961), $T03().Create(15065677, 4934640, 12392), $T03().Create(13354139, 9869281, 24784), $T03().Create(9931063, 2961347, 49569), $T03().Create(5341655, 14014042, 9913), $T03().Create(10683311, 11250868, 19827), $T03().Create(4589407, 5724521, 39655), $T03().Create(4273324, 1144904, 7931), $T03().Create(8546649, 2289808, 15862), $T03().Create(316082, 4579617, 31724), $T03().Create(632165, 9159234, 63448), $T03().Create(6837319, 11898176, 12689), $T03().Create(13674638, 7019136, 25379), $T03().Create(10572061, 14038273, 50758), $T03().Create(5469855, 12873984, 10151), $T03().Create(10939711, 8970752, 20303), $T03().Create(5102206, 1164289, 40607), $T03().Create(4375884, 6943744, 8121), $T03().Create(8751768, 13887488, 16242), $T03().Create(726321, 10997761, 32485), $T03().Create(3500707, 2199552, 6497), $T03().Create(7001415, 4399104, 12994), $T03().Create(14002830, 8798208, 25988), $T03().Create(11228444, 819201, 51977), $T03().Create(12312018, 6874726, 10395), $T03().Create(7846820, 13749453, 20790), $T03().Create(15693641, 10721690, 41581), $T03().Create(6494171, 5499781, 8316), $T03().Create(12988343, 10999562, 16632), $T03().Create(9199470, 5221909, 33265), $T03().Create(15261666, 1044381, 6653), $T03().Create(13746117, 2088763, 13306), $T03().Create(10715019, 4177527, 26612), $T03().Create(4652822, 8355055, 53224), $T03().Create(14352337, 15092783, 10644), $T03().Create(11927458, 13408351, 21289), $T03().Create(7077701, 10039487, 42579), $T03().Create(4770983, 15429670, 8515), $T03().Create(9541967, 14082124, 17031), $T03().Create(2306718, 11387033, 34063), $T03().Create(3816786, 12343736, 6812), $T03().Create(7633573, 7910256, 13625), $T03().Create(15267147, 15820512, 27250), $T03().Create(13757078, 14863809, 54501), $T03().Create(2751415, 6328205, 10900), $T03().Create(5502831, 12656410, 21800), $T03().Create(11005662, 8535604, 43601), $T03().Create(2201132, 5062564, 8720), $T03().Create(4402265, 10125128, 17440), $T03().Create(8804530, 3473040, 34881), $T03().Create(5116349, 4050051, 6976), $T03().Create(10232698, 8100102, 13952), $T03().Create(3688180, 16200205, 27904), $T03().Create(7376361, 15623194, 55809), $T03().Create(11541601, 16546411, 11161), $T03().Create(6305987, 16315607, 22323), $T03().Create(12611975, 15853998, 44647), $T03().Create(2522395, 9881686, 8929), $T03().Create(5044790, 2986156, 17859), $T03().Create(10089580, 5972312, 35718), $T03().Create(2017916, 11260792, 7143), $T03().Create(4035832, 5744368, 14287), $T03().Create(8071664, 11488736, 28574), $T03().Create(16143329, 6200256, 57149), $T03().Create(3228665, 14661824, 11429), $T03().Create(6457331, 12546432, 22859), $T03().Create(12914663, 8315648, 45719), $T03().Create(9293819, 15084902, 9143), $T03().Create(1810422, 13392589, 18287), $T03().Create(3620844, 10007962, 36575), $T03().Create(7435055, 2001592, 7315), $T03().Create(14870110, 4003184, 14630), $T03().Create(12963005, 8006369, 29260), $T03().Create(9148794, 16012739, 58520), $T03().Create(15251531, 3202547, 11704), $T03().Create(13725847, 6405095, 23408), $T03().Create(10674478, 12810191, 46816), $T03().Create(8845782, 5917481, 9363), $T03().Create(914348, 11834963, 18726), $T03().Create(1828696, 6892710, 37453), $T03().Create(10432068, 11444871, 7490), $T03().Create(4086921, 6112527, 14981), $T03().Create(8173843, 12225054, 29962), $T03().Create(16347686, 7672892, 59925), $T03().Create(9980423, 1534578, 11985), $T03().Create(3183631, 3069157, 23970), $T03().Create(6367263, 6138314, 47940), $T03().Create(14695225, 1227662, 9588), $T03().Create(12613234, 2455325, 19176), $T03().Create(8449253, 4910651, 38352), $T03().Create(11756180, 7693016, 7670), $T03().Create(6735144, 15386033, 15340), $T03().Create(13470289, 13994850, 30681), $T03().Create(10163362, 11212485, 61363), $T03().Create(12099002, 12308826, 12272), $T03().Create(7420788, 7840437, 24545), $T03().Create(14841576, 15680874, 49090), $T03().Create(16390088, 3136174, 9818), $T03().Create(16002960, 6272349, 19636), $T03().Create(15228704, 12544699, 39272), $T03().Create(6401184, 9219826, 7854), $T03().Create(12802368, 1662436, 15709), $T03().Create(8827520, 3324873, 31418), $T03().Create(877824, 6649747, 62836), $T03().Create(10241894, 4685392, 12567), $T03().Create(3706573, 9370785, 25134), $T03().Create(7413146, 1964354, 50269), $T03().Create(11548958, 13814643, 10053), $T03().Create(6320701, 10852071, 20107), $T03().Create(12641403, 4926926, 40215), $T03().Create(5883723, 985385, 8043), $T03().Create(11767447, 1970770, 16086), $T03().Create(6757679, 3941541, 32172), $T03().Create(11417865, 7499194, 6434), $T03().Create(6058515, 14998389, 12868), $T03().Create(12117030, 13219562, 25737), $T03().Create(7456844, 9661909, 51475), $T03().Create(14913141, 1932381, 10295), $T03().Create(13049067, 3864763, 20590), $T03().Create(9320918, 7729527, 41180), $T03().Create(8575070, 1545905, 8236), $T03().Create(372924, 3091811, 16472), $T03().Create(745848, 6183622, 32944), $T03().Create(3504612, 14658497, 6588), $T03().Create(7009225, 12539778, 13177), $T03().Create(14018451, 8302340, 26355), $T03().Create(11259686, 16604681, 52710), $T03().Create(5607380, 3320936, 10542), $T03().Create(11214761, 6641872, 21084), $T03().Create(5652306, 13283745, 42168), $T03().Create(11196790, 12723078, 8433), $T03().Create(5616365, 8668941, 16867), $T03().Create(11232731, 560666, 33735), $T03().Create(5601989, 112133, 6747), $T03().Create(11203978, 224266, 13494), $T03().Create(5630741, 448533, 26988), $T03().Create(11261483, 897066, 53976), $T03().Create(8963183, 3534856, 10795), $T03().Create(1149150, 7069713, 21590), $T03().Create(2298300, 14139426, 43180), $T03().Create(3815103, 2827885, 8636), $T03().Create(7630206, 5655770, 17272), $T03().Create(15260413, 11311540, 34544), $T03().Create(16473855, 15684080, 6908), $T03().Create(16170494, 14590945, 13817), $T03().Create(15563773, 12404675, 27635), $T03().Create(14350331, 8032135, 55271), $T03().Create(6225509, 4961870, 11054), $T03().Create(12451019, 9923740, 22108), $T03().Create(8124822, 3070265, 44217), $T03().Create(8335850, 7324939, 8843), $T03().Create(16671701, 14649878, 17686), $T03().Create(16566187, 12522541, 35373), $T03().Create(16735010, 12570837, 7074), $T03().Create(16692804, 8364459, 14149), $T03().Create(16608393, 16728919, 28298), $T03().Create(16439570, 16680623, 56597), $T03().Create(3287914, 10047011, 11319), $T03().Create(6575828, 3316806, 22639), $T03().Create(13151656, 6633612, 45278), $T03().Create(2630331, 11393052, 9055), $T03().Create(5260662, 6008888, 18111), $T03().Create(10521324, 12017776, 36222), $T03().Create(12170594, 9114441, 7244), $T03().Create(7563973, 1451667, 14489), $T03().Create(15127946, 2903334, 28978), $T03().Create(13478676, 5806669, 57956), $T03().Create(2695735, 4516777, 11591), $T03().Create(5391470, 9033554, 23182), $T03().Create(10782941, 1289892, 46365), $T03().Create(8867474, 257978, 9273), $T03().Create(957733, 515957, 18546), $T03().Create(1915466, 1031914, 37092), $T03().Create(3738536, 6917269, 7418), $T03().Create(7477073, 13834538, 14836), $T03().Create(14954146, 10891860, 29673), $T03().Create(13131076, 5006505, 59347), $T03().Create(9337101, 7712187, 11869), $T03().Create(1896987, 15424375, 23738), $T03().Create(3793974, 14071534, 47477), $T03().Create(4114238, 9525193, 9495), $T03().Create(8228476, 2273170, 18991), $T03().Create(16456952, 4546340, 37982), $T03().Create(10002276, 7620154, 7596), $T03().Create(3227337, 15240309, 15192), $T03().Create(6454675, 13703402, 30385), $T03().Create(12909351, 10629588, 60771), $T03().Create(16003643, 5481360, 12154), $T03().Create(15230070, 10962721, 24308), $T03().Create(13682924, 5148227, 48617), $T03().Create(16158357, 7740531, 9723), $T03().Create(15539499, 15481063, 19446), $T03().Create(14301782, 14184911, 38893), $T03().Create(16282129, 12903311, 7778), $T03().Create(15787042, 9029407, 15557), $T03().Create(14796869, 1281599, 31115), $T03().Create(12816522, 2563199, 62230), $T03().Create(15985077, 512639, 12446), $T03().Create(15192938, 1025279, 24892), $T03().Create(13608661, 2050559, 49784), $T03().Create(12788061, 13831884, 9956), $T03().Create(8798907, 10886553, 19913), $T03().Create(820599, 4995891, 39827), $T03().Create(10230449, 7710064, 7965), $T03().Create(3683682, 15420129, 15930), $T03().Create(7367365, 14063042, 31861), $T03().Create(14734731, 11348868, 63723), $T03().Create(6302389, 12336103, 12744), $T03().Create(12604779, 7894990, 25489), $T03().Create(8432342, 15789981, 50978), $T03().Create(15108241, 13224325, 10195), $T03().Create(13439266, 9671435, 20391), $T03().Create(10101317, 2565655, 40783), $T03().Create(12086593, 10579460, 8156), $T03().Create(7395970, 4381705, 16313), $T03().Create(14791940, 8763410, 32626), $T03().Create(6313831, 5108125, 6525), $T03().Create(12627662, 10216250, 13050), $T03().Create(8478108, 3655285, 26101), $T03().Create(179001, 7310571, 52202), $T03().Create(10102129, 8173000, 10440), $T03().Create(3427043, 16346001, 20880), $T03().Create(6854087, 15914786, 41761), $T03().Create(8081703, 6538400, 8352), $T03().Create(16163407, 13076800, 16704), $T03().Create(15549599, 9376385, 33409), $T03().Create(16531692, 15297049, 6681), $T03().Create(16286169, 13816883, 13363), $T03().Create(15795122, 10856551, 26727), $T03().Create(14813029, 4935887, 53455), $T03().Create(9673492, 987177, 10691), $T03().Create(2569768, 1974355, 21382), $T03().Create(5139537, 3948710, 42764), $T03().Create(14449680, 14211514, 8552), $T03().Create(12122144, 11645813, 17105), $T03().Create(7467073, 6514411, 34211), $T03().Create(8204301, 4658325, 6842), $T03().Create(16408602, 9316650, 13684), $T03().Create(16039988, 1856085, 27369), $T03().Create(15302760, 3712171, 54738), $T03().Create(16482324, 10808763, 10947), $T03().Create(16187433, 4840311, 21895), $T03().Create(15597651, 9680623, 43790), $T03().Create(13185859, 1936124, 8758), $T03().Create(9594503, 3872249, 17516), $T03().Create(2411791, 7744499, 35032), $T03().Create(3837801, 8259786, 7006), $T03().Create(7675603, 16519572, 14012), $T03().Create(15351206, 16261928, 28025), $T03().Create(13925196, 15746641, 56051), $T03().Create(9495925, 6504771, 11210), $T03().Create(2214635, 13009543, 22420), $T03().Create(4429270, 9241870, 44841), $T03().Create(4241297, 5203817, 8968), $T03().Create(8482594, 10407634, 17936), $T03().Create(187973, 4038053, 35873), $T03().Create(3393037, 10873940, 7174), $T03().Create(6786075, 4970664, 14349), $T03().Create(13572151, 9941328, 28698), $T03().Create(10367086, 3105441, 57397), $T03().Create(12139746, 7331974, 11479), $T03().Create(7502277, 14663949, 22958), $T03().Create(15004555, 12550682, 45917), $T03().Create(16422683, 9221022, 9183), $T03().Create(16068151, 1664829, 18367), $T03().Create(15359087, 3329659, 36734), $T03().Create(13138147, 14087704, 7346), $T03().Create(9499078, 11398193, 14693), $T03().Create(2220940, 6019171, 29387), $T03().Create(4441881, 12038342, 58774), $T03().Create(4243819, 15829441, 11754), $T03().Create(8487638, 14881666, 23509), $T03().Create(198061, 12986117, 47019), $T03().Create(3395055, 16018996, 9403), $T03().Create(6790111, 15260776, 18807), $T03().Create(13580222, 13744336, 37615), $T03().Create(6071487, 2748867, 7523), $T03().Create(12142975, 5497734, 15046), $T03().Create(7508734, 10995469, 30092), $T03().Create(15017469, 5213722, 60185), $T03().Create(9714380, 1042744, 12037), $T03().Create(2651544, 2085489, 24074), $T03().Create(5303089, 4170978, 48148), $T03().Create(4416061, 10900525, 9629), $T03().Create(8832122, 5023834, 19259), $T03().Create(887028, 10047669, 38518), $T03().Create(6888292, 12075863, 7703), $T03().Create(13776584, 7374510, 15407), $T03().Create(10775952, 14749021, 30814), $T03().Create(4774688, 12720827, 61629), $T03().Create(4310380, 15965938, 12325), $T03().Create(8620761, 15154660, 24651), $T03().Create(464307, 13532105, 49303), $T03().Create(10159191, 12772750, 9860), $T03().Create(3541166, 8768285, 19721), $T03().Create(7082332, 759354, 39443), $T03().Create(8127352, 10218200, 7888), $T03().Create(16254705, 3659184, 15777), $T03().Create(15732195, 7318369, 31554), $T03().Create(14687174, 14636739, 63108), $T03().Create(9648321, 12993677, 12621), $T03().Create(2519426, 9210139, 25243), $T03().Create(5038853, 1643062, 50487), $T03().Create(14429543, 7039498, 10097), $T03().Create(12081870, 14078997, 20194), $T03().Create(7386525, 11380779, 40389), $T03().Create(11543634, 15697928, 8077), $T03().Create(6310053, 14618641, 16155), $T03().Create(12620107, 12460066, 32311), $T03().Create(9234907, 5847456, 6462), $T03().Create(1692599, 11694913, 12924), $T03().Create(3385199, 6612610, 25849), $T03().Create(6770398, 13225220, 51698), $T03().Create(11420409, 12711373, 10339), $T03().Create(6063602, 8645531, 20679), $T03().Create(12127205, 513846, 41359), $T03().Create(2425441, 13524542, 8271), $T03().Create(4850882, 10271868, 16543), $T03().Create(9701764, 3766520, 33087), $T03().Create(8651239, 7464190, 6617), $T03().Create(525262, 14928381, 13234), $T03().Create(1050525, 13079546, 26469), $T03().Create(2101050, 9381876, 52939), $T03().Create(420210, 15298148, 10587), $T03().Create(840420, 13819080, 21175), $T03().Create(1680840, 10860944, 42351), $T03().Create(336168, 5527632, 8470), $T03().Create(672336, 11055264, 16940), $T03().Create(1344672, 5333312, 33881), $T03().Create(10335264, 4422105, 6776), $T03().Create(3893312, 8844211, 13552), $T03().Create(7786624, 911206, 27105), $T03().Create(15573248, 1822412, 54210), $T03().Create(9825536, 364482, 10842), $T03().Create(2873856, 728965, 21684), $T03().Create(5747712, 1457930, 43368), $T03().Create(11215872, 10357915, 8673), $T03().Create(5654528, 3938615, 17347), $T03().Create(11309056, 7877230, 34694), $T03().Create(15683584, 14997218, 6938), $T03().Create(14589952, 13217221, 13877), $T03().Create(12402688, 9657227, 27755), $T03().Create(8028160, 2537239, 55511), $T03().Create(1605632, 3862891, 11102), $T03().Create(3211264, 7725782, 22204), $T03().Create(6422528, 15451564, 44408), $T03().Create(7995392, 13156642, 8881), $T03().Create(15990784, 9536068, 17763), $T03().Create(15204352, 2294921, 35527), $T03().Create(13107200, 7169870, 7105), $T03().Create(9437184, 14339741, 14210), $T03().Create(2097152, 11902267, 28421), $T03().Create(4194304, 7027318, 56843), $T03().Create(4194304, 11471793, 11368), $T03().Create(8388608, 6166370, 22737), $T03().Create(0, 12332741, 45474), $T03().Create(0, 15888321, 9094), $T03().Create(0, 14999426, 18189), $T03().Create(0, 13221636, 36379), $T03().Create(0, 16066100, 7275), $T03().Create(0, 15354984, 14551), $T03().Create(0, 13932752, 29103), $T03().Create(0, 11088288, 58207), $T03().Create(0, 8928544, 11641), $T03().Create(0, 1079872, 23283), $T03().Create(0, 2159744, 46566), $T03().Create(0, 3787392, 9313), $T03().Create(0, 7574784, 18626), $T03().Create(0, 15149568, 37252), $T03().Create(0, 9740800, 7450), $T03().Create(0, 2704384, 14901), $T03().Create(0, 5408768, 29802), $T03().Create(0, 10817536, 59604), $T03().Create(0, 15585280, 11920), $T03().Create(0, 14393344, 23841), $T03().Create(0, 12009472, 47683), $T03().Create(0, 12468224, 9536), $T03().Create(0, 8159232, 19073), $T03().Create(0, 16318464, 38146), $T03().Create(0, 6619136, 7629), $T03().Create(0, 13238272, 15258), $T03().Create(0, 9699328, 30517), $T03().Create(0, 2621440, 61035), $T03().Create(0, 524288, 12207), $T03().Create(0, 1048576, 24414), $T03().Create(0, 2097152, 48828), $T03().Create(0, 10485760, 9765), $T03().Create(0, 4194304, 19531), $T03().Create(0, 8388608, 39062), $T03().Create(0, 8388608, 7812), $T03().Create(0, 0, 15625), $T03().Create(0, 0, 31250), $T03().Create(0, 0, 62500), $T03().Create(0, 0, 12500), $T03().Create(0, 0, 25000), $T03().Create(0, 0, 50000), $T03().Create(0, 0, 10000), $T03().Create(0, 0, 20000), $T03().Create(0, 0, 40000), $T03().Create(0, 0, 8000), $T03().Create(0, 0, 16000), $T03().Create(0, 0, 32000), $T03().Create(0, 0, 64000), $T03().Create(0, 0, 12800), $T03().Create(0, 0, 25600), $T03().Create(0, 0, 51200), $T03().Create(0, 0, 10240), $T03().Create(0, 0, 20480), $T03().Create(0, 0, 40960), $T03().Create(0, 0, 8192), $T03().Create(0, 0, 16384), $T03().Create(0, 0, 32768), $T03().Create(10066329, 10066329, 6553), $T03().Create(3355443, 3355443, 13107), $T03().Create(6710886, 6710886, 26214), $T03().Create(13421772, 13421772, 52428), $T03().Create(2684354, 12750684, 10485), $T03().Create(5368709, 8724152, 20971), $T03().Create(10737418, 671088, 41943), $T03().Create(5502926, 10200547, 8388), $T03().Create(11005853, 3623878, 16777), $T03().Create(5234491, 7247757, 33554), $T03().Create(4402341, 14871324, 6710), $T03().Create(8804682, 12965432, 13421), $T03().Create(832149, 9153649, 26843), $T03().Create(1664299, 1530082, 53687), $T03().Create(13754632, 7016902, 10737), $T03().Create(10732049, 14033805, 21474), $T03().Create(4686883, 11290395, 42949), $T03().Create(14359149, 15679851, 8589), $T03().Create(11941082, 14582487, 17179), $T03().Create(7104949, 12387759, 34359), $T03().Create(11487319, 15899324, 6871), $T03().Create(6197423, 15021433, 13743), $T03().Create(12394846, 13265650, 27487), $T03().Create(8012476, 9754085, 54975), $T03().Create(1602495, 1950817, 10995), $T03().Create(3204990, 3901634, 21990), $T03().Create(6409980, 7803268, 43980), $T03().Create(11348325, 1560653, 8796), $T03().Create(5919435, 3121307, 17592), $T03().Create(11838871, 6242614, 35184), $T03().Create(12434103, 14670295, 7036), $T03().Create(8090991, 12563375, 14073), $T03().Create(16181983, 8349534, 28147), $T03().Create(15586750, 16699069, 56294), $T03().Create(13183679, 16761586, 11258), $T03().Create(9590143, 16745957, 22517), $T03().Create(2403070, 16714699, 45035), $T03().Create(13902386, 3342939, 9007), $T03().Create(11027557, 6685879, 18014), $T03().Create(5277899, 13371759, 36028), $T03().Create(7766466, 12740681, 7205), $T03().Create(15532932, 8704146, 14411), $T03().Create(14288649, 631077, 28823), $T03().Create(11800083, 1262155, 57646), $T03().Create(5715459, 3607874, 11529), $T03().Create(11430919, 7215748, 23058), $T03().Create(6084623, 14431497, 46116), $T03().Create(11283254, 6241742, 9223), $T03().Create(5789292, 12483485, 18446), $T03().Create(11578585, 8189754, 36893), $T03().Create(9026603, 11704280, 7378), $T03().Create(1275990, 6631345, 14757), $T03().Create(2551981, 13262690, 29514), $T03().Create(5103963, 9748164, 59029), $T03().Create(11087122, 15371405, 11805), $T03().Create(5397028, 13965595, 23611), $T03().Create(10794057, 11153974, 47223), $T03().Create(8869697, 12297124, 9444), $T03().Create(962179, 7817033, 18889), $T03().Create(1924359, 15634066, 37778), $T03().Create(13806644, 13193142, 7555), $T03().Create(10836073, 9609069, 15111), $T03().Create(4894930, 2440923, 30223), $T03().Create(9789861, 4881846, 60446), $T03().Create(8668858, 4331812, 12089), $T03().Create(560501, 8663625, 24178), $T03().Create(1121002, 550034, 48357), $T03().Create(3579643, 6820893, 9671), $T03().Create(7159287, 13641786, 19342), $T03().Create(14318574, 10506356, 38685), $T03().Create(6219158, 2101271, 7737), $T03().Create(12438316, 4202542, 15474), $T03().Create(8099416, 8405085, 30948), $T03().Create(16198833, 32954, 61897), $T03().Create(6595209, 6717477, 12379), $T03().Create(13190419, 13434954, 24758), $T03().Create(9603623, 10092693, 49517), $T03().Create(1920724, 8729425, 9903), $T03().Create(3841449, 681634, 19807), $T03().Create(7682898, 1363268, 39614), $T03().Create(8247466, 13694426, 7922), $T03().Create(16494932, 10611636, 15845), $T03().Create(16212648, 4446057, 31691), $T03().Create(15648081, 8892115, 63382), $T03().Create(9840502, 8489309, 12676), $T03().Create(2903789, 201403, 25353), $T03().Create(5807578, 402806, 50706), $T03().Create(7872402, 3436004, 10141), $T03().Create(15744804, 6872008, 20282), $T03().Create(14712392, 13744017, 40564), $T03().Create(6297921, 16170576, 8112), $T03().Create(12595843, 15563936, 16225), $T03().Create(8414470, 14350657, 32451), $T03().Create(11749223, 6225574, 6490), $T03().Create(6721231, 12451149, 12980), $T03().Create(13442463, 8125082, 25961), $T03().Create(10107710, 16250165, 51922), $T03().Create(8732428, 9960919, 10384), $T03().Create(687640, 3144623, 20769), $T03().Create(1375281, 6289246, 41538), $T03().Create(13696829, 11324178, 8307), $T03().Create(10616442, 5871141, 16615), $T03().Create(4455668, 11742283, 33230), $T03().Create(10957463, 2348456, 6646), $T03().Create(5137710, 4696913, 13292), $T03().Create(10275421, 9393826, 26584), $T03().Create(3773626, 2010437, 53169), $T03().Create(4110168, 13823860, 10633), $T03().Create(8220336, 10870504, 21267), $T03().Create(16440673, 4963792, 42535), $T03().Create(9999021, 992758, 8507), $T03().Create(3220826, 1985517, 17014), $T03().Create(6441652, 3971034, 34028), $T03().Create(7999216, 10860536, 6805), $T03().Create(15998433, 4943856, 13611), $T03().Create(15219651, 9887713, 27222), $T03().Create(13662087, 2998211, 54445), $T03().Create(6087860, 599642, 10889), $T03().Create(12175721, 1199284, 21778), $T03().Create(7574226, 2398569, 43556), $T03().Create(1514845, 3835157, 8711), $T03().Create(3029690, 7670314, 17422), $T03().Create(6059381, 15340628, 34844), $T03().Create(7922762, 16489898, 6968), $T03().Create(15845525, 16202580, 13937), $T03().Create(14913834, 15627945, 27875), $T03().Create(13050453, 14478675, 55751), $T03().Create(5965533, 6251178, 11150), $T03().Create(11931067, 12502356, 22300), $T03().Create(7084919, 8227497, 44601), $T03().Create(11483313, 5000942, 8920), $T03().Create(6189411, 10001885, 17840), $T03().Create(12378822, 3226554, 35681), $T03().Create(2475764, 4000754, 7136), $T03().Create(4951528, 8001508, 14272), $T03().Create(9903057, 16003016, 28544), $T03().Create(3028899, 15228817, 57089), $T03().Create(3961223, 16467536, 11417), $T03().Create(7922446, 16157856, 22835), $T03().Create(15844892, 15538496, 45671), $T03().Create(9879864, 6463142, 9134), $T03().Create(2982513, 12926285, 18268), $T03().Create(5965027, 9075354, 36537), $T03().Create(4548448, 8525957, 7307), $T03().Create(9096897, 274698, 14615), $T03().Create(1416578, 549397, 29230), $T03().Create(2833157, 1098794, 58460), $T03().Create(13988404, 219758, 11692), $T03().Create(11199592, 439517, 23384), $T03().Create(5621969, 879035, 46768), $T03().Create(11190723, 10242136, 9353), $T03().Create(5604230, 3707057, 18707), $T03().Create(11208461, 7414114, 37414), $T03().Create(12308021, 14904595, 7482), $T03().Create(7838827, 13031975, 14965), $T03().Create(15677655, 9286734, 29931), $T03().Create(14578095, 1796253, 59863), $T03().Create(6271062, 10425580, 11972), $T03().Create(12542124, 4073944, 23945), $T03().Create(8307033, 8147889, 47890), $T03().Create(15083179, 1629577, 9578), $T03().Create(13389142, 3259155, 19156), $T03().Create(10001069, 6518311, 38312), $T03().Create(12066543, 8014548, 7662), $T03().Create(7355871, 16029097, 15324), $T03().Create(14711742, 15280978, 30649), $T03().Create(12646268, 13784741, 61299), $T03().Create(2529253, 16178721, 12259), $T03().Create(5058507, 15580226, 24519), $T03().Create(10117014, 14383236, 49039), $T03().Create(2023402, 16298420, 9807), $T03().Create(4046805, 15819624, 19615), $T03().Create(8093611, 14862032, 39231), $T03().Create(11685051, 6327849, 7846), $T03().Create(6592887, 12655699, 15692), $T03().Create(13185775, 8534182, 31385), $T03().Create(9594335, 291149, 62771), $T03().Create(1918867, 3413673, 12554), $T03().Create(3837734, 6827346, 25108), $T03().Create(7675468, 13654692, 50216), $T03().Create(11601423, 6086381, 10043), $T03().Create(6425630, 12172763, 20086), $T03().Create(12851261, 7568310, 40173), $T03().Create(12636581, 11579991, 8034), $T03().Create(8495947, 6382767, 16069), $T03().Create(214679, 12765535, 32138), $T03().Create(429358, 8753854, 64277), $T03().Create(3441314, 8461657, 12855), $T03().Create(6882629, 146098, 25711), $T03().Create(13765259, 292196, 51422), $T03().Create(12819381, 6769325, 10284), $T03().Create(8861547, 13538651, 20568), $T03().Create(945878, 10300087, 41137), $T03().Create(13610948, 8770903, 8227), $T03().Create(10444680, 764591, 16455), $T03().Create(4112145, 1529183, 32910), $T03().Create(10888758, 305836, 6582), $T03().Create(5000301, 611673, 13164), $T03().Create(10000603, 1223346, 26328), $T03().Create(3223990, 2446693, 52656), $T03().Create(14066570, 3844781, 10531), $T03().Create(11355925, 7689563, 21062), $T03().Create(5934635, 15379127, 42124), $T03().Create(4542370, 16497598, 8424), $T03().Create(9084740, 16217980, 16849), $T03().Create(1392265, 15658745, 33699), $T03().Create(13700225, 16553521, 6739), $T03().Create(10623235, 16329827, 13479), $T03().Create(4469255, 15882439, 26959), $T03().Create(8938510, 14987662, 53919), $T03().Create(5143145, 16419305, 10783), $T03().Create(10286290, 16061394, 21567), $T03().Create(3795365, 15345573, 43135), $T03().Create(10825402, 3069114, 8627), $T03().Create(4873589, 6138229, 17254), $T03().Create(9747178, 12276458, 34508), $T03().Create(5304878, 12521621, 6901), $T03().Create(10609757, 8266026, 13803), $T03().Create(4442299, 16532053, 27606), $T03().Create(8884599, 16286890, 55213), $T03().Create(11843249, 13323707, 11042), $T03().Create(6909282, 9870199, 22085), $T03().Create(13818565, 2963182, 44171), $T03().Create(12830042, 3948079, 8834), $T03().Create(8882869, 7896159, 17668), $T03().Create(988523, 15792319, 35336), $T03().Create(197704, 6513907, 7067), $T03().Create(395409, 13027814, 14134), $T03().Create(790818, 9278412, 28269), $T03().Create(1581636, 1779608, 56539), $T03().Create(7027213, 13777694, 11307), $T03().Create(14054427, 10778172, 22615), $T03().Create(11331639, 4779129, 45231), $T03().Create(2266327, 4311269, 9046), $T03().Create(4532655, 8622538, 18092), $T03().Create(9065311, 467860, 36185), $T03().Create(1813062, 93572, 7237), $T03().Create(3626124, 187144, 14474), $T03().Create(7252249, 374288, 28948), $T03().Create(14504498, 748576, 57896), $T03().Create(9611786, 3505158, 11579), $T03().Create(2446356, 7010317, 23158), $T03().Create(4892712, 14020634, 46316), $T03().Create(978542, 6159570, 9263), $T03().Create(1957084, 12319140, 18526), $T03().Create(3914169, 7861064, 37053), $T03().Create(7493720, 11638542, 7410), $T03().Create(14987440, 6499868, 14821), $T03().Create(13197665, 12999737, 29642), $T03().Create(9618114, 9222259, 59285), $T03().Create(15345395, 1844451, 11857), $T03().Create(13913575, 3688903, 23714), $T03().Create(11049934, 7377807, 47428), $T03().Create(2209986, 11541891, 9485), $T03().Create(4419973, 6306566, 18971), $T03().Create(8839947, 12613132, 37942), $T03().Create(15189762, 9233512, 7588), $T03().Create(13602308, 1689809, 15177), $T03().Create(10427401, 3379619, 30354), $T03().Create(4077587, 6759239, 60708), $T03().Create(7526403, 11418177, 12141), $T03().Create(15052807, 6059138, 24283), $T03().Create(13328399, 12118277, 48566), $T03().Create(12732009, 5779098, 9713), $T03().Create(8686802, 11558197, 19426), $T03().Create(596389, 6339179, 38853), $T03().Create(6830164, 11334165, 7770), $T03().Create(13660328, 5891114, 15541), $T03().Create(10543441, 11782229, 31082), $T03().Create(4309666, 6787243, 62165), $T03().Create(10928262, 1357448, 12433), $T03().Create(5079309, 2714897, 24866), $T03().Create(10158619, 5429794, 49732), $T03().Create(5387167, 7796845, 9946), $T03().Create(10774334, 15593690, 19892), $T03().Create(4771452, 14410165, 39785), $T03().Create(954290, 2882033, 7957), $T03().Create(1908581, 5764066, 15914), $T03().Create(3817162, 11528132, 31828), $T03().Create(7634324, 6279048, 63657), $T03().Create(1526864, 7966696, 12731), $T03().Create(3053729, 15933392, 25462), $T03().Create(6107459, 15089568, 50925), $T03().Create(11287821, 3017913, 10185), $T03().Create(5798427, 6035827, 20370), $T03().Create(11596854, 12071654, 40740), $T03().Create(15741143, 2414330, 8148), $T03().Create(14705071, 4828661, 16296), $T03().Create(12632926, 9657323, 32592), $T03().Create(2526585, 8642351, 6518), $T03().Create(5053170, 507486, 13037), $T03().Create(10106341, 1014972, 26074), $T03().Create(3435466, 2029945, 52148), $T03().Create(10753422, 10472318, 10429), $T03().Create(4729629, 4167421, 20859), $T03().Create(9459259, 8334842, 41718), $T03().Create(1891851, 11733298, 8343), $T03().Create(3783703, 6689380, 16687), $T03().Create(7567407, 13378760, 33374), $T03().Create(14935254, 16097524, 6674), $T03().Create(13093292, 15417833, 13349), $T03().Create(9409369, 14058451, 26699), $T03().Create(2041522, 11339687, 53399), $T03().Create(3763747, 15689710, 10679), $T03().Create(7527495, 14602204, 21359), $T03().Create(15054990, 12427192, 42719), $T03().Create(6366441, 15907211, 8543), $T03().Create(12732882, 15037206, 17087), $T03().Create(8688549, 13297197, 34175), $T03().Create(8448596, 2659439, 6835), $T03().Create(119976, 5318879, 13670), $T03().Create(239953, 10637758, 27340), $T03().Create(479906, 4498300, 54681), $T03().Create(3451424, 4255103, 10936), $T03().Create(6902848, 8510206, 21872), $T03().Create(13805697, 243196, 43745), $T03().Create(6116582, 48639, 8749), $T03().Create(12233165, 97278, 17498), $T03().Create(7689115, 194557, 34996), $T03().Create(11604152, 3394354, 6999), $T03().Create(6431089, 6788709, 13998), $T03().Create(12862178, 13577418, 27996), $T03().Create(8947140, 10377621, 55993), $T03().Create(15211200, 12141853, 11198), $T03().Create(13645185, 7506491, 22397), $T03().Create(10513155, 15012983, 44794), $T03().Create(8813517, 16424369, 8958), $T03().Create(849819, 16071523, 17917), $T03().Create(1699638, 15365830, 35835), $T03().Create(339927, 3073166, 7167), $T03().Create(679855, 6146332, 14334), $T03().Create(1359710, 12292664, 28668), $T03().Create(2719421, 7808112, 57337), $T03().Create(13965657, 8272508, 11467), $T03().Create(11154098, 16545017, 22934), $T03().Create(5530980, 16312819, 45869), $T03().Create(11172525, 16684336, 9173), $T03().Create(5567835, 16591457, 18347), $T03().Create(11135670, 16405698, 36695), $T03().Create(12293463, 3281139, 7339), $T03().Create(7809711, 6562279, 14678), $T03().Create(15619422, 13124558, 29356), $T03().Create(14461629, 9471901, 58713), $T03().Create(16314098, 11960709, 11742), $T03().Create(15850981, 7144203, 23485), $T03().Create(14924747, 14288407, 46970), $T03().Create(9695835, 2857681, 9394), $T03().Create(2614455, 5715363, 18788), $T03().Create(5228911, 11430726, 37576), $T03().Create(7756668, 5641588, 7515), $T03().Create(15513337, 11283176, 15030), $T03().Create(14249458, 5789137, 30061), $T03().Create(11721701, 11578275, 60122), $T03().Create(9055226, 9026541, 12024), $T03().Create(1333237, 1275867, 24049), $T03().Create(2666474, 2551734, 48098), $T03().Create(7244181, 10576676, 9619), $T03().Create(14488362, 4376136, 19239), $T03().Create(12199509, 8752273, 38478), $T03().Create(5795345, 11816784, 7695), $T03().Create(11590690, 6856352, 15391), $T03().Create(6404164, 13712705, 30782), $T03().Create(12808328, 10648194, 61565), $T03().Create(15983438, 2129638, 12313), $T03().Create(15189660, 4259277, 24626), $T03().Create(13602105, 8518555, 49252), $T03().Create(9431307, 8414597, 9850), $T03().Create(2085399, 51979, 19701), $T03().Create(4170798, 103958, 39402), $T03().Create(834159, 6731678, 7880), $T03().Create(1668319, 13463356, 15760), $T03().Create(3336638, 10149496, 31521), $T03().Create(6673277, 3521776, 63043), $T03().Create(14756428, 10770684, 12608), $T03().Create(12735640, 4764153, 25217), $T03().Create(8694065, 9528307, 50434), $T03().Create(5094256, 15327434, 10086), $T03().Create(10188512, 13877652, 20173), $T03().Create(3599808, 10978089, 40347), $T03().Create(4075404, 8906504, 8069), $T03().Create(8150809, 1035792, 16139), $T03().Create(16301619, 2071584, 32278), $T03().Create(9971210, 10480646, 6455), $T03().Create(3165204, 4184077, 12911), $T03().Create(6330409, 8368154, 25822), $T03().Create(12660818, 16736308, 51644), $T03().Create(9243050, 16769034, 10328), $T03().Create(1708884, 16760853, 20657), $T03().Create(3417768, 16744490, 41315), $T03().Create(683553, 3348898, 8263), $T03().Create(1367107, 6697796, 16526), $T03().Create(2734215, 13395592, 33052), $T03().Create(13968615, 9390004, 6610), $T03().Create(11160015, 2002793, 13221), $T03().Create(5542815, 4005587, 26442), $T03().Create(11085630, 8011174, 52884), $T03().Create(12283455, 15024007, 10576), $T03().Create(7789695, 13270799, 21153), $T03().Create(15579390, 9764382, 42307), $T03().Create(16537650, 8663762, 8461), $T03().Create(16298085, 550309, 16923), $T03().Create(15818955, 1100619, 33846), $T03().Create(3163791, 3575567, 6769), $T03().Create(6327582, 7151134, 13538), $T03().Create(12655164, 14302268, 27076), $T03().Create(8533113, 11827321, 54153), $T03().Create(15128395, 12431793, 10830), $T03().Create(13479574, 8086371, 21661), $T03().Create(10181933, 16172743, 43322), $T03().Create(2036386, 9945435, 8664), $T03().Create(4072773, 3113654, 17329), $T03().Create(8145547, 6227308, 34658), $T03().Create(4984552, 11311791, 6931), $T03().Create(9969105, 5846366, 13863), $T03().Create(3160994, 11692733, 27726), $T03().Create(6321988, 6608250, 55453), $T03().Create(11330727, 11387979, 11090), $T03().Create(5884238, 5998743, 22181), $T03().Create(11768477, 11997486, 44362), $T03().Create(12420025, 9110383, 8872), $T03().Create(8062834, 1443551, 17745), $T03().Create(16125668, 2887102, 35490), $T03().Create(9936020, 577420, 7098), $T03().Create(3094824, 1154841, 14196), $T03().Create(6189648, 2309682, 28392), $T03().Create(12379296, 4619364, 56784), $T03().Create(12542188, 14345645, 11356), $T03().Create(8307161, 11914075, 22713), $T03().Create(16614323, 7050934, 45427), $T03().Create(6678307, 8121073, 9085), $T03().Create(13356615, 16242146, 18170), $T03().Create(9936015, 15707077, 36341), $T03().Create(12053532, 6496858, 7268), $T03().Create(7329849, 12993717, 14536), $T03().Create(14659699, 9210218, 29073), $T03().Create(12542182, 1643221, 58147), $T03().Create(12574766, 7039530, 11629), $T03().Create(8372316, 14079061, 23258), $T03().Create(16744632, 11380906, 46517), $T03().Create(13415256, 8987067, 9303), $T03().Create(10053296, 1196919, 18607), $T03().Create(3329376, 2393839, 37214), $T03().Create(10732204, 13900540, 7442), $T03().Create(4687193, 11023865, 14885), $T03().Create(9374387, 5270514, 29771), $T03().Create(1971558, 10541029, 59542), $T03().Create(3749754, 8819092, 11908), $T03().Create(7499509, 860968, 23817), $T03().Create(14999019, 1721936, 47634), $T03().Create(2999803, 13766160, 9526), $T03().Create(5999607, 10755104, 19053), $T03().Create(11999215, 4732992, 38107), $T03().Create(15821615, 7657484, 7621), $T03().Create(14866015, 15314969, 15242), $T03().Create(12954815, 13852723, 30485), $T03().Create(9132415, 10928231, 60971), $T03().Create(8537369, 5541089, 12194), $T03().Create(297522, 11082179, 24388), $T03().Create(595045, 5387142, 48777), $T03().Create(13540781, 7788314, 9755), $T03().Create(10304347, 15576629, 19510), $T03().Create(3831479, 14376043, 39021), $T03().Create(14188068, 6230651, 7804), $T03().Create(11598921, 12461303, 15608), $T03().Create(6420627, 8145391, 31217), $T03().Create(12841254, 16290782, 62434), $T03().Create(5923694, 16679929, 12486), $T03().Create(11847388, 16582642, 24973), $T03().Create(6917560, 16388069, 49947), $T03().Create(4738955, 9988500, 9989), $T03().Create(9477910, 3199784, 19979), $T03().Create(2178605, 6399569, 39958), $T03().Create(7146607, 11346243, 7991), $T03().Create(14293214, 5915270, 15983), $T03().Create(11809213, 11830541, 31966), $T03().Create(6841211, 6883867, 63933), $T03().Create(1368242, 11443103, 12786), $T03().Create(2736484, 6108990, 25573), $T03().Create(5472968, 12217980, 51146), $T03().Create(4450036, 5799039, 10229), $T03().Create(8900073, 11598078, 20458), $T03().Create(1022931, 6418941, 40917), $T03().Create(10270915, 7994674, 8183), $T03().Create(3764615, 15989349, 16366), $T03().Create(7529231, 15201482, 32733), $T03().Create(1505846, 13106626, 6546), $T03().Create(3011692, 9436036, 13093), $T03().Create(6023385, 2094856, 26187), $T03().Create(12046771, 4189712, 52374), $T03().Create(5764797, 14259715, 10474), $T03().Create(11529594, 11742214, 20949), $T03().Create(6281973, 6707213, 41899), $T03().Create(7967281, 14763215, 8379), $T03().Create(15934562, 12749214, 16759), $T03().Create(15091908, 8721213, 33519), $T03().Create(9729268, 15166015, 6703), $T03().Create(2681320, 13554815, 13407), $T03().Create(5362640, 10332414, 26815), $T03().Create(10725280, 3887612, 53631), $T03().Create(12211385, 4132965, 10726), $T03().Create(7645555, 8265931, 21452), $T03().Create(15291111, 16531862, 42904), $T03().Create(6413665, 16728145, 8580), $T03().Create(12827330, 16679074, 17161), $T03().Create(8877445, 16580933, 34323), $T03().Create(5130932, 13382516, 6864), $T03().Create(10261864, 9987816, 13729), $T03().Create(3746513, 3198417, 27459), $T03().Create(7493026, 6396834, 54918), $T03().Create(8209491, 11345696, 10983), $T03().Create(16418983, 5914176, 21967), $T03().Create(16060751, 11828353, 43934), $T03().Create(9923036, 15787443, 8786), $T03().Create(3068857, 14797671, 17573), $T03().Create(6137714, 12818126, 35147), $T03().Create(11293872, 9274511, 7029), $T03().Create(5810528, 1771807, 14059), $T03().Create(11621057, 3543614, 28118), $T03().Create(6464899, 7087229, 56236), $T03().Create(1292979, 4772889, 11247), $T03().Create(2585959, 9545778, 22494), $T03().Create(5171919, 2314340, 44989), $T03().Create(14456156, 13884640, 8997), $T03().Create(12135097, 10992065, 17995), $T03().Create(7492979, 5206915, 35991), $T03().Create(4854039, 4396826, 7198), $T03().Create(9708078, 8793652, 14396), $T03().Create(2638940, 810089, 28793), $T03().Create(5277880, 1620178, 57586), $T03().Create(14477348, 3679478, 11517), $T03().Create(12177481, 7358957, 23034), $T03().Create(7577747, 14717915, 46068), $T03().Create(11581879, 13009912, 9213), $T03().Create(6386542, 9242609, 18427), $T03().Create(12773084, 1708002, 36855), $T03().Create(9265503, 341600, 7371), $T03().Create(1753790, 683201, 14742), $T03().Create(3507581, 1366402, 29484), $T03().Create(7015162, 2732804, 58968), $T03().Create(8113918, 10612890, 11793), $T03().Create(16227837, 4448564, 23587), $T03().Create(15678459, 8897129, 47174), $T03().Create(13202021, 15201198, 9434), $T03().Create(9626826, 13625181, 18869), $T03().Create(2476437, 10473147, 37739), $T03().Create(3850730, 15516402, 7547), $T03().Create(7701461, 14255588, 15095), $T03().Create(15402923, 11733960, 30191), $T03().Create(14028630, 6690705, 60383), $T03().Create(12872055, 11404470, 12076), $T03().Create(8966895, 6031725, 24153), $T03().Create(1156574, 12063451, 48306), $T03().Create(6942201, 5768133, 9661), $T03().Create(13884402, 11536266, 19322), $T03().Create(10991589, 6295317, 38645), $T03().Create(8909204, 1259063, 7729), $T03().Create(1041192, 2518127, 15458), $T03().Create(2082384, 5036254, 30916), $T03().Create(4164769, 10072508, 61832), $T03().Create(832953, 8725388, 12366), $T03().Create(1665907, 673560, 24733), $T03().Create(3331815, 1347120, 49466), $T03().Create(4021806, 3624867, 9893), $T03().Create(8043612, 7249734, 19786), $T03().Create(16087225, 14499468, 39572), $T03().Create(3217445, 9610780, 7914), $T03().Create(6434890, 2444344, 15829), $T03().Create(12869780, 4888688, 31658), $T03().Create(8962344, 9777377, 63316), $T03().Create(11858798, 5310918, 12663), $T03().Create(6940381, 10621837, 25326), $T03().Create(13880762, 4466458, 50653), $T03().Create(6131595, 10959621, 10130), $T03().Create(12263191, 5142026, 20261), $T03().Create(7749166, 10284053, 40522), $T03().Create(1549833, 8767697, 8104), $T03().Create(3099666, 758178, 16209), $T03().Create(6199333, 1516356, 32418), $T03().Create(14661639, 10369600, 6483), $T03().Create(12546062, 3961985, 12967), $T03().Create(8314909, 7923971, 25934), $T03().Create(16629819, 15847942, 51868), $T03().Create(3325963, 13235918, 10373), $T03().Create(6651927, 9694620, 20747), $T03().Create(13303855, 2612024, 41495), $T03().Create(16082543, 522404, 8299), $T03().Create(15387871, 1044809, 16598), $T03().Create(13998527, 2089619, 33196), $T03().Create(2799705, 3773367, 6639), $T03().Create(5599411, 7546734, 13278), $T03().Create(11198822, 15093468, 26556), $T03().Create(5620428, 13409721, 53113), $T03().Create(14545858, 12748273, 10622), $T03().Create(12314500, 8719331, 21245), $T03().Create(7851785, 661447, 42491), $T03().Create(11636686, 3487732, 8498), $T03().Create(6496157, 6975465, 16996), $T03().Create(12992315, 13950930, 33992), $T03().Create(9309349, 9501072, 6798), $T03().Create(1841482, 2224929, 13597), $T03().Create(3682965, 4449858, 27194), $T03().Create(7365931, 8899716, 54388), $T03().Create(14894959, 11846272, 10877), $T03().Create(13012702, 6915329, 21755), $T03().Create(9248188, 13830659, 43510), $T03().Create(15271410, 2766131, 8702), $T03().Create(13765604, 5532263, 17404), $T03().Create(10753993, 11064527, 34808), $T03().Create(2150798, 12279235, 6961), $T03().Create(4301597, 7781254, 13923), $T03().Create(8603195, 15562508, 27846), $T03().Create(429174, 14347801, 55693), $T03().Create(13507607, 12935889, 11138), $T03().Create(10237999, 9094563, 22277), $T03().Create(3698782, 1411911, 44555), $T03().Create(4095199, 282382, 8911), $T03().Create(8190399, 564764, 17822), $T03().Create(16380798, 1129528, 35644), $T03().Create(9987046, 13647678, 7128), $T03().Create(3196876, 10518141, 14257), $T03().Create(6393752, 4259066, 28515), $T03().Create(12787505, 8518132, 57030), $T03().Create(9268387, 1703626, 11406), $T03().Create(1759558, 3407253, 22812), $T03().Create(3519117, 6814506, 45624), $T03().Create(703823, 14784674, 9124), $T03().Create(1407647, 12792132, 18249), $T03().Create(2815294, 8807048, 36499), $T03().Create(7273945, 15183182, 7299), $T03().Create(14547890, 13589148, 14599), $T03().Create(12318565, 10401081, 29199), $T03().Create(7859914, 4024947, 58399), $T03().Create(4927426, 14226762, 11679), $T03().Create(9854852, 11676308, 23359), $T03().Create(2932488, 6575401, 46719), $T03().Create(586497, 14736853, 9343), $T03().Create(1172995, 12696490, 18687), $T03().Create(2345990, 8615764, 37375), $T03().Create(13890970, 1723152, 7475), $T03().Create(11004725, 3446305, 14950), $T03().Create(5232235, 6892611, 29900), $T03().Create(10464471, 13785222, 59800), $T03().Create(8803780, 2757044, 11960), $T03().Create(830345, 5514089, 23920), $T03().Create(1660690, 11028178, 47840), $T03().Create(10398467, 2205635, 9568), $T03().Create(4019719, 4411271, 19136), $T03().Create(8039438, 8822542, 38272), $T03().Create(15029660, 8475394, 7654), $T03().Create(13282105, 173573, 15309), $T03().Create(9786994, 347147, 30618), $T03().Create(2796772, 694295, 61236), $T03().Create(3914797, 3494302, 12247), $T03().Create(7829595, 6988604, 24494), $T03().Create(15659190, 13977208, 48988), $T03().Create(6487281, 12861771, 9797), $T03().Create(12974562, 8946326, 19595), $T03().Create(9171909, 1115437, 39191), $T03().Create(11900711, 3578530, 7838), $T03().Create(7024206, 7157061, 15676), $T03().Create(14048413, 14314122, 31352), $T03().Create(11319611, 11851029, 62705), $T03().Create(15685695, 2370205, 12541), $T03().Create(14594174, 4740411, 25082), $T03().Create(12411132, 9480823, 50164), $T03().Create(9193112, 15317937, 10032), $T03().Create(1609009, 13858659, 20065), $T03().Create(3218019, 10940102, 40131), $T03().Create(10709933, 5543463, 8026), $T03().Create(4642651, 11086927, 16052), $T03().Create(9285302, 5396638, 32105), $T03().Create(1793388, 10793277, 64210), $T03().Create(7069564, 2158655, 12842), $T03().Create(14139128, 4317310, 25684), $T03().Create(11501040, 8634621, 51368), $T03().Create(15721980, 11793253, 10273), $T03().Create(14666745, 6809291, 20547), $T03().Create(12556275, 13618583, 41094), $T03().Create(9222141, 16145489, 8218), $T03().Create(1667067, 15513763, 16437), $T03().Create(3334134, 14250310, 32875), $T03().Create(666826, 2850062, 6575), $T03().Create(1333653, 5700124, 13150), $T03().Create(2667307, 11400248, 26300), $T03().Create(5334614, 6023280, 52601), $T03().Create(4422366, 4560099, 10520), $T03().Create(8844732, 9120198, 21040), $T03().Create(912248, 1463181, 42081), $T03().Create(6893336, 3648079, 8416), $T03().Create(13786672, 7296158, 16832), $T03().Create(10796128, 14592317, 33664), $T03().Create(5514668, 16340236, 6732), $T03().Create(11029337, 15903256, 13465), $T03().Create(5281459, 15029297, 26931), $T03().Create(10562918, 13281378, 53863), $T03().Create(5468026, 12722605, 10772), $T03().Create(10936053, 8667994, 21545), $T03().Create(5094891, 558773, 43091), $T03().Create(14440751, 3467197, 8618), $T03().Create(12104286, 6934395, 17236), $T03().Create(7431356, 13868791, 34472), $T03().Create(11552600, 9484644, 6894), $T03().Create(6327985, 2192073, 13789), $T03().Create(12655971, 4384146, 27578), $T03().Create(8534727, 8768293, 55156), $T03().Create(15128718, 5109101, 11031), $T03().Create(13480220, 10218203, 22062), $T03().Create(10183225, 3659191, 44125), $T03().Create(5392088, 731838, 8825), $T03().Create(10784176, 1463676, 17650), $T03().Create(4791136, 2927353, 35300), $T03().Create(11024556, 585470, 7060), $T03().Create(5271897, 1170941, 14120), $T03().Create(10543795, 2341882, 28240), $T03().Create(4310375, 4683765, 56480), $T03().Create(862075, 936753, 11296), $T03().Create(1724150, 1873506, 22592), $T03().Create(3448300, 3747012, 45184), $T03().Create(4045103, 14171175, 9036), $T03().Create(8090206, 11565134, 18073), $T03().Create(16180413, 6353052, 36147), $T03().Create(16657855, 7981496, 7229), $T03().Create(16538494, 15962993, 14458), $T03().Create(16299773, 15148771, 28917), $T03().Create(15822331, 13520327, 57835), $T03().Create(9875352, 2704065, 11567), $T03().Create(2973489, 5408131, 23134), $T03().Create(5946979, 10816262, 46268), $T03().Create(1189395, 12229582, 9253), $T03().Create(2378791, 7681948, 18507), $T03().Create(4757583, 15363896, 37014), $T03().Create(951516, 16494552, 7402), $T03().Create(1903033, 16211888, 14805), $T03().Create(3806066, 15646560, 29611), $T03().Create(7612133, 14515904, 59223), $T03().Create(8233313, 12969510, 11844), $T03().Create(16466626, 9161804, 23689), $T03().Create(16156036, 1546393, 47379), $T03().Create(9942093, 13731051, 9475), $T03().Create(3106971, 10684887, 18951), $T03().Create(6213942, 4592558, 37903), $T03().Create(4598231, 10984841, 7580), $T03().Create(9196463, 5192466, 15161), $T03().Create(1615710, 10384933, 30322), $T03().Create(3231421, 3992650, 60645), $T03().Create(646284, 798530, 12129), $T03().Create(1292568, 1597060, 24258), $T03().Create(2585137, 3194120, 48516), $T03().Create(3872470, 3994267, 9703), $T03().Create(7744941, 7988534, 19406), $T03().Create(15489882, 15977068, 38812), $T03().Create(3097976, 9906300, 7762), $T03().Create(6195953, 3035384, 15525), $T03().Create(12391906, 6070768, 31050), $T03().Create(8006596, 12141537, 62100), $T03().Create(8312205, 2428307, 12420), $T03().Create(16624411, 4856614, 24840), $T03().Create(16471606, 9713229, 49680), $T03().Create(16716094, 1942645, 9936), $T03().Create(16654972, 3885291, 19872), $T03().Create(16532728, 7770583, 39744), $T03().Create(10017432, 14975889, 7948), $T03().Create(3257648, 13174563, 15897), $T03().Create(6515296, 9571910, 31795), $T03().Create(13030592, 2366604, 63591), $T03().Create(2606118, 3828764, 12718), $T03().Create(5212237, 7657528, 25436), $T03().Create(10424474, 15315056, 50872), $T03().Create(12151224, 9773897, 10174), $T03().Create(7525232, 2770579, 20349), $T03().Create(15050465, 5541158, 40698), $T03().Create(6365536, 11174561, 8139), $T03().Create(12731072, 5571906, 16279), $T03().Create(8684929, 11143813, 32558), $T03().Create(5092429, 12295092, 6511), $T03().Create(10184858, 7812968, 13023), $T03().Create(3592500, 15625937, 26046), $T03().Create(7185000, 14474658, 52093), $T03().Create(4792443, 12961261, 10418), $T03().Create(9584886, 9145306, 20837), $T03().Create(2392557, 1513397, 41675), $T03().Create(7189397, 302679, 8335), $T03().Create(14378795, 605358, 16670), $T03().Create(11980375, 1210717, 33340), $T03().Create(9106961, 242143, 6668), $T03().Create(1436706, 484287, 13336), $T03().Create(2873413, 968574, 26672), $T03().Create(5746827, 1937148, 53344), $T03().Create(7860251, 13809202, 10668), $T03().Create(15720503, 10841188, 21337), $T03().Create(14663791, 4905161, 42675), $T03().Create(6288201, 981032, 8535), $T03().Create(12576403, 1962064, 17070), $T03().Create(8375590, 3924129, 34140), $T03().Create(15096890, 784825, 6828), $T03().Create(13416565, 1569651, 13656), $T03().Create(10055915, 3139303, 27312), $T03().Create(3334614, 6278607, 54624), $T03().Create(4022366, 14677494, 10924), $T03().Create(8044732, 12577772, 21849), $T03().Create(16089464, 8378328, 43699), $T03().Create(9928779, 15097438, 8739), $T03().Create(3080342, 13417661, 17479), $T03().Create(6160685, 10058106, 34959), $T03().Create(1232137, 15433394, 6991), $T03().Create(2464274, 14089572, 13983), $T03().Create(4928548, 11401928, 27967), $T03().Create(9857096, 6026640, 55935), $T03().Create(1971419, 1205328, 11187), $T03().Create(3942838, 2410656, 22374), $T03().Create(7885677, 4821312, 44748), $T03().Create(1577135, 11030592, 8949), $T03().Create(3154270, 5283968, 17899), $T03().Create(6308541, 10567936, 35798), $T03().Create(14683481, 12179916, 7159), $T03().Create(12589746, 7582617, 14319), $T03().Create(8402276, 15165235, 28638), $T03().Create(27337, 13553255, 57277), $T03().Create(6716353, 9421537, 11455), $T03().Create(13432707, 2065858, 22911), $T03().Create(10088199, 4131717, 45822), $T03().Create(15439412, 7537229, 9164), $T03().Create(14101609, 15074459, 18328), $T03().Create(11426002, 13371703, 36657), $T03().Create(2285200, 9385227, 7331), $T03().Create(4570401, 1993238, 14663), $T03().Create(9140802, 3986476, 29326), $T03().Create(1504388, 7972953, 58652), $T03().Create(300877, 8305477, 11730), $T03().Create(601755, 16610954, 23460), $T03().Create(1203510, 16444692, 46921), $T03().Create(10307031, 6644381, 9384), $T03().Create(3836847, 13288763, 18768), $T03().Create(7673695, 9800310, 37537), $T03().Create(8245625, 8670948, 7507), $T03().Create(16491250, 564680, 15015), $T03().Create(16205285, 1129361, 30030), $T03().Create(15633355, 2258723, 60060), $T03().Create(13193000, 451744, 12012), $T03().Create(9608785, 903489, 24024), $T03().Create(2440354, 1806979, 48048), $T03().Create(7198957, 10427725, 9609), $T03().Create(14397914, 4078234, 19219), $T03().Create(12018613, 8156469, 38438), $T03().Create(9114609, 11697623, 7687), $T03().Create(1452002, 6618031, 15375), $T03().Create(2904004, 13236062, 30750), $T03().Create(5808008, 9694908, 61501), $T03().Create(14583374, 5294424, 12300), $T03().Create(12389532, 10588849, 24600), $T03().Create(8001849, 4400483, 49201), $T03().Create(15022142, 4235539, 9840), $T03().Create(13267069, 8471079, 19680), $T03().Create(9756923, 164943, 39361), $T03().Create(15373157, 3388431, 7872), $T03().Create(13969098, 6776863, 15744), $T03().Create(11160981, 13553727, 31488), $T03().Create(5544747, 10330239, 62977), $T03().Create(4464392, 8776934, 12595), $T03().Create(8928785, 776652, 25191), $T03().Create(1080354, 1553305, 50382), $T03().Create(6926957, 7021547, 10076), $T03().Create(13853914, 14043094, 20152), $T03().Create(10930613, 11308973, 40305), $T03().Create(12252452, 2261794, 8061), $T03().Create(7727688, 4523589, 16122), $T03().Create(15455377, 9047178, 32244), $T03().Create(14133538, 1317141, 64489), $T03().Create(2826707, 13685201, 12897), $T03().Create(5653415, 10593186, 25795), $T03().Create(11306830, 4409156, 51591), $T03().Create(8972252, 4237274, 10318), $T03().Create(1167289, 8474549, 20636), $T03().Create(2334578, 171882, 41273), $T03().Create(466915, 10100706, 8254), $T03().Create(933831, 3424196, 16509), $T03().Create(1867662, 6848392, 33018), $T03().Create(373532, 11436008, 6603), $T03().Create(747064, 6094800, 13207), $T03().Create(1494129, 12189600, 26414), $T03().Create(2988259, 7601984, 52829), $T03().Create(10663981, 14942169, 10565), $T03().Create(4550747, 13107123, 21131), $T03().Create(9101494, 9437030, 42263), $T03().Create(11886628, 11953735, 8452), $T03().Create(6996040, 7130255, 16905), $T03().Create(13992081, 14260510, 33810), $T03().Create(2798416, 2852102, 6762), $T03().Create(5596832, 5704204, 13524), $T03().Create(11193665, 11408408, 27048), $T03().Create(5610115, 6039601, 54097), $T03().Create(11188352, 7918806, 10819), $T03().Create(5599489, 15837613, 21638), $T03().Create(11198978, 14898010, 43277), $T03().Create(8950682, 9690488, 8655), $T03().Create(1124148, 2603761, 17311), $T03().Create(2248296, 5207522, 34622), $T03().Create(13871432, 7752390, 6924), $T03().Create(10965648, 15504781, 13848), $T03().Create(5154080, 14232347, 27697), $T03().Create(10308160, 11687478, 55395), $T03().Create(12127961, 2337495, 11079), $T03().Create(7478707, 4674991, 22158), $T03().Create(14957414, 9349982, 44316), $T03().Create(13057812, 5225439, 8863), $T03().Create(9338409, 10450879, 17726), $T03().Create(1899602, 4124543, 35453), $T03().Create(3735363, 10891238, 7090), $T03().Create(7470727, 5005260, 14181), $T03().Create(14941454, 10010520, 28362), $T03().Create(13105693, 3243825, 56725), $T03().Create(2621138, 648765, 11345), $T03().Create(5242277, 1297530, 22690), $T03().Create(10484554, 2595060, 45380), $T03().Create(2096910, 519012, 9076), $T03().Create(4193821, 1038024, 18152), $T03().Create(8387643, 2076048, 36304), $T03().Create(8388415, 13836982, 7260), $T03().Create(16776830, 10896748, 14521), $T03().Create(16776444, 5016281, 29043), $T03().Create(16775673, 10032563, 58086), $T03().Create(16776907, 5361955, 11617), $T03().Create(16776598, 10723911, 23234), $T03().Create(16775981, 4670607, 46469), $T03().Create(6710639, 14355894, 9293), $T03().Create(13421279, 11934572, 18587), $T03().Create(10065342, 7091929, 37175), $T03().Create(15434841, 1418385, 7435), $T03().Create(14092466, 2836771, 14870), $T03().Create(11407716, 5673543, 29740), $T03().Create(6038217, 11347087, 59480), $T03().Create(7918529, 2269417, 11896), $T03().Create(15837059, 4538834, 23792), $T03().Create(14896903, 9077669, 47584), $T03().Create(13045710, 15237306, 9516), $T03().Create(9314204, 13697397, 19033), $T03().Create(1851193, 10617579, 38067), $T03().Create(3725681, 8834402, 7613), $T03().Create(7451363, 891588, 15227), $T03().Create(14902727, 1783176, 30454), $T03().Create(13028239, 3566353, 60908), $T03().Create(5961091, 10779600, 12181), $T03().Create(11922182, 4781984, 24363), $T03().Create(7067148, 9563969, 48726), $T03().Create(1413429, 5268237, 9745), $T03().Create(2826859, 10536474, 19490), $T03().Create(5653718, 4295732, 38981), $T03().Create(11197073, 4214589, 7796), $T03().Create(5616930, 8429179, 15592), $T03().Create(11233861, 81142, 31185), $T03().Create(5690506, 162285, 62370), $T03().Create(1138101, 32457, 12474), $T03().Create(2276202, 64914, 24948), $T03().Create(4552405, 129828, 49896), $T03().Create(14332253, 3381408, 9979), $T03().Create(11887291, 6762817, 19958), $T03().Create(6997367, 13525635, 39916), $T03().Create(4754916, 6060570, 7983), $T03().Create(9509833, 12121140, 15966), $T03().Create(2242450, 7465065, 31933), $T03().Create(4484901, 14930130, 63866), $T03().Create(4252423, 6341469, 12773), $T03().Create(8504846, 12682938, 25546), $T03().Create(232477, 8588661, 51093), $T03().Create(13468268, 11784061, 10218), $T03().Create(10159320, 6790907, 20437), $T03().Create(3541425, 13581815, 40874), $T03().Create(14130057, 16138135, 8174), $T03().Create(11482899, 15499055, 16349), $T03().Create(6188583, 14220895, 32699), $T03().Create(14659489, 16265951, 6539), $T03().Create(12541763, 15754687, 13079), $T03().Create(8306310, 14732159, 26159)]);
      $thisType.TensExponentTable = JSIL.Array.New($T02(), [-323, -323, -322, -322, -322, -322, -321, -321, -321, -320, -320, -320, -319, -319, -319, -319, -318, -318, -318, -317, -317, -317, -316, -316, -316, -316, -315, -315, -315, -314, -314, -314, -313, -313, -313, -313, -312, -312, -312, -311, -311, -311, -310, -310, -310, -310, -309, -309, -309, -308, -308, -308, -307, -307, -307, -307, -306, -306, -306, -305, -305, -305, -304, -304, -304, -304, -303, -303, -303, -302, -302, -302, -301, -301, -301, -301, -300, -300, -300, -299, -299, -299, -298, -298, -298, -298, -297, -297, -297, -296, -296, -296, -295, -295, -295, -295, -294, -294, -294, -293, -293, -293, -292, -292, -292, -291, -291, -291, -291, -290, -290, -290, -289, -289, -289, -288, -288, -288, -288, -287, -287, -287, -286, -286, -286, -285, -285, -285, -285, -284, -284, -284, -283, -283, -283, -282, -282, -282, -282, -281, -281, -281, -280, -280, -280, -279, -279, -279, -279, -278, -278, -278, -277, -277, -277, -276, -276, -276, -276, -275, -275, -275, -274, -274, -274, -273, -273, -273, -273, -272, -272, -272, -271, -271, -271, -270, -270, -270, -270, -269, -269, -269, -268, -268, -268, -267, -267, -267, -267, -266, -266, -266, -265, -265, -265, -264, -264, -264, -263, -263, -263, -263, -262, -262, -262, -261, -261, -261, -260, -260, -260, -260, -259, -259, -259, -258, -258, -258, -257, -257, -257, -257, -256, -256, -256, -255, -255, -255, -254, -254, -254, -254, -253, -253, -253, -252, -252, -252, -251, -251, -251, -251, -250, -250, -250, -249, -249, -249, -248, -248, -248, -248, -247, -247, -247, -246, -246, -246, -245, -245, -245, -245, -244, -244, -244, -243, -243, -243, -242, -242, -242, -242, -241, -241, -241, -240, -240, -240, -239, -239, -239, -239, -238, -238, -238, -237, -237, -237, -236, -236, -236, -235, -235, -235, -235, -234, -234, -234, -233, -233, -233, -232, -232, -232, -232, -231, -231, -231, -230, -230, -230, -229, -229, -229, -229, -228, -228, -228, -227, -227, -227, -226, -226, -226, -226, -225, -225, -225, -224, -224, -224, -223, -223, -223, -223, -222, -222, -222, -221, -221, -221, -220, -220, -220, -220, -219, -219, -219, -218, -218, -218, -217, -217, -217, -217, -216, -216, -216, -215, -215, -215, -214, -214, -214, -214, -213, -213, -213, -212, -212, -212, -211, -211, -211, -211, -210, -210, -210, -209, -209, -209, -208, -208, -208, -208, -207, -207, -207, -206, -206, -206, -205, -205, -205, -204, -204, -204, -204, -203, -203, -203, -202, -202, -202, -201, -201, -201, -201, -200, -200, -200, -199, -199, -199, -198, -198, -198, -198, -197, -197, -197, -196, -196, -196, -195, -195, -195, -195, -194, -194, -194, -193, -193, -193, -192, -192, -192, -192, -191, -191, -191, -190, -190, -190, -189, -189, -189, -189, -188, -188, -188, -187, -187, -187, -186, -186, -186, -186, -185, -185, -185, -184, -184, -184, -183, -183, -183, -183, -182, -182, -182, -181, -181, -181, -180, -180, -180, -180, -179, -179, -179, -178, -178, -178, -177, -177, -177, -176, -176, -176, -176, -175, -175, -175, -174, -174, -174, -173, -173, -173, -173, -172, -172, -172, -171, -171, -171, -170, -170, -170, -170, -169, -169, -169, -168, -168, -168, -167, -167, -167, -167, -166, -166, -166, -165, -165, -165, -164, -164, -164, -164, -163, -163, -163, -162, -162, -162, -161, -161, -161, -161, -160, -160, -160, -159, -159, -159, -158, -158, -158, -158, -157, -157, -157, -156, -156, -156, -155, -155, -155, -155, -154, -154, -154, -153, -153, -153, -152, -152, -152, -152, -151, -151, -151, -150, -150, -150, -149, -149, -149, -149, -148, -148, -148, -147, -147, -147, -146, -146, -146, -145, -145, -145, -145, -144, -144, -144, -143, -143, -143, -142, -142, -142, -142, -141, -141, -141, -140, -140, -140, -139, -139, -139, -139, -138, -138, -138, -137, -137, -137, -136, -136, -136, -136, -135, -135, -135, -134, -134, -134, -133, -133, -133, -133, -132, -132, -132, -131, -131, -131, -130, -130, -130, -130, -129, -129, -129, -128, -128, -128, -127, -127, -127, -127, -126, -126, -126, -125, -125, -125, -124, -124, -124, -124, -123, -123, -123, -122, -122, -122, -121, -121, -121, -121, -120, -120, -120, -119, -119, -119, -118, -118, -118, -117, -117, -117, -117, -116, -116, -116, -115, -115, -115, -114, -114, -114, -114, -113, -113, -113, -112, -112, -112, -111, -111, -111, -111, -110, -110, -110, -109, -109, -109, -108, -108, -108, -108, -107, -107, -107, -106, -106, -106, -105, -105, -105, -105, -104, -104, -104, -103, -103, -103, -102, -102, -102, -102, -101, -101, -101, -100, -100, -100, -99, -99, -99, -99, -98, -98, -98, -97, -97, -97, -96, -96, -96, -96, -95, -95, -95, -94, -94, -94, -93, -93, -93, -93, -92, -92, -92, -91, -91, -91, -90, -90, -90, -89, -89, -89, -89, -88, -88, -88, -87, -87, -87, -86, -86, -86, -86, -85, -85, -85, -84, -84, -84, -83, -83, -83, -83, -82, -82, -82, -81, -81, -81, -80, -80, -80, -80, -79, -79, -79, -78, -78, -78, -77, -77, -77, -77, -76, -76, -76, -75, -75, -75, -74, -74, -74, -74, -73, -73, -73, -72, -72, -72, -71, -71, -71, -71, -70, -70, -70, -69, -69, -69, -68, -68, -68, -68, -67, -67, -67, -66, -66, -66, -65, -65, -65, -65, -64, -64, -64, -63, -63, -63, -62, -62, -62, -62, -61, -61, -61, -60, -60, -60, -59, -59, -59, -58, -58, -58, -58, -57, -57, -57, -56, -56, -56, -55, -55, -55, -55, -54, -54, -54, -53, -53, -53, -52, -52, -52, -52, -51, -51, -51, -50, -50, -50, -49, -49, -49, -49, -48, -48, -48, -47, -47, -47, -46, -46, -46, -46, -45, -45, -45, -44, -44, -44, -43, -43, -43, -43, -42, -42, -42, -41, -41, -41, -40, -40, -40, -40, -39, -39, -39, -38, -38, -38, -37, -37, -37, -37, -36, -36, -36, -35, -35, -35, -34, -34, -34, -34, -33, -33, -33, -32, -32, -32, -31, -31, -31, -30, -30, -30, -30, -29, -29, -29, -28, -28, -28, -27, -27, -27, -27, -26, -26, -26, -25, -25, -25, -24, -24, -24, -24, -23, -23, -23, -22, -22, -22, -21, -21, -21, -21, -20, -20, -20, -19, -19, -19, -18, -18, -18, -18, -17, -17, -17, -16, -16, -16, -15, -15, -15, -15, -14, -14, -14, -13, -13, -13, -12, -12, -12, -12, -11, -11, -11, -10, -10, -10, -9, -9, -9, -9, -8, -8, -8, -7, -7, -7, -6, -6, -6, -6, -5, -5, -5, -4, -4, -4, -3, -3, -3, -3, -2, -2, -2, -1, -1, -1, 0, 0, 0, 1, 1, 1, 1, 2, 2, 2, 3, 3, 3, 4, 4, 4, 4, 5, 5, 5, 6, 6, 6, 7, 7, 7, 7, 8, 8, 8, 9, 9, 9, 10, 10, 10, 10, 11, 11, 11, 12, 12, 12, 13, 13, 13, 13, 14, 14, 14, 15, 15, 15, 16, 16, 16, 16, 17, 17, 17, 18, 18, 18, 19, 19, 19, 19, 20, 20, 20, 21, 21, 21, 22, 22, 22, 22, 23, 23, 23, 24, 24, 24, 25, 25, 25, 25, 26, 26, 26, 27, 27, 27, 28, 28, 28, 29, 29, 29, 29, 30, 30, 30, 31, 31, 31, 32, 32, 32, 32, 33, 33, 33, 34, 34, 34, 35, 35, 35, 35, 36, 36, 36, 37, 37, 37, 38, 38, 38, 38, 39, 39, 39, 40, 40, 40, 41, 41, 41, 41, 42, 42, 42, 43, 43, 43, 44, 44, 44, 44, 45, 45, 45, 46, 46, 46, 47, 47, 47, 47, 48, 48, 48, 49, 49, 49, 50, 50, 50, 50, 51, 51, 51, 52, 52, 52, 53, 53, 53, 53, 54, 54, 54, 55, 55, 55, 56, 56, 56, 56, 57, 57, 57, 58, 58, 58, 59, 59, 59, 60, 60, 60, 60, 61, 61, 61, 62, 62, 62, 63, 63, 63, 63, 64, 64, 64, 65, 65, 65, 66, 66, 66, 66, 67, 67, 67, 68, 68, 68, 69, 69, 69, 69, 70, 70, 70, 71, 71, 71, 72, 72, 72, 72, 73, 73, 73, 74, 74, 74, 75, 75, 75, 75, 76, 76, 76, 77, 77, 77, 78, 78, 78, 78, 79, 79, 79, 80, 80, 80, 81, 81, 81, 81, 82, 82, 82, 83, 83, 83, 84, 84, 84, 84, 85, 85, 85, 86, 86, 86, 87, 87, 87, 88, 88, 88, 88, 89, 89, 89, 90, 90, 90, 91, 91, 91, 91, 92, 92, 92, 93, 93, 93, 94, 94, 94, 94, 95, 95, 95, 96, 96, 96, 97, 97, 97, 97, 98, 98, 98, 99, 99, 99, 100, 100, 100, 100, 101, 101, 101, 102, 102, 102, 103, 103, 103, 103, 104, 104, 104, 105, 105, 105, 106, 106, 106, 106, 107, 107, 107, 108, 108, 108, 109, 109, 109, 109, 110, 110, 110, 111, 111, 111, 112, 112, 112, 112, 113, 113, 113, 114, 114, 114, 115, 115, 115, 116, 116, 116, 116, 117, 117, 117, 118, 118, 118, 119, 119, 119, 119, 120, 120, 120, 121, 121, 121, 122, 122, 122, 122, 123, 123, 123, 124, 124, 124, 125, 125, 125, 125, 126, 126, 126, 127, 127, 127, 128, 128, 128, 128, 129, 129, 129, 130, 130, 130, 131, 131, 131, 131, 132, 132, 132, 133, 133, 133, 134, 134, 134, 134, 135, 135, 135, 136, 136, 136, 137, 137, 137, 137, 138, 138, 138, 139, 139, 139, 140, 140, 140, 140, 141, 141, 141, 142, 142, 142, 143, 143, 143, 143, 144, 144, 144, 145, 145, 145, 146, 146, 146, 147, 147, 147, 147, 148, 148, 148, 149, 149, 149, 150, 150, 150, 150, 151, 151, 151, 152, 152, 152, 153, 153, 153, 153, 154, 154, 154, 155, 155, 155, 156, 156, 156, 156, 157, 157, 157, 158, 158, 158, 159, 159, 159, 159, 160, 160, 160, 161, 161, 161, 162, 162, 162, 162, 163, 163, 163, 164, 164, 164, 165, 165, 165, 165, 166, 166, 166, 167, 167, 167, 168, 168, 168, 168, 169, 169, 169, 170, 170, 170, 171, 171, 171, 171, 172, 172, 172, 173, 173, 173, 174, 174, 174, 175, 175, 175, 175, 176, 176, 176, 177, 177, 177, 178, 178, 178, 178, 179, 179, 179, 180, 180, 180, 181, 181, 181, 181, 182, 182, 182, 183, 183, 183, 184, 184, 184, 184, 185, 185, 185, 186, 186, 186, 187, 187, 187, 187, 188, 188, 188, 189, 189, 189, 190, 190, 190, 190, 191, 191, 191, 192, 192, 192, 193, 193, 193, 193, 194, 194, 194, 195, 195, 195, 196, 196, 196, 196, 197, 197, 197, 198, 198, 198, 199, 199, 199, 199, 200, 200, 200, 201, 201, 201, 202, 202, 202, 202, 203, 203, 203, 204, 204, 204, 205, 205, 205, 206, 206, 206, 206, 207, 207, 207, 208, 208, 208, 209, 209, 209, 209, 210, 210, 210, 211, 211, 211, 212, 212, 212, 212, 213, 213, 213, 214, 214, 214, 215, 215, 215, 215, 216, 216, 216, 217, 217, 217, 218, 218, 218, 218, 219, 219, 219, 220, 220, 220, 221, 221, 221, 221, 222, 222, 222, 223, 223, 223, 224, 224, 224, 224, 225, 225, 225, 226, 226, 226, 227, 227, 227, 227, 228, 228, 228, 229, 229, 229, 230, 230, 230, 230, 231, 231, 231, 232, 232, 232, 233, 233, 233, 234, 234, 234, 234, 235, 235, 235, 236, 236, 236, 237, 237, 237, 237, 238, 238, 238, 239, 239, 239, 240, 240, 240, 240, 241, 241, 241, 242, 242, 242, 243, 243, 243, 243, 244, 244, 244, 245, 245, 245, 246, 246, 246, 246, 247, 247, 247, 248, 248, 248, 249, 249, 249, 249, 250, 250, 250, 251, 251, 251, 252, 252, 252, 252, 253, 253, 253, 254, 254, 254, 255, 255, 255, 255, 256, 256, 256, 257, 257, 257, 258, 258, 258, 258, 259, 259, 259, 260, 260, 260, 261, 261, 261, 261, 262, 262, 262, 263, 263, 263, 264, 264, 264, 265, 265, 265, 265, 266, 266, 266, 267, 267, 267, 268, 268, 268, 268, 269, 269, 269, 270, 270, 270, 271, 271, 271, 271, 272, 272, 272, 273, 273, 273, 274, 274, 274, 274, 275, 275, 275, 276, 276, 276, 277, 277, 277, 277, 278, 278, 278, 279, 279, 279, 280, 280, 280, 280, 281, 281, 281, 282, 282, 282, 283, 283, 283, 283, 284, 284, 284, 285, 285, 285, 286, 286, 286, 286, 287, 287, 287, 288, 288, 288, 289, 289, 289, 289, 290, 290, 290, 291, 291, 291, 292, 292, 292, 293, 293, 293]);
    }
  );

  $.Property({Static:false, Public:true }, "CurrentCulture", $asm01.TypeRef("System.Globalization.CultureInfo"));

  $.Property({Static:false, Public:false}, "IntegerDigits", $asm01.TypeRef("System.Int32"));

  $.Property({Static:false, Public:false}, "DecimalDigits", $asm01.TypeRef("System.Int32"));

  $.Property({Static:false, Public:false}, "IsFloatingSource", $asm01.TypeRef("System.Boolean"));

  $.Property({Static:false, Public:false}, "IsZero", $asm01.TypeRef("System.Boolean"));

  $.Property({Static:false, Public:false}, "IsZeroInteger", $asm01.TypeRef("System.Boolean"));

});

JSIL.MakeClass($asm01.TypeRef("System.Object"), "System.NumberFormatter/CustomInfo", false, [], function ($) {
  var $thisType = $.publicInterface;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm01.System.String)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm01.System.Int32)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm01.System.Globalization.NumberFormatInfo)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm01.System.Boolean)) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize($asm01.System.Text.StringBuilder)) ();
  };
  var $T05 = function () {
    return ($T05 = JSIL.Memoize($asm01.System.Char)) ();
  };
  var $T06 = function () {
    return ($T06 = JSIL.Memoize(System.Array.Of($asm01.System.Int32))) ();
  };
  var $T07 = function () {
    return ($T07 = JSIL.Memoize($asm01.System.Object)) ();
  };
  var $T08 = function () {
    return ($T08 = JSIL.Memoize($asm01.System.ArgumentException)) ();
  };

  $.Method({Static:false, Public:true }, ".ctor", 
    $sig.make(0xF0A, null, [], []), 
    function CustomInfo__ctor () {
      this.UseGroup = false;
      this.DecimalDigits = 0;
      this.DecimalPointPos = -1;
      this.DecimalTailSharpDigits = 0;
      this.IntegerDigits = 0;
      this.IntegerHeadSharpDigits = 0;
      this.IntegerHeadPos = 0;
      this.UseExponent = false;
      this.ExponentDigits = 0;
      this.ExponentTailSharpDigits = 0;
      this.ExponentNegativeSignOnly = true;
      this.DividePlaces = 0;
      this.Percents = 0;
      this.Permilles = 0;
    }
  );

  $.Method({Static:false, Public:true }, "Format", 
    $sig.make(0xF08, $asm01.TypeRef("System.String"), [
        $asm01.TypeRef("System.String"), $asm01.TypeRef("System.Int32"), 
        $asm01.TypeRef("System.Int32"), $asm01.TypeRef("System.Globalization.NumberFormatInfo"), 
        $asm01.TypeRef("System.Boolean"), $asm01.TypeRef("System.Text.StringBuilder"), 
        $asm01.TypeRef("System.Text.StringBuilder"), $asm01.TypeRef("System.Text.StringBuilder")
      ], []), 
    function CustomInfo_Format (format, offset, length, nfi, positive, sb_int, sb_dec, sb_exp) {
      var sb = new ($T04())();
      var literal = "\0";
      var integerArea = true;
      var decimalArea = false;
      var intSharpCounter = 0;
      var sb_int_index = 0;
      var sb_dec_index = 0;
      var groups = nfi.get_RawNumberGroupSizes();
      var groupSeparator = nfi.get_NumberGroupSeparator();
      var intLen = 0;
      var total = 0;
      var groupIndex = 0;
      var counter = 0;
      var groupSize = 0;
      if (!(!this.UseGroup || (groups.length <= 0))) {
        intLen = sb_int.get_Length();

        for (var i = 0; i < groups.length; ++i) {
          total += groups[i];
          if (total <= intLen) {
            groupIndex = i;
          }
        }
        groupSize = groups[groupIndex];
        var fraction = ((intLen > total) ? ((intLen - total) | 0) : 0);
        if (groupSize === 0) {

          for (; (groupIndex >= 0) && (groups[groupIndex] === 0); --groupIndex) {
          }
          groupSize = ((fraction > 0) ? fraction : groups[groupIndex]);
        }
        if (fraction === 0) {
          counter = groupSize;
        } else {
          groupIndex += ((fraction / groupSize) | 0);
          counter = ((fraction % groupSize) | 0);
          if (counter === 0) {
            counter = groupSize;
          } else {
            ++groupIndex;
          }
        }
      } else {
        this.UseGroup = false;
      }

      for (i = offset; ((i - offset) | 0) < length; ) {

        var $label1 = 0;
      $labelgroup1: 
        while (true) {
          switch ($label1) {
            case 0: /* $entry1 */ 
              var c = (format[i]);
              if (!((c.charCodeAt(0) !== literal.charCodeAt(0)) || (c.charCodeAt(0) === "\0".charCodeAt(0)))) {
                literal = "\0";
              } else if (literal.charCodeAt(0) !== "\0".charCodeAt(0)) {
                $sig.get(0xB55, $asm01.System.Text.StringBuilder, [$asm01.System.Char], []).CallVirtual("Append", null, sb, c);
              } else {

                var $label0 = 0;
              $labelgroup0: 
                while (true) {
                  switch ($label0) {
                    case 0: /* $entry0 */ 
                      var c2 = c;
                      if (c2.charCodeAt(0) <= "E".charCodeAt(0)) {
                        switch (c2) {
                          case "\"": 
                          case "'": 
                            if (!((c.charCodeAt(0) !== "\"".charCodeAt(0)) && (c.charCodeAt(0) !== "'".charCodeAt(0)))) {
                              literal = c;
                            }
                            $label1 = 1 /* goto IL_4E3 */ ;
                            continue $labelgroup1;

                          case "#": 
                            break;

                          case "$": 
                          case "&": 
                            $label0 = 3 /* goto IL_4D7 */ ;
                            continue $labelgroup0;

                          case "%": 
                            $sig.get(0xB22, $asm01.System.Text.StringBuilder, [$asm01.System.String], []).CallVirtual("Append", null, sb, nfi.get_PercentSymbol());
                            $label0 = 1 /* goto IL_4E2 */ ;
                            continue $labelgroup0;

                          default: 
                            switch (c2) {
                              case ",": 
                                $label0 = 1 /* goto IL_4E2 */ ;
                                continue $labelgroup0;

                              case "-": 
                              case "/": 
                                $label0 = 3 /* goto IL_4D7 */ ;
                                continue $labelgroup0;

                              case ".": 
                                if (this.DecimalPointPos === i) {
                                  if (this.DecimalDigits > 0) {

                                    while (sb_int_index < sb_int.get_Length()) {
                                      $sig.get(0xB55, $asm01.System.Text.StringBuilder, [$asm01.System.Char], []).CallVirtual("Append", null, sb, sb_int.get_Chars(sb_int_index++));
                                    }
                                  }
                                  if (sb_dec.get_Length() > 0) {
                                    $sig.get(0xB22, $asm01.System.Text.StringBuilder, [$asm01.System.String], []).CallVirtual("Append", null, sb, nfi.get_NumberDecimalSeparator());
                                  }
                                }
                                integerArea = false;
                                decimalArea = true;
                                $label0 = 1 /* goto IL_4E2 */ ;
                                continue $labelgroup0;

                              case "0": 
                                break;

                              default: 
                                if (c2.charCodeAt(0) !== "E".charCodeAt(0)) {
                                  $label0 = 3 /* goto IL_4D7 */ ;
                                  continue $labelgroup0;
                                }
                                $label0 = 2 /* goto IL_359 */ ;
                                continue $labelgroup0;

                            }
                            break;

                        }
                        if (integerArea) {
                          ++intSharpCounter;
                          if (!((((this.IntegerDigits - intSharpCounter) | 0) >= ((sb_int.get_Length() + sb_int_index) | 0)) && (c.charCodeAt(0) !== "0".charCodeAt(0)))) {

                            while (((((this.IntegerDigits - intSharpCounter) | 0) + sb_int_index) | 0) < sb_int.get_Length()) {
                              $sig.get(0xB55, $asm01.System.Text.StringBuilder, [$asm01.System.Char], []).CallVirtual("Append", null, sb, sb_int.get_Chars(sb_int_index++));
                              if (!(!this.UseGroup || 
                                  (--intLen <= 0) || (--counter !== 0))) {
                                $sig.get(0xB22, $asm01.System.Text.StringBuilder, [$asm01.System.String], []).CallVirtual("Append", null, sb, groupSeparator);
                                if (!((--groupIndex >= groups.length) || (groupIndex < 0))) {
                                  groupSize = groups[groupIndex];
                                }
                                counter = groupSize;
                              }
                            }
                          }
                        } else if (decimalArea) {
                          if (sb_dec_index < sb_dec.get_Length()) {
                            $sig.get(0xB55, $asm01.System.Text.StringBuilder, [$asm01.System.Char], []).CallVirtual("Append", null, sb, sb_dec.get_Chars(sb_dec_index++));
                          }
                        } else {
                          $sig.get(0xB55, $asm01.System.Text.StringBuilder, [$asm01.System.Char], []).CallVirtual("Append", null, sb, c);
                        }
                      } else if (c2.charCodeAt(0) !== "\\".charCodeAt(0)) {
                        if (c2.charCodeAt(0) === "e".charCodeAt(0)) {
                          $label0 = 2 /* goto IL_359 */ ;
                          continue $labelgroup0;
                        }
                        if (c2.charCodeAt(0) !== "\u2030".charCodeAt(0)) {
                          $label0 = 3 /* goto IL_4D7 */ ;
                          continue $labelgroup0;
                        }
                        $sig.get(0xB22, $asm01.System.Text.StringBuilder, [$asm01.System.String], []).CallVirtual("Append", null, sb, nfi.get_PerMilleSymbol());
                      } else {
                        ++i;
                        if (((i - offset) | 0) < length) {
                          $sig.get(0xB55, $asm01.System.Text.StringBuilder, [$asm01.System.Char], []).CallVirtual("Append", null, sb, format[i]);
                        }
                      }

                      $label0 = 1 /* goto IL_4E2 */ ;
                      continue $labelgroup0;
                    case 1: /* IL_4E2 */ 
                      $label1 = 1 /* goto IL_4E3 */ ;
                      continue $labelgroup1;

                    case 2: /* IL_359 */ 
                      if (!((sb_exp !== null) && this.UseExponent)) {
                        $sig.get(0xB55, $asm01.System.Text.StringBuilder, [$asm01.System.Char], []).CallVirtual("Append", null, sb, c);
                        $label0 = 1 /* goto IL_4E2 */ ;
                        continue $labelgroup0;
                      }
                      var flag = true;
                      var flag2 = false;

                    $loop5: 
                      for (var q = ((i + 1) | 0); ((q - offset) | 0) < length; ++q) {
                        if (format[q].charCodeAt(0) === "0".charCodeAt(0)) {
                          flag2 = true;
                        } else if ((q !== ((i + 1) | 0)) || ((format[q].charCodeAt(0) !== "+".charCodeAt(0)) && 
                            (format[q].charCodeAt(0) !== "-".charCodeAt(0)))) {
                          if (!flag2) {
                            flag = false;
                          }
                          break $loop5;
                        }
                      }
                      if (flag) {
                        i = ((q - 1) | 0);
                        integerArea = (this.DecimalPointPos < 0);
                        decimalArea = !integerArea;
                        $sig.get(0xB55, $asm01.System.Text.StringBuilder, [$asm01.System.Char], []).CallVirtual("Append", null, sb, c);
                        $sig.get(0xB33, $asm01.System.Text.StringBuilder, [$asm01.System.Object], []).CallVirtual("Append", null, sb, sb_exp);
                        sb_exp = null;
                      } else {
                        $sig.get(0xB55, $asm01.System.Text.StringBuilder, [$asm01.System.Char], []).CallVirtual("Append", null, sb, c);
                      }
                      $label0 = 1 /* goto IL_4E2 */ ;
                      continue $labelgroup0;

                    case 3: /* IL_4D7 */ 
                      $sig.get(0xB55, $asm01.System.Text.StringBuilder, [$asm01.System.Char], []).CallVirtual("Append", null, sb, c);

                      $label0 = 4 /* goto $exit0 */ ;
                      continue $labelgroup0;
                    case 4: /* $exit0 */ 

                      break $labelgroup0;
                  }
                }
              }

              $label1 = 1 /* goto IL_4E3 */ ;
              continue $labelgroup1;
            case 1: /* IL_4E3 */ 
              ++i;

              break $labelgroup1;
          }
        }
      }
      if (!positive) {
        $sig.get(0xB6B, $asm01.System.Text.StringBuilder, [$asm01.System.Int32, $asm01.System.String], []).CallVirtual("Insert", null, sb, 0, nfi.get_NegativeSign());
      }
      return sb.toString();
    }
  );

  $.Method({Static:true , Public:true }, "GetActiveSection", 
    $sig.make(0xF02, null, [
        $asm01.TypeRef("System.String"), $jsilcore.TypeRef("JSIL.Reference", [$asm01.TypeRef("System.Boolean")]), 
        $asm01.TypeRef("System.Boolean"), $jsilcore.TypeRef("JSIL.Reference", [$asm01.TypeRef("System.Int32")]), 
        $jsilcore.TypeRef("JSIL.Reference", [$asm01.TypeRef("System.Int32")])
      ], []), 
    function CustomInfo_GetActiveSection (format, /* ref */ positive, zero, /* ref */ offset, /* ref */ length) {
      var lens = JSIL.Array.New($T01(), 3);
      var index = 0;
      var lastPos = 0;
      var literal = "\0";

    $loop0: 
      for (var i = 0; i < format.length; ++i) {
        var c = (format[i]);
        if (!((c.charCodeAt(0) !== literal.charCodeAt(0)) && ((literal !== "\0") || 
              ((c.charCodeAt(0) !== "\"".charCodeAt(0)) && 
                (c.charCodeAt(0) !== "'".charCodeAt(0)))))) {
          if (literal.charCodeAt(0) === "\0".charCodeAt(0)) {
            literal = c;
          } else {
            literal = "\0";
          }
        } else if (!((literal !== "\0") || 
            (format[i].charCodeAt(0) !== ";".charCodeAt(0)) || ((i !== 0) && 
              ((format[((i - 1) | 0)]).charCodeAt(0) === "\\".charCodeAt(0))))) {
          lens[index++] = ((i - lastPos) | 0);
          lastPos = ((i + 1) | 0);
          if (index === 3) {
            break $loop0;
          }
        }
      }
      if (index === 0) {
        offset.value = 0;
        length.value = format.length;
      } else if (index === 1) {
        if (!(!positive.value && !zero)) {
          offset.value = 0;
          length.value = lens[0];
        } else if (((lens[0] + 1) | 0) < format.length) {
          positive.value = true;
          offset.value = ((lens[0] + 1) | 0);
          length.value = ((format.length - offset.value) | 0);
        } else {
          offset.value = 0;
          length.value = lens[0];
        }
      } else if (index === 2) {
        if (zero) {
          offset.value = ((((lens[0] + lens[1]) | 0) + 2) | 0);
          length.value = ((format.length - offset.value) | 0);
        } else if (positive.value) {
          offset.value = 0;
          length.value = lens[0];
        } else if (lens[1] > 0) {
          positive.value = true;
          offset.value = ((lens[0] + 1) | 0);
          length.value = lens[1];
        } else {
          offset.value = 0;
          length.value = lens[0];
        }
      } else {
        if (index !== 3) {
          throw new ($T08())();
        }
        if (zero) {
          offset.value = ((((lens[0] + lens[1]) | 0) + 2) | 0);
          length.value = lens[2];
        } else if (positive.value) {
          offset.value = 0;
          length.value = lens[0];
        } else if (lens[1] > 0) {
          positive.value = true;
          offset.value = ((lens[0] + 1) | 0);
          length.value = lens[1];
        } else {
          offset.value = 0;
          length.value = lens[0];
        }
      }
    }
  );

  $.Method({Static:true , Public:true }, "Parse", 
    $sig.make(0xF05, $.Type, [
        $asm01.TypeRef("System.String"), $asm01.TypeRef("System.Int32"), 
        $asm01.TypeRef("System.Int32"), $asm01.TypeRef("System.Globalization.NumberFormatInfo")
      ], []), 
    function CustomInfo_Parse (format, offset, length, nfi) {
      var literal = "\0";
      var integerArea = true;
      var decimalArea = false;
      var exponentArea = false;
      var sharpContinues = true;
      var info = new $thisType();
      var groupSeparatorCounter = 0;

      for (var i = offset; ((i - offset) | 0) < length; ) {

        var $label1 = 0;
      $labelgroup1: 
        while (true) {
          switch ($label1) {
            case 0: /* $entry1 */ 
              var c = (format[i]);
              if (!((c.charCodeAt(0) !== literal.charCodeAt(0)) || (c.charCodeAt(0) === "\0".charCodeAt(0)))) {
                literal = "\0";
              } else if (literal.charCodeAt(0) === "\0".charCodeAt(0)) {
                if (!(!exponentArea || 
                    (c === "\0") || 
                    (c.charCodeAt(0) === "0".charCodeAt(0)) || (c.charCodeAt(0) === "#".charCodeAt(0)))) {
                  exponentArea = false;
                  integerArea = (info.DecimalPointPos < 0);
                  decimalArea = !integerArea;
                  --i;
                } else {

                  var $label0 = 0;
                $labelgroup0: 
                  while (true) {
                    switch ($label0) {
                      case 0: /* $entry0 */ 
                        var c2 = c;
                        if (c2.charCodeAt(0) <= "E".charCodeAt(0)) {
                          switch (c2) {
                            case "\"": 
                            case "'": 
                              if (!((c.charCodeAt(0) !== "\"".charCodeAt(0)) && (c.charCodeAt(0) !== "'".charCodeAt(0)))) {
                                literal = c;
                              }
                              $label1 = 1 /* goto IL_369 */ ;
                              continue $labelgroup1;

                            case "#": 
                              if (!(!sharpContinues || !integerArea)) {
                                info.IntegerHeadSharpDigits += 1;
                              } else if (decimalArea) {
                                info.DecimalTailSharpDigits += 1;
                              } else if (exponentArea) {
                                info.ExponentTailSharpDigits += 1;
                              }
                              break;

                            case "$": 
                            case "&": 
                              $label0 = 3 /* goto IL_366 */ ;
                              continue $labelgroup0;

                            case "%": 
                              info.Percents += 1;
                              $label0 = 1 /* goto IL_368 */ ;
                              continue $labelgroup0;

                            default: 
                              switch (c2) {
                                case ",": 
                                  if (!(!integerArea || (info.IntegerDigits <= 0))) {
                                    ++groupSeparatorCounter;
                                  }
                                  $label0 = 1 /* goto IL_368 */ ;
                                  continue $labelgroup0;

                                case "-": 
                                case "/": 
                                  $label0 = 3 /* goto IL_366 */ ;
                                  continue $labelgroup0;

                                case ".": 
                                  integerArea = false;
                                  decimalArea = true;
                                  exponentArea = false;
                                  if (info.DecimalPointPos === -1) {
                                    info.DecimalPointPos = i;
                                  }
                                  $label0 = 1 /* goto IL_368 */ ;
                                  continue $labelgroup0;

                                case "0": 
                                  break;

                                default: 
                                  if (c2.charCodeAt(0) !== "E".charCodeAt(0)) {
                                    $label0 = 3 /* goto IL_366 */ ;
                                    continue $labelgroup0;
                                  }
                                  $label0 = 2 /* goto IL_24F */ ;
                                  continue $labelgroup0;

                              }
                              break;

                          }
                          if (c.charCodeAt(0) !== "#".charCodeAt(0)) {
                            sharpContinues = false;
                            if (decimalArea) {
                              info.DecimalTailSharpDigits = 0;
                            } else if (exponentArea) {
                              info.ExponentTailSharpDigits = 0;
                            }
                          }
                          if (info.IntegerHeadPos === -1) {
                            info.IntegerHeadPos = i;
                          }
                          if (integerArea) {
                            info.IntegerDigits += 1;
                            if (groupSeparatorCounter > 0) {
                              info.UseGroup = true;
                            }
                            groupSeparatorCounter = 0;
                          } else if (decimalArea) {
                            info.DecimalDigits += 1;
                          } else if (exponentArea) {
                            info.ExponentDigits += 1;
                          }
                        } else if (c2.charCodeAt(0) !== "\\".charCodeAt(0)) {
                          if (c2.charCodeAt(0) === "e".charCodeAt(0)) {
                            $label0 = 2 /* goto IL_24F */ ;
                            continue $labelgroup0;
                          }
                          if (c2.charCodeAt(0) === "\u2030".charCodeAt(0)) {
                            info.Permilles += 1;
                          }
                        } else {
                          ++i;
                        }

                        $label0 = 1 /* goto IL_368 */ ;
                        continue $labelgroup0;
                      case 1: /* IL_368 */ 
                        $label1 = 1 /* goto IL_369 */ ;
                        continue $labelgroup1;

                      case 2: /* IL_24F */ 
                        if (!info.UseExponent) {
                          info.UseExponent = true;
                          integerArea = false;
                          decimalArea = false;
                          exponentArea = true;
                          if (((((i + 1) | 0) - offset) | 0) < length) {
                            var nc = (format[((i + 1) | 0)]);
                            if (nc.charCodeAt(0) === "+".charCodeAt(0)) {
                              info.ExponentNegativeSignOnly = false;
                            }
                            if (!((nc.charCodeAt(0) !== "+".charCodeAt(0)) && (nc.charCodeAt(0) !== "-".charCodeAt(0)))) {
                              ++i;
                            } else if (!((nc.charCodeAt(0) === "0".charCodeAt(0)) || (nc.charCodeAt(0) === "#".charCodeAt(0)))) {
                              info.UseExponent = false;
                              if (info.DecimalPointPos < 0) {
                                integerArea = true;
                              }
                            }
                          }
                        }

                        $label0 = 3 /* goto IL_366 */ ;
                        continue $labelgroup0;
                      case 3: /* IL_366 */ 

                        $label0 = 4 /* goto $exit0 */ ;
                        continue $labelgroup0;
                      case 4: /* $exit0 */ 

                        break $labelgroup0;
                    }
                  }
                }
              }

              $label1 = 1 /* goto IL_369 */ ;
              continue $labelgroup1;
            case 1: /* IL_369 */ 
              ++i;

              break $labelgroup1;
          }
        }
      }
      if (info.ExponentDigits === 0) {
        info.UseExponent = false;
      } else {
        info.IntegerHeadSharpDigits = 0;
      }
      if (info.DecimalDigits === 0) {
        info.DecimalPointPos = -1;
      }
      info.DividePlaces += ((groupSeparatorCounter * 3) | 0);
      return info;
    }
  );

  $.Field({Static:false, Public:true }, "UseGroup", $asm01.TypeRef("System.Boolean")); 
  $.Field({Static:false, Public:true }, "DecimalDigits", $asm01.TypeRef("System.Int32")); 
  $.Field({Static:false, Public:true }, "DecimalPointPos", $asm01.TypeRef("System.Int32")); 
  $.Field({Static:false, Public:true }, "DecimalTailSharpDigits", $asm01.TypeRef("System.Int32")); 
  $.Field({Static:false, Public:true }, "IntegerDigits", $asm01.TypeRef("System.Int32")); 
  $.Field({Static:false, Public:true }, "IntegerHeadSharpDigits", $asm01.TypeRef("System.Int32")); 
  $.Field({Static:false, Public:true }, "IntegerHeadPos", $asm01.TypeRef("System.Int32")); 
  $.Field({Static:false, Public:true }, "UseExponent", $asm01.TypeRef("System.Boolean")); 
  $.Field({Static:false, Public:true }, "ExponentDigits", $asm01.TypeRef("System.Int32")); 
  $.Field({Static:false, Public:true }, "ExponentTailSharpDigits", $asm01.TypeRef("System.Int32")); 
  $.Field({Static:false, Public:true }, "ExponentNegativeSignOnly", $asm01.TypeRef("System.Boolean")); 
  $.Field({Static:false, Public:true }, "DividePlaces", $asm01.TypeRef("System.Int32")); 
  $.Field({Static:false, Public:true }, "Percents", $asm01.TypeRef("System.Int32")); 
  $.Field({Static:false, Public:true }, "Permilles", $asm01.TypeRef("System.Int32")); 
});

JSIL.MakeClass($asm01.TypeRef("System.SystemException"), "System.InvalidOperationException", true, [], function ($) {
  var $thisType = $.publicInterface;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm01.System.SystemException)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm01.System.Locale)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm01.System.Object)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm01.System.String)) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize($asm01.System.Exception)) ();
  };

  $.Method({Static:false, Public:true }, ".ctor", 
    $sig.make(0xD7A, null, [], []), 
    function InvalidOperationException__ctor () {
      $T00().prototype._ctor.call(this, $T01().GetText("Operation is not valid due to the current state of the object", JSIL.Array.New($T02(), 0)));
      this.Exception$HResult$value = -2146233079;
    }
  );

  $.Method({Static:false, Public:true }, ".ctor", 
    $sig.make(0xD7D, null, [$asm01.TypeRef("System.String")], []), 
    function InvalidOperationException__ctor (message) {
      $T00().prototype._ctor.call(this, message);
      this.Exception$HResult$value = -2146233079;
    }
  );

  $.Method({Static:false, Public:true }, ".ctor", 
    $sig.make(0xD80, null, [$asm01.TypeRef("System.String"), $asm01.TypeRef("System.Exception")], []), 
    function InvalidOperationException__ctor (message, innerException) {
      $sig.get(0x7D2, null, [$asm01.System.String, $asm01.System.Exception], []).Call($T00().prototype, "_ctor", null, this, message, innerException);
      this.Exception$HResult$value = -2146233079;
    }
  );

  $.Constant({Static:true , Public:false}, "Result", -2146233079); 
})
  .Attribute($asm01.TypeRef("System.Runtime.InteropServices.ComVisibleAttribute"), function () { return [true]; });

JSIL.MakeStruct($asm01.TypeRef("System.ValueType"), "System.Guid", true, [], function ($) {
  var $thisType = $.publicInterface;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm01.System.Object)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize(System.Array.Of($asm01.System.Byte))) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm01.JSIL.Security.BitConverterLE)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm01.System.String)) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize($asm01.System.StringEx)) ();
  };
  var $T05 = function () {
    return ($T05 = JSIL.Memoize($asm01.System.Guid_GuidParser)) ();
  };
  var $T06 = function () {
    return ($T06 = JSIL.Memoize($asm01.System.Int32)) ();
  };
  var $T07 = function () {
    return ($T07 = JSIL.Memoize($asm01.System.Int16)) ();
  };
  var $T08 = function () {
    return ($T08 = JSIL.Memoize($asm01.System.Byte)) ();
  };
  var $T09 = function () {
    return ($T09 = JSIL.Memoize($asm01.System.UInt32)) ();
  };
  var $T0A = function () {
    return ($T0A = JSIL.Memoize($asm01.System.UInt16)) ();
  };
  var $T0B = function () {
    return ($T0B = JSIL.Memoize($asm01.System.Text.StringBuilder)) ();
  };
  var $T0C = function () {
    return ($T0C = JSIL.Memoize($asm01.System.Boolean)) ();
  };
  var $T0D = function () {
    return ($T0D = JSIL.Memoize($asm01.System.ArgumentException)) ();
  };
  var $T0E = function () {
    return ($T0E = JSIL.Memoize($asm01.System.Locale)) ();
  };
  var $T0F = function () {
    return ($T0F = JSIL.Memoize($asm01.System.ArgumentNullException)) ();
  };
  var $T10 = function () {
    return ($T10 = JSIL.Memoize($asm01.System.FormatException)) ();
  };
  var $T11 = function () {
    return ($T11 = JSIL.Memoize($asm01.System.Threading.Monitor)) ();
  };
  var $T12 = function () {
    return ($T12 = JSIL.Memoize($asm01.System.Security.Cryptography.RandomNumberGenerator)) ();
  };
  var $T13 = function () {
    return ($T13 = JSIL.Memoize($asm01.System.Int64)) ();
  };
  var $T14 = function () {
    return ($T14 = JSIL.Memoize($asm01.System.Char)) ();
  };
  var $T15 = function () {
    return ($T15 = JSIL.Memoize($asm01.System.Guid_Format)) ();
  };
  var $T16 = function () {
    return ($T16 = JSIL.Memoize($asm01.System.Void)) ();
  };
  var $T17 = function () {
    return ($T17 = JSIL.Memoize($asm01.System.IFormatProvider)) ();
  };

  $.Method({Static:false, Public:true }, ".ctor", 
    $sig.make(0xBB9, null, [$jsilcore.TypeRef("System.Array", [$asm01.TypeRef("System.Byte")])], []), 
    function Guid__ctor (b) {
      $thisType.CheckArray(b, 16);
      this._a = $T02().ToInt32(b, 0);
      this._b = $T02().ToInt16(b, 4);
      this._c = $T02().ToInt16(b, 6);
      this._d = b[8];
      this._e = b[9];
      this._f = b[10];
      this._g = b[11];
      this._h = b[12];
      this._i = b[13];
      this._j = b[14];
      this._k = b[15];
    }
  );

  $.Method({Static:false, Public:true }, ".ctor", 
    $sig.make(0xBBC, null, [$asm01.TypeRef("System.String")], []), 
    function Guid__ctor (g) {
      var guid = new JSIL.Variable(new $thisType());
      $thisType.CheckNull(g);
      g = $T04().Trim(g);
      var parser = new ($T05())(g);
      if (!parser.Parse(/* ref */ guid)) {
        throw $thisType.CreateFormatException(g);
      }
      JSIL.CopyMembers(guid.value.MemberwiseClone(), this);
    }
  );

  $.Method({Static:false, Public:true }, ".ctor", 
    $sig.make(0xBBF, null, [
        $asm01.TypeRef("System.Int32"), $asm01.TypeRef("System.Int16"), 
        $asm01.TypeRef("System.Int16"), $jsilcore.TypeRef("System.Array", [$asm01.TypeRef("System.Byte")])
      ], []), 
    function Guid__ctor (a, b, c, d) {
      $thisType.CheckArray(d, 8);
      this._a = a;
      this._b = b;
      this._c = c;
      this._d = d[0];
      this._e = d[1];
      this._f = d[2];
      this._g = d[3];
      this._h = d[4];
      this._i = d[5];
      this._j = d[6];
      this._k = d[7];
    }
  );

  $.Method({Static:false, Public:true }, ".ctor", 
    $sig.make(0xBC1, null, [
        $asm01.TypeRef("System.Int32"), $asm01.TypeRef("System.Int16"), 
        $asm01.TypeRef("System.Int16"), $asm01.TypeRef("System.Byte"), 
        $asm01.TypeRef("System.Byte"), $asm01.TypeRef("System.Byte"), 
        $asm01.TypeRef("System.Byte"), $asm01.TypeRef("System.Byte"), 
        $asm01.TypeRef("System.Byte"), $asm01.TypeRef("System.Byte"), 
        $asm01.TypeRef("System.Byte")
      ], []), 
    function Guid__ctor (a, b, c, d, e, f, g, h, i, j, k) {
      this._a = a;
      this._b = b;
      this._c = c;
      this._d = d;
      this._e = e;
      this._f = f;
      this._g = g;
      this._h = h;
      this._i = i;
      this._j = j;
      this._k = k;
    }
  );

  $.Method({Static:false, Public:true }, ".ctor", 
    $sig.make(0xBC6, null, [
        $asm01.TypeRef("System.UInt32"), $asm01.TypeRef("System.UInt16"), 
        $asm01.TypeRef("System.UInt16"), $asm01.TypeRef("System.Byte"), 
        $asm01.TypeRef("System.Byte"), $asm01.TypeRef("System.Byte"), 
        $asm01.TypeRef("System.Byte"), $asm01.TypeRef("System.Byte"), 
        $asm01.TypeRef("System.Byte"), $asm01.TypeRef("System.Byte"), 
        $asm01.TypeRef("System.Byte")
      ], []), 
    function Guid__ctor (a, b, c, d, e, f, g, h, i, j, k) {
      $sig.get(0xBC1, null, [
          $asm01.System.Int32, $asm01.System.Int16, 
          $asm01.System.Int16, $asm01.System.Byte, 
          $asm01.System.Byte, $asm01.System.Byte, 
          $asm01.System.Byte, $asm01.System.Byte, 
          $asm01.System.Byte, $asm01.System.Byte, 
          $asm01.System.Byte
        ], []).Call($thisType.prototype, "_ctor", null, this, 
        a, 
        b, 
        c, 
        d, 
        e, 
        f, 
        g, 
        h, 
        i, 
        j, 
        k
      );
    }
  )
    .Attribute($asm01.TypeRef("System.CLSCompliantAttribute"), function () { return [false]; });

  $.Method({Static:true , Public:false}, "AppendByte", 
    $sig.make(0xC68, null, [$asm01.TypeRef("System.Text.StringBuilder"), $asm01.TypeRef("System.Byte")], []), 
    function Guid_AppendByte (builder, value) {
      $sig.get(0xB55, $asm01.System.Text.StringBuilder, [$asm01.System.Char], []).CallVirtual("Append", null, builder, $thisType.ToHex(((((value >> 4) | 0) & 15) | 0)));
      $sig.get(0xB55, $asm01.System.Text.StringBuilder, [$asm01.System.Char], []).CallVirtual("Append", null, builder, $thisType.ToHex(((value & 15) | 0)));
    }
  );

  $.Method({Static:true , Public:false}, "AppendInt", 
    $sig.make(0xC65, null, [$asm01.TypeRef("System.Text.StringBuilder"), $asm01.TypeRef("System.Int32")], []), 
    function Guid_AppendInt (builder, value) {
      $sig.get(0xB55, $asm01.System.Text.StringBuilder, [$asm01.System.Char], []).CallVirtual("Append", null, builder, $thisType.ToHex(((((value >> 28) | 0) & 15) | 0)));
      $sig.get(0xB55, $asm01.System.Text.StringBuilder, [$asm01.System.Char], []).CallVirtual("Append", null, builder, $thisType.ToHex(((((value >> 24) | 0) & 15) | 0)));
      $sig.get(0xB55, $asm01.System.Text.StringBuilder, [$asm01.System.Char], []).CallVirtual("Append", null, builder, $thisType.ToHex(((((value >> 20) | 0) & 15) | 0)));
      $sig.get(0xB55, $asm01.System.Text.StringBuilder, [$asm01.System.Char], []).CallVirtual("Append", null, builder, $thisType.ToHex(((((value >> 16) | 0) & 15) | 0)));
      $sig.get(0xB55, $asm01.System.Text.StringBuilder, [$asm01.System.Char], []).CallVirtual("Append", null, builder, $thisType.ToHex(((((value >> 12) | 0) & 15) | 0)));
      $sig.get(0xB55, $asm01.System.Text.StringBuilder, [$asm01.System.Char], []).CallVirtual("Append", null, builder, $thisType.ToHex(((((value >> 8) | 0) & 15) | 0)));
      $sig.get(0xB55, $asm01.System.Text.StringBuilder, [$asm01.System.Char], []).CallVirtual("Append", null, builder, $thisType.ToHex(((((value >> 4) | 0) & 15) | 0)));
      $sig.get(0xB55, $asm01.System.Text.StringBuilder, [$asm01.System.Char], []).CallVirtual("Append", null, builder, $thisType.ToHex(((value & 15) | 0)));
    }
  );

  $.Method({Static:true , Public:false}, "AppendShort", 
    $sig.make(0xC66, null, [$asm01.TypeRef("System.Text.StringBuilder"), $asm01.TypeRef("System.Int16")], []), 
    function Guid_AppendShort (builder, value) {
      $sig.get(0xB55, $asm01.System.Text.StringBuilder, [$asm01.System.Char], []).CallVirtual("Append", null, builder, $thisType.ToHex(((((value >> 12) | 0) & 15) | 0)));
      $sig.get(0xB55, $asm01.System.Text.StringBuilder, [$asm01.System.Char], []).CallVirtual("Append", null, builder, $thisType.ToHex(((((value >> 8) | 0) & 15) | 0)));
      $sig.get(0xB55, $asm01.System.Text.StringBuilder, [$asm01.System.Char], []).CallVirtual("Append", null, builder, $thisType.ToHex(((((value >> 4) | 0) & 15) | 0)));
      $sig.get(0xB55, $asm01.System.Text.StringBuilder, [$asm01.System.Char], []).CallVirtual("Append", null, builder, $thisType.ToHex(((value & 15) | 0)));
    }
  );

  $.Method({Static:false, Public:false}, "BaseToString", 
    $sig.make(0xC6A, $asm01.TypeRef("System.String"), [
        $asm01.TypeRef("System.Boolean"), $asm01.TypeRef("System.Boolean"), 
        $asm01.TypeRef("System.Boolean")
      ], []), 
    function Guid_BaseToString (h, p, b) {
      var res = $sig.get(0xB02, null, [$asm01.System.Int32], []).Construct($T0B(), 40);
      if (p) {
        $sig.get(0xB55, $asm01.System.Text.StringBuilder, [$asm01.System.Char], []).CallVirtual("Append", null, res, "(");
      } else if (b) {
        $sig.get(0xB55, $asm01.System.Text.StringBuilder, [$asm01.System.Char], []).CallVirtual("Append", null, res, "{");
      }
      $thisType.AppendInt(res, this._a);
      if (h) {
        $sig.get(0xB55, $asm01.System.Text.StringBuilder, [$asm01.System.Char], []).CallVirtual("Append", null, res, "-");
      }
      $thisType.AppendShort(res, this._b);
      if (h) {
        $sig.get(0xB55, $asm01.System.Text.StringBuilder, [$asm01.System.Char], []).CallVirtual("Append", null, res, "-");
      }
      $thisType.AppendShort(res, this._c);
      if (h) {
        $sig.get(0xB55, $asm01.System.Text.StringBuilder, [$asm01.System.Char], []).CallVirtual("Append", null, res, "-");
      }
      $thisType.AppendByte(res, this._d);
      $thisType.AppendByte(res, this._e);
      if (h) {
        $sig.get(0xB55, $asm01.System.Text.StringBuilder, [$asm01.System.Char], []).CallVirtual("Append", null, res, "-");
      }
      $thisType.AppendByte(res, this._f);
      $thisType.AppendByte(res, this._g);
      $thisType.AppendByte(res, this._h);
      $thisType.AppendByte(res, this._i);
      $thisType.AppendByte(res, this._j);
      $thisType.AppendByte(res, this._k);
      if (p) {
        $sig.get(0xB55, $asm01.System.Text.StringBuilder, [$asm01.System.Char], []).CallVirtual("Append", null, res, ")");
      } else if (b) {
        $sig.get(0xB55, $asm01.System.Text.StringBuilder, [$asm01.System.Char], []).CallVirtual("Append", null, res, "}");
      }
      return res.toString();
    }
  );

  $.Method({Static:true , Public:false}, "CheckArray", 
    $sig.make(0xBB7, null, [$jsilcore.TypeRef("System.Array", [$asm01.TypeRef("System.Byte")]), $asm01.TypeRef("System.Int32")], []), 
    function Guid_CheckArray (o, l) {
      $thisType.CheckNull(o);
      $thisType.CheckLength(o, l);
    }
  );

  $.Method({Static:true , Public:false}, "CheckLength", 
    $sig.make(0xBB4, null, [$jsilcore.TypeRef("System.Array", [$asm01.TypeRef("System.Byte")]), $asm01.TypeRef("System.Int32")], []), 
    function Guid_CheckLength (o, l) {
      if (o.length !== l) {
        throw new ($T0D())($T03().Format($T0E().GetText("Array should be exactly {0} bytes long.", JSIL.Array.New($T00(), 0)), l));
      }
    }
  );

  $.Method({Static:true , Public:false}, "CheckNull", 
    $sig.make(0xBB0, null, [$asm01.TypeRef("System.Object")], []), 
    function Guid_CheckNull (o) {
      if (o === null) {
        throw new ($T0F())($T0E().GetText("Value cannot be null.", JSIL.Array.New($T00(), 0)));
      }
    }
  );

  $.Method({Static:true , Public:false}, "Compare", 
    $sig.make(0xBC9, $asm01.TypeRef("System.Int32"), [$asm01.TypeRef("System.Int32"), $asm01.TypeRef("System.Int32")], []), 
    function Guid_Compare (x, y) {
      if (x < y) {
        var result = -1;
      } else {
        result = 1;
      }
      return result;
    }
  );

  $.Method({Static:false, Public:true }, "CompareTo", 
    $sig.make(0xBCB, $asm01.TypeRef("System.Int32"), [$asm01.TypeRef("System.Object")], []), 
    function Guid_CompareTo (value) {
      if (value === null) {
        var result = 1;
      } else {
        if (!$thisType.$Is(value)) {
          throw $sig.get(0x818, null, [$asm01.System.String, $asm01.System.String], []).Construct($T0D(), "value", $T0E().GetText("Argument of System.Guid.CompareTo should be a Guid.", JSIL.Array.New($T00(), 0)));
        }
        result = $sig.get(0xBD5, $asm01.System.Int32, [$thisType], []).CallVirtual("CompareTo", null, this, $thisType.$Cast(value));
      }
      return result;
    }
  );

  $.Method({Static:false, Public:true }, "CompareTo", 
    $sig.make(0xBD5, $asm01.TypeRef("System.Int32"), [$.Type], []), 
    function Guid_CompareTo (value) {
      if (this._a !== value._a) {
        var result = $thisType.Compare(this._a, value._a);
      } else if (this._b !== value._b) {
        result = $thisType.Compare(this._b, value._b);
      } else if (this._c !== value._c) {
        result = $thisType.Compare(this._c, value._c);
      } else if (this._d !== value._d) {
        result = $thisType.Compare(this._d, value._d);
      } else if (this._e !== value._e) {
        result = $thisType.Compare(this._e, value._e);
      } else if (this._f !== value._f) {
        result = $thisType.Compare(this._f, value._f);
      } else if (this._g !== value._g) {
        result = $thisType.Compare(this._g, value._g);
      } else if (this._h !== value._h) {
        result = $thisType.Compare(this._h, value._h);
      } else if (this._i !== value._i) {
        result = $thisType.Compare(this._i, value._i);
      } else if (this._j !== value._j) {
        result = $thisType.Compare(this._j, value._j);
      } else if (this._k !== value._k) {
        result = $thisType.Compare(this._k, value._k);
      } else {
        result = 0;
      }
      return result;
    }
  );

  $.Method({Static:true , Public:false}, "CreateFormatException", 
    $sig.make(0xBBD, $asm01.TypeRef("System.Exception"), [$asm01.TypeRef("System.String")], []), 
    function Guid_CreateFormatException (s) {
      return new ($T10())($T03().Format("Invalid Guid format: {0}", JSIL.Array.New($T00(), [s])));
    }
  );

  $.Method({Static:false, Public:true }, "Object.Equals", 
    $sig.make(0xBD1, $asm01.TypeRef("System.Boolean"), [$asm01.TypeRef("System.Object")], []), 
    function Guid_Object_Equals (o) {
      return ($thisType.$Is(o) && ($sig.get(0xBD5, $asm01.System.Int32, [$thisType], []).CallVirtual("CompareTo", null, this, $thisType.$Cast(o)) === 0));
    }
  );

  $.Method({Static:false, Public:true }, "Equals", 
    $sig.make(0xBE2, $asm01.TypeRef("System.Boolean"), [$.Type], []), 
    function Guid_Equals (g) {
      return ($sig.get(0xBD5, $asm01.System.Int32, [$thisType], []).CallVirtual("CompareTo", null, this, g) === 0);
    }
  );

  $.Method({Static:true , Public:false}, "FastNewGuidArray", 
    $sig.make(0xBF4, $jsilcore.TypeRef("System.Array", [$asm01.TypeRef("System.Byte")]), [], []), 
    function Guid_FastNewGuidArray () {
      var rngAccess = null;
      var guid = JSIL.Array.New($T08(), 16);
      var flag = new JSIL.Variable(false);
      try {
        $T11().Enter((rngAccess = $thisType._rngAccess), /* ref */ flag);
        if ($thisType._rng !== null) {
          $thisType._fastRng = $thisType._rng;
        }
        if ($thisType._fastRng === null) {
          $thisType._fastRng = $T12().Create();
        }
        $thisType._fastRng.GetBytes(guid);
      } finally {
        if (flag.value) {
          $T11().Exit(rngAccess);
        }
      }
      guid[8] = ((((guid[8] & 63) | 0) | 128) | 0);
      guid[7] = ((((guid[7] & 15) | 0) | 64) | 0);
      return guid;
    }
  );

  $.Method({Static:false, Public:true }, "GetHashCode", 
    $sig.make(0xBEB, $asm01.TypeRef("System.Int32"), [], []), 
    function Guid_GetHashCode () {
      var res = this._a;
      res = ((res ^ ((((this._b << 16) | 0) | this._c) | 0)) | 0);
      res = ((res ^ ((this._d << 24) | 0)) | 0);
      res = ((res ^ ((this._e << 16) | 0)) | 0);
      res = ((res ^ ((this._f << 8) | 0)) | 0);
      res = ((res ^ this._g) | 0);
      res = ((res ^ ((this._h << 24) | 0)) | 0);
      res = ((res ^ ((this._i << 16) | 0)) | 0);
      res = ((res ^ ((this._j << 8) | 0)) | 0);
      return ((res ^ this._k) | 0);
    }
  );

  $.Method({Static:true , Public:true }, "NewGuid", 
    $sig.make(0xBF3, $.Type, [], []), 
    function Guid_NewGuid () {
      var rngAccess = null;
      var b = JSIL.Array.New($T08(), 16);
      var flag = new JSIL.Variable(false);
      try {
        $T11().Enter((rngAccess = $thisType._rngAccess), /* ref */ flag);
        if ($thisType._rng === null) {
          $thisType._rng = $T12().Create();
        }
        $thisType._rng.GetBytes(b);
      } finally {
        if (flag.value) {
          $T11().Exit(rngAccess);
        }
      }
      var res = $sig.get(0xBB9, null, [System.Array.Of($asm01.System.Byte)], []).Construct($thisType, b);
      res._d = ((((res._d & 63) | 0) | 128) | 0);
      res._c = ($T13().op_BitwiseOr(
          $T13().op_BitwiseAnd(
            $T13().FromNumber(res._c), 
            $T13().Create(4095, 0, 0)
          ), 
          $T13().Create(16384, 0, 0)
        )).ToNumber();
      return res;
    }
  );

  $.Method({Static:true , Public:true }, "op_Equality", 
    $sig.make(0xC72, $asm01.TypeRef("System.Boolean"), [$.Type, $.Type], []), 
    function Guid_op_Equality (a, b) {
      return a.Equals(b);
    }
  );

  $.Method({Static:true , Public:true }, "op_Inequality", 
    $sig.make(0xC75, $asm01.TypeRef("System.Boolean"), [$.Type, $.Type], []), 
    function Guid_op_Inequality (a, b) {
      return !a.Equals(b);
    }
  );

  $.Method({Static:true , Public:true }, "Parse", 
    $sig.make(0xC7A, $.Type, [$asm01.TypeRef("System.String")], []), 
    function Guid_Parse (input) {
      var guid = new JSIL.Variable(new $thisType());
      if (!$thisType.TryParse(input, /* ref */ guid)) {
        throw $thisType.CreateFormatException(input);
      }
      return guid.value;
    }
  );

  $.Method({Static:true , Public:true }, "ParseExact", 
    $sig.make(0xC7E, $.Type, [$asm01.TypeRef("System.String"), $asm01.TypeRef("System.String")], []), 
    function Guid_ParseExact (input, format) {
      var guid = new JSIL.Variable(new $thisType());
      if (!$thisType.TryParseExact(input, format, /* ref */ guid)) {
        throw $thisType.CreateFormatException(input);
      }
      return guid.value;
    }
  );

  $.Method({Static:true , Public:false}, "ParseFormat", 
    $sig.make(0xC8B, $asm01.TypeRef("System.Guid/Format"), [$asm01.TypeRef("System.String")], []), 
    function Guid_ParseFormat (format) {
      if (format.length !== 1) {
        throw new ($T0D())("Wrong format");
      }
      var c = (format[0]);
      switch (c) {
        case "B": 
          var result = $T15().B;
          return result;

        case "C": 
          break;

        case "D": 
          result = $T15().D;
          return result;

        default: 
          switch (c) {
            case "N": 
              result = $T15().N;
              return result;

            case "O": 
              break;

            case "P": 
              result = $T15().P;
              return result;

            default: 
              if (c.charCodeAt(0) === "X".charCodeAt(0)) {
                result = $T15().X;
                return result;
              }
              break;

          }
          break;

      }
      throw new ($T0D())("Wrong format");
    }
  );

  $.Method({Static:false, Public:true }, "ToByteArray", 
    $sig.make(0xC64, $jsilcore.TypeRef("System.Array", [$asm01.TypeRef("System.Byte")]), [], []), 
    function Guid_ToByteArray () {
      var res = JSIL.Array.New($T08(), 16);
      var d = 0;
      var tmp = $sig.get(0xCB1, System.Array.Of($asm01.System.Byte), [$asm01.System.Int32], []).CallStatic($T02(), "GetBytes", null, this._a);

      for (var s = 0; s < 4; ++s) {
        res[d++] = tmp[s];
      }
      tmp = $sig.get(0xCAF, System.Array.Of($asm01.System.Byte), [$asm01.System.Int16], []).CallStatic($T02(), "GetBytes", null, this._b);

      for (s = 0; s < 2; ++s) {
        res[d++] = tmp[s];
      }
      tmp = $sig.get(0xCAF, System.Array.Of($asm01.System.Byte), [$asm01.System.Int16], []).CallStatic($T02(), "GetBytes", null, this._c);

      for (s = 0; s < 2; ++s) {
        res[d++] = tmp[s];
      }
      res[8] = this._d;
      res[9] = this._e;
      res[10] = this._f;
      res[11] = this._g;
      res[12] = this._h;
      res[13] = this._i;
      res[14] = this._j;
      res[15] = this._k;
      return res;
    }
  );

  $.Method({Static:true , Public:false}, "ToHex", 
    $sig.make(0xBEF, $asm01.TypeRef("System.Char"), [$asm01.TypeRef("System.Int32")], []), 
    function Guid_ToHex (b) {
      return (((b < 10) ? ((48 + b) | 0) : ((((97 + b) | 0) - 10) | 0))).charCodeAt(0);
    }
  );

  $.Method({Static:false, Public:true }, "toString", 
    $sig.make(0xC6D, $asm01.TypeRef("System.String"), [], []), 
    function Guid_toString () {
      return this.BaseToString(true, false, false);
    }
  );

  $.Method({Static:false, Public:true }, "ToString", 
    $sig.make(0xC6E, $asm01.TypeRef("System.String"), [$asm01.TypeRef("System.String")], []), 
    function Guid_ToString (format) {
      var h = true;
      var p = false;
      var b = false;
      if (format !== null) {
        var f = format.toLowerCase();
        if (f == "b") {
          b = true;
        } else if (f == "p") {
          p = true;
        } else if (f == "n") {
          h = false;
        } else if (!(!(f != "d") || !(f != $T03().Empty))) {
          throw new ($T10())($T0E().GetText("Argument to Guid.ToString(string format) should be \"b\", \"B\", \"d\", \"D\", \"n\", \"N\", \"p\" or \"P\"", JSIL.Array.New($T00(), 0)));
        }
      }
      return this.BaseToString(h, p, b);
    }
  );

  $.Method({Static:false, Public:true }, "ToString", 
    $sig.make(0xC70, $asm01.TypeRef("System.String"), [$asm01.TypeRef("System.String"), $asm01.TypeRef("System.IFormatProvider")], []), 
    function Guid_ToString (format, provider) {
      return this.ToString(format);
    }
  );

  $.Method({Static:true , Public:true }, "TryParse", 
    $sig.make(0xC84, $asm01.TypeRef("System.Boolean"), [$asm01.TypeRef("System.String"), $jsilcore.TypeRef("JSIL.Reference", [$.Type])], []), 
    function Guid_TryParse (input, /* ref */ result) {
      if (input === null) {
        throw new ($T0F())("input");
      }
      var parser = new ($T05())(input);
      return parser.Parse(/* ref */ result);
    }
  );

  $.Method({Static:true , Public:true }, "TryParseExact", 
    $sig.make(0xC87, $asm01.TypeRef("System.Boolean"), [
        $asm01.TypeRef("System.String"), $asm01.TypeRef("System.String"), 
        $jsilcore.TypeRef("JSIL.Reference", [$.Type])
      ], []), 
    function Guid_TryParseExact (input, format, /* ref */ result) {
      if (input === null) {
        throw new ($T0F())("input");
      }
      if (format === null) {
        throw new ($T0F())("format");
      }
      var parser = new ($T05())(input);
      return parser.Parse($thisType.ParseFormat(format), /* ref */ result);
    }
  );

  $.Field({Static:false, Public:false}, "_a", $asm01.TypeRef("System.Int32")); 
  $.Field({Static:false, Public:false}, "_b", $asm01.TypeRef("System.Int16")); 
  $.Field({Static:false, Public:false}, "_c", $asm01.TypeRef("System.Int16")); 
  $.Field({Static:false, Public:false}, "_d", $asm01.TypeRef("System.Byte")); 
  $.Field({Static:false, Public:false}, "_e", $asm01.TypeRef("System.Byte")); 
  $.Field({Static:false, Public:false}, "_f", $asm01.TypeRef("System.Byte")); 
  $.Field({Static:false, Public:false}, "_g", $asm01.TypeRef("System.Byte")); 
  $.Field({Static:false, Public:false}, "_h", $asm01.TypeRef("System.Byte")); 
  $.Field({Static:false, Public:false}, "_i", $asm01.TypeRef("System.Byte")); 
  $.Field({Static:false, Public:false}, "_j", $asm01.TypeRef("System.Byte")); 
  $.Field({Static:false, Public:false}, "_k", $asm01.TypeRef("System.Byte")); 
  $.Field({Static:true , Public:true , ReadOnly:true }, "Empty", $.Type); 
  $.Field({Static:true , Public:false}, "_rngAccess", $asm01.TypeRef("System.Object")); 
  $.Field({Static:true , Public:false}, "_rng", $asm01.TypeRef("System.Security.Cryptography.RandomNumberGenerator")); 
  $.Field({Static:true , Public:false}, "_fastRng", $asm01.TypeRef("System.Security.Cryptography.RandomNumberGenerator")); 
  $.Method({Static:true , Public:false}, ".cctor", 
    $sig.make(0xC8D, null, [], []), 
    function Guid__cctor () {
      $thisType.Empty = new $thisType();
      $thisType.Empty = $sig.get(0xBC1, null, [
          $asm01.System.Int32, $asm01.System.Int16, 
          $asm01.System.Int16, $asm01.System.Byte, 
          $asm01.System.Byte, $asm01.System.Byte, 
          $asm01.System.Byte, $asm01.System.Byte, 
          $asm01.System.Byte, $asm01.System.Byte, 
          $asm01.System.Byte
        ], []).Construct($thisType, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
      $thisType._rngAccess = new ($T00())();
    }
  );

  $.ImplementInterfaces(
      $asm01.TypeRef("System.IFormattable"), $asm01.TypeRef("System.IComparable"), 
      $asm01.TypeRef("System.IComparable`1", [$.Type]), $asm01.TypeRef("System.IEquatable`1", [$.Type])
  )
})
  .Attribute($asm01.TypeRef("System.Runtime.InteropServices.ComVisibleAttribute"), function () { return [true]; });

JSIL.MakeEnum(
  "System.Guid/Format", false, {
    N: 0, 
    D: 1, 
    B: 2, 
    P: 3, 
    X: 4
  }, false
);

JSIL.MakeClass($asm01.TypeRef("System.Object"), "System.Guid/GuidParser", false, [], function ($) {
  var $thisType = $.publicInterface;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm01.System.String)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm01.System.Guid_Format)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm01.System.Boolean)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm01.System.Guid)) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize($asm01.System.Char)) ();
  };
  var $T05 = function () {
    return ($T05 = JSIL.Memoize($asm01.System.Int32)) ();
  };
  var $T06 = function () {
    return ($T06 = JSIL.Memoize($asm01.System.UInt64)) ();
  };
  var $T07 = function () {
    return ($T07 = JSIL.Memoize($asm01.System.Void)) ();
  };
  var $T08 = function () {
    return ($T08 = JSIL.Memoize(System.Array.Of($asm01.System.Byte))) ();
  };
  var $T09 = function () {
    return ($T09 = JSIL.Memoize($asm01.System.Byte)) ();
  };

  $.Method({Static:false, Public:true }, ".ctor", 
    $sig.make(0xFE6, null, [$asm01.TypeRef("System.String")], []), 
    function GuidParser__ctor (src) {
      this._src = src;
      this.Reset();
    }
  );

  $.Method({Static:false, Public:false}, "get_Eof", 
    $sig.make(0xFCB, $asm01.TypeRef("System.Boolean"), [], []), 
    function GuidParser_get_Eof () {
      return (this._cur >= this._length);
    }
  );

  $.Method({Static:true , Public:false}, "HasHyphen", 
    $sig.make(0xFEE, $asm01.TypeRef("System.Boolean"), [$asm01.TypeRef("System.Guid/Format")], []), 
    function GuidParser_HasHyphen (format) {
      switch (format.valueOf()) {
        case 1: 
        case 2: 
        case 3: 
          var result = true;
          break;

        default: 
          result = false;
          break;

      }
      return result;
    }
  );

  $.Method({Static:false, Public:true }, "Parse", 
    $sig.make(0xFFF, $asm01.TypeRef("System.Boolean"), [$asm01.TypeRef("System.Guid/Format"), $jsilcore.TypeRef("JSIL.Reference", [$asm01.TypeRef("System.Guid")])], []), 
    function GuidParser_Parse (format, /* ref */ guid) {
      if (format === $T01().X) {
        var result = this.TryParseX(/* ref */ guid);
      } else {
        result = this.TryParseNDBP(format, /* ref */ guid);
      }
      return result;
    }
  );

  $.Method({Static:false, Public:true }, "Parse", 
    $sig.make(0x1002, $asm01.TypeRef("System.Boolean"), [$jsilcore.TypeRef("JSIL.Reference", [$asm01.TypeRef("System.Guid")])], []), 
    function GuidParser_Parse (/* ref */ guid) {
      if (this.TryParseNDBP($T01().N, /* ref */ guid)) {
        var result = true;
      } else {
        this.Reset();
        if (this.TryParseNDBP($T01().D, /* ref */ guid)) {
          result = true;
        } else {
          this.Reset();
          if (this.TryParseNDBP($T01().B, /* ref */ guid)) {
            result = true;
          } else {
            this.Reset();
            if (this.TryParseNDBP($T01().P, /* ref */ guid)) {
              result = true;
            } else {
              this.Reset();
              result = this.TryParseX(/* ref */ guid);
            }
          }
        }
      }
      return result;
    }
  );

  $.Method({Static:false, Public:false}, "ParseChar", 
    $sig.make(0xFFA, $asm01.TypeRef("System.Boolean"), [$asm01.TypeRef("System.Char")], []), 
    function GuidParser_ParseChar (c) {
      if (!(this.get_Eof() || (this._src[this._cur].charCodeAt(0) !== c.charCodeAt(0)))) {
        ++this._cur;
        var result = true;
      } else {
        result = false;
      }
      return result;
    }
  );

  $.Method({Static:false, Public:false}, "ParseHex", 
    $sig.make(0xFFD, $asm01.TypeRef("System.Boolean"), [
        $asm01.TypeRef("System.Int32"), $asm01.TypeRef("System.Boolean"), 
        $jsilcore.TypeRef("JSIL.Reference", [$asm01.TypeRef("System.UInt64")])
      ], []), 
    function GuidParser_ParseHex (length, strict, /* ref */ res) {
      res.value = $T06().Create(0, 0, 0);

    $loop0: 
      for (var i = 0; i < length; ) {
        if (!this.get_Eof()) {
          var c = $T04().ToLowerInvariant(this._src[this._cur]);
          if (("0123456789".indexOf(c) !== -1)) {
            res.value = $T06().op_Subtraction(
              $T06().op_Addition(
                $T06().op_Multiplication(res.value, $T06().Create(16, 0, 0)), 
                $T06().FromNumber(c.charCodeAt(0))
              ), 
              $T06().Create(48, 0, 0)
            );
            ++this._cur;
          } else {
            if ((c.charCodeAt(0) < "a".charCodeAt(0)) || (c.charCodeAt(0) > "f".charCodeAt(0))) {
              var result = (!strict || 
                !strict || 
                (((i + 1) | 0) === length));
              return result;
            }
            res.value = $T06().op_Addition(
              $T06().op_Subtraction(
                $T06().op_Addition(
                  $T06().op_Multiplication(res.value, $T06().Create(16, 0, 0)), 
                  $T06().FromNumber(c.charCodeAt(0))
                ), 
                $T06().Create(97, 0, 0)
              ), 
              $T06().Create(10, 0, 0)
            );
            ++this._cur;
          }
          ++i;
          continue $loop0;
        }
        result = (!strict || 
          (((i + 1) | 0) === length));
        return result;
      }
      result = true;
      return result;
    }
  );

  $.Method({Static:false, Public:false}, "ParseHexPrefix", 
    $sig.make(0xFF7, $asm01.TypeRef("System.Boolean"), [], []), 
    function GuidParser_ParseHexPrefix () {
      return (this.ParseChar("0") && this.ParseChar("x"));
    }
  );

  $.Method({Static:false, Public:false}, "Reset", 
    $sig.make(0xFEA, null, [], []), 
    function GuidParser_Reset () {
      this._cur = 0;
      this._length = this._src.length;
    }
  );

  $.Method({Static:false, Public:false}, "TryParseNDBP", 
    $sig.make(0xFF3, $asm01.TypeRef("System.Boolean"), [$asm01.TypeRef("System.Guid/Format"), $jsilcore.TypeRef("JSIL.Reference", [$asm01.TypeRef("System.Guid")])], []), 
    function GuidParser_TryParseNDBP (format, /* ref */ guid) {
      var a = new JSIL.Variable(0);
      var b = new JSIL.Variable(0);
      var c = new JSIL.Variable(0);
      var dd = new JSIL.Variable(0);
      guid.value = new ($T03())();
      if (!((format !== $T01().B) || this.ParseChar("{"))) {
        var result = false;
      } else if (!((format !== $T01().P) || this.ParseChar("("))) {
        result = false;
      } else if (!this.ParseHex(8, true, /* ref */ a)) {
        result = false;
      } else {
        var has_hyphen = $thisType.HasHyphen(format);
        if (!(!has_hyphen || this.ParseChar("-"))) {
          result = false;
        } else if (!this.ParseHex(4, true, /* ref */ b)) {
          result = false;
        } else if (!(!has_hyphen || this.ParseChar("-"))) {
          result = false;
        } else if (!this.ParseHex(4, true, /* ref */ c)) {
          result = false;
        } else if (!(!has_hyphen || this.ParseChar("-"))) {
          result = false;
        } else {
          var d = JSIL.Array.New($T09(), 8);

          for (var i = 0; i < d.length; ++i) {
            if (!this.ParseHex(2, true, /* ref */ dd)) {
              result = false;
              return result;
            }
            if (!((i !== 1) || 
                !has_hyphen || this.ParseChar("-"))) {
              result = false;
              return result;
            }
            d[i] = dd.value;
          }
          if (!((format !== $T01().B) || this.ParseChar("}"))) {
            result = false;
          } else if (!((format !== $T01().P) || this.ParseChar(")"))) {
            result = false;
          } else if (!this.get_Eof()) {
            result = false;
          } else {
            guid.value = new ($T03())(a.value, b.value, c.value, d);
            result = true;
          }
        }
      }
      return result;
    }
  );

  $.Method({Static:false, Public:false}, "TryParseX", 
    $sig.make(0xFF4, $asm01.TypeRef("System.Boolean"), [$jsilcore.TypeRef("JSIL.Reference", [$asm01.TypeRef("System.Guid")])], []), 
    function GuidParser_TryParseX (/* ref */ guid) {
      var a = new JSIL.Variable(0);
      var b = new JSIL.Variable(0);
      var c = new JSIL.Variable(0);
      var dd = new JSIL.Variable(0);
      guid.value = new ($T03())();
      if (!(!(!this.ParseChar("{") || 
            !this.ParseHexPrefix() || 
            !this.ParseHex(8, false, /* ref */ a) || 
            !this.ParseChar(",") || 
            !this.ParseHexPrefix() || 
            !this.ParseHex(4, false, /* ref */ b) || 
            !this.ParseChar(",") || 
            !this.ParseHexPrefix() || 
            !this.ParseHex(4, false, /* ref */ c) || 
            !this.ParseChar(",")) && this.ParseChar("{"))) {
        var result = false;
      } else {
        var d = JSIL.Array.New($T09(), 8);

        for (var i = 0; i < d.length; ++i) {
          if (!(this.ParseHexPrefix() && this.ParseHex(2, false, /* ref */ dd))) {
            result = false;
            return result;
          }
          d[i] = dd.value;
          if (!((i === 7) || this.ParseChar(","))) {
            result = false;
            return result;
          }
        }
        if (!(this.ParseChar("}") && this.ParseChar("}"))) {
          result = false;
        } else if (!this.get_Eof()) {
          result = false;
        } else {
          guid.value = new ($T03())(a.value, b.value, c.value, d);
          result = true;
        }
      }
      return result;
    }
  );

  $.Field({Static:false, Public:false}, "_src", $asm01.TypeRef("System.String")); 
  $.Field({Static:false, Public:false}, "_length", $asm01.TypeRef("System.Int32")); 
  $.Field({Static:false, Public:false}, "_cur", $asm01.TypeRef("System.Int32")); 
  $.Property({Static:false, Public:false}, "Eof", $asm01.TypeRef("System.Boolean"));

});

JSIL.MakeEnum(
  "System.Runtime.InteropServices.LayoutKind", true, {
    Sequential: 0, 
    Explicit: 2, 
    Auto: 3
  }, false
);

JSIL.MakeInterface(
  "System.Collections.IHashCodeProvider", true, [], function ($) {
    $.Method({}, "GetHashCode", $sig.make(0x724, $asm01.TypeRef("System.Int32"), [$asm01.TypeRef("System.Object")], []));
  }, []);

JSIL.MakeInterface(
  "System.Collections.IComparer", true, [], function ($) {
    $.Method({}, "Compare", $sig.make(0x3B8, $asm01.TypeRef("System.Int32"), [$asm01.TypeRef("System.Object"), $asm01.TypeRef("System.Object")], []));
  }, []);

JSIL.MakeClass($asm01.TypeRef("System.Object"), "System.Collections.Comparer", true, [], function ($) {
  var $thisType = $.publicInterface;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm01.System.Object)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm01.System.Int32)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm01.System.IComparable)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm01.System.ArgumentException)) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize($asm01.System.Locale)) ();
  };

  $.Method({Static:false, Public:true }, ".ctor", 
    $sig.make(0xCF2, null, [], []), 
    function Comparer__ctor () {
    }
  );

  $.Method({Static:false, Public:true }, "Compare", 
    $sig.make(0xCF0, $asm01.TypeRef("System.Int32"), [$asm01.TypeRef("System.Object"), $asm01.TypeRef("System.Object")], []), 
    function Comparer_Compare (a, b) {
      if (a === b) {
        var result = 0;
      } else if (a === null) {
        result = -1;
      } else if (b === null) {
        result = 1;
      } else if ($T02().$Is(a)) {
        result = $T02().$As(a).IComparable_CompareTo(b);
      } else {
        if (!$T02().$Is(b)) {
          throw new ($T03())($T04().GetText("Neither 'a' nor 'b' implements IComparable.", JSIL.Array.New($T00(), 0)));
        }
        result = -$T02().$As(b).IComparable_CompareTo(a);
      }
      return result;
    }
  );

  $.Field({Static:true , Public:true , ReadOnly:true }, "Default", $.Type); 
  $.Method({Static:true , Public:false}, ".cctor", 
    $sig.make(0xCF4, null, [], []), 
    function Comparer__cctor () {
      $thisType.Default = new $thisType();
    }
  );

  $.ImplementInterfaces($asm01.TypeRef("System.Collections.IComparer"), $asm01.TypeRef("System.Runtime.Serialization.ISerializable"))
})
  .Attribute($asm01.TypeRef("System.Runtime.InteropServices.ComVisibleAttribute"), function () { return [true]; });

JSIL.MakeClass($asm01.TypeRef("System.Collections.ObjectModel.Collection`1", [new JSIL.GenericParameter("TItem", "System.Collections.ObjectModel.KeyedCollection`2")]), "System.Collections.ObjectModel.KeyedCollection`2", true, ["TKey", "TItem"], function ($) {
  var $thisType = $.publicInterface;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm01.System.Int32)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm01.System.ArgumentException)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm01.System.Boolean)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm01.System.Collections.Generic.KeyNotFoundException)) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize($asm01.System.ArgumentNullException)) ();
  };

  $.Method({Static:false, Public:false}, ".ctor", 
    $sig.make(0xD1E, null, [], []), 
    function KeyedCollection$b2__ctor () {
      $thisType.Of($thisType.TKey.get(this), $thisType.TItem.get(this)).prototype._ctor.call(this, null, 0);
    }
  );

  $.Method({Static:false, Public:false}, ".ctor", 
    $sig.make(0xD21, null, [$asm01.TypeRef("System.Collections.Generic.IEqualityComparer`1", [new JSIL.GenericParameter("TKey", "System.Collections.ObjectModel.KeyedCollection`2")])], []), 
    function KeyedCollection$b2__ctor (comparer) {
      $thisType.Of($thisType.TKey.get(this), $thisType.TItem.get(this)).prototype._ctor.call(this, comparer, 0);
    }
  );

  $.Method({Static:false, Public:false}, ".ctor", 
    $sig.make(0xD23, null, [$asm01.TypeRef("System.Collections.Generic.IEqualityComparer`1", [new JSIL.GenericParameter("TKey", "System.Collections.ObjectModel.KeyedCollection`2")]), $asm01.TypeRef("System.Int32")], []), 
    function KeyedCollection$b2__ctor (comparer, dictionaryCreationThreshold) {
      $asm01.System.Collections.ObjectModel.Collection$b1.Of($thisType.TItem.get(this)).prototype._ctor.call(this);
      if (comparer !== null) {
        this.comparer = comparer;
      } else {
        this.comparer = $asm01.System.Collections.Generic.EqualityComparer$b1.Of($thisType.TKey.get(this)).get_Default();
      }
      this.dictionaryCreationThreshold = dictionaryCreationThreshold;
      if (dictionaryCreationThreshold === 0) {
        this.dictionary = (new JSIL.MethodSignature(null, [$asm01.TypeRef("System.Collections.Generic.IEqualityComparer`1", [$thisType.TKey.get(this)])], [])).Construct($asm01.System.Collections.Generic.Dictionary$b2.Of($thisType.TKey.get(this), $thisType.TItem.get(this)), this.comparer);
      }
    }
  );

  $.Method({Static:false, Public:false}, "ChangeItemKey", 
    $sig.make(0xD2D, null, [new JSIL.GenericParameter("TItem", "System.Collections.ObjectModel.KeyedCollection`2"), new JSIL.GenericParameter("TKey", "System.Collections.ObjectModel.KeyedCollection`2")], []), 
    function KeyedCollection$b2_ChangeItemKey (item, newKey) {
      if (!(new JSIL.MethodSignature($asm01.System.Boolean, [$thisType.TItem.get(this)], [])).CallVirtual("Contains", null, this, JSIL.CloneParameter($thisType.TItem.get(this), item))) {
        throw new ($T01())();
      }
      var oldKey = JSIL.CloneParameter($thisType.TKey.get(this), this.GetKeyForItem(JSIL.CloneParameter($thisType.TItem.get(this), item)));
      if (!this.comparer.IEqualityComparer$b1_Equals(JSIL.CloneParameter($thisType.TKey.get(this), oldKey), JSIL.CloneParameter($thisType.TKey.get(this), newKey))) {
        if ($thisType.Of($thisType.TKey.get(this), $thisType.TItem.get(this)).prototype.Contains.call(this, JSIL.CloneParameter($thisType.TKey.get(this), newKey))) {
          throw new ($T01())();
        }
        if (this.dictionary !== null) {
          if (!this.dictionary.Remove(JSIL.CloneParameter($thisType.TKey.get(this), oldKey))) {
            throw new ($T01())();
          }
          this.dictionary.Add(JSIL.CloneParameter($thisType.TKey.get(this), newKey), JSIL.CloneParameter($thisType.TItem.get(this), item));
        }
      }
    }
  );

  $.Method({Static:false, Public:false}, "ClearItems", 
    $sig.make(0xD2F, null, [], []), 
    function KeyedCollection$b2_ClearItems () {
      if (this.dictionary !== null) {
        this.dictionary.Clear();
      }
      $asm01.System.Collections.ObjectModel.Collection$b1.Of($thisType.TItem.get(this)).prototype.ClearItems.call(this);
    }
  );

  $.Method({Static:false, Public:true }, "Contains", 
    $sig.make(0xD25, $asm01.TypeRef("System.Boolean"), [new JSIL.GenericParameter("TKey", "System.Collections.ObjectModel.KeyedCollection`2")], []), 
    function KeyedCollection$b2_Contains (key) {
      if (this.dictionary !== null) {
        var result = this.dictionary.ContainsKey(JSIL.CloneParameter($thisType.TKey.get(this), key));
      } else {
        result = ($thisType.Of($thisType.TKey.get(this), $thisType.TItem.get(this)).prototype.IndexOfKey.call(this, JSIL.CloneParameter($thisType.TKey.get(this), key)) >= 0);
      }
      return result;
    }
  );

  $.Method({Static:false, Public:true }, "get_Comparer", 
    $sig.make(0xD17, $asm01.TypeRef("System.Collections.Generic.IEqualityComparer`1", [new JSIL.GenericParameter("TKey", "System.Collections.ObjectModel.KeyedCollection`2")]), [], []), 
    function KeyedCollection$b2_get_Comparer () {
      return this.comparer;
    }
  );

  $.Method({Static:false, Public:false}, "get_Dictionary", 
    $sig.make(0xD1C, $asm01.TypeRef("System.Collections.Generic.IDictionary`2", [new JSIL.GenericParameter("TKey", "System.Collections.ObjectModel.KeyedCollection`2"), new JSIL.GenericParameter("TItem", "System.Collections.ObjectModel.KeyedCollection`2")]), [], []), 
    function KeyedCollection$b2_get_Dictionary () {
      return this.dictionary;
    }
  );

  $.Method({Static:false, Public:true }, "get_Item", 
    $sig.make(0xD1A, new JSIL.GenericParameter("TItem", "System.Collections.ObjectModel.KeyedCollection`2"), [new JSIL.GenericParameter("TKey", "System.Collections.ObjectModel.KeyedCollection`2")], []), 
    function KeyedCollection$b2_get_Item (key) {
      if (this.dictionary !== null) {
        var result = JSIL.CloneParameter($thisType.TItem.get(this), this.dictionary.get_Item(JSIL.CloneParameter($thisType.TKey.get(this), key)));
      } else {
        var idx = $thisType.Of($thisType.TKey.get(this), $thisType.TItem.get(this)).prototype.IndexOfKey.call(this, JSIL.CloneParameter($thisType.TKey.get(this), key));
        if (idx < 0) {
          throw new ($T03())();
        }
        result = JSIL.CloneParameter($thisType.TItem.get(this), (new JSIL.MethodSignature($thisType.TItem.get(this), [$asm01.System.Int32], [])).CallVirtual("get_Item", null, this, idx));
      }
      return result;
    }
  );

  $.Method({Static:false, Public:false}, "IndexOfKey", 
    $sig.make(0xD27, $asm01.TypeRef("System.Int32"), [new JSIL.GenericParameter("TKey", "System.Collections.ObjectModel.KeyedCollection`2")], []), 
    function KeyedCollection$b2_IndexOfKey (key) {

      for (var i = ((this.get_Count() - 1) | 0); i >= 0; --i) {
        var lkey = JSIL.CloneParameter($thisType.TKey.get(this), this.GetKeyForItem(JSIL.CloneParameter($thisType.TItem.get(this), (new JSIL.MethodSignature($thisType.TItem.get(this), [$asm01.System.Int32], [])).CallVirtual("get_Item", null, this, i))));
        if (this.comparer.IEqualityComparer$b1_Equals(key, JSIL.CloneParameter($thisType.TKey.get(this), lkey))) {
          var result = i;
          return result;
        }
      }
      result = -1;
      return result;
    }
  );

  $.Method({Static:false, Public:false}, "InsertItem", 
    $sig.make(0xD34, null, [$asm01.TypeRef("System.Int32"), new JSIL.GenericParameter("TItem", "System.Collections.ObjectModel.KeyedCollection`2")], []), 
    function KeyedCollection$b2_InsertItem (index, item) {
      var key = JSIL.CloneParameter($thisType.TKey.get(this), this.GetKeyForItem(JSIL.CloneParameter($thisType.TItem.get(this), item)));
      if (key === null) {
        throw new ($T04())("GetKeyForItem(item)");
      }
      if (!((this.dictionary === null) || !this.dictionary.ContainsKey(JSIL.CloneParameter($thisType.TKey.get(this), key)))) {
        throw new ($T01())("An element with the same key already exists in the dictionary.");
      }
      if (this.dictionary === null) {

        for (var i = 0; i < this.get_Count(); ++i) {
          if (this.comparer.IEqualityComparer$b1_Equals(JSIL.CloneParameter($thisType.TKey.get(this), key), JSIL.CloneParameter($thisType.TKey.get(this), this.GetKeyForItem(JSIL.CloneParameter($thisType.TItem.get(this), (new JSIL.MethodSignature($thisType.TItem.get(this), [$asm01.System.Int32], [])).CallVirtual("get_Item", null, this, i)))))) {
            throw new ($T01())("An element with the same key already exists in the dictionary.");
          }
        }
      }
      (new JSIL.MethodSignature(null, [$asm01.System.Int32, $thisType.TItem.get(this)], [])).Call($asm01.System.Collections.ObjectModel.Collection$b1.Of($thisType.TItem.get(this)).prototype, "InsertItem", null, this, index, JSIL.CloneParameter($thisType.TItem.get(this), item));
      if (this.dictionary !== null) {
        this.dictionary.Add(JSIL.CloneParameter($thisType.TKey.get(this), key), JSIL.CloneParameter($thisType.TItem.get(this), item));
      } else if (!((this.dictionaryCreationThreshold === -1) || (this.get_Count() <= this.dictionaryCreationThreshold))) {
        this.dictionary = (new JSIL.MethodSignature(null, [$asm01.TypeRef("System.Collections.Generic.IEqualityComparer`1", [$thisType.TKey.get(this)])], [])).Construct($asm01.System.Collections.Generic.Dictionary$b2.Of($thisType.TKey.get(this), $thisType.TItem.get(this)), this.comparer);

        for (i = 0; i < this.get_Count(); ++i) {
          var dictitem = JSIL.CloneParameter($thisType.TItem.get(this), (new JSIL.MethodSignature($thisType.TItem.get(this), [$asm01.System.Int32], [])).CallVirtual("get_Item", null, this, i));
          this.dictionary.Add(JSIL.CloneParameter($thisType.TKey.get(this), this.GetKeyForItem(JSIL.CloneParameter($thisType.TItem.get(this), dictitem))), JSIL.CloneParameter($thisType.TItem.get(this), dictitem));
        }
      }
    }
  );

  $.Method({Static:false, Public:true }, "Remove", 
    $sig.make(0xD29, $asm01.TypeRef("System.Boolean"), [new JSIL.GenericParameter("TKey", "System.Collections.ObjectModel.KeyedCollection`2")], []), 
    function KeyedCollection$b2_Remove (key) {
      var item = new JSIL.Variable(($thisType.TItem.get(this).IsValueType ? JSIL.CreateInstanceOfType($thisType.TItem.get(this)) : null));
      if (this.dictionary !== null) {
        var result = (this.dictionary.TryGetValue(JSIL.CloneParameter($thisType.TKey.get(this), key), /* ref */ item) && 
          (new JSIL.MethodSignature($asm01.System.Boolean, [$thisType.TItem.get(this)], [])).CallVirtual("Remove", null, this, JSIL.CloneParameter($thisType.TItem.get(this), item.value)));
      } else {
        var idx = $thisType.Of($thisType.TKey.get(this), $thisType.TItem.get(this)).prototype.IndexOfKey.call(this, JSIL.CloneParameter($thisType.TKey.get(this), key));
        if (idx === -1) {
          result = false;
        } else {
          this.RemoveAt(idx);
          result = true;
        }
      }
      return result;
    }
  );

  $.Method({Static:false, Public:false}, "RemoveItem", 
    $sig.make(0xD37, null, [$asm01.TypeRef("System.Int32")], []), 
    function KeyedCollection$b2_RemoveItem (index) {
      if (this.dictionary !== null) {
        var key = JSIL.CloneParameter($thisType.TKey.get(this), this.GetKeyForItem(JSIL.CloneParameter($thisType.TItem.get(this), (new JSIL.MethodSignature($thisType.TItem.get(this), [$asm01.System.Int32], [])).CallVirtual("get_Item", null, this, index))));
        this.dictionary.Remove(JSIL.CloneParameter($thisType.TKey.get(this), key));
      }
      $asm01.System.Collections.ObjectModel.Collection$b1.Of($thisType.TItem.get(this)).prototype.RemoveItem.call(this, index);
    }
  );

  $.Method({Static:false, Public:false}, "SetItem", 
    $sig.make(0xD3B, null, [$asm01.TypeRef("System.Int32"), new JSIL.GenericParameter("TItem", "System.Collections.ObjectModel.KeyedCollection`2")], []), 
    function KeyedCollection$b2_SetItem (index, item) {
      if (this.dictionary !== null) {
        this.dictionary.Remove(JSIL.CloneParameter($thisType.TKey.get(this), this.GetKeyForItem(JSIL.CloneParameter($thisType.TItem.get(this), (new JSIL.MethodSignature($thisType.TItem.get(this), [$asm01.System.Int32], [])).CallVirtual("get_Item", null, this, index)))));
        this.dictionary.Add(JSIL.CloneParameter($thisType.TKey.get(this), this.GetKeyForItem(JSIL.CloneParameter($thisType.TItem.get(this), item))), JSIL.CloneParameter($thisType.TItem.get(this), item));
      }
      (new JSIL.MethodSignature(null, [$asm01.System.Int32, $thisType.TItem.get(this)], [])).Call($asm01.System.Collections.ObjectModel.Collection$b1.Of($thisType.TItem.get(this)).prototype, "SetItem", null, this, index, JSIL.CloneParameter($thisType.TItem.get(this), item));
    }
  );

  $.Field({Static:false, Public:false}, "dictionary", $asm01.TypeRef("System.Collections.Generic.Dictionary`2", [$.GenericParameter("TKey"), $.GenericParameter("TItem")])); 
  $.Field({Static:false, Public:false}, "comparer", $asm01.TypeRef("System.Collections.Generic.IEqualityComparer`1", [$.GenericParameter("TKey")])); 
  $.Field({Static:false, Public:false}, "dictionaryCreationThreshold", $asm01.TypeRef("System.Int32")); 
  $.Property({Static:false, Public:true }, "Comparer", $asm01.TypeRef("System.Collections.Generic.IEqualityComparer`1", [new JSIL.GenericParameter("TKey", "System.Collections.ObjectModel.KeyedCollection`2")]));

  $.Property({Static:false, Public:true }, "Item", new JSIL.GenericParameter("TItem", "System.Collections.ObjectModel.KeyedCollection`2"));

  $.Property({Static:false, Public:false}, "Dictionary", $asm01.TypeRef("System.Collections.Generic.IDictionary`2", [new JSIL.GenericParameter("TKey", "System.Collections.ObjectModel.KeyedCollection`2"), new JSIL.GenericParameter("TItem", "System.Collections.ObjectModel.KeyedCollection`2")]));

})
  .Attribute($asm01.TypeRef("System.Reflection.DefaultMemberAttribute"), function () { return ["Item"]; })
  .Attribute($asm01.TypeRef("System.Runtime.InteropServices.ComVisibleAttribute"), function () { return [false]; })
  .Attribute($asm01.TypeRef("System.Diagnostics.DebuggerDisplayAttribute"), function () { return ["Count={Count}"]; })
  .Attribute($asm01.TypeRef("System.Diagnostics.DebuggerTypeProxyAttribute"), function () { return [$asm01.TypeRef("System.Collections.Generic.CollectionDebuggerView`2")]; });

JSIL.MakeClass($asm01.TypeRef("System.Object"), "System.Threading.Interlocked", true, [], function ($) {
  var $thisType = $.publicInterface;

  $.Method({Static:false, Public:true }, ".ctor", 
    $sig.make(0xDB1, null, [], []), 
    function Interlocked__ctor () {
    }
  );

  $.ExternalMethod({Static:true , Public:true }, "CompareExchange", 
    $sig.make(0xDAD, $asm01.TypeRef("System.Object"), [
        $jsilcore.TypeRef("JSIL.Reference", [$asm01.TypeRef("System.Object")]), $asm01.TypeRef("System.Object"), 
        $asm01.TypeRef("System.Object")
      ], [])
  )
    .Attribute($asm01.TypeRef("JSIL.Meta.JSRuntimeDispatch"))
    .Attribute($asm01.TypeRef("JSIL.Meta.JSExternal"));

  $.ExternalMethod({Static:true , Public:true }, "CompareExchange", 
    $sig.make(0xDB0, $asm01.TypeRef("System.Int32"), [
        $jsilcore.TypeRef("JSIL.Reference", [$asm01.TypeRef("System.Int32")]), $asm01.TypeRef("System.Int32"), 
        $asm01.TypeRef("System.Int32"), $jsilcore.TypeRef("JSIL.Reference", [$asm01.TypeRef("System.Boolean")])
      ], [])
  )
    .Attribute($asm01.TypeRef("JSIL.Meta.JSRuntimeDispatch"))
    .Attribute($asm01.TypeRef("JSIL.Meta.JSExternal"));

});

JSIL.DeclareNamespace("Mono");
JSIL.DeclareNamespace("Mono.Globalization");
JSIL.DeclareNamespace("Mono.Globalization.Unicode");
JSIL.MakeClass($asm01.TypeRef("System.Object"), "Mono.Globalization.Unicode.SimpleCollator", false, [], function ($) {
  var $thisType = $.publicInterface;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm01.System.Globalization.CultureInfo)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm01.System.String)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm01.System.Int32)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm01.System.Globalization.CompareOptions)) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize($asm01.System.NotImplementedException)) ();
  };
  var $T05 = function () {
    return ($T05 = JSIL.Memoize($asm01.System.Char)) ();
  };

  $.Method({Static:false, Public:true }, ".ctor", 
    $sig.make(0x70F, null, [$asm01.TypeRef("System.Globalization.CultureInfo")], []), 
    function SimpleCollator__ctor (ci) {
      this.ci = ci;
    }
  );

  $.Method({Static:false, Public:false}, "Compare", 
    $sig.make(0x710, $asm01.TypeRef("System.Int32"), [
        $asm01.TypeRef("System.String"), $asm01.TypeRef("System.Int32"), 
        $asm01.TypeRef("System.Int32"), $asm01.TypeRef("System.String"), 
        $asm01.TypeRef("System.Int32"), $asm01.TypeRef("System.Int32"), 
        $asm01.TypeRef("System.Globalization.CompareOptions")
      ], []), 
    function SimpleCollator_Compare (str1, offset1, length1, str2, offset2, length2, options) {
      return $T02().$Cast(str1.substr(offset1, length1) === str2.substr(offset2, offset2, length2));
    }
  );

  $.Method({Static:false, Public:false}, "GetSortKey", 
    $sig.make(0x711, $asm01.TypeRef("System.Globalization.SortKey"), [$asm01.TypeRef("System.String"), $asm01.TypeRef("System.Globalization.CompareOptions")], []), 
    function SimpleCollator_GetSortKey (source, options) {
      throw new ($T04())();
    }
  );

  $.Method({Static:false, Public:false}, "IndexOf", 
    $sig.make(0x712, $asm01.TypeRef("System.Int32"), [
        $asm01.TypeRef("System.String"), $asm01.TypeRef("System.Char"), 
        $asm01.TypeRef("System.Int32"), $asm01.TypeRef("System.Int32"), 
        $asm01.TypeRef("System.Globalization.CompareOptions")
      ], []), 
    function SimpleCollator_IndexOf (s, c, sindex, count, opt) {
      throw new ($T04())();
    }
  );

  $.Method({Static:false, Public:false}, "IndexOf", 
    $sig.make(0x715, $asm01.TypeRef("System.Int32"), [
        $asm01.TypeRef("System.String"), $asm01.TypeRef("System.String"), 
        $asm01.TypeRef("System.Int32"), $asm01.TypeRef("System.Int32"), 
        $asm01.TypeRef("System.Globalization.CompareOptions")
      ], []), 
    function SimpleCollator_IndexOf (s1, s2, sindex, count, opt) {
      throw new ($T04())();
    }
  );

  $.Method({Static:false, Public:false}, "IsPrefix", 
    $sig.make(0x717, $asm01.TypeRef("System.Boolean"), [
        $asm01.TypeRef("System.String"), $asm01.TypeRef("System.String"), 
        $asm01.TypeRef("System.Globalization.CompareOptions")
      ], []), 
    function SimpleCollator_IsPrefix (source, prefix, options) {
      throw new ($T04())();
    }
  );

  $.Method({Static:false, Public:false}, "IsSuffix", 
    $sig.make(0x716, $asm01.TypeRef("System.Boolean"), [
        $asm01.TypeRef("System.String"), $asm01.TypeRef("System.String"), 
        $asm01.TypeRef("System.Globalization.CompareOptions")
      ], []), 
    function SimpleCollator_IsSuffix (source, suffix, options) {
      throw new ($T04())();
    }
  );

  $.Method({Static:false, Public:false}, "LastIndexOf", 
    $sig.make(0x713, $asm01.TypeRef("System.Int32"), [
        $asm01.TypeRef("System.String"), $asm01.TypeRef("System.Char"), 
        $asm01.TypeRef("System.Int32"), $asm01.TypeRef("System.Int32"), 
        $asm01.TypeRef("System.Globalization.CompareOptions")
      ], []), 
    function SimpleCollator_LastIndexOf (s, c, sindex, count, opt) {
      throw new ($T04())();
    }
  );

  $.Method({Static:false, Public:false}, "LastIndexOf", 
    $sig.make(0x714, $asm01.TypeRef("System.Int32"), [
        $asm01.TypeRef("System.String"), $asm01.TypeRef("System.String"), 
        $asm01.TypeRef("System.Int32"), $asm01.TypeRef("System.Int32"), 
        $asm01.TypeRef("System.Globalization.CompareOptions")
      ], []), 
    function SimpleCollator_LastIndexOf (s1, s2, sindex, count, opt) {
      throw new ($T04())();
    }
  );

  $.Field({Static:false, Public:false}, "ci", $asm01.TypeRef("System.Globalization.CultureInfo")); 
});

JSIL.MakeStaticClass("System.Nullable", true, [], function ($) {
  var $thisType = $.publicInterface;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm01.System.Type)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm01.System.Int32)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm01.System.ArgumentNullException)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm01.System.Nullable$b1)) ();
  };

  $.Method({Static:true , Public:true }, "Compare", 
    $sig.make(0xDCF, $asm01.TypeRef("System.Int32"), [$asm01.TypeRef("System.Nullable`1", ["!!0"]), $asm01.TypeRef("System.Nullable`1", ["!!0"])], ["T"]), 
    function Nullable_Compare$b1 (T, n1, n2) {
      if (n1.has_value) {
        if (!n2.has_value) {
          var result = 1;
        } else {
          result = $asm01.System.Collections.Generic.Comparer$b1.Of(T).get_Default().Compare(JSIL.CloneParameter(this.T, n1.value), JSIL.CloneParameter(this.T, n2.value));
        }
      } else {
        result = (n2.has_value ? -1 : 0);
      }
      return result;
    }
  )
    .Attribute($asm01.TypeRef("System.Runtime.InteropServices.ComVisibleAttribute"), function () { return [false]; });

  $.Method({Static:true , Public:true }, "Equals", 
    $sig.make(0xDD1, $asm01.TypeRef("System.Boolean"), [$asm01.TypeRef("System.Nullable`1", ["!!0"]), $asm01.TypeRef("System.Nullable`1", ["!!0"])], ["T"]), 
    function Nullable_Equals$b1 (T, n1, n2) {
      return ((n1.has_value === n2.has_value) && (!n1.has_value || 
          (new JSIL.MethodSignature($asm01.System.Boolean, [T, T], [])).CallVirtual("Equals", null, $asm01.System.Collections.Generic.EqualityComparer$b1.Of(T).get_Default(), JSIL.CloneParameter(this.T, n1.value), JSIL.CloneParameter(this.T, n2.value))));
    }
  )
    .Attribute($asm01.TypeRef("System.Runtime.InteropServices.ComVisibleAttribute"), function () { return [false]; });

  $.Method({Static:true , Public:true }, "GetUnderlyingType", 
    $sig.make(0xDD3, $asm01.TypeRef("System.Type"), [$asm01.TypeRef("System.Type")], []), 
    function Nullable_GetUnderlyingType (nullableType) {
      if (nullableType === null) {
        throw new ($T02())("nullableType");
      }
      if (!(!nullableType.get_IsGenericType() || (nullableType.GetGenericTypeDefinition() !== $T03().__Type__))) {
        var result = nullableType.GetGenericArguments()[0];
      } else {
        result = null;
      }
      return result;
    }
  );

})
  .Attribute($asm01.TypeRef("System.Runtime.InteropServices.ComVisibleAttribute"), function () { return [true]; });

JSIL.MakeStruct($asm01.TypeRef("System.ValueType"), "System.Nullable`1", true, ["T"], function ($) {
  var $thisType = $.publicInterface;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm01.System.Object)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm01.System.Boolean)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm01.System.InvalidOperationException)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm01.System.Int32)) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize($asm01.System.String)) ();
  };

  $.Method({Static:false, Public:true }, ".ctor", 
    $sig.make(0xC6C, null, [new JSIL.GenericParameter("T", "System.Nullable`1")], []), 
    function Nullable$b1__ctor (value) {
      this.has_value = true;
      this.value = JSIL.CloneParameter($thisType.T.get(this), value);
    }
  );

  $.Method({Static:true , Public:false}, "Box", 
    $sig.make(0xC86, $asm01.TypeRef("System.Object"), [$.Type], []), 
    function Nullable$b1_Box (o) {
      if (!o.has_value) {
        var result = null;
      } else {
        result = JSIL.CloneParameter($thisType.T.get(this), o.value);
      }
      return result;
    }
  );

  $.Method({Static:false, Public:true }, "Object.Equals", 
    $sig.make(0xC6F, $asm01.TypeRef("System.Boolean"), [$asm01.TypeRef("System.Object")], []), 
    function Nullable$b1_Object_Equals (other) {
      if (other === null) {
        var result = !this.has_value;
      } else {
        result = ($thisType.Of($thisType.T.get(this)).$Is(other) && 
          (this === $thisType.Of($thisType.T.get(this)).$Cast(other)));
      }
      return result;
    }
  );

  $.Method({Static:false, Public:false}, "Equals", 
    $sig.make(0xC74, $asm01.TypeRef("System.Boolean"), [$.Type], []), 
    function Nullable$b1_Equals (other) {
      return ((other.has_value === this.has_value) && (!this.has_value || 
          other.value.Object_Equals(this.value)));
    }
  );

  $.Method({Static:false, Public:true }, "get_HasValue", 
    $sig.make(0xC67, $asm01.TypeRef("System.Boolean"), [], []), 
    function Nullable$b1_get_HasValue () {
      return this.has_value;
    }
  );

  $.Method({Static:false, Public:true }, "get_Value", 
    $sig.make(0xC69, new JSIL.GenericParameter("T", "System.Nullable`1"), [], []), 
    function Nullable$b1_get_Value () {
      if (!this.has_value) {
        throw new ($T02())("Nullable object must have a value.");
      }
      return this.value;
    }
  );

  $.Method({Static:false, Public:true }, "GetHashCode", 
    $sig.make(0xC76, $asm01.TypeRef("System.Int32"), [], []), 
    function Nullable$b1_GetHashCode () {
      if (!this.has_value) {
        var result = 0;
      } else {
        result = (JSIL.ObjectHashCode(this.value));
      }
      return result;
    }
  );

  $.Method({Static:false, Public:true }, "GetValueOrDefault", 
    $sig.make(0xC77, new JSIL.GenericParameter("T", "System.Nullable`1"), [], []), 
    function Nullable$b1_GetValueOrDefault () {
      return (this.has_value ? this.value : ($thisType.T.get(this).IsValueType ? JSIL.CreateInstanceOfType($thisType.T.get(this)) : null));
    }
  );

  $.Method({Static:false, Public:true }, "GetValueOrDefault", 
    $sig.make(0xC79, new JSIL.GenericParameter("T", "System.Nullable`1"), [new JSIL.GenericParameter("T", "System.Nullable`1")], []), 
    function Nullable$b1_GetValueOrDefault (defaultValue) {
      return (this.has_value ? this.value : defaultValue);
    }
  );

  $.Method({Static:true , Public:true }, "op_Explicit", 
    $sig.make(0xC83, new JSIL.GenericParameter("T", "System.Nullable`1"), [$.Type], []), 
    function Nullable$b1_op_Explicit (value) {
      return value;
    }
  );

  $.Method({Static:true , Public:true }, "op_Implicit", 
    $sig.make(0xC80, $.Type, [new JSIL.GenericParameter("T", "System.Nullable`1")], []), 
    function Nullable$b1_op_Implicit (value) {
      return value;
    }
  );

  $.Method({Static:false, Public:true }, "toString", 
    $sig.make(0xC7D, $asm01.TypeRef("System.String"), [], []), 
    function Nullable$b1_toString () {
      if (this.has_value) {
        var result = this.value.toString();
      } else {
        result = $T04().Empty;
      }
      return result;
    }
  );

  $.Method({Static:true , Public:false}, "Unbox", 
    $sig.make(0xC8A, $.Type, [$asm01.TypeRef("System.Object")], []), 
    function Nullable$b1_Unbox (o) {
      if (o === null) {
        var result = null;
      } else {
        result = $thisType.T.get(this).$Cast(o);
      }
      return result;
    }
  );

  $.Field({Static:false, Public:false}, "value", $.GenericParameter("T")); 
  $.Field({Static:false, Public:false}, "has_value", $asm01.TypeRef("System.Boolean")); 
  $.Property({Static:false, Public:true }, "HasValue", $asm01.TypeRef("System.Boolean"));

  $.Property({Static:false, Public:true }, "Value", new JSIL.GenericParameter("T", "System.Nullable`1"));

});

JSIL.MakeDelegate("System.Func`1", true, ["TResult"]);

JSIL.MakeDelegate("System.Func`2", true, ["T", "TResult"]);

JSIL.MakeDelegate("System.Func`3", true, ["T1", "T2", "TResult"]);

JSIL.MakeDelegate("System.Func`4", true, ["T1", "T2", "T3", "TResult"]);

JSIL.MakeDelegate("System.Func`5", true, [
    "T1", "T2", "T3", "T4", 
    "TResult"
  ]);

JSIL.MakeDelegate("System.Func`6", true, [
    "T1", "T2", "T3", "T4", 
    "T5", "TResult"
  ]);

JSIL.MakeDelegate("System.Func`7", true, [
    "T1", "T2", "T3", "T4", 
    "T5", "T6", "TResult"
  ]);

JSIL.MakeDelegate("System.Func`8", true, [
    "T1", "T2", "T3", "T4", 
    "T5", "T6", "T7", "TResult"
  ]);

JSIL.MakeDelegate("System.Func`9", true, [
    "T1", "T2", "T3", "T4", 
    "T5", "T6", "T7", "T8", 
    "TResult"
  ]);

JSIL.MakeClass($asm01.TypeRef("System.SystemException"), "System.ArgumentException", true, [], function ($) {
  var $thisType = $.publicInterface;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm01.System.SystemException)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm01.System.Locale)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm01.System.Object)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm01.System.String)) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize($asm01.System.Exception)) ();
  };
  var $T05 = function () {
    return ($T05 = JSIL.Memoize($asm01.System.Void)) ();
  };
  var $T06 = function () {
    return ($T06 = JSIL.Memoize($asm01.System.Environment)) ();
  };

  $.Method({Static:false, Public:true }, ".ctor", 
    $sig.make(0x809, null, [], []), 
    function ArgumentException__ctor () {
      $T00().prototype._ctor.call(this, $T01().GetText("Value does not fall within the expected range.", JSIL.Array.New($T02(), 0)));
      this.Exception$HResult$value = -2147024809;
    }
  );

  $.Method({Static:false, Public:true }, ".ctor", 
    $sig.make(0x80C, null, [$asm01.TypeRef("System.String")], []), 
    function ArgumentException__ctor (message) {
      $T00().prototype._ctor.call(this, message);
      this.Exception$HResult$value = -2147024809;
    }
  );

  $.Method({Static:false, Public:true }, ".ctor", 
    $sig.make(0x814, null, [$asm01.TypeRef("System.String"), $asm01.TypeRef("System.Exception")], []), 
    function ArgumentException__ctor (message, innerException) {
      $sig.get(0x7D2, null, [$asm01.System.String, $asm01.System.Exception], []).Call($T00().prototype, "_ctor", null, this, message, innerException);
      this.Exception$HResult$value = -2147024809;
    }
  );

  $.Method({Static:false, Public:true }, ".ctor", 
    $sig.make(0x818, null, [$asm01.TypeRef("System.String"), $asm01.TypeRef("System.String")], []), 
    function ArgumentException__ctor (message, paramName) {
      $T00().prototype._ctor.call(this, message);
      this.param_name = paramName;
      this.Exception$HResult$value = -2147024809;
    }
  );

  $.Method({Static:false, Public:true }, ".ctor", 
    $sig.make(0x81B, null, [
        $asm01.TypeRef("System.String"), $asm01.TypeRef("System.String"), 
        $asm01.TypeRef("System.Exception")
      ], []), 
    function ArgumentException__ctor (message, paramName, innerException) {
      $sig.get(0x7D2, null, [$asm01.System.String, $asm01.System.Exception], []).Call($T00().prototype, "_ctor", null, this, message, innerException);
      this.param_name = paramName;
      this.Exception$HResult$value = -2147024809;
    }
  );

  $.Method({Static:false, Public:true }, "get_Message", 
    $sig.make(0x804, $asm01.TypeRef("System.String"), [], []), 
    function ArgumentException_get_Message () {
      if (!((this.get_ParamName() === null) || (this.get_ParamName().length === 0))) {
        var result = (($T04().prototype.get_Message.call(this) + $T06().get_NewLine() + $T01().GetText("Parameter name: ", JSIL.Array.New($T02(), 0)) + this.get_ParamName()));
      } else {
        result = $T04().prototype.get_Message.call(this);
      }
      return result;
    }
  );

  $.Method({Static:false, Public:true }, "get_ParamName", 
    $sig.make(0x801, $asm01.TypeRef("System.String"), [], []), 
    function ArgumentException_get_ParamName () {
      return this.param_name;
    }
  );

  $.Constant({Static:true , Public:false}, "Result", -2147024809); 
  $.Field({Static:false, Public:false}, "param_name", $asm01.TypeRef("System.String")); 
  $.Property({Static:false, Public:true , Virtual:true }, "ParamName", $asm01.TypeRef("System.String"));

  $.Property({Static:false, Public:true , Virtual:true }, "Message", $asm01.TypeRef("System.String"));

})
  .Attribute($asm01.TypeRef("System.Runtime.InteropServices.ComVisibleAttribute"), function () { return [true]; });

JSIL.MakeClass($asm01.TypeRef("System.ArgumentException"), "System.ArgumentOutOfRangeException", true, [], function ($) {
  var $thisType = $.publicInterface;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm01.System.ArgumentException)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm01.System.Locale)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm01.System.Object)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm01.System.String)) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize($asm01.System.Exception)) ();
  };
  var $T05 = function () {
    return ($T05 = JSIL.Memoize($asm01.System.Void)) ();
  };
  var $T06 = function () {
    return ($T06 = JSIL.Memoize($asm01.System.Environment)) ();
  };

  $.Method({Static:false, Public:true }, ".ctor", 
    $sig.make(0xCA5, null, [], []), 
    function ArgumentOutOfRangeException__ctor () {
      $T00().prototype._ctor.call(this, $T01().GetText("Argument is out of range.", JSIL.Array.New($T02(), 0)));
      this.Exception$HResult$value = -2146233086;
    }
  );

  $.Method({Static:false, Public:true }, ".ctor", 
    $sig.make(0xCA6, null, [$asm01.TypeRef("System.String")], []), 
    function ArgumentOutOfRangeException__ctor (paramName) {
      $sig.get(0x818, null, [$asm01.System.String, $asm01.System.String], []).Call($T00().prototype, "_ctor", null, this, $T01().GetText("Argument is out of range.", JSIL.Array.New($T02(), 0)), paramName);
      this.Exception$HResult$value = -2146233086;
    }
  );

  $.Method({Static:false, Public:true }, ".ctor", 
    $sig.make(0xCA7, null, [$asm01.TypeRef("System.String"), $asm01.TypeRef("System.String")], []), 
    function ArgumentOutOfRangeException__ctor (paramName, message) {
      $sig.get(0x818, null, [$asm01.System.String, $asm01.System.String], []).Call($T00().prototype, "_ctor", null, this, message, paramName);
      this.Exception$HResult$value = -2146233086;
    }
  );

  $.Method({Static:false, Public:true }, ".ctor", 
    $sig.make(0xCA8, null, [
        $asm01.TypeRef("System.String"), $asm01.TypeRef("System.Object"), 
        $asm01.TypeRef("System.String")
      ], []), 
    function ArgumentOutOfRangeException__ctor (paramName, actualValue, message) {
      $sig.get(0x818, null, [$asm01.System.String, $asm01.System.String], []).Call($T00().prototype, "_ctor", null, this, message, paramName);
      this.actual_value = actualValue;
      this.Exception$HResult$value = -2146233086;
    }
  );

  $.Method({Static:false, Public:true }, ".ctor", 
    $sig.make(0xCA9, null, [$asm01.TypeRef("System.String"), $asm01.TypeRef("System.Exception")], []), 
    function ArgumentOutOfRangeException__ctor (message, innerException) {
      $sig.get(0x814, null, [$asm01.System.String, $asm01.System.Exception], []).Call($T00().prototype, "_ctor", null, this, message, innerException);
      this.Exception$HResult$value = -2146233086;
    }
  );

  $.Method({Static:false, Public:true }, "get_ActualValue", 
    $sig.make(0xCA3, $asm01.TypeRef("System.Object"), [], []), 
    function ArgumentOutOfRangeException_get_ActualValue () {
      return this.actual_value;
    }
  );

  $.Method({Static:false, Public:true }, "get_Message", 
    $sig.make(0xCA4, $asm01.TypeRef("System.String"), [], []), 
    function ArgumentOutOfRangeException_get_Message () {
      var basemsg = $T00().prototype.get_Message.call(this);
      if (this.actual_value === null) {
        var result = basemsg;
      } else {
        result = (JSIL.ConcatString(basemsg, $T06().get_NewLine(), this.actual_value));
      }
      return result;
    }
  );

  $.Constant({Static:true , Public:false}, "Result", -2146233086); 
  $.Field({Static:false, Public:false}, "actual_value", $asm01.TypeRef("System.Object")); 
  $.Property({Static:false, Public:true , Virtual:true }, "ActualValue", $asm01.TypeRef("System.Object"));

  $.Property({Static:false, Public:true , Virtual:true }, "Message", $asm01.TypeRef("System.String"));

})
  .Attribute($asm01.TypeRef("System.Runtime.InteropServices.ComVisibleAttribute"), function () { return [true]; });

JSIL.MakeEnum(
  "System.Globalization.NumberStyles", true, {
    None: 0, 
    AllowLeadingWhite: 1, 
    AllowTrailingWhite: 2, 
    AllowLeadingSign: 4, 
    Integer: 7, 
    AllowTrailingSign: 8, 
    AllowParentheses: 16, 
    AllowDecimalPoint: 32, 
    AllowThousands: 64, 
    Number: 111, 
    AllowExponent: 128, 
    Float: 167, 
    AllowCurrencySymbol: 256, 
    Currency: 383, 
    Any: 511, 
    AllowHexSpecifier: 512, 
    HexNumber: 515
  }, false
);

JSIL.MakeClass($asm01.TypeRef("System.Object"), "System.Globalization.DaylightTime", true, [], function ($) {
  var $thisType = $.publicInterface;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm01.System.DateTime)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm01.System.TimeSpan)) ();
  };

  $.Method({Static:false, Public:true }, ".ctor", 
    $sig.make(0xD07, null, [
        $asm01.TypeRef("System.DateTime"), $asm01.TypeRef("System.DateTime"), 
        $asm01.TypeRef("System.TimeSpan")
      ], []), 
    function DaylightTime__ctor (start, end, delta) {
      this.m_start = start.MemberwiseClone();
      this.m_end = end.MemberwiseClone();
      this.m_delta = delta.MemberwiseClone();
    }
  );

  $.Method({Static:false, Public:true }, "get_Delta", 
    $sig.make(0xD05, $asm01.TypeRef("System.TimeSpan"), [], []), 
    function DaylightTime_get_Delta () {
      return this.m_delta;
    }
  );

  $.Method({Static:false, Public:true }, "get_End", 
    $sig.make(0xD02, $asm01.TypeRef("System.DateTime"), [], []), 
    function DaylightTime_get_End () {
      return this.m_end;
    }
  );

  $.Method({Static:false, Public:true }, "get_Start", 
    $sig.make(0xCFC, $asm01.TypeRef("System.DateTime"), [], []), 
    function DaylightTime_get_Start () {
      return this.m_start;
    }
  );

  $.Field({Static:false, Public:false}, "m_start", $asm01.TypeRef("System.DateTime")); 
  $.Field({Static:false, Public:false}, "m_end", $asm01.TypeRef("System.DateTime")); 
  $.Field({Static:false, Public:false}, "m_delta", $asm01.TypeRef("System.TimeSpan")); 
  $.Property({Static:false, Public:true }, "Start", $asm01.TypeRef("System.DateTime"));

  $.Property({Static:false, Public:true }, "End", $asm01.TypeRef("System.DateTime"));

  $.Property({Static:false, Public:true }, "Delta", $asm01.TypeRef("System.TimeSpan"));

})
  .Attribute($asm01.TypeRef("System.Runtime.InteropServices.ComVisibleAttribute"), function () { return [true]; });

JSIL.MakeInterface(
  "System.Collections.Generic.IComparer`1", true, ["T"], function ($) {
    $.Method({}, "Compare", $sig.make(0x3B9, $asm01.TypeRef("System.Int32"), [new JSIL.GenericParameter("T", "System.Collections.Generic.IComparer`1"), new JSIL.GenericParameter("T", "System.Collections.Generic.IComparer`1")], []));
  }, []);

JSIL.MakeTypeAlias($jsilcore, "System.Byte");

JSIL.MakeTypeAlias($jsilcore, "System.Array");

JSIL.MakeClass($asm01.TypeRef("System.Object"), "System.Activator", true, [], function ($) {
  var $thisType = $.publicInterface;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm01.System.Type)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm01.System.NotImplementedException)) ();
  };

  $.Method({Static:false, Public:true }, ".ctor", 
    $sig.make(0x7AB, null, [], []), 
    function Activator__ctor () {
    }
  );

  $.Method({Static:true , Public:true }, "CreateInstance", 
    $sig.make(0x7A9, $asm01.TypeRef("System.Object"), [$asm01.TypeRef("System.Type")], []), 
    function Activator_CreateInstance (type) {
      throw new ($T01())();
    }
  );

});

JSIL.MakeClass($asm01.TypeRef("System.Attribute"), "System.NonSerializedAttribute", true, [], function ($) {
  var $thisType = $.publicInterface;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm01.System.Attribute)) ();
  };

  $.Method({Static:false, Public:true }, ".ctor", 
    $sig.make(0x7CF, null, [], []), 
    function NonSerializedAttribute__ctor () {
      $T00().prototype._ctor.call(this);
    }
  );

})
  .Attribute($asm01.TypeRef("System.AttributeUsageAttribute"), function () { return [$asm01.System.AttributeTargets.Field]; })
  .Attribute($asm01.TypeRef("System.Runtime.InteropServices.ComVisibleAttribute"), function () { return [true]; });

JSIL.MakeInterface(
  "System.Runtime.Serialization.IDeserializationCallback", false, [], function ($) {
  }, []);

JSIL.MakeStruct($asm01.TypeRef("System.ValueType"), "System.DateTimeOffset", true, [], function ($) {
  var $thisType = $.publicInterface;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm01.System.DateTime)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm01.System.TimeSpan)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm01.System.DateTimeKind)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm01.System.TimeZone)) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize($asm01.System.ArgumentOutOfRangeException)) ();
  };
  var $T05 = function () {
    return ($T05 = JSIL.Memoize($asm01.System.ArgumentException)) ();
  };
  var $T06 = function () {
    return ($T06 = JSIL.Memoize($asm01.System.Int64)) ();
  };
  var $T07 = function () {
    return ($T07 = JSIL.Memoize($asm01.System.Int32)) ();
  };
  var $T08 = function () {
    return ($T08 = JSIL.Memoize($asm01.System.Double)) ();
  };
  var $T09 = function () {
    return ($T09 = JSIL.Memoize($asm01.System.Object)) ();
  };
  var $T0A = function () {
    return ($T0A = JSIL.Memoize($asm01.System.String)) ();
  };
  var $T0B = function () {
    return ($T0B = JSIL.Memoize($asm01.System.Char)) ();
  };
  var $T0C = function () {
    return ($T0C = JSIL.Memoize($asm01.System.Boolean)) ();
  };
  var $T0D = function () {
    return ($T0D = JSIL.Memoize(System.Array.Of($asm01.System.String))) ();
  };
  var $T0E = function () {
    return ($T0E = JSIL.Memoize($asm01.System.StringEx)) ();
  };
  var $T0F = function () {
    return ($T0F = JSIL.Memoize($asm01.System.Void)) ();
  };
  var $T10 = function () {
    return ($T10 = JSIL.Memoize($asm01.System.IFormatProvider)) ();
  };
  var $T11 = function () {
    return ($T11 = JSIL.Memoize($asm01.System.Globalization.DateTimeFormatInfo)) ();
  };
  var $T12 = function () {
    return ($T12 = JSIL.Memoize($asm01.System.DateTimeUtils)) ();
  };
  var $T13 = function () {
    return ($T13 = JSIL.Memoize($asm01.System.Exception)) ();
  };
  var $T14 = function () {
    return ($T14 = JSIL.Memoize($asm01.System.FormatException)) ();
  };

  $.Method({Static:false, Public:true }, ".ctor", 
    $sig.make(0x6BD, null, [$asm01.TypeRef("System.DateTime")], []), 
    function DateTimeOffset__ctor (dateTime) {
      this.dt = dateTime.MemberwiseClone();
      if (dateTime.get_Kind() === $T02().Utc) {
        this.utc_offset = $T01().Zero.MemberwiseClone();
      } else {
        this.utc_offset = $T03().get_CurrentTimeZone().GetUtcOffset(dateTime.MemberwiseClone()).MemberwiseClone();
      }
      if (!(!$T00().op_LessThan(this.get_UtcDateTime(), $T00().MinValue) && !$T00().op_GreaterThan(this.get_UtcDateTime(), $T00().MaxValue))) {
        throw new ($T04())("The UTC date and time that results from applying the offset is earlier than MinValue or later than MaxValue.");
      }
    }
  );

  $.Method({Static:false, Public:true }, ".ctor", 
    $sig.make(0x6BE, null, [$asm01.TypeRef("System.DateTime"), $asm01.TypeRef("System.TimeSpan")], []), 
    function DateTimeOffset__ctor (dateTime, offset) {
      if (!((dateTime.get_Kind() !== $T02().Utc) || !$T01().op_Inequality(offset, $T01().Zero))) {
        throw new ($T05())("dateTime.Kind equals Utc and offset does not equal zero.");
      }
      if (!((dateTime.get_Kind() !== $T02().Local) || !$T01().op_Inequality(offset, $T03().get_CurrentTimeZone().GetUtcOffset(dateTime.MemberwiseClone())))) {
        throw new ($T05())("dateTime.Kind equals Local and offset does not equal the offset of the system's local time zone.");
      }
      if (!$T06().op_Equality(
          $T06().op_Modulus(
            offset.get_Ticks(), 
            $T06().Create(12797440, 35, 0)
          ), 
          $T06().Create(0, 0, 0)
        )) {
        throw new ($T05())("offset is not specified in whole minutes.");
      }
      if (!(!$T01().op_LessThan(offset, new ($T01())(-14, 0, 0)) && !$T01().op_GreaterThan(offset, new ($T01())(14, 0, 0)))) {
        throw new ($T04())("offset is less than -14 hours or greater than 14 hours.");
      }
      this.dt = dateTime.MemberwiseClone();
      this.utc_offset = offset.MemberwiseClone();
      if (!(!$T00().op_LessThan(this.get_UtcDateTime(), $T00().MinValue) && !$T00().op_GreaterThan(this.get_UtcDateTime(), $T00().MaxValue))) {
        throw new ($T04())("The UtcDateTime property is earlier than MinValue or later than MaxValue.");
      }
    }
  );

  $.Method({Static:false, Public:true }, ".ctor", 
    $sig.make(0x6BF, null, [$asm01.TypeRef("System.Int64"), $asm01.TypeRef("System.TimeSpan")], []), 
    function DateTimeOffset__ctor (ticks, offset) {
      $sig.get(0x6BE, null, [$asm01.System.DateTime, $asm01.System.TimeSpan], []).Call($thisType.prototype, "_ctor", null, this, new ($T00())(ticks), offset);
    }
  );

  $.Method({Static:false, Public:true }, ".ctor", 
    $sig.make(0x6C0, null, [
        $asm01.TypeRef("System.Int32"), $asm01.TypeRef("System.Int32"), 
        $asm01.TypeRef("System.Int32"), $asm01.TypeRef("System.Int32"), 
        $asm01.TypeRef("System.Int32"), $asm01.TypeRef("System.Int32"), 
        $asm01.TypeRef("System.TimeSpan")
      ], []), 
    function DateTimeOffset__ctor (year, month, day, hour, minute, second, offset) {
      $sig.get(0x6BE, null, [$asm01.System.DateTime, $asm01.System.TimeSpan], []).Call($thisType.prototype, "_ctor", null, this, new ($T00())(year, month, day, hour, minute, second), offset);
    }
  );

  $.Method({Static:false, Public:true }, ".ctor", 
    $sig.make(0x6C1, null, [
        $asm01.TypeRef("System.Int32"), $asm01.TypeRef("System.Int32"), 
        $asm01.TypeRef("System.Int32"), $asm01.TypeRef("System.Int32"), 
        $asm01.TypeRef("System.Int32"), $asm01.TypeRef("System.Int32"), 
        $asm01.TypeRef("System.Int32"), $asm01.TypeRef("System.TimeSpan")
      ], []), 
    function DateTimeOffset__ctor (year, month, day, hour, minute, second, millisecond, offset) {
      $sig.get(0x6BE, null, [$asm01.System.DateTime, $asm01.System.TimeSpan], []).Call($thisType.prototype, "_ctor", null, this, $sig.get(0x40E, null, [
            $asm01.System.Int32, $asm01.System.Int32, 
            $asm01.System.Int32, $asm01.System.Int32, 
            $asm01.System.Int32, $asm01.System.Int32, 
            $asm01.System.Int32
          ], []).Construct($T00(), year, month, day, hour, minute, second, millisecond), offset);
    }
  );

  $.Method({Static:false, Public:true }, "Add", 
    $sig.make(0x6C2, $.Type, [$asm01.TypeRef("System.TimeSpan")], []), 
    function DateTimeOffset_Add (timeSpan) {
      return $sig.get(0x6BF, null, [$asm01.System.Int64, $asm01.System.TimeSpan], []).Construct($thisType, this.dt.Add(timeSpan).get_Ticks(), this.utc_offset);
    }
  );

  $.Method({Static:false, Public:true }, "AddDays", 
    $sig.make(0x6C3, $.Type, [$asm01.TypeRef("System.Double")], []), 
    function DateTimeOffset_AddDays (days) {
      return $sig.get(0x6BF, null, [$asm01.System.Int64, $asm01.System.TimeSpan], []).Construct($thisType, this.dt.AddDays(days).get_Ticks(), this.utc_offset);
    }
  );

  $.Method({Static:false, Public:true }, "AddHours", 
    $sig.make(0x6C4, $.Type, [$asm01.TypeRef("System.Double")], []), 
    function DateTimeOffset_AddHours (hours) {
      return $sig.get(0x6BF, null, [$asm01.System.Int64, $asm01.System.TimeSpan], []).Construct($thisType, this.dt.AddHours(hours).get_Ticks(), this.utc_offset);
    }
  );

  $.Method({Static:false, Public:true }, "AddMilliseconds", 
    $sig.make(0x6C6, $.Type, [$asm01.TypeRef("System.Double")], []), 
    function DateTimeOffset_AddMilliseconds (milliseconds) {
      return $sig.get(0x6BF, null, [$asm01.System.Int64, $asm01.System.TimeSpan], []).Construct($thisType, this.dt.AddMilliseconds(milliseconds).get_Ticks(), this.utc_offset);
    }
  );

  $.Method({Static:false, Public:true }, "AddMinutes", 
    $sig.make(0x6C7, $.Type, [$asm01.TypeRef("System.Double")], []), 
    function DateTimeOffset_AddMinutes (minutes) {
      return $sig.get(0x6BF, null, [$asm01.System.Int64, $asm01.System.TimeSpan], []).Construct($thisType, this.dt.AddMinutes(minutes).get_Ticks(), this.utc_offset);
    }
  );

  $.Method({Static:false, Public:true }, "AddMonths", 
    $sig.make(0x6C8, $.Type, [$asm01.TypeRef("System.Int32")], []), 
    function DateTimeOffset_AddMonths (months) {
      return $sig.get(0x6BF, null, [$asm01.System.Int64, $asm01.System.TimeSpan], []).Construct($thisType, this.dt.AddMonths(months).get_Ticks(), this.utc_offset);
    }
  );

  $.Method({Static:false, Public:true }, "AddSeconds", 
    $sig.make(0x6C9, $.Type, [$asm01.TypeRef("System.Double")], []), 
    function DateTimeOffset_AddSeconds (seconds) {
      return $sig.get(0x6BF, null, [$asm01.System.Int64, $asm01.System.TimeSpan], []).Construct($thisType, this.dt.AddSeconds(seconds).get_Ticks(), this.utc_offset);
    }
  );

  $.Method({Static:false, Public:true }, "AddTicks", 
    $sig.make(0x6CA, $.Type, [$asm01.TypeRef("System.Int64")], []), 
    function DateTimeOffset_AddTicks (ticks) {
      return $sig.get(0x6BF, null, [$asm01.System.Int64, $asm01.System.TimeSpan], []).Construct($thisType, this.dt.AddTicks(ticks).get_Ticks(), this.utc_offset);
    }
  );

  $.Method({Static:false, Public:true }, "AddYears", 
    $sig.make(0x6CB, $.Type, [$asm01.TypeRef("System.Int32")], []), 
    function DateTimeOffset_AddYears (years) {
      return $sig.get(0x6BF, null, [$asm01.System.Int64, $asm01.System.TimeSpan], []).Construct($thisType, this.dt.AddYears(years).get_Ticks(), this.utc_offset);
    }
  );

  $.Method({Static:true , Public:true }, "Compare", 
    $sig.make(0x6CC, $asm01.TypeRef("System.Int32"), [$.Type, $.Type], []), 
    function DateTimeOffset_Compare (first, second) {
      return first.CompareTo(second);
    }
  );

  $.Method({Static:false, Public:true }, "CompareTo", 
    $sig.make(0x6CD, $asm01.TypeRef("System.Int32"), [$.Type], []), 
    function DateTimeOffset_CompareTo (other) {
      return $sig.get(0x437, $asm01.System.Int32, [$asm01.System.DateTime], []).CallVirtual("CompareTo", null, this.get_UtcDateTime(), other.get_UtcDateTime());
    }
  );

  $.Method({Static:false, Public:true }, "Equals", 
    $sig.make(0x6D0, $asm01.TypeRef("System.Boolean"), [$.Type], []), 
    function DateTimeOffset_Equals (other) {
      return $T00().op_Equality(
        this.get_UtcDateTime(), 
        other.get_UtcDateTime()
      );
    }
  );

  $.Method({Static:false, Public:true }, "Object.Equals", 
    $sig.make(0x6D1, $asm01.TypeRef("System.Boolean"), [$asm01.TypeRef("System.Object")], []), 
    function DateTimeOffset_Object_Equals (obj) {
      return ($thisType.$Is(obj) && $T00().op_Equality(
          this.get_UtcDateTime(), 
          $thisType.$Cast(obj).get_UtcDateTime()
        ));
    }
  );

  $.Method({Static:true , Public:true }, "Equals", 
    $sig.make(0x6D2, $asm01.TypeRef("System.Boolean"), [$.Type, $.Type], []), 
    function DateTimeOffset_Equals (first, second) {
      return first.Equals(second);
    }
  );

  $.Method({Static:false, Public:true }, "EqualsExact", 
    $sig.make(0x6D3, $asm01.TypeRef("System.Boolean"), [$.Type], []), 
    function DateTimeOffset_EqualsExact (other) {
      return ($T00().op_Equality(this.dt, other.dt) && $T01().op_Equality(this.utc_offset, other.utc_offset));
    }
  );

  $.Method({Static:true , Public:true }, "FromFileTime", 
    $sig.make(0x6D4, $.Type, [$asm01.TypeRef("System.Int64")], []), 
    function DateTimeOffset_FromFileTime (fileTime) {
      if (!($T06().op_GreaterThanOrEqual(fileTime, $T06().Create(0, 0, 0)) && $T06().op_LessThanOrEqual(fileTime, $thisType.MaxValue.get_Ticks()))) {
        throw new ($T04())("fileTime is less than zero or greater than DateTimeOffset.MaxValue.Ticks.");
      }
      return $sig.get(0x6BE, null, [$asm01.System.DateTime, $asm01.System.TimeSpan], []).Construct($thisType, $T00().FromFileTime(fileTime), $T03().get_CurrentTimeZone().GetUtcOffset($T00().FromFileTime(fileTime).MemberwiseClone()));
    }
  );

  $.Method({Static:false, Public:true }, "get_Date", 
    $sig.make(0x6AA, $asm01.TypeRef("System.DateTime"), [], []), 
    function DateTimeOffset_get_Date () {
      return $T00().SpecifyKind(this.dt.get_Date(), $T02().Unspecified);
    }
  );

  $.Method({Static:false, Public:true }, "get_DateTime", 
    $sig.make(0x6AB, $asm01.TypeRef("System.DateTime"), [], []), 
    function DateTimeOffset_get_DateTime () {
      return $T00().SpecifyKind(this.dt, $T02().Unspecified);
    }
  );

  $.Method({Static:false, Public:true }, "get_Day", 
    $sig.make(0x6AC, $asm01.TypeRef("System.Int32"), [], []), 
    function DateTimeOffset_get_Day () {
      return this.dt.get_Day();
    }
  );

  $.Method({Static:false, Public:true }, "get_DayOfWeek", 
    $sig.make(0x6AD, $asm01.TypeRef("System.DayOfWeek"), [], []), 
    function DateTimeOffset_get_DayOfWeek () {
      return this.dt.get_DayOfWeek();
    }
  );

  $.Method({Static:false, Public:true }, "get_DayOfYear", 
    $sig.make(0x6AE, $asm01.TypeRef("System.Int32"), [], []), 
    function DateTimeOffset_get_DayOfYear () {
      return this.dt.get_DayOfYear();
    }
  );

  $.Method({Static:false, Public:true }, "get_Hour", 
    $sig.make(0x6AF, $asm01.TypeRef("System.Int32"), [], []), 
    function DateTimeOffset_get_Hour () {
      return this.dt.get_Hour();
    }
  );

  $.Method({Static:false, Public:true }, "get_LocalDateTime", 
    $sig.make(0x6B0, $asm01.TypeRef("System.DateTime"), [], []), 
    function DateTimeOffset_get_LocalDateTime () {
      return this.get_UtcDateTime().ToLocalTime();
    }
  );

  $.Method({Static:false, Public:true }, "get_Millisecond", 
    $sig.make(0x6B1, $asm01.TypeRef("System.Int32"), [], []), 
    function DateTimeOffset_get_Millisecond () {
      return this.dt.get_Millisecond();
    }
  );

  $.Method({Static:false, Public:true }, "get_Minute", 
    $sig.make(0x6B2, $asm01.TypeRef("System.Int32"), [], []), 
    function DateTimeOffset_get_Minute () {
      return this.dt.get_Minute();
    }
  );

  $.Method({Static:false, Public:true }, "get_Month", 
    $sig.make(0x6B3, $asm01.TypeRef("System.Int32"), [], []), 
    function DateTimeOffset_get_Month () {
      return this.dt.get_Month();
    }
  );

  $.Method({Static:true , Public:true }, "get_Now", 
    $sig.make(0x6B4, $.Type, [], []), 
    function DateTimeOffset_get_Now () {
      return new $thisType($T00().get_Now());
    }
  );

  $.Method({Static:false, Public:true }, "get_Offset", 
    $sig.make(0x6B5, $asm01.TypeRef("System.TimeSpan"), [], []), 
    function DateTimeOffset_get_Offset () {
      return this.utc_offset;
    }
  );

  $.Method({Static:false, Public:true }, "get_Second", 
    $sig.make(0x6B6, $asm01.TypeRef("System.Int32"), [], []), 
    function DateTimeOffset_get_Second () {
      return this.dt.get_Second();
    }
  );

  $.Method({Static:false, Public:true }, "get_Ticks", 
    $sig.make(0x6B7, $asm01.TypeRef("System.Int64"), [], []), 
    function DateTimeOffset_get_Ticks () {
      return this.dt.get_Ticks();
    }
  );

  $.Method({Static:false, Public:true }, "get_TimeOfDay", 
    $sig.make(0x6B8, $asm01.TypeRef("System.TimeSpan"), [], []), 
    function DateTimeOffset_get_TimeOfDay () {
      return this.dt.get_TimeOfDay();
    }
  );

  $.Method({Static:false, Public:true }, "get_UtcDateTime", 
    $sig.make(0x6B9, $asm01.TypeRef("System.DateTime"), [], []), 
    function DateTimeOffset_get_UtcDateTime () {
      return $T00().SpecifyKind($sig.get(0x4B5, $asm01.System.DateTime, [$asm01.System.DateTime, $asm01.System.TimeSpan], []).CallStatic($T00(), "op_Subtraction", null, this.dt, this.utc_offset), $T02().Utc);
    }
  );

  $.Method({Static:true , Public:true }, "get_UtcNow", 
    $sig.make(0x6BA, $.Type, [], []), 
    function DateTimeOffset_get_UtcNow () {
      return new $thisType($T00().get_UtcNow());
    }
  );

  $.Method({Static:false, Public:true }, "get_UtcTicks", 
    $sig.make(0x6BB, $asm01.TypeRef("System.Int64"), [], []), 
    function DateTimeOffset_get_UtcTicks () {
      return this.get_UtcDateTime().get_Ticks();
    }
  );

  $.Method({Static:false, Public:true }, "get_Year", 
    $sig.make(0x6BC, $asm01.TypeRef("System.Int32"), [], []), 
    function DateTimeOffset_get_Year () {
      return this.dt.get_Year();
    }
  );

  $.Method({Static:false, Public:true }, "GetHashCode", 
    $sig.make(0x6D5, $asm01.TypeRef("System.Int32"), [], []), 
    function DateTimeOffset_GetHashCode () {
      return (((JSIL.ObjectHashCode(this.dt)) ^ (JSIL.ObjectHashCode(this.utc_offset))) | 0);
    }
  );

  $.Method({Static:true , Public:true }, "op_Addition", 
    $sig.make(0x6C5, $.Type, [$.Type, $asm01.TypeRef("System.TimeSpan")], []), 
    function DateTimeOffset_op_Addition (dateTimeOffset, timeSpan) {
      return dateTimeOffset.Add(timeSpan);
    }
  );

  $.Method({Static:true , Public:true }, "op_Equality", 
    $sig.make(0x6CF, $asm01.TypeRef("System.Boolean"), [$.Type, $.Type], []), 
    function DateTimeOffset_op_Equality (left, right) {
      return left.Equals(right);
    }
  );

  $.Method({Static:true , Public:true }, "op_GreaterThan", 
    $sig.make(0x6D6, $asm01.TypeRef("System.Boolean"), [$.Type, $.Type], []), 
    function DateTimeOffset_op_GreaterThan (left, right) {
      return $T00().op_GreaterThan(
        left.get_UtcDateTime(), 
        right.get_UtcDateTime()
      );
    }
  );

  $.Method({Static:true , Public:true }, "op_GreaterThanOrEqual", 
    $sig.make(0x6D7, $asm01.TypeRef("System.Boolean"), [$.Type, $.Type], []), 
    function DateTimeOffset_op_GreaterThanOrEqual (left, right) {
      return $T00().op_GreaterThanOrEqual(
        left.get_UtcDateTime(), 
        right.get_UtcDateTime()
      );
    }
  );

  $.Method({Static:true , Public:true }, "op_Implicit", 
    $sig.make(0x6D8, $.Type, [$asm01.TypeRef("System.DateTime")], []), 
    function DateTimeOffset_op_Implicit (dateTime) {
      return new $thisType(dateTime);
    }
  );

  $.Method({Static:true , Public:true }, "op_Inequality", 
    $sig.make(0x6D9, $asm01.TypeRef("System.Boolean"), [$.Type, $.Type], []), 
    function DateTimeOffset_op_Inequality (left, right) {
      return $T00().op_Inequality(
        left.get_UtcDateTime(), 
        right.get_UtcDateTime()
      );
    }
  );

  $.Method({Static:true , Public:true }, "op_LessThan", 
    $sig.make(0x6DA, $asm01.TypeRef("System.Boolean"), [$.Type, $.Type], []), 
    function DateTimeOffset_op_LessThan (left, right) {
      return $T00().op_LessThan(
        left.get_UtcDateTime(), 
        right.get_UtcDateTime()
      );
    }
  );

  $.Method({Static:true , Public:true }, "op_LessThanOrEqual", 
    $sig.make(0x6DB, $asm01.TypeRef("System.Boolean"), [$.Type, $.Type], []), 
    function DateTimeOffset_op_LessThanOrEqual (left, right) {
      return $T00().op_LessThanOrEqual(
        left.get_UtcDateTime(), 
        right.get_UtcDateTime()
      );
    }
  );

  $.Method({Static:true , Public:true }, "op_Subtraction", 
    $sig.make(0x6E2, $asm01.TypeRef("System.TimeSpan"), [$.Type, $.Type], []), 
    function DateTimeOffset_op_Subtraction (left, right) {
      return $sig.get(0x6E0, $asm01.System.TimeSpan, [$thisType], []).CallVirtual("Subtract", null, left, right);
    }
  );

  $.Method({Static:true , Public:true }, "op_Subtraction", 
    $sig.make(0x6E3, $.Type, [$.Type, $asm01.TypeRef("System.TimeSpan")], []), 
    function DateTimeOffset_op_Subtraction (dateTimeOffset, timeSpan) {
      return $sig.get(0x6E1, $thisType, [$asm01.System.TimeSpan], []).CallVirtual("Subtract", null, dateTimeOffset, timeSpan);
    }
  );

  $.Method({Static:true , Public:false}, "ParseChar", 
    $sig.make(0x6DF, $asm01.TypeRef("System.Int32"), [
        $asm01.TypeRef("System.String"), $asm01.TypeRef("System.Int32"), 
        $asm01.TypeRef("System.Char"), $asm01.TypeRef("System.Boolean"), 
        $jsilcore.TypeRef("JSIL.Reference", [$asm01.TypeRef("System.Int32")])
      ], []), 
    function DateTimeOffset_ParseChar (input, pos, c, allow_leading_white, /* ref */ result) {
      var char_parsed = 0;
      result.value = -1;

      while (!(!allow_leading_white || 
          (pos >= input.length)) && (input[pos].charCodeAt(0) === " ".charCodeAt(0))) {
        ++pos;
        ++char_parsed;
      }
      if (!((pos >= input.length) || (input[pos].charCodeAt(0) !== c.charCodeAt(0)))) {
        result.value = c.charCodeAt(0);
        ++char_parsed;
      }
      return char_parsed;
    }
  );

  $.Method({Static:true , Public:false}, "ParseEnum", 
    $sig.make(0x6DE, $asm01.TypeRef("System.Int32"), [
        $asm01.TypeRef("System.String"), $asm01.TypeRef("System.Int32"), 
        $jsilcore.TypeRef("System.Array", [$asm01.TypeRef("System.String")]), $asm01.TypeRef("System.Boolean"), 
        $jsilcore.TypeRef("JSIL.Reference", [$asm01.TypeRef("System.Int32")])
      ], []), 
    function DateTimeOffset_ParseEnum (input, pos, enums, allow_leading_white, /* ref */ result) {
      var char_parsed = 0;
      result.value = -1;

      while (!(!allow_leading_white || 
          (pos >= input.length)) && (input[pos].charCodeAt(0) === " ".charCodeAt(0))) {
        ++char_parsed;
        ++pos;
      }

    $loop1: 
      for (var i = 0; i < enums.length; ++i) {
        if ($T0E().StartsWith(input.Substring(pos), enums[i])) {
          result.value = i;
          break $loop1;
        }
      }
      if (result.value >= 0) {
        char_parsed += enums[result.value].length;
      }
      return char_parsed;
    }
  );

  $.Method({Static:true , Public:false}, "ParseNumber", 
    $sig.make(0x6DC, $asm01.TypeRef("System.Int32"), [
        $asm01.TypeRef("System.String"), $asm01.TypeRef("System.Int32"), 
        $asm01.TypeRef("System.Int32"), $asm01.TypeRef("System.Boolean"), 
        $asm01.TypeRef("System.Boolean"), $jsilcore.TypeRef("JSIL.Reference", [$asm01.TypeRef("System.Int32")])
      ], []), 
    function DateTimeOffset_ParseNumber (input, pos, digits, leading_zero, allow_leading_white, /* ref */ result) {
      var digit_parsed = new JSIL.Variable(0);
      return $thisType.ParseNumber(
        input, 
        pos, 
        digits, 
        leading_zero, 
        allow_leading_white, 
        /* ref */ result, 
        /* ref */ digit_parsed
      );
    }
  );

  $.Method({Static:true , Public:false}, "ParseNumber", 
    $sig.make(0x6DD, $asm01.TypeRef("System.Int32"), [
        $asm01.TypeRef("System.String"), $asm01.TypeRef("System.Int32"), 
        $asm01.TypeRef("System.Int32"), $asm01.TypeRef("System.Boolean"), 
        $asm01.TypeRef("System.Boolean"), $jsilcore.TypeRef("JSIL.Reference", [$asm01.TypeRef("System.Int32")]), 
        $jsilcore.TypeRef("JSIL.Reference", [$asm01.TypeRef("System.Int32")])
      ], []), 
    function DateTimeOffset_ParseNumber (input, pos, digits, leading_zero, allow_leading_white, /* ref */ result, /* ref */ digit_parsed) {
      var char_parsed = 0;
      digit_parsed.value = 0;
      result.value = 0;

      while (!(!allow_leading_white || 
          (pos >= input.length)) && (input[pos].charCodeAt(0) === " ".charCodeAt(0))) {
        ++char_parsed;
        ++pos;
      }

      for (; !((pos >= input.length) || 
          !(("0123456789".indexOf(input[pos]) !== -1))) && (digits > 0); --digits) {
        result.value = ((((10 * result.value) | 0) + (String.fromCharCode((input[pos].charCodeAt(0) - "0".charCodeAt(0)))).charCodeAt(0)) | 0);
        ++pos;
        ++char_parsed;
        ++digit_parsed.value;
      }
      if (!(!leading_zero || (digits <= 0))) {
        result.value = -1;
      }
      if (digit_parsed.value === 0) {
        result.value = -1;
      }
      return char_parsed;
    }
  );

  $.Method({Static:false, Public:true }, "Subtract", 
    $sig.make(0x6E0, $asm01.TypeRef("System.TimeSpan"), [$.Type], []), 
    function DateTimeOffset_Subtract (value) {
      return $sig.get(0x4B2, $asm01.System.TimeSpan, [$asm01.System.DateTime, $asm01.System.DateTime], []).CallStatic($T00(), "op_Subtraction", null, 
        this.get_UtcDateTime(), 
        value.get_UtcDateTime()
      );
    }
  );

  $.Method({Static:false, Public:true }, "Subtract", 
    $sig.make(0x6E1, $.Type, [$asm01.TypeRef("System.TimeSpan")], []), 
    function DateTimeOffset_Subtract (value) {
      return this.Add($T01().op_UnaryNegation(value));
    }
  );

  $.Method({Static:false, Public:false}, "IComparable.CompareTo", 
    $sig.make(0x6CE, $asm01.TypeRef("System.Int32"), [$asm01.TypeRef("System.Object")], []), 
    function DateTimeOffset_IComparable_CompareTo (obj) {
      return this.CompareTo($thisType.$Cast(obj));
    }
  );

  $.Method({Static:false, Public:true }, "ToFileTime", 
    $sig.make(0x6E4, $asm01.TypeRef("System.Int64"), [], []), 
    function DateTimeOffset_ToFileTime () {
      return this.get_UtcDateTime().ToFileTime();
    }
  );

  $.Method({Static:false, Public:true }, "ToLocalTime", 
    $sig.make(0x6E5, $.Type, [], []), 
    function DateTimeOffset_ToLocalTime () {
      return $sig.get(0x6BE, null, [$asm01.System.DateTime, $asm01.System.TimeSpan], []).Construct($thisType, this.get_UtcDateTime().ToLocalTime(), $T03().get_CurrentTimeZone().GetUtcOffset(this.get_UtcDateTime().ToLocalTime().MemberwiseClone()));
    }
  );

  $.Method({Static:false, Public:true }, "ToOffset", 
    $sig.make(0x6E6, $.Type, [$asm01.TypeRef("System.TimeSpan")], []), 
    function DateTimeOffset_ToOffset (offset) {
      return $sig.get(0x6BE, null, [$asm01.System.DateTime, $asm01.System.TimeSpan], []).Construct($thisType, $T00().op_Addition($sig.get(0x4B5, $asm01.System.DateTime, [$asm01.System.DateTime, $asm01.System.TimeSpan], []).CallStatic($T00(), "op_Subtraction", null, this.dt, this.utc_offset), offset), offset);
    }
  );

  $.Method({Static:false, Public:true }, "toString", 
    $sig.make(0x6E7, $asm01.TypeRef("System.String"), [], []), 
    function DateTimeOffset_toString () {
      return this.ToString(null, null);
    }
  );

  $.Method({Static:false, Public:true }, "ToString", 
    $sig.make(0x6E8, $asm01.TypeRef("System.String"), [$asm01.TypeRef("System.IFormatProvider")], []), 
    function DateTimeOffset_ToString (formatProvider) {
      return this.ToString(null, formatProvider);
    }
  );

  $.Method({Static:false, Public:true }, "ToString", 
    $sig.make(0x6E9, $asm01.TypeRef("System.String"), [$asm01.TypeRef("System.String")], []), 
    function DateTimeOffset_ToString (format) {
      return this.ToString(format, null);
    }
  );

  $.Method({Static:false, Public:true }, "ToString", 
    $sig.make(0x6EA, $asm01.TypeRef("System.String"), [$asm01.TypeRef("System.String"), $asm01.TypeRef("System.IFormatProvider")], []), 
    function DateTimeOffset_ToString (format, formatProvider) {
      var dfi = $T11().GetInstance(formatProvider);
      if (!((format !== null) && !(format == $T0A().Empty))) {
        format = ((dfi.get_ShortDatePattern() + " " + dfi.get_LongTimePattern() + " zzz"));
      }
      var to_utc = new JSIL.Variable(false);
      var use_invariant = new JSIL.Variable(false);
      if (format.length === 1) {
        var fchar = (format[0]);
        try {
          format = $T12().GetStandardPattern(
            fchar, 
            dfi, 
            /* ref */ to_utc, 
            /* ref */ use_invariant, 
            true
          );
        } catch ($exception) {
          format = null;
        }
        if (format === null) {
          throw new ($T14())("format is not one of the format specifier characters defined for DateTimeFormatInfo");
        }
      }
      return (to_utc.value ? $T12().ToString(this.get_UtcDateTime().MemberwiseClone(), $T01().Zero, format, dfi) : $T12().ToString(
          this.get_DateTime().MemberwiseClone(), 
          this.get_Offset(), 
          format, 
          dfi
        ));
    }
  );

  $.Method({Static:false, Public:true }, "ToUniversalTime", 
    $sig.make(0x6EB, $.Type, [], []), 
    function DateTimeOffset_ToUniversalTime () {
      return $sig.get(0x6BE, null, [$asm01.System.DateTime, $asm01.System.TimeSpan], []).Construct($thisType, this.get_UtcDateTime(), $T01().Zero);
    }
  );

  $.Field({Static:true , Public:true , ReadOnly:true }, "MaxValue", $.Type); 
  $.Field({Static:true , Public:true , ReadOnly:true }, "MinValue", $.Type); 
  $.Field({Static:false, Public:false}, "dt", $asm01.TypeRef("System.DateTime")); 
  $.Field({Static:false, Public:false}, "utc_offset", $asm01.TypeRef("System.TimeSpan")); 
  $.Method({Static:true , Public:false}, ".cctor", 
    $sig.make(0x6EC, null, [], []), 
    function DateTimeOffset__cctor () {
      $thisType.MaxValue = new $thisType();
      $thisType.MinValue = new $thisType();
      $thisType.MaxValue = $sig.get(0x6BE, null, [$asm01.System.DateTime, $asm01.System.TimeSpan], []).Construct($thisType, $T00().MaxValue, $T01().Zero);
      $thisType.MinValue = $sig.get(0x6BE, null, [$asm01.System.DateTime, $asm01.System.TimeSpan], []).Construct($thisType, $T00().MinValue, $T01().Zero);
    }
  );

  $.Property({Static:false, Public:true }, "Date", $asm01.TypeRef("System.DateTime"));

  $.Property({Static:false, Public:true }, "DateTime", $asm01.TypeRef("System.DateTime"));

  $.Property({Static:false, Public:true }, "Day", $asm01.TypeRef("System.Int32"));

  $.Property({Static:false, Public:true }, "DayOfWeek", $asm01.TypeRef("System.DayOfWeek"));

  $.Property({Static:false, Public:true }, "DayOfYear", $asm01.TypeRef("System.Int32"));

  $.Property({Static:false, Public:true }, "Hour", $asm01.TypeRef("System.Int32"));

  $.Property({Static:false, Public:true }, "LocalDateTime", $asm01.TypeRef("System.DateTime"));

  $.Property({Static:false, Public:true }, "Millisecond", $asm01.TypeRef("System.Int32"));

  $.Property({Static:false, Public:true }, "Minute", $asm01.TypeRef("System.Int32"));

  $.Property({Static:false, Public:true }, "Month", $asm01.TypeRef("System.Int32"));

  $.Property({Static:true , Public:true }, "Now", $.Type);

  $.Property({Static:false, Public:true }, "Offset", $asm01.TypeRef("System.TimeSpan"));

  $.Property({Static:false, Public:true }, "Second", $asm01.TypeRef("System.Int32"));

  $.Property({Static:false, Public:true }, "Ticks", $asm01.TypeRef("System.Int64"));

  $.Property({Static:false, Public:true }, "TimeOfDay", $asm01.TypeRef("System.TimeSpan"));

  $.Property({Static:false, Public:true }, "UtcDateTime", $asm01.TypeRef("System.DateTime"));

  $.Property({Static:true , Public:true }, "UtcNow", $.Type);

  $.Property({Static:false, Public:true }, "UtcTicks", $asm01.TypeRef("System.Int64"));

  $.Property({Static:false, Public:true }, "Year", $asm01.TypeRef("System.Int32"));

  $.ImplementInterfaces(
      $asm01.TypeRef("System.IComparable"), $asm01.TypeRef("System.IFormattable"), 
      $asm01.TypeRef("System.Runtime.Serialization.ISerializable"), $asm01.TypeRef("System.Runtime.Serialization.IDeserializationCallback"), 
      $asm01.TypeRef("System.IComparable`1", [$.Type]), $asm01.TypeRef("System.IEquatable`1", [$.Type])
  )
});

JSIL.MakeClass($asm01.TypeRef("System.Attribute"), "System.Runtime.InteropServices.ComVisibleAttribute", false, [], function ($) {
  var $thisType = $.publicInterface;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm01.System.Boolean)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm01.System.Attribute)) ();
  };

  $.Method({Static:false, Public:true }, ".ctor", 
    $sig.make(0x82F, null, [$asm01.TypeRef("System.Boolean")], []), 
    function ComVisibleAttribute__ctor (visibility) {
      this.Visible = false;
      $T01().prototype._ctor.call(this);
      this.Visible = visibility;
    }
  );

  $.Method({Static:false, Public:true }, "get_Value", 
    $sig.make(0x82C, $asm01.TypeRef("System.Boolean"), [], []), 
    function ComVisibleAttribute_get_Value () {
      return this.Visible;
    }
  );

  $.Field({Static:false, Public:false}, "Visible", $asm01.TypeRef("System.Boolean")); 
  $.Property({Static:false, Public:true }, "Value", $asm01.TypeRef("System.Boolean"));

})
  .Attribute($asm01.TypeRef("System.Runtime.InteropServices.ComVisibleAttribute"), function () { return [true]; })
  .Attribute($asm01.TypeRef("System.AttributeUsageAttribute"), function () { return [5597]; });

JSIL.MakeClass($asm01.TypeRef("System.Attribute"), "System.Runtime.InteropServices.ClassInterfaceAttribute", true, [], function ($) {
  var $thisType = $.publicInterface;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm01.System.Int16)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm01.System.Attribute)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm01.System.Runtime.InteropServices.ClassInterfaceType)) ();
  };

  $.Method({Static:false, Public:true }, ".ctor", 
    $sig.make(0x8E9, null, [$asm01.TypeRef("System.Int16")], []), 
    function ClassInterfaceAttribute__ctor (classInterfaceType) {
      $T01().prototype._ctor.call(this);
      this.ciType = $T02().$Cast(classInterfaceType);
    }
  );

  $.Method({Static:false, Public:true }, ".ctor", 
    $sig.make(0x8EC, null, [$asm01.TypeRef("System.Runtime.InteropServices.ClassInterfaceType")], []), 
    function ClassInterfaceAttribute__ctor (classInterfaceType) {
      $T01().prototype._ctor.call(this);
      this.ciType = classInterfaceType;
    }
  );

  $.Method({Static:false, Public:true }, "get_Value", 
    $sig.make(0x8E7, $asm01.TypeRef("System.Runtime.InteropServices.ClassInterfaceType"), [], []), 
    function ClassInterfaceAttribute_get_Value () {
      return this.ciType;
    }
  );

  $.Field({Static:false, Public:false}, "ciType", $asm01.TypeRef("System.Runtime.InteropServices.ClassInterfaceType")); 
  $.Property({Static:false, Public:true }, "Value", $asm01.TypeRef("System.Runtime.InteropServices.ClassInterfaceType"));

})
  .Attribute($asm01.TypeRef("System.AttributeUsageAttribute"), function () { return [5]; })
  .Attribute($asm01.TypeRef("System.Runtime.InteropServices.ComVisibleAttribute"), function () { return [true]; });

JSIL.MakeClass($asm01.TypeRef("System.Object"), "System.Globalization.SortKey", true, [], function ($) {
  var $thisType = $.publicInterface;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm01.System.Int32)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm01.System.String)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm01.System.Globalization.CompareOptions)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm01.System.ArgumentNullException)) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize(System.Array.Of($asm01.System.Byte))) ();
  };
  var $T05 = function () {
    return ($T05 = JSIL.Memoize($asm01.System.Object)) ();
  };
  var $T06 = function () {
    return ($T06 = JSIL.Memoize($asm01.System.Boolean)) ();
  };
  var $T07 = function () {
    return ($T07 = JSIL.Memoize($asm01.System.Void)) ();
  };

  $.Method({Static:false, Public:false}, ".ctor", 
    $sig.make(0x705, null, [], []), 
    function SortKey__ctor () {
    }
  );

  $.Method({Static:false, Public:false}, ".ctor", 
    $sig.make(0x706, null, [
        $asm01.TypeRef("System.Int32"), $asm01.TypeRef("System.String"), 
        $asm01.TypeRef("System.Globalization.CompareOptions")
      ], []), 
    function SortKey__ctor (lcid, source, options) {
      this.lcid = lcid;
      this.str = source;
      this.options = options;
    }
  );

  $.Method({Static:true , Public:true }, "Compare", 
    $sig.make(0x707, $asm01.TypeRef("System.Int32"), [$.Type, $.Type], []), 
    function SortKey_Compare (sortkey1, sortkey2) {
      if (sortkey1 === null) {
        throw new ($T03())("sortkey1");
      }
      if (sortkey2 === null) {
        throw new ($T03())("sortkey2");
      }
      var keydata = sortkey1.key;
      var keydata2 = sortkey2.key;
      if (keydata.length === 0) {
        if (keydata2.length === 0) {
          var result = 0;
        } else {
          result = -1;
        }
      } else {
        var min_len = ((keydata.length < keydata2.length) ? keydata.length : keydata2.length);

        for (var i = 0; i < min_len; ++i) {
          if (keydata[i] > keydata2[i]) {
            result = 1;
            return result;
          }
          if (keydata[i] < keydata2[i]) {
            result = -1;
            return result;
          }
        }
        if (keydata.length < keydata2.length) {
          result = -1;
        } else if (keydata.length > keydata2.length) {
          result = 1;
        } else {
          result = 0;
        }
      }
      return result;
    }
  );

  $.Method({Static:false, Public:true }, "Object.Equals", 
    $sig.make(0x708, $asm01.TypeRef("System.Boolean"), [$asm01.TypeRef("System.Object")], []), 
    function SortKey_Object_Equals (value) {
      var other = $thisType.$As(value);
      if (other !== null) {
        if (!((this.lcid !== other.lcid) || 
            (this.options !== other.options) || ($thisType.Compare(this, other) !== 0))) {
          var result = true;
          return result;
        }
      }
      result = false;
      return result;
    }
  );

  $.Method({Static:false, Public:true }, "get_KeyData", 
    $sig.make(0x703, $jsilcore.TypeRef("System.Array", [$asm01.TypeRef("System.Byte")]), [], []), 
    function SortKey_get_KeyData () {
      return this.key;
    }
  );

  $.Method({Static:false, Public:true }, "get_OriginalString", 
    $sig.make(0x704, $asm01.TypeRef("System.String"), [], []), 
    function SortKey_get_OriginalString () {
      return this.str;
    }
  );

  $.Method({Static:false, Public:true }, "GetHashCode", 
    $sig.make(0x709, $asm01.TypeRef("System.Int32"), [], []), 
    function SortKey_GetHashCode () {
      return JSIL.ObjectHashCode(this.str);
    }
  );

  $.Method({Static:false, Public:true }, "toString", 
    $sig.make(0x70A, $asm01.TypeRef("System.String"), [], []), 
    function SortKey_toString () {
      return JSIL.ConcatString.apply(null, JSIL.Array.New($T05(), ["SortKey - ", this.lcid, ", ", this.options, ", ", this.str]));
    }
  );

  $.Field({Static:false, Public:false}, "str", $asm01.TypeRef("System.String")); 
  $.Field({Static:false, Public:false}, "options", $asm01.TypeRef("System.Globalization.CompareOptions")); 
  $.Field({Static:false, Public:false}, "key", $jsilcore.TypeRef("System.Array", [$asm01.TypeRef("System.Byte")])); 
  $.Field({Static:false, Public:false}, "lcid", $asm01.TypeRef("System.Int32")); 
  $.Property({Static:false, Public:true , Virtual:true }, "KeyData", $jsilcore.TypeRef("System.Array", [$asm01.TypeRef("System.Byte")]));

  $.Property({Static:false, Public:true , Virtual:true }, "OriginalString", $asm01.TypeRef("System.String"));

})
  .Attribute($asm01.TypeRef("System.Runtime.InteropServices.ComVisibleAttribute"), function () { return [true]; });

JSIL.MakeEnum(
  "System.Globalization.CompareOptions", true, {
    None: 0, 
    IgnoreCase: 1, 
    IgnoreNonSpace: 2, 
    IgnoreSymbols: 4, 
    IgnoreKanaType: 8, 
    IgnoreWidth: 16, 
    OrdinalIgnoreCase: 268435456, 
    StringSort: 536870912, 
    Ordinal: 1073741824
  }, false
);

JSIL.MakeInterface(
  "System.Collections.IDictionary", true, [], function ($) {
    $.Method({}, "get_IsFixedSize", $sig.make(0x29C, $asm01.TypeRef("System.Boolean"), [], []));
    $.Method({}, "get_IsReadOnly", $sig.make(0x29E, $asm01.TypeRef("System.Boolean"), [], []));
    $.Method({}, "get_Item", $sig.make(0x2A1, $asm01.TypeRef("System.Object"), [$asm01.TypeRef("System.Object")], []));
    $.Method({}, "set_Item", $sig.make(0x2A2, null, [$asm01.TypeRef("System.Object"), $asm01.TypeRef("System.Object")], []));
    $.Method({}, "get_Keys", $sig.make(0x2A4, $asm01.TypeRef("System.Collections.ICollection"), [], []));
    $.Method({}, "get_Values", $sig.make(0x2A6, $asm01.TypeRef("System.Collections.ICollection"), [], []));
    $.Method({}, "Add", $sig.make(0x2A8, null, [$asm01.TypeRef("System.Object"), $asm01.TypeRef("System.Object")], []));
    $.Method({}, "Clear", $sig.make(0x2AA, null, [], []));
    $.Method({}, "Contains", $sig.make(0x2AD, $asm01.TypeRef("System.Boolean"), [$asm01.TypeRef("System.Object")], []));
    $.Method({}, "GetEnumerator", $sig.make(0x2B7, $asm01.TypeRef("System.Collections.IDictionaryEnumerator"), [], []));
    $.Method({}, "Remove", $sig.make(0x2BA, null, [$asm01.TypeRef("System.Object")], []));
    $.Property({}, "IsFixedSize");
    $.Property({}, "IsReadOnly");
    $.Property({}, "Item");
    $.Property({}, "Keys");
    $.Property({}, "Values");
  }, [$asm01.TypeRef("System.Collections.ICollection"), $asm01.TypeRef("System.Collections.IEnumerable")]);

JSIL.MakeStruct($asm01.TypeRef("System.ValueType"), "System.Collections.DictionaryEntry", true, [], function ($) {
  var $thisType = $.publicInterface;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm01.System.Object)) ();
  };

  $.Method({Static:false, Public:true }, ".ctor", 
    $sig.make(0x4C0, null, [$asm01.TypeRef("System.Object"), $asm01.TypeRef("System.Object")], []), 
    function DictionaryEntry__ctor (key, value) {
      this._key = key;
      this._value = value;
    }
  );

  $.Method({Static:false, Public:true }, "get_Key", 
    $sig.make(0x4BA, $asm01.TypeRef("System.Object"), [], []), 
    function DictionaryEntry_get_Key () {
      return this._key;
    }
  );

  $.Method({Static:false, Public:true }, "get_Value", 
    $sig.make(0x4BD, $asm01.TypeRef("System.Object"), [], []), 
    function DictionaryEntry_get_Value () {
      return this._value;
    }
  );

  $.Method({Static:false, Public:true }, "set_Key", 
    $sig.make(0x4BC, null, [$asm01.TypeRef("System.Object")], []), 
    function DictionaryEntry_set_Key (value) {
      this._key = value;
    }
  );

  $.Method({Static:false, Public:true }, "set_Value", 
    $sig.make(0x4BF, null, [$asm01.TypeRef("System.Object")], []), 
    function DictionaryEntry_set_Value (value) {
      this._value = value;
    }
  );

  $.Field({Static:false, Public:false}, "_key", $asm01.TypeRef("System.Object")); 
  $.Field({Static:false, Public:false}, "_value", $asm01.TypeRef("System.Object")); 
  $.Property({Static:false, Public:true }, "Key", $asm01.TypeRef("System.Object"));

  $.Property({Static:false, Public:true }, "Value", $asm01.TypeRef("System.Object"));

})
  .Attribute($asm01.TypeRef("System.Runtime.InteropServices.ComVisibleAttribute"), function () { return [true]; })
  .Attribute($asm01.TypeRef("System.Diagnostics.DebuggerDisplayAttribute"), function () { return ["{_value}"]; });

JSIL.MakeInterface(
  "System.Collections.IEqualityComparer", true, [], function ($) {
    $.Method({}, "Equals", $sig.make(0x725, $asm01.TypeRef("System.Boolean"), [$asm01.TypeRef("System.Object"), $asm01.TypeRef("System.Object")], []));
    $.Method({}, "GetHashCode", $sig.make(0x726, $asm01.TypeRef("System.Int32"), [$asm01.TypeRef("System.Object")], []));
  }, []);

JSIL.MakeClass($asm01.TypeRef("System.Object"), "System.Collections.Generic.EqualityComparer`1", true, ["T"], function ($) {
  var $thisType = $.publicInterface;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm01.System.String)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm01.System.Collections.Generic.InternalStringComparer)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm01.System.Type)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm01.System.Activator)) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize($asm01.System.Collections.Generic.GenericEqualityComparer$b1)) ();
  };
  var $T05 = function () {
    return ($T05 = JSIL.Memoize($asm01.System.Object)) ();
  };
  var $T06 = function () {
    return ($T06 = JSIL.Memoize($asm01.System.Int32)) ();
  };
  var $T07 = function () {
    return ($T07 = JSIL.Memoize($asm01.System.ArgumentException)) ();
  };

  $.Method({Static:false, Public:false}, ".ctor", 
    $sig.make(0x93D, null, [], []), 
    function EqualityComparer$b1__ctor () {
    }
  );

  $.Method({Static:true , Public:true }, "get_Default", 
    $sig.make(0x929, $.Type, [], []), 
    function EqualityComparer$b1_get_Default () {
      return $thisType.Of($thisType.T.get(this))._default;
    }
  );

  $.Method({Static:false, Public:true }, "GetHashCode", 
    $sig.make(0x934, $asm01.TypeRef("System.Int32"), [$asm01.TypeRef("System.Object")], []), 
    function EqualityComparer$b1_GetHashCode (obj) {
      if (obj === null) {
        var result = 0;
      } else {
        if (!$thisType.T.get(this).$Is(obj)) {
          throw $sig.get(0x818, null, [$asm01.System.String, $asm01.System.String], []).Construct($T07(), "Argument is not compatible", "obj");
        }
        result = (new JSIL.MethodSignature($asm01.System.Int32, [$thisType.T.get(this)], [])).CallVirtual("GetHashCode", null, this, JSIL.CloneParameter($thisType.T.get(this), $thisType.T.get(this).$Cast(obj)));
      }
      return result;
    }
  );

  $.Field({Static:true , Public:false, ReadOnly:true }, "_default", $.Type); 
  $.Method({Static:true , Public:false}, ".cctor", 
    $sig.make(0x92B, null, [], []), 
    function EqualityComparer$b1__cctor () {
      if ($thisType.T.get(this) === $T00().__Type__) {
        $thisType.Of($thisType.T.get(this))._default = $thisType.Of($thisType.T.get(this)).$Cast(new ($T01())());
      } else if ($asm01.System.IEquatable$b1.Of($thisType.T.get(this)).__Type__.IsAssignableFrom($thisType.T.get(this))) {
        $thisType.Of($thisType.T.get(this))._default = $thisType.Of($thisType.T.get(this)).$Cast($T03().CreateInstance($T04().__Type__.MakeGenericType(JSIL.Array.New($T02(), [$thisType.T.get(this)]))));
      } else {
        $thisType.Of($thisType.T.get(this))._default = new ($asm01.System.Collections.Generic.EqualityComparer$b1_DefaultComparer.Of($thisType.T.get(this))) ();
      }
    }
  );

  $.GenericProperty({Static:true , Public:true }, "Default", $.Type);

  $.ImplementInterfaces($asm01.TypeRef("System.Collections.IEqualityComparer"), $asm01.TypeRef("System.Collections.Generic.IEqualityComparer`1", [new JSIL.GenericParameter("T", "System.Collections.Generic.EqualityComparer`1")]))
});

JSIL.MakeClass($asm01.TypeRef("System.Collections.Generic.EqualityComparer`1", [new JSIL.GenericParameter("T", "System.Collections.Generic.EqualityComparer`1/DefaultComparer")]), "System.Collections.Generic.EqualityComparer`1/DefaultComparer", false, ["T"], function ($) {
  var $thisType = $.publicInterface;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm01.System.Boolean)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm01.System.Object)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm01.System.Int32)) ();
  };

  $.Method({Static:false, Public:true }, ".ctor", 
    $sig.make(0xF4B, null, [], []), 
    function DefaultComparer__ctor () {
      $asm01.System.Collections.Generic.EqualityComparer$b1.Of($thisType.T.get(this)).prototype._ctor.call(this);
    }
  );

  $.Method({Static:false, Public:true }, "Equals", 
    $sig.make(0xF4A, $asm01.TypeRef("System.Boolean"), [new JSIL.GenericParameter("T", "System.Collections.Generic.EqualityComparer`1/DefaultComparer"), new JSIL.GenericParameter("T", "System.Collections.Generic.EqualityComparer`1/DefaultComparer")], []), 
    function DefaultComparer_Equals (x, y) {
      if (x === null) {
        var result = (y === null);
      } else {
        result = x.Object_Equals(y);
      }
      return result;
    }
  );

  $.Method({Static:false, Public:true }, "GetHashCode", 
    $sig.make(0xF44, $asm01.TypeRef("System.Int32"), [new JSIL.GenericParameter("T", "System.Collections.Generic.EqualityComparer`1/DefaultComparer")], []), 
    function DefaultComparer_GetHashCode (obj) {
      if (obj === null) {
        var result = 0;
      } else {
        result = (JSIL.ObjectHashCode(obj));
      }
      return result;
    }
  );

});

JSIL.MakeClass($asm01.TypeRef("System.Collections.Generic.EqualityComparer`1", [$asm01.TypeRef("System.String")]), "System.Collections.Generic.InternalStringComparer", false, [], function ($) {
  var $thisType = $.publicInterface;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm01.System.Collections.Generic.EqualityComparer$b1.Of($asm01.System.String))) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm01.System.String)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm01.System.Boolean)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm01.System.Object)) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize($asm01.System.Int32)) ();
  };

  $.Method({Static:false, Public:true }, ".ctor", 
    $sig.make(0x96A, null, [], []), 
    function InternalStringComparer__ctor () {
      $T00().prototype._ctor.call(this);
    }
  );

  $.Method({Static:false, Public:true }, "Equals", 
    $sig.make(0x966, $asm01.TypeRef("System.Boolean"), [$asm01.TypeRef("System.String"), $asm01.TypeRef("System.String")], []), 
    function InternalStringComparer_Equals (x, y) {
      if (x === null) {
        var result = (y === null);
      } else {
        result = ((x === y) || 
          x.Object_Equals(y));
      }
      return result;
    }
  );

  $.Method({Static:false, Public:true }, "GetHashCode", 
    $sig.make(0x95F, $asm01.TypeRef("System.Int32"), [$asm01.TypeRef("System.String")], []), 
    function InternalStringComparer_GetHashCode (obj) {
      if (obj === null) {
        var result = 0;
      } else {
        result = (JSIL.ObjectHashCode(obj));
      }
      return result;
    }
  );

});

JSIL.MakeClass($asm01.TypeRef("System.Collections.Generic.EqualityComparer`1", [new JSIL.GenericParameter("T", "System.Collections.Generic.GenericEqualityComparer`1")]), "System.Collections.Generic.GenericEqualityComparer`1", false, ["T"], function ($) {
  var $thisType = $.publicInterface;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm01.System.Boolean)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm01.System.Int32)) ();
  };

  $.Method({Static:false, Public:true }, ".ctor", 
    $sig.make(0x991, null, [], []), 
    function GenericEqualityComparer$b1__ctor () {
      $asm01.System.Collections.Generic.EqualityComparer$b1.Of($thisType.T.get(this)).prototype._ctor.call(this);
    }
  );

  $.Method({Static:false, Public:true }, "Equals", 
    $sig.make(0x98C, $asm01.TypeRef("System.Boolean"), [new JSIL.GenericParameter("T", "System.Collections.Generic.GenericEqualityComparer`1"), new JSIL.GenericParameter("T", "System.Collections.Generic.GenericEqualityComparer`1")], []), 
    function GenericEqualityComparer$b1_Equals (x, y) {
      if (x === null) {
        var result = (y === null);
      } else {
        result = x.IEquatable$b1_Equals(JSIL.CloneParameter($thisType.T.get(this), y));
      }
      return result;
    }
  );

  $.Method({Static:false, Public:true }, "GetHashCode", 
    $sig.make(0x98A, $asm01.TypeRef("System.Int32"), [new JSIL.GenericParameter("T", "System.Collections.Generic.GenericEqualityComparer`1")], []), 
    function GenericEqualityComparer$b1_GetHashCode (obj) {
      if (obj === null) {
        var result = 0;
      } else {
        result = (JSIL.ObjectHashCode(obj));
      }
      return result;
    }
  );

});

JSIL.MakeStruct($asm01.TypeRef("System.ValueType"), "System.RuntimeFieldHandle", true, [], function ($) {
  var $thisType = $.publicInterface;

});

JSIL.MakeTypeAlias($jsilcore, "System.Int64");

JSIL.MakeTypeAlias($jsilcore, "System.Reflection.Assembly");

JSIL.MakeClass($asm01.TypeRef("System.SystemException"), "System.NotSupportedException", true, [], function ($) {
  var $thisType = $.publicInterface;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm01.System.SystemException)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm01.System.Locale)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm01.System.Object)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm01.System.String)) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize($asm01.System.Exception)) ();
  };

  $.Method({Static:false, Public:true }, ".ctor", 
    $sig.make(0xA33, null, [], []), 
    function NotSupportedException__ctor () {
      $T00().prototype._ctor.call(this, $T01().GetText("Operation is not supported.", JSIL.Array.New($T02(), 0)));
      this.Exception$HResult$value = -2146233067;
    }
  );

  $.Method({Static:false, Public:true }, ".ctor", 
    $sig.make(0xA34, null, [$asm01.TypeRef("System.String")], []), 
    function NotSupportedException__ctor (message) {
      $T00().prototype._ctor.call(this, message);
      this.Exception$HResult$value = -2146233067;
    }
  );

  $.Method({Static:false, Public:true }, ".ctor", 
    $sig.make(0xA35, null, [$asm01.TypeRef("System.String"), $asm01.TypeRef("System.Exception")], []), 
    function NotSupportedException__ctor (message, innerException) {
      $sig.get(0x7D2, null, [$asm01.System.String, $asm01.System.Exception], []).Call($T00().prototype, "_ctor", null, this, message, innerException);
      this.Exception$HResult$value = -2146233067;
    }
  );

  $.Constant({Static:true , Public:false}, "Result", -2146233067); 
})
  .Attribute($asm01.TypeRef("System.Runtime.InteropServices.ComVisibleAttribute"), function () { return [true]; });

JSIL.MakeDelegate("System.Converter`2", true, ["TInput", "TOutput"]);

JSIL.MakeClass($asm01.TypeRef("System.Attribute"), "System.Runtime.InteropServices.DispIdAttribute", true, [], function ($) {
  var $thisType = $.publicInterface;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm01.System.Int32)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm01.System.Attribute)) ();
  };

  $.Method({Static:false, Public:true }, ".ctor", 
    $sig.make(0xB41, null, [$asm01.TypeRef("System.Int32")], []), 
    function DispIdAttribute__ctor (dispId) {
      $T01().prototype._ctor.call(this);
      this.id = dispId;
    }
  );

  $.Method({Static:false, Public:true }, "get_Value", 
    $sig.make(0xB3E, $asm01.TypeRef("System.Int32"), [], []), 
    function DispIdAttribute_get_Value () {
      return this.id;
    }
  );

  $.Field({Static:false, Public:false}, "id", $asm01.TypeRef("System.Int32")); 
  $.Property({Static:false, Public:true }, "Value", $asm01.TypeRef("System.Int32"));

})
  .Attribute($asm01.TypeRef("System.Runtime.InteropServices.ComVisibleAttribute"), function () { return [true]; })
  .Attribute($asm01.TypeRef("System.AttributeUsageAttribute"), function () { return [960]; });

JSIL.MakeClass($asm01.TypeRef("System.Object"), "System.Globalization.TextInfo", true, [], function ($) {
  var $thisType = $.publicInterface;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm01.System.Globalization.CultureInfo)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm01.System.Int32)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize(System.Array.Of($asm01.System.Object))) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm01.System.Boolean)) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize($asm01.System.Globalization.TextInfo_Data)) ();
  };
  var $T05 = function () {
    return ($T05 = JSIL.Memoize($asm01.System.Byte)) ();
  };
  var $T06 = function () {
    return ($T06 = JSIL.Memoize($asm01.System.Object)) ();
  };
  var $T07 = function () {
    return ($T07 = JSIL.Memoize($asm01.System.String)) ();
  };
  var $T08 = function () {
    return ($T08 = JSIL.Memoize($asm01.System.Char)) ();
  };
  var $T09 = function () {
    return ($T09 = JSIL.Memoize($asm01.System.ArgumentNullException)) ();
  };
  var $T0A = function () {
    return ($T0A = JSIL.Memoize($asm01.System.Text.StringBuilder)) ();
  };
  var $T0B = function () {
    return ($T0B = JSIL.Memoize($asm01.System.Void)) ();
  };

  $.Method({Static:false, Public:false}, ".ctor", 
    $sig.make(0x615, null, [
        $asm01.TypeRef("System.Globalization.CultureInfo"), $asm01.TypeRef("System.Int32"), 
        $jsilcore.TypeRef("System.Array", [$asm01.TypeRef("System.Object")]), $asm01.TypeRef("System.Boolean")
      ], []), 
    function TextInfo__ctor (ci, lcid, data, read_only) {
      this.m_isReadOnly = read_only;
      this.m_win32LangID = lcid;
      this.ci = ci;
      if (data !== null) {
        this.data = new ($T04())();
        this.data.ansi = $T01().$Cast(data[0]);
        this.data.ebcdic = $T01().$Cast(data[1]);
        this.data.mac = $T01().$Cast(data[2]);
        this.data.oem = $T01().$Cast(data[3]);
        this.data.list_sep = $T05().$Cast(data[4]);
      } else {
        this.data = new ($T04())();
        this.data.list_sep = 44;
      }

      for (var tmp = ci; !((tmp.get_Parent() === null) || 
          (tmp.get_Parent().get_LCID() === 127)) && (tmp.get_Parent() !== tmp); tmp = tmp.get_Parent()) {
      }
      if (tmp !== null) {
        var lCID = tmp.get_LCID();
        if ((lCID === 31) || (lCID === 44)) {
          this.handleDotI = true;
        }
      }
    }
  );

  $.Method({Static:false, Public:false}, ".ctor", 
    $sig.make(0x616, null, [$.Type], []), 
    function TextInfo__ctor (textInfo) {
      this.m_win32LangID = textInfo.m_win32LangID;
      this.m_nDataItem = textInfo.m_nDataItem;
      this.m_useUserOverride = textInfo.m_useUserOverride;
      this.m_listSeparator = textInfo.get_ListSeparator();
      this.customCultureName = textInfo.get_CultureName();
      this.ci = textInfo.ci;
      this.handleDotI = textInfo.handleDotI;
      this.data = textInfo.data.MemberwiseClone();
    }
  );

  $.Method({Static:false, Public:true }, "Clone", 
    $sig.make(0x621, $asm01.TypeRef("System.Object"), [], []), 
    function TextInfo_Clone () {
      return new $thisType(this);
    }
  )
    .Attribute($asm01.TypeRef("System.Runtime.InteropServices.ComVisibleAttribute"), function () { return [false]; });

  $.Method({Static:false, Public:true }, "Object.Equals", 
    $sig.make(0x617, $asm01.TypeRef("System.Boolean"), [$asm01.TypeRef("System.Object")], []), 
    function TextInfo_Object_Equals (obj) {
      if (obj === null) {
        var result = false;
      } else {
        var other = $thisType.$As(obj);
        result = ((other !== null) && 
          (other.m_win32LangID === this.m_win32LangID) && 
          (other.ci === this.ci));
      }
      return result;
    }
  );

  $.Method({Static:false, Public:true }, "get_ANSICodePage", 
    $sig.make(0x60B, $asm01.TypeRef("System.Int32"), [], []), 
    function TextInfo_get_ANSICodePage () {
      return this.data.ansi;
    }
  );

  $.Method({Static:false, Public:true }, "get_CultureName", 
    $sig.make(0x612, $asm01.TypeRef("System.String"), [], []), 
    function TextInfo_get_CultureName () {
      if (this.customCultureName === null) {
        this.customCultureName = ((this.ci === null) ? $T07().Empty : this.ci.get_Name());
      }
      return this.customCultureName;
    }
  );

  $.Method({Static:false, Public:true }, "get_EBCDICCodePage", 
    $sig.make(0x60C, $asm01.TypeRef("System.Int32"), [], []), 
    function TextInfo_get_EBCDICCodePage () {
      return this.data.ebcdic;
    }
  );

  $.Method({Static:false, Public:true }, "get_IsReadOnly", 
    $sig.make(0x613, $asm01.TypeRef("System.Boolean"), [], []), 
    function TextInfo_get_IsReadOnly () {
      return this.m_isReadOnly;
    }
  );

  $.Method({Static:false, Public:true }, "get_IsRightToLeft", 
    $sig.make(0x614, $asm01.TypeRef("System.Boolean"), [], []), 
    function TextInfo_get_IsRightToLeft () {

      var $label0 = 0;
    $labelgroup0: 
      while (true) {
        switch ($label0) {
          case 0: /* $entry0 */ 
            var win32LangID = this.m_win32LangID;
            if (win32LangID <= 2049) {
              if (win32LangID <= 101) {
                if (win32LangID <= 32) {
                  if (!((win32LangID === 1) || 
                      (win32LangID === 13) || (win32LangID === 32))) {
                    $label0 = 1 /* goto IL_170 */ ;
                    continue $labelgroup0;
                  }
                } else if (!((win32LangID === 41) || 
                    (win32LangID === 90) || (win32LangID === 101))) {
                  $label0 = 1 /* goto IL_170 */ ;
                  continue $labelgroup0;
                }
              } else if (win32LangID <= 1056) {
                if (!((win32LangID === 1025) || 
                    (win32LangID === 1037) || (win32LangID === 1056))) {
                  $label0 = 1 /* goto IL_170 */ ;
                  continue $labelgroup0;
                }
              } else if (win32LangID <= 1114) {
                if (!((win32LangID === 1065) || (win32LangID === 1114))) {
                  $label0 = 1 /* goto IL_170 */ ;
                  continue $labelgroup0;
                }
              } else if (!((win32LangID === 1125) || (win32LangID === 2049))) {
                $label0 = 1 /* goto IL_170 */ ;
                continue $labelgroup0;
              }
            } else if (win32LangID <= 9217) {
              if (win32LangID <= 5121) {
                if (!((win32LangID === 3073) || 
                    (win32LangID === 4097) || (win32LangID === 5121))) {
                  $label0 = 1 /* goto IL_170 */ ;
                  continue $labelgroup0;
                }
              } else if (win32LangID <= 7169) {
                if (!((win32LangID === 6145) || (win32LangID === 7169))) {
                  $label0 = 1 /* goto IL_170 */ ;
                  continue $labelgroup0;
                }
              } else if (!((win32LangID === 8193) || (win32LangID === 9217))) {
                $label0 = 1 /* goto IL_170 */ ;
                continue $labelgroup0;
              }
            } else if (win32LangID <= 12289) {
              if (!((win32LangID === 10241) || 
                  (win32LangID === 11265) || (win32LangID === 12289))) {
                $label0 = 1 /* goto IL_170 */ ;
                continue $labelgroup0;
              }
            } else if (win32LangID <= 14337) {
              if (!((win32LangID === 13313) || (win32LangID === 14337))) {
                $label0 = 1 /* goto IL_170 */ ;
                continue $labelgroup0;
              }
            } else if (!((win32LangID === 15361) || (win32LangID === 16385))) {
              $label0 = 1 /* goto IL_170 */ ;
              continue $labelgroup0;
            }
            var result = true;
            return result;

            $label0 = 1 /* goto IL_170 */ ;
            continue $labelgroup0;
          case 1: /* IL_170 */ 
            result = false;
            return result;

            break $labelgroup0;
        }
      }
    }
  );

  $.Method({Static:false, Public:true }, "get_LCID", 
    $sig.make(0x60D, $asm01.TypeRef("System.Int32"), [], []), 
    function TextInfo_get_LCID () {
      return this.m_win32LangID;
    }
  );

  $.Method({Static:false, Public:true }, "get_ListSeparator", 
    $sig.make(0x60E, $asm01.TypeRef("System.String"), [], []), 
    function TextInfo_get_ListSeparator () {
      if (this.m_listSeparator === null) {
        var list_sep = String.fromCharCode(this.data.list_sep);
        this.m_listSeparator = list_sep.toString();
      }
      return this.m_listSeparator;
    }
  );

  $.Method({Static:false, Public:true }, "get_MacCodePage", 
    $sig.make(0x610, $asm01.TypeRef("System.Int32"), [], []), 
    function TextInfo_get_MacCodePage () {
      return this.data.mac;
    }
  );

  $.Method({Static:false, Public:true }, "get_OEMCodePage", 
    $sig.make(0x611, $asm01.TypeRef("System.Int32"), [], []), 
    function TextInfo_get_OEMCodePage () {
      return this.data.oem;
    }
  );

  $.Method({Static:false, Public:true }, "GetHashCode", 
    $sig.make(0x618, $asm01.TypeRef("System.Int32"), [], []), 
    function TextInfo_GetHashCode () {
      return this.m_win32LangID;
    }
  );

  $.Method({Static:true , Public:true }, "ReadOnly", 
    $sig.make(0x620, $.Type, [$.Type], []), 
    function TextInfo_ReadOnly (textInfo) {
      if (textInfo === null) {
        throw new ($T09())("textInfo");
      }
      return (new $thisType(textInfo)).__Initialize__({
          m_isReadOnly: true}
      );
    }
  )
    .Attribute($asm01.TypeRef("System.Runtime.InteropServices.ComVisibleAttribute"), function () { return [false]; });

  $.Method({Static:false, Public:true }, "set_ListSeparator", 
    $sig.make(0x60F, null, [$asm01.TypeRef("System.String")], []), 
    function TextInfo_set_ListSeparator (value) {
      this.m_listSeparator = value;
    }
  )
    .Attribute($asm01.TypeRef("System.Runtime.InteropServices.ComVisibleAttribute"), function () { return [false]; });

  $.Method({Static:false, Public:true }, "ToLower", 
    $sig.make(0x61B, $asm01.TypeRef("System.Char"), [$asm01.TypeRef("System.Char")], []), 
    function TextInfo_ToLower (c) {
      if (!((c.charCodeAt(0) >= "@".charCodeAt(0)) && (("`".charCodeAt(0) >= c.charCodeAt(0)) || 
            (c.charCodeAt(0) >= "\x80".charCodeAt(0))))) {
        var result = c;
      } else if (!(("A".charCodeAt(0) > c.charCodeAt(0)) || 
          (c.charCodeAt(0) > "Z".charCodeAt(0)) || (this.handleDotI && 
            (c.charCodeAt(0) === "I".charCodeAt(0))))) {
        result = String.fromCharCode((String.fromCharCode((c.charCodeAt(0) + " ".charCodeAt(0)))).charCodeAt(0));
      } else if (!((this.ci !== null) && (this.ci.get_LCID() !== 127))) {
        result = $T08().ToLowerInvariant(c);
      } else {
        if (c.charCodeAt(0) <= "\u01c5".charCodeAt(0)) {
          if (c.charCodeAt(0) !== "I".charCodeAt(0)) {
            if (c.charCodeAt(0) === "\u0130".charCodeAt(0)) {
              result = "i";
              return result;
            }
            if (c.charCodeAt(0) === "\u01c5".charCodeAt(0)) {
              result = "\u01c6";
              return result;
            }
          } else if (this.handleDotI) {
            result = "\u0131";
            return result;
          }
        } else if (c.charCodeAt(0) <= "\u01cb".charCodeAt(0)) {
          if (c.charCodeAt(0) === "\u01c8".charCodeAt(0)) {
            result = "\u01c9";
            return result;
          }
          if (c.charCodeAt(0) === "\u01cb".charCodeAt(0)) {
            result = "\u01cc";
            return result;
          }
        } else {
          if (c.charCodeAt(0) === "\u01f2".charCodeAt(0)) {
            result = "\u01f3";
            return result;
          }
          switch (c) {
            case "\u03d2": 
              result = "\u03c5";
              return result;

            case "\u03d3": 
              result = "\u03cd";
              return result;

            case "\u03d4": 
              result = "\u03cb";
              return result;

          }
        }
        result = $T08().ToLowerInvariant(c);
      }
      return result;
    }
  );

  $.Method({Static:false, Public:true }, "ToLower", 
    $sig.make(0x61E, $asm01.TypeRef("System.String"), [$asm01.TypeRef("System.String")], []), 
    function TextInfo_ToLower (str) {
      if (str === null) {
        throw new ($T09())("str");
      }
      if (str.length === 0) {
        var result = $T07().Empty;
      } else {
        var sb = new ($T0A())();

        for (var i = 0; i < str.length; ++i) {
          $sig.get(0xB55, $asm01.System.Text.StringBuilder, [$asm01.System.Char], []).CallVirtual("Append", null, sb, $sig.get(0x61B, $asm01.System.Char, [$asm01.System.Char], []).CallVirtual("ToLower", null, this, str[i]));
        }
        var tmp = sb.toString();
        result = tmp;
      }
      return result;
    }
  );

  $.Method({Static:false, Public:true }, "toString", 
    $sig.make(0x619, $asm01.TypeRef("System.String"), [], []), 
    function TextInfo_toString () {
      return JSIL.ConcatString("TextInfo - ", this.m_win32LangID);
    }
  );

  $.Method({Static:false, Public:true }, "ToTitleCase", 
    $sig.make(0x61A, $asm01.TypeRef("System.String"), [$asm01.TypeRef("System.String")], []), 
    function TextInfo_ToTitleCase (str) {
      if (str === null) {
        throw new ($T09())("str");
      }
      var sb = null;
      var i = 0;
      var start = 0;

    $loop0: 
      while (i < str.length) {
        if (("abcdefghijklmnopqrstuvxyzABCDEFGHIJKLMNOPQRSTUVXYZ".indexOf(str[i++]) !== -1)) {
          --i;
          var t = $sig.get(0x61D, $asm01.System.Char, [$asm01.System.Char], []).CallVirtual("ToTitleCase", null, this, str[i]);
          var capitalize = true;
          if (t.charCodeAt(0) === str[i].charCodeAt(0)) {
            capitalize = false;
            var allTitle = true;
            var saved = i;

          $loop1: 
            while (++i < str.length) {
              if ((" \n\r\t".indexOf(str[i]) !== -1)) {
                break $loop1;
              }
              t = $sig.get(0x61D, $asm01.System.Char, [$asm01.System.Char], []).CallVirtual("ToTitleCase", null, this, str[i]);
              if (t.charCodeAt(0) !== str[i].charCodeAt(0)) {
                allTitle = false;
                break $loop1;
              }
            }
            if (allTitle) {
              continue $loop0;
            }

          $loop2: 
            for (i = saved; ++i < str.length; ) {
              if ((" \n\r\t".indexOf(str[i]) !== -1)) {
                break $loop2;
              }
              if ($sig.get(0x61B, $asm01.System.Char, [$asm01.System.Char], []).CallVirtual("ToLower", null, this, str[i]).charCodeAt(0) !== str[i].charCodeAt(0)) {
                capitalize = true;
                i = saved;
                break $loop2;
              }
            }
          }
          if (capitalize) {
            if (sb === null) {
              sb = $sig.get(0xB02, null, [$asm01.System.Int32], []).Construct($T0A(), str.length);
            }
            $sig.get(0xB5B, $asm01.System.Text.StringBuilder, [
                $asm01.System.String, $asm01.System.Int32, 
                $asm01.System.Int32
              ], []).CallVirtual("Append", null, sb, str, start, ((i - start) | 0));
            $sig.get(0xB55, $asm01.System.Text.StringBuilder, [$asm01.System.Char], []).CallVirtual("Append", null, sb, $sig.get(0x61D, $asm01.System.Char, [$asm01.System.Char], []).CallVirtual("ToTitleCase", null, this, str[i]));
            start = ((i + 1) | 0);

          $loop3: 
            while (++i < str.length) {
              if ((" \n\r\t".indexOf(str[i]) !== -1)) {
                break $loop3;
              }
              $sig.get(0xB55, $asm01.System.Text.StringBuilder, [$asm01.System.Char], []).CallVirtual("Append", null, sb, $sig.get(0x61B, $asm01.System.Char, [$asm01.System.Char], []).CallVirtual("ToLower", null, this, str[i]));
            }
            start = i;
          }
        }
      }
      if (sb !== null) {
        $sig.get(0xB5B, $asm01.System.Text.StringBuilder, [
            $asm01.System.String, $asm01.System.Int32, 
            $asm01.System.Int32
          ], []).CallVirtual("Append", null, sb, str, start, ((str.length - start) | 0));
      }
      return ((sb !== null) ? sb.toString() : str);
    }
  );

  $.Method({Static:false, Public:false}, "ToTitleCase", 
    $sig.make(0x61D, $asm01.TypeRef("System.Char"), [$asm01.TypeRef("System.Char")], []), 
    function TextInfo_ToTitleCase (c) {
      switch (c) {
        case "\u01c4": 
        case "\u01c5": 
        case "\u01c6": 
          var result = "\u01c5";
          break;

        case "\u01c7": 
        case "\u01c8": 
        case "\u01c9": 
          result = "\u01c8";
          break;

        case "\u01ca": 
        case "\u01cb": 
        case "\u01cc": 
          result = "\u01cb";
          break;

        default: 
          switch (c) {
            case "\u01f1": 
            case "\u01f2": 
            case "\u01f3": 
              result = "\u01f2";
              break;

            default: 
              if (!(!(("\u2170".charCodeAt(0) <= c.charCodeAt(0)) && 
                    (c.charCodeAt(0) <= "\u217f".charCodeAt(0))) && (("\u24d0".charCodeAt(0) > c.charCodeAt(0)) || 
                    (c.charCodeAt(0) > "\u24e9".charCodeAt(0))))) {
                result = c;
              } else {
                result = $sig.get(0x61C, $asm01.System.Char, [$asm01.System.Char], []).CallVirtual("ToUpper", null, this, c);
              }
              break;

          }
          break;

      }
      return result;
    }
  );

  $.Method({Static:false, Public:true }, "ToUpper", 
    $sig.make(0x61C, $asm01.TypeRef("System.Char"), [$asm01.TypeRef("System.Char")], []), 
    function TextInfo_ToUpper (c) {
      if (c.charCodeAt(0) < "`".charCodeAt(0)) {
        var result = c;
      } else if (!(("a".charCodeAt(0) > c.charCodeAt(0)) || 
          (c.charCodeAt(0) > "z".charCodeAt(0)) || (this.handleDotI && 
            (c.charCodeAt(0) === "i".charCodeAt(0))))) {
        result = String.fromCharCode((String.fromCharCode((c.charCodeAt(0) - " ".charCodeAt(0)))).charCodeAt(0));
      } else if (!((this.ci !== null) && (this.ci.get_LCID() !== 127))) {
        result = $T08().ToUpperInvariant(c);
      } else {
        if (c.charCodeAt(0) <= "\u01cb".charCodeAt(0)) {
          if (c.charCodeAt(0) <= "\u0131".charCodeAt(0)) {
            if (c.charCodeAt(0) !== "i".charCodeAt(0)) {
              if (c.charCodeAt(0) === "\u0131".charCodeAt(0)) {
                result = "I";
                return result;
              }
            } else if (this.handleDotI) {
              result = "\u0130";
              return result;
            }
          } else {
            if (c.charCodeAt(0) === "\u01c5".charCodeAt(0)) {
              result = "\u01c4";
              return result;
            }
            if (c.charCodeAt(0) === "\u01c8".charCodeAt(0)) {
              result = "\u01c7";
              return result;
            }
            if (c.charCodeAt(0) === "\u01cb".charCodeAt(0)) {
              result = "\u01ca";
              return result;
            }
          }
        } else if (c.charCodeAt(0) <= "\u0390".charCodeAt(0)) {
          if (c.charCodeAt(0) === "\u01f2".charCodeAt(0)) {
            result = "\u01f1";
            return result;
          }
          if (c.charCodeAt(0) === "\u0390".charCodeAt(0)) {
            result = "\u03aa";
            return result;
          }
        } else {
          if (c.charCodeAt(0) === "\u03b0".charCodeAt(0)) {
            result = "\u03ab";
            return result;
          }
          switch (c) {
            case "\u03d0": 
              result = "\u0392";
              return result;

            case "\u03d1": 
              result = "\u0398";
              return result;

            case "\u03d2": 
            case "\u03d3": 
            case "\u03d4": 
              break;

            case "\u03d5": 
              result = "\u03a6";
              return result;

            case "\u03d6": 
              result = "\u03a0";
              return result;

            default: 
              switch (c) {
                case "\u03f0": 
                  result = "\u039a";
                  return result;

                case "\u03f1": 
                  result = "\u03a1";
                  return result;

              }
              break;

          }
        }
        result = $T08().ToUpperInvariant(c);
      }
      return result;
    }
  );

  $.Method({Static:false, Public:true }, "ToUpper", 
    $sig.make(0x61F, $asm01.TypeRef("System.String"), [$asm01.TypeRef("System.String")], []), 
    function TextInfo_ToUpper (str) {
      if (str === null) {
        throw new ($T09())("str");
      }
      if (str.length === 0) {
        var result = $T07().Empty;
      } else {
        var sb = new ($T0A())();

        for (var i = 0; i < str.length; ++i) {
          $sig.get(0xB55, $asm01.System.Text.StringBuilder, [$asm01.System.Char], []).CallVirtual("Append", null, sb, $sig.get(0x61C, $asm01.System.Char, [$asm01.System.Char], []).CallVirtual("ToUpper", null, this, str[i]));
        }
        var tmp = sb.toString();
        result = tmp;
      }
      return result;
    }
  );

  $.Field({Static:false, Public:false}, "m_listSeparator", $asm01.TypeRef("System.String")); 
  $.Field({Static:false, Public:false}, "m_isReadOnly", $asm01.TypeRef("System.Boolean")); 
  $.Field({Static:false, Public:false}, "customCultureName", $asm01.TypeRef("System.String")); 
  $.Field({Static:false, Public:false}, "m_nDataItem", $asm01.TypeRef("System.Int32")); 
  $.Field({Static:false, Public:false}, "m_useUserOverride", $asm01.TypeRef("System.Boolean")); 
  $.Field({Static:false, Public:false}, "m_win32LangID", $asm01.TypeRef("System.Int32")); 
  $.Field({Static:false, Public:false, ReadOnly:true }, "ci", $asm01.TypeRef("System.Globalization.CultureInfo")); 
  $.Field({Static:false, Public:false, ReadOnly:true }, "handleDotI", $asm01.TypeRef("System.Boolean")); 
  $.Field({Static:false, Public:false, ReadOnly:true }, "data", $asm01.TypeRef("System.Globalization.TextInfo/Data")); 
  $.Property({Static:false, Public:true , Virtual:true }, "ANSICodePage", $asm01.TypeRef("System.Int32"));

  $.Property({Static:false, Public:true , Virtual:true }, "EBCDICCodePage", $asm01.TypeRef("System.Int32"));

  $.Property({Static:false, Public:true }, "LCID", $asm01.TypeRef("System.Int32"))
    .Attribute($asm01.TypeRef("System.Runtime.InteropServices.ComVisibleAttribute"), function () { return [false]; });

  $.Property({Static:false, Public:true , Virtual:true }, "ListSeparator", $asm01.TypeRef("System.String"));

  $.Property({Static:false, Public:true , Virtual:true }, "MacCodePage", $asm01.TypeRef("System.Int32"));

  $.Property({Static:false, Public:true , Virtual:true }, "OEMCodePage", $asm01.TypeRef("System.Int32"));

  $.Property({Static:false, Public:true }, "CultureName", $asm01.TypeRef("System.String"))
    .Attribute($asm01.TypeRef("System.Runtime.InteropServices.ComVisibleAttribute"), function () { return [false]; });

  $.Property({Static:false, Public:true }, "IsReadOnly", $asm01.TypeRef("System.Boolean"))
    .Attribute($asm01.TypeRef("System.Runtime.InteropServices.ComVisibleAttribute"), function () { return [false]; });

  $.Property({Static:false, Public:true }, "IsRightToLeft", $asm01.TypeRef("System.Boolean"))
    .Attribute($asm01.TypeRef("System.Runtime.InteropServices.ComVisibleAttribute"), function () { return [false]; });

  $.ImplementInterfaces($asm01.TypeRef("System.Runtime.Serialization.IDeserializationCallback"), $asm01.TypeRef("System.ICloneable"))
})
  .Attribute($asm01.TypeRef("System.Runtime.InteropServices.ComVisibleAttribute"), function () { return [true]; })
  .Attribute($asm01.TypeRef("System.MonoTODOAttribute"), function () { return ["IDeserializationCallback isn't implemented."]; });

JSIL.MakeStruct($asm01.TypeRef("System.ValueType"), "System.Globalization.TextInfo/Data", false, [], function ($) {
  var $thisType = $.publicInterface;

  $.Field({Static:false, Public:true }, "ansi", $asm01.TypeRef("System.Int32")); 
  $.Field({Static:false, Public:true }, "ebcdic", $asm01.TypeRef("System.Int32")); 
  $.Field({Static:false, Public:true }, "mac", $asm01.TypeRef("System.Int32")); 
  $.Field({Static:false, Public:true }, "oem", $asm01.TypeRef("System.Int32")); 
  $.Field({Static:false, Public:true }, "list_sep", $asm01.TypeRef("System.Byte")); 
});

JSIL.MakeClass($asm01.TypeRef("System.Object"), "System.Collections.ObjectModel.ReadOnlyCollection`1", true, ["T"], function ($) {
  var $thisType = $.publicInterface;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm01.System.ArgumentNullException)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm01.System.Int32)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm01.System.NotSupportedException)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm01.System.Array)) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize($asm01.System.Collections.ICollection)) ();
  };
  var $T05 = function () {
    return ($T05 = JSIL.Memoize($asm01.System.Collections.IEnumerable)) ();
  };
  var $T06 = function () {
    return ($T06 = JSIL.Memoize($asm01.System.Object)) ();
  };

  $.Method({Static:false, Public:true }, ".ctor", 
    $sig.make(0xBED, null, [$asm01.TypeRef("System.Collections.Generic.IList`1", [new JSIL.GenericParameter("T", "System.Collections.ObjectModel.ReadOnlyCollection`1")])], []), 
    function ReadOnlyCollection$b1__ctor (list) {
      if (list === null) {
        throw new ($T00())("list");
      }
      this.list = list;
    }
  );

  $.Method({Static:false, Public:true }, "Contains", 
    $sig.make(0xC10, $asm01.TypeRef("System.Boolean"), [new JSIL.GenericParameter("T", "System.Collections.ObjectModel.ReadOnlyCollection`1")], []), 
    function ReadOnlyCollection$b1_Contains (value) {
      return this.list.ICollection$b1_Contains(value);
    }
  );

  $.Method({Static:false, Public:true }, "CopyTo", 
    $sig.make(0xC15, null, [$jsilcore.TypeRef("System.Array", [new JSIL.GenericParameter("T", "System.Collections.ObjectModel.ReadOnlyCollection`1")]), $asm01.TypeRef("System.Int32")], []), 
    function ReadOnlyCollection$b1_CopyTo (array, index) {
      this.list.ICollection$b1_CopyTo(array, index);
    }
  );

  $.Method({Static:false, Public:true }, "get_Count", 
    $sig.make(0xB7E, $asm01.TypeRef("System.Int32"), [], []), 
    function ReadOnlyCollection$b1_get_Count () {
      return this.list.ICollection$b1_get_Count();
    }
  );

  $.Method({Static:false, Public:true }, "get_Item", 
    $sig.make(0xB82, new JSIL.GenericParameter("T", "System.Collections.ObjectModel.ReadOnlyCollection`1"), [$asm01.TypeRef("System.Int32")], []), 
    function ReadOnlyCollection$b1_get_Item (index) {
      return this.list.IList$b1_get_Item(index);
    }
  );

  $.Method({Static:false, Public:false}, "get_Items", 
    $sig.make(0xB80, $asm01.TypeRef("System.Collections.Generic.IList`1", [new JSIL.GenericParameter("T", "System.Collections.ObjectModel.ReadOnlyCollection`1")]), [], []), 
    function ReadOnlyCollection$b1_get_Items () {
      return this.list;
    }
  );

  $.Method({Static:false, Public:true }, "GetEnumerator", 
    $sig.make(0xC16, $asm01.TypeRef("System.Collections.Generic.IEnumerator`1", [new JSIL.GenericParameter("T", "System.Collections.ObjectModel.ReadOnlyCollection`1")]), [], []), 
    function ReadOnlyCollection$b1_GetEnumerator () {
      return this.list.IEnumerable$b1_GetEnumerator();
    }
  );

  $.Method({Static:false, Public:true }, "IndexOf", 
    $sig.make(0xC1B, $asm01.TypeRef("System.Int32"), [new JSIL.GenericParameter("T", "System.Collections.ObjectModel.ReadOnlyCollection`1")], []), 
    function ReadOnlyCollection$b1_IndexOf (value) {
      return this.list.IList$b1_IndexOf(value);
    }
  );

  $.Method({Static:false, Public:false}, "ICollection`1.Add", 
    $sig.make(0xC08, null, [new JSIL.GenericParameter("T", "System.Collections.ObjectModel.ReadOnlyCollection`1")], []), 
    function ReadOnlyCollection$b1_ICollection$b1_Add (item) {
      throw new ($T02())();
    }
  );

  $.Method({Static:false, Public:false}, "ICollection`1.Clear", 
    $sig.make(0xC0D, null, [], []), 
    function ReadOnlyCollection$b1_ICollection$b1_Clear () {
      throw new ($T02())();
    }
  );

  $.Method({Static:false, Public:false}, "ICollection`1.get_IsReadOnly", 
    $sig.make(0xB9C, $asm01.TypeRef("System.Boolean"), [], []), 
    function ReadOnlyCollection$b1_ICollection$b1_get_IsReadOnly () {
      return true;
    }
  );

  $.Method({Static:false, Public:false}, "ICollection`1.Remove", 
    $sig.make(0xC26, $asm01.TypeRef("System.Boolean"), [new JSIL.GenericParameter("T", "System.Collections.ObjectModel.ReadOnlyCollection`1")], []), 
    function ReadOnlyCollection$b1_ICollection$b1_Remove (item) {
      throw new ($T02())();
    }
  );

  $.Method({Static:false, Public:false}, "IList`1.get_Item", 
    $sig.make(0xB8D, new JSIL.GenericParameter("T", "System.Collections.ObjectModel.ReadOnlyCollection`1"), [$asm01.TypeRef("System.Int32")], []), 
    function ReadOnlyCollection$b1_IList$b1_get_Item (index) {
      return $thisType.Of($thisType.T.get(this)).prototype.get_Item.call(this, index);
    }
  );

  $.Method({Static:false, Public:false}, "IList`1.Insert", 
    $sig.make(0xC22, null, [$asm01.TypeRef("System.Int32"), new JSIL.GenericParameter("T", "System.Collections.ObjectModel.ReadOnlyCollection`1")], []), 
    function ReadOnlyCollection$b1_IList$b1_Insert (index, item) {
      throw new ($T02())();
    }
  );

  $.Method({Static:false, Public:false}, "IList`1.RemoveAt", 
    $sig.make(0xC2D, null, [$asm01.TypeRef("System.Int32")], []), 
    function ReadOnlyCollection$b1_IList$b1_RemoveAt (index) {
      throw new ($T02())();
    }
  );

  $.Method({Static:false, Public:false}, "IList`1.set_Item", 
    $sig.make(0xB96, null, [$asm01.TypeRef("System.Int32"), new JSIL.GenericParameter("T", "System.Collections.ObjectModel.ReadOnlyCollection`1")], []), 
    function ReadOnlyCollection$b1_IList$b1_set_Item (index, value) {
      throw new ($T02())();
    }
  );

  $.Method({Static:false, Public:false}, "ICollection.CopyTo", 
    $sig.make(0xC32, null, [$asm01.TypeRef("System.Array"), $asm01.TypeRef("System.Int32")], []), 
    function ReadOnlyCollection$b1_ICollection_CopyTo (array, index) {
      $T04().$Cast(this.list).ICollection_CopyTo(array, index);
    }
  );

  $.Method({Static:false, Public:false}, "ICollection.get_IsSynchronized", 
    $sig.make(0xBA1, $asm01.TypeRef("System.Boolean"), [], []), 
    function ReadOnlyCollection$b1_ICollection_get_IsSynchronized () {
      return false;
    }
  );

  $.Method({Static:false, Public:false}, "ICollection.get_SyncRoot", 
    $sig.make(0xBC5, $asm01.TypeRef("System.Object"), [], []), 
    function ReadOnlyCollection$b1_ICollection_get_SyncRoot () {
      return this;
    }
  );

  $.Method({Static:false, Public:false}, "IEnumerable.GetEnumerator", 
    $sig.make(0xC36, $asm01.TypeRef("System.Collections.IEnumerator"), [], []), 
    function ReadOnlyCollection$b1_IEnumerable_GetEnumerator () {
      return this.list.IEnumerable_GetEnumerator();
    }
  );

  $.Method({Static:false, Public:false}, "IList.Add", 
    $sig.make(0xC39, $asm01.TypeRef("System.Int32"), [$asm01.TypeRef("System.Object")], []), 
    function ReadOnlyCollection$b1_IList_Add (value) {
      throw new ($T02())();
    }
  );

  $.Method({Static:false, Public:false}, "IList.Clear", 
    $sig.make(0xC3B, null, [], []), 
    function ReadOnlyCollection$b1_IList_Clear () {
      throw new ($T02())();
    }
  );

  $.Method({Static:false, Public:false}, "IList.Contains", 
    $sig.make(0xC3D, $asm01.TypeRef("System.Boolean"), [$asm01.TypeRef("System.Object")], []), 
    function ReadOnlyCollection$b1_IList_Contains (value) {
      return ($asm01.System.Collections.ObjectModel.Collection$b1.Of($thisType.T.get(this)).IsValidItem(value) && this.list.ICollection$b1_Contains(JSIL.CloneParameter($thisType.T.get(this), $thisType.T.get(this).$Cast(value))));
    }
  );

  $.Method({Static:false, Public:false}, "IList.get_IsFixedSize", 
    $sig.make(0xBCA, $asm01.TypeRef("System.Boolean"), [], []), 
    function ReadOnlyCollection$b1_IList_get_IsFixedSize () {
      return true;
    }
  );

  $.Method({Static:false, Public:false}, "IList.get_IsReadOnly", 
    $sig.make(0xBD4, $asm01.TypeRef("System.Boolean"), [], []), 
    function ReadOnlyCollection$b1_IList_get_IsReadOnly () {
      return true;
    }
  );

  $.Method({Static:false, Public:false}, "IList.get_Item", 
    $sig.make(0xBDB, $asm01.TypeRef("System.Object"), [$asm01.TypeRef("System.Int32")], []), 
    function ReadOnlyCollection$b1_IList_get_Item (index) {
      return this.list.IList$b1_get_Item(index);
    }
  );

  $.Method({Static:false, Public:false}, "IList.IndexOf", 
    $sig.make(0xC43, $asm01.TypeRef("System.Int32"), [$asm01.TypeRef("System.Object")], []), 
    function ReadOnlyCollection$b1_IList_IndexOf (value) {
      if ($asm01.System.Collections.ObjectModel.Collection$b1.Of($thisType.T.get(this)).IsValidItem(value)) {
        var result = this.list.IList$b1_IndexOf(JSIL.CloneParameter($thisType.T.get(this), $thisType.T.get(this).$Cast(value)));
      } else {
        result = -1;
      }
      return result;
    }
  );

  $.Method({Static:false, Public:false}, "IList.Insert", 
    $sig.make(0xC46, null, [$asm01.TypeRef("System.Int32"), $asm01.TypeRef("System.Object")], []), 
    function ReadOnlyCollection$b1_IList_Insert (index, value) {
      throw new ($T02())();
    }
  );

  $.Method({Static:false, Public:false}, "IList.Remove", 
    $sig.make(0xC49, null, [$asm01.TypeRef("System.Object")], []), 
    function ReadOnlyCollection$b1_IList_Remove (value) {
      throw new ($T02())();
    }
  );

  $.Method({Static:false, Public:false}, "IList.RemoveAt", 
    $sig.make(0xC4B, null, [$asm01.TypeRef("System.Int32")], []), 
    function ReadOnlyCollection$b1_IList_RemoveAt (index) {
      throw new ($T02())();
    }
  );

  $.Method({Static:false, Public:false}, "IList.set_Item", 
    $sig.make(0xBE7, null, [$asm01.TypeRef("System.Int32"), $asm01.TypeRef("System.Object")], []), 
    function ReadOnlyCollection$b1_IList_set_Item (index, value) {
      throw new ($T02())();
    }
  );

  $.Field({Static:false, Public:false}, "list", $asm01.TypeRef("System.Collections.Generic.IList`1", [$.GenericParameter("T")])); 
  $.Property({Static:false, Public:true , Virtual:true }, "Count", $asm01.TypeRef("System.Int32"));

  $.Property({Static:false, Public:false}, "Items", $asm01.TypeRef("System.Collections.Generic.IList`1", [new JSIL.GenericParameter("T", "System.Collections.ObjectModel.ReadOnlyCollection`1")]));

  $.Property({Static:false, Public:true }, "Item", new JSIL.GenericParameter("T", "System.Collections.ObjectModel.ReadOnlyCollection`1"));

  $.Property({Static:false, Public:false, Virtual:true }, "IList`1.Item", new JSIL.GenericParameter("T", "System.Collections.ObjectModel.ReadOnlyCollection`1"));

  $.Property({Static:false, Public:false, Virtual:true }, "ICollection`1.IsReadOnly", $asm01.TypeRef("System.Boolean"));

  $.Property({Static:false, Public:false, Virtual:true }, "ICollection.IsSynchronized", $asm01.TypeRef("System.Boolean"));

  $.Property({Static:false, Public:false, Virtual:true }, "ICollection.SyncRoot", $asm01.TypeRef("System.Object"));

  $.Property({Static:false, Public:false, Virtual:true }, "IList.IsFixedSize", $asm01.TypeRef("System.Boolean"));

  $.Property({Static:false, Public:false, Virtual:true }, "IList.IsReadOnly", $asm01.TypeRef("System.Boolean"));

  $.Property({Static:false, Public:false, Virtual:true }, "IList.Item", $asm01.TypeRef("System.Object"));

  $.ImplementInterfaces(
      $asm01.TypeRef("System.Collections.Generic.IList`1", [new JSIL.GenericParameter("T", "System.Collections.ObjectModel.ReadOnlyCollection`1")]), $asm01.TypeRef("System.Collections.Generic.ICollection`1", [new JSIL.GenericParameter("T", "System.Collections.ObjectModel.ReadOnlyCollection`1")]), 
      $asm01.TypeRef("System.Collections.Generic.IEnumerable`1", [new JSIL.GenericParameter("T", "System.Collections.ObjectModel.ReadOnlyCollection`1")]), $asm01.TypeRef("System.Collections.IList"), 
      $asm01.TypeRef("System.Collections.ICollection"), $asm01.TypeRef("System.Collections.IEnumerable")
  )
})
  .Attribute($asm01.TypeRef("System.Reflection.DefaultMemberAttribute"), function () { return ["Item"]; })
  .Attribute($asm01.TypeRef("System.Diagnostics.DebuggerTypeProxyAttribute"), function () { return [$asm01.TypeRef("System.Collections.Generic.CollectionDebuggerView`1")]; })
  .Attribute($asm01.TypeRef("System.Runtime.InteropServices.ComVisibleAttribute"), function () { return [false]; })
  .Attribute($asm01.TypeRef("System.Diagnostics.DebuggerDisplayAttribute"), function () { return ["Count={Count}"]; });

JSIL.MakeTypeAlias($jsilcore, "System.Double");

JSIL.DeclareNamespace("JSIL.Security");
JSIL.MakeClass($asm01.TypeRef("System.Object"), "JSIL.Security.BitConverterLE", false, [], function ($) {
  var $thisType = $.publicInterface;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm01.System.Int16)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm01.System.NotImplementedException)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm01.System.Int32)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize(System.Array.Of($asm01.System.Byte))) ();
  };

  $.Method({Static:false, Public:true }, ".ctor", 
    $sig.make(0xCB2, null, [], []), 
    function BitConverterLE__ctor () {
    }
  );

  $.Method({Static:true , Public:false}, "GetBytes", 
    $sig.make(0xCAF, $jsilcore.TypeRef("System.Array", [$asm01.TypeRef("System.Byte")]), [$asm01.TypeRef("System.Int16")], []), 
    function BitConverterLE_GetBytes (_c) {
      throw new ($T01())();
    }
  );

  $.Method({Static:true , Public:false}, "GetBytes", 
    $sig.make(0xCB1, $jsilcore.TypeRef("System.Array", [$asm01.TypeRef("System.Byte")]), [$asm01.TypeRef("System.Int32")], []), 
    function BitConverterLE_GetBytes (_a) {
      throw new ($T01())();
    }
  );

  $.Method({Static:true , Public:false}, "ToInt16", 
    $sig.make(0xCAD, $asm01.TypeRef("System.Int16"), [$jsilcore.TypeRef("System.Array", [$asm01.TypeRef("System.Byte")]), $asm01.TypeRef("System.Int32")], []), 
    function BitConverterLE_ToInt16 (b, p) {
      throw new ($T01())();
    }
  );

  $.Method({Static:true , Public:false}, "ToInt32", 
    $sig.make(0xCAB, $asm01.TypeRef("System.Int32"), [$jsilcore.TypeRef("System.Array", [$asm01.TypeRef("System.Byte")]), $asm01.TypeRef("System.Int32")], []), 
    function BitConverterLE_ToInt32 (b, p) {
      throw new ($T01())();
    }
  );

});

JSIL.MakeStaticClass("System.DateTimeUtils", false, [], function ($) {
  var $thisType = $.publicInterface;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm01.System.String)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm01.System.Int32)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm01.System.Char)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm01.System.Globalization.DateTimeFormatInfo)) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize($asm01.System.Boolean)) ();
  };
  var $T05 = function () {
    return ($T05 = JSIL.Memoize($asm01.System.Void)) ();
  };
  var $T06 = function () {
    return ($T06 = JSIL.Memoize($asm01.System.Text.StringBuilder)) ();
  };
  var $T07 = function () {
    return ($T07 = JSIL.Memoize($asm01.System.FormatException)) ();
  };
  var $T08 = function () {
    return ($T08 = JSIL.Memoize($asm01.System.DateTime)) ();
  };
  var $T09 = function () {
    return ($T09 = JSIL.Memoize($asm01.System.DateTimeKind)) ();
  };
  var $T0A = function () {
    return ($T0A = JSIL.Memoize($asm01.System.TimeSpan)) ();
  };
  var $T0B = function () {
    return ($T0B = JSIL.Memoize($asm01.System.TimeZone)) ();
  };
  var $T0C = function () {
    return ($T0C = JSIL.Memoize($asm01.System.Int64)) ();
  };
  var $T0D = function () {
    return ($T0D = JSIL.Memoize($asm01.System.Math)) ();
  };
  var $T0E = function () {
    return ($T0E = JSIL.Memoize($asm01.System.Globalization.Calendar)) ();
  };
  var $T0F = function () {
    return ($T0F = JSIL.Memoize($asm01.System.Object)) ();
  };

  $.Method({Static:true , Public:true }, "CountRepeat", 
    $sig.make(0xCBB, $asm01.TypeRef("System.Int32"), [
        $asm01.TypeRef("System.String"), $asm01.TypeRef("System.Int32"), 
        $asm01.TypeRef("System.Char")
      ], []), 
    function DateTimeUtils_CountRepeat (fmt, p, c) {
      var i = fmt.length;

      for (var j = ((p + 1) | 0); (j < i) && (fmt[j].charCodeAt(0) === c.charCodeAt(0)); ++j) {
      }
      return ((j - p) | 0);
    }
  );

  $.Method({Static:true , Public:true }, "GetStandardPattern", 
    $sig.make(0xCBE, $asm01.TypeRef("System.String"), [
        $asm01.TypeRef("System.Char"), $asm01.TypeRef("System.Globalization.DateTimeFormatInfo"), 
        $jsilcore.TypeRef("JSIL.Reference", [$asm01.TypeRef("System.Boolean")]), $jsilcore.TypeRef("JSIL.Reference", [$asm01.TypeRef("System.Boolean")])
      ], []), 
    function DateTimeUtils_GetStandardPattern (format, dfi, /* ref */ useutc, /* ref */ use_invariant) {
      return $thisType.GetStandardPattern(
        format, 
        dfi, 
        /* ref */ useutc, 
        /* ref */ use_invariant, 
        false
      );
    }
  );

  $.Method({Static:true , Public:true }, "GetStandardPattern", 
    $sig.make(0xCBF, $asm01.TypeRef("System.String"), [
        $asm01.TypeRef("System.Char"), $asm01.TypeRef("System.Globalization.DateTimeFormatInfo"), 
        $jsilcore.TypeRef("JSIL.Reference", [$asm01.TypeRef("System.Boolean")]), $jsilcore.TypeRef("JSIL.Reference", [$asm01.TypeRef("System.Boolean")]), 
        $asm01.TypeRef("System.Boolean")
      ], []), 
    function DateTimeUtils_GetStandardPattern (format, dfi, /* ref */ useutc, /* ref */ use_invariant, date_time_offset) {

      var $label0 = 0;
    $labelgroup0: 
      while (true) {
        switch ($label0) {
          case 0: /* $entry0 */ 
            useutc.value = false;
            use_invariant.value = false;
            if (format.charCodeAt(0) > "U".charCodeAt(0)) {
              if (format.charCodeAt(0) !== "Y".charCodeAt(0)) {
                switch (format) {
                  case "d": 
                    var pattern = dfi.get_ShortDatePattern();
                    return pattern;

                  case "e": 
                    $label0 = 4 /* goto IL_1BE */ ;
                    continue $labelgroup0;

                  case "f": 
                    pattern = ((dfi.get_LongDatePattern() + " " + dfi.get_ShortTimePattern()));
                    return pattern;

                  case "g": 
                    pattern = ((dfi.get_ShortDatePattern() + " " + dfi.get_ShortTimePattern()));
                    return pattern;

                  default: 
                    switch (format) {
                      case "m": 
                        $label0 = 1 /* goto IL_134 */ ;
                        continue $labelgroup0;

                      case "n": 
                      case "p": 
                      case "q": 
                      case "v": 
                      case "w": 
                      case "x": 
                        $label0 = 4 /* goto IL_1BE */ ;
                        continue $labelgroup0;

                      case "o": 
                        $label0 = 2 /* goto IL_140 */ ;
                        continue $labelgroup0;

                      case "r": 
                        $label0 = 3 /* goto IL_14C */ ;
                        continue $labelgroup0;

                      case "s": 
                        pattern = dfi.get_SortableDateTimePattern();
                        use_invariant.value = true;
                        return pattern;

                      case "t": 
                        pattern = dfi.get_ShortTimePattern();
                        return pattern;

                      case "u": 
                        pattern = dfi.get_UniversalSortableDateTimePattern();
                        if (date_time_offset) {
                          useutc.value = true;
                        }
                        use_invariant.value = true;
                        return pattern;

                      case "y": 
                        break;

                      default: 
                        $label0 = 4 /* goto IL_1BE */ ;
                        continue $labelgroup0;

                    }
                    break;

                }
              }
              pattern = dfi.get_YearMonthPattern();
              return pattern;
            }
            switch (format) {
              case "D": 
                pattern = dfi.get_LongDatePattern();
                return pattern;

              case "E": 
                $label0 = 4 /* goto IL_1BE */ ;
                continue $labelgroup0;

              case "F": 
                pattern = dfi.get_FullDateTimePattern();
                return pattern;

              case "G": 
                pattern = ((dfi.get_ShortDatePattern() + " " + dfi.get_LongTimePattern()));
                return pattern;

              default: 
                switch (format) {
                  case "M": 
                    break;

                  case "N": 
                  case "P": 
                  case "Q": 
                  case "S": 
                    $label0 = 4 /* goto IL_1BE */ ;
                    continue $labelgroup0;

                  case "O": 
                    $label0 = 2 /* goto IL_140 */ ;
                    continue $labelgroup0;

                  case "R": 
                    $label0 = 3 /* goto IL_14C */ ;
                    continue $labelgroup0;

                  case "T": 
                    pattern = dfi.get_LongTimePattern();
                    return pattern;

                  case "U": 
                    if (date_time_offset) {
                      pattern = null;
                    } else {
                      pattern = dfi.get_FullDateTimePattern();
                      useutc.value = true;
                    }
                    return pattern;

                  default: 
                    $label0 = 4 /* goto IL_1BE */ ;
                    continue $labelgroup0;

                }
                break;

            }

            $label0 = 1 /* goto IL_134 */ ;
            continue $labelgroup0;
          case 1: /* IL_134 */ 
            pattern = dfi.get_MonthDayPattern();
            return pattern;

            $label0 = 2 /* goto IL_140 */ ;
            continue $labelgroup0;
          case 2: /* IL_140 */ 
            pattern = dfi.get_RoundtripPattern();
            use_invariant.value = true;
            return pattern;

            $label0 = 3 /* goto IL_14C */ ;
            continue $labelgroup0;
          case 3: /* IL_14C */ 
            pattern = dfi.get_RFC1123Pattern();
            if (date_time_offset) {
              useutc.value = true;
            }
            use_invariant.value = true;
            return pattern;

            $label0 = 4 /* goto IL_1BE */ ;
            continue $labelgroup0;
          case 4: /* IL_1BE */ 
            pattern = null;
            return pattern;

            break $labelgroup0;
        }
      }
    }
  );

  $.Method({Static:true , Public:true }, "ParseQuotedString", 
    $sig.make(0xCBD, $asm01.TypeRef("System.Int32"), [
        $asm01.TypeRef("System.String"), $asm01.TypeRef("System.Int32"), 
        $asm01.TypeRef("System.Text.StringBuilder")
      ], []), 
    function DateTimeUtils_ParseQuotedString (fmt, pos, output) {
      var len = fmt.length;
      var start = pos;
      var quoteChar = (fmt[pos++]);

      while (pos < len) {
        var ch = (fmt[pos++]);
        if (ch.charCodeAt(0) === quoteChar.charCodeAt(0)) {
          return ((pos - start) | 0);
        }
        if (ch.charCodeAt(0) === "\\".charCodeAt(0)) {
          if (pos >= len) {
            throw new ($T07())("Un-ended quote");
          }
          $sig.get(0xB55, $asm01.System.Text.StringBuilder, [$asm01.System.Char], []).CallVirtual("Append", null, output, fmt[pos++]);
        } else {
          $sig.get(0xB55, $asm01.System.Text.StringBuilder, [$asm01.System.Char], []).CallVirtual("Append", null, output, ch);
        }
      }
      throw new ($T07())("Un-ended quote");
    }
  );

  $.Method({Static:true , Public:true }, "ToString", 
    $sig.make(0xCC0, $asm01.TypeRef("System.String"), [
        $asm01.TypeRef("System.DateTime"), $asm01.TypeRef("System.String"), 
        $asm01.TypeRef("System.Globalization.DateTimeFormatInfo")
      ], []), 
    function DateTimeUtils_ToString (dt, format, dfi) {
      return $thisType.ToString(dt, null, format, dfi);
    }
  );

  $.Method({Static:true , Public:true }, "ToString", 
    $sig.make(0xCC1, $asm01.TypeRef("System.String"), [
        $asm01.TypeRef("System.DateTime"), $asm01.TypeRef("System.Nullable`1", [$asm01.TypeRef("System.TimeSpan")]), 
        $asm01.TypeRef("System.String"), $asm01.TypeRef("System.Globalization.DateTimeFormatInfo")
      ], []), 
    function DateTimeUtils_ToString (dt, utc_offset, format, dfi) {
      var $temp00, $temp01;
      var result = $sig.get(0xB02, null, [$asm01.System.Int32], []).Construct($T06(), ((format.length + 10) | 0));
      var inv = $T03().get_InvariantInfo();
      if (format == inv.get_RFC1123Pattern()) {
        dfi = inv;
      } else if (format == inv.get_UniversalSortableDateTimePattern()) {
        dfi = inv;
      }

    $loop0: 
      for (var i = 0; i < format.length; ) {

        var $label0 = 0;
      $labelgroup0: 
        while (true) {
          switch ($label0) {
            case 0: /* $entry0 */ 
              var omitZeros = false;
              var ch = (format[i]);
              var c = ch;
              if (c.charCodeAt(0) <= "H".charCodeAt(0)) {
                if (c.charCodeAt(0) <= "'".charCodeAt(0)) {
                  if (c.charCodeAt(0) !== "\"".charCodeAt(0)) {
                    switch (c) {
                      case "%": 
                        if (i >= ((format.length - 1) | 0)) {
                          throw new ($T07())("% at end of date time string");
                        }
                        if ((format[((i + 1) | 0)]).charCodeAt(0) === "%".charCodeAt(0)) {
                          throw new ($T07())("%% in date string");
                        }
                        var tokLen = 1;
                        $label0 = 1 /* goto IL_6E0 */ ;
                        continue $labelgroup0;

                      case "&": 
                        $label0 = 3 /* goto IL_6D3 */ ;
                        continue $labelgroup0;

                      case "'": 
                        break;

                      default: 
                        $label0 = 3 /* goto IL_6D3 */ ;
                        continue $labelgroup0;

                    }
                  }
                  tokLen = $thisType.ParseQuotedString(format, i, result);
                } else if (c.charCodeAt(0) !== "/".charCodeAt(0)) {
                  if (c.charCodeAt(0) !== ":".charCodeAt(0)) {
                    switch (c) {
                      case "F": 
                        omitZeros = true;
                        $label0 = 2 /* goto IL_1E9 */ ;
                        continue $labelgroup0;

                      case "G": 
                        $label0 = 3 /* goto IL_6D3 */ ;
                        continue $labelgroup0;

                      case "H": 
                        tokLen = $thisType.CountRepeat(format, i, ch);
                        $thisType.ZeroPad(result, dt.get_Hour(), ((tokLen === 1) ? 1 : 2));
                        break;

                      default: 
                        $label0 = 3 /* goto IL_6D3 */ ;
                        continue $labelgroup0;

                    }
                  } else {
                    $sig.get(0xB22, $asm01.System.Text.StringBuilder, [$asm01.System.String], []).CallVirtual("Append", null, result, dfi.get_TimeSeparator());
                    tokLen = 1;
                  }
                } else {
                  $sig.get(0xB22, $asm01.System.Text.StringBuilder, [$asm01.System.String], []).CallVirtual("Append", null, result, dfi.get_DateSeparator());
                  tokLen = 1;
                }
              } else if (c.charCodeAt(0) <= "h".charCodeAt(0)) {
                switch (c) {
                  case "K": 
                    tokLen = 1;
                    if (!((utc_offset === null) && (dt.get_Kind() !== $T09().Local))) {
                      var offset = JSIL.Coalesce(utc_offset, $T0B().get_CurrentTimeZone().GetUtcOffset(dt.MemberwiseClone()).MemberwiseClone()).MemberwiseClone();
                      if (!$T0C().op_LessThan(
                          offset.get_Ticks(), 
                          $T0C().Create(0, 0, 0)
                        )) {
                        $sig.get(0xB55, $asm01.System.Text.StringBuilder, [$asm01.System.Char], []).CallVirtual("Append", null, result, "+");
                      } else {
                        $sig.get(0xB55, $asm01.System.Text.StringBuilder, [$asm01.System.Char], []).CallVirtual("Append", null, result, "-");
                      }
                      $sig.get(0xB22, $asm01.System.Text.StringBuilder, [$asm01.System.String], []).CallVirtual("Append", null, result, $sig.get(0x274, $asm01.System.String, [$asm01.System.String], []).CallVirtual("ToString", null, $sig.get(0x7E2, $asm01.System.Int32, [$asm01.System.Int32], []).CallStatic($T0D(), "Abs", null, offset.get_Hours()), "00"));
                      $sig.get(0xB55, $asm01.System.Text.StringBuilder, [$asm01.System.Char], []).CallVirtual("Append", null, result, ":");
                      $sig.get(0xB22, $asm01.System.Text.StringBuilder, [$asm01.System.String], []).CallVirtual("Append", null, result, $sig.get(0x274, $asm01.System.String, [$asm01.System.String], []).CallVirtual("ToString", null, $sig.get(0x7E2, $asm01.System.Int32, [$asm01.System.Int32], []).CallStatic($T0D(), "Abs", null, offset.get_Minutes()), "00"));
                    } else if (dt.get_Kind() === $T09().Utc) {
                      $sig.get(0xB55, $asm01.System.Text.StringBuilder, [$asm01.System.Char], []).CallVirtual("Append", null, result, "Z");
                    }
                    break;

                  case "L": 
                    $label0 = 3 /* goto IL_6D3 */ ;
                    continue $labelgroup0;

                  case "M": 
                    tokLen = $thisType.CountRepeat(format, i, ch);
                    var month = dfi.get_Calendar().GetMonth(dt.MemberwiseClone());
                    if (tokLen <= 2) {
                      $thisType.ZeroPad(result, month, tokLen);
                    } else if (tokLen === 3) {
                      $sig.get(0xB22, $asm01.System.Text.StringBuilder, [$asm01.System.String], []).CallVirtual("Append", null, result, dfi.GetAbbreviatedMonthName(month));
                    } else {
                      $sig.get(0xB22, $asm01.System.Text.StringBuilder, [$asm01.System.String], []).CallVirtual("Append", null, result, dfi.GetMonthName(month));
                    }
                    break;

                  default: 
                    if (c.charCodeAt(0) !== "\\".charCodeAt(0)) {
                      switch (c) {
                        case "d": 
                          tokLen = $thisType.CountRepeat(format, i, ch);
                          if (tokLen <= 2) {
                            $thisType.ZeroPad(result, dfi.get_Calendar().GetDayOfMonth(dt.MemberwiseClone()), ((tokLen === 1) ? 1 : 2));
                          } else if (tokLen === 3) {
                            $sig.get(0xB22, $asm01.System.Text.StringBuilder, [$asm01.System.String], []).CallVirtual("Append", null, result, dfi.GetAbbreviatedDayName(dfi.get_Calendar().GetDayOfWeek(dt.MemberwiseClone())));
                          } else {
                            $sig.get(0xB22, $asm01.System.Text.StringBuilder, [$asm01.System.String], []).CallVirtual("Append", null, result, dfi.GetDayName(dfi.get_Calendar().GetDayOfWeek(dt.MemberwiseClone())));
                          }
                          break;

                        case "e": 
                          $label0 = 3 /* goto IL_6D3 */ ;
                          continue $labelgroup0;

                        case "f": 
                          $label0 = 2 /* goto IL_1E9 */ ;
                          continue $labelgroup0;

                        case "g": 
                          tokLen = $thisType.CountRepeat(format, i, ch);
                          $sig.get(0xB22, $asm01.System.Text.StringBuilder, [$asm01.System.String], []).CallVirtual("Append", null, result, dfi.GetEraName(dfi.get_Calendar().GetEra(dt.MemberwiseClone())));
                          break;

                        case "h": 
                          tokLen = $thisType.CountRepeat(format, i, ch);
                          var hr = ((dt.get_Hour() % 12) | 0);
                          if (hr === 0) {
                            hr = 12;
                          }
                          $thisType.ZeroPad(result, hr, ((tokLen === 1) ? 1 : 2));
                          break;

                        default: 
                          $label0 = 3 /* goto IL_6D3 */ ;
                          continue $labelgroup0;

                      }
                    } else {
                      if (i >= ((format.length - 1) | 0)) {
                        throw new ($T07())("\\ at end of date time string");
                      }
                      $sig.get(0xB55, $asm01.System.Text.StringBuilder, [$asm01.System.Char], []).CallVirtual("Append", null, result, format[((i + 1) | 0)]);
                      tokLen = 2;
                    }
                    break;

                }
              } else if (c.charCodeAt(0) !== "m".charCodeAt(0)) {
                switch (c) {
                  case "s": 
                    tokLen = $thisType.CountRepeat(format, i, ch);
                    $thisType.ZeroPad(result, dt.get_Second(), ((tokLen === 1) ? 1 : 2));
                    break;

                  case "t": 
                    tokLen = $thisType.CountRepeat(format, i, ch);
                    var desig = ((dt.get_Hour() < 12) ? dfi.get_AMDesignator() : dfi.get_PMDesignator());
                    if (tokLen === 1) {
                      if (desig.length >= 1) {
                        $sig.get(0xB55, $asm01.System.Text.StringBuilder, [$asm01.System.Char], []).CallVirtual("Append", null, result, desig[0]);
                      }
                    } else {
                      $sig.get(0xB22, $asm01.System.Text.StringBuilder, [$asm01.System.String], []).CallVirtual("Append", null, result, desig);
                    }
                    break;

                  default: 
                    switch (c) {
                      case "y": 
                        tokLen = $thisType.CountRepeat(format, i, ch);
                        if (tokLen <= 2) {
                          $thisType.ZeroPad(result, ((dfi.get_Calendar().GetYear(dt.MemberwiseClone()) % 100) | 0), tokLen);
                        } else {
                          $thisType.ZeroPad(result, dfi.get_Calendar().GetYear(dt.MemberwiseClone()), tokLen);
                        }
                        break;

                      case "z": 
                        tokLen = $thisType.CountRepeat(format, i, ch);
                        offset = JSIL.Coalesce(utc_offset, $T0B().get_CurrentTimeZone().GetUtcOffset(dt.MemberwiseClone()).MemberwiseClone()).MemberwiseClone();
                        if (!$T0C().op_LessThan(
                            offset.get_Ticks(), 
                            $T0C().Create(0, 0, 0)
                          )) {
                          $sig.get(0xB55, $asm01.System.Text.StringBuilder, [$asm01.System.Char], []).CallVirtual("Append", null, result, "+");
                        } else {
                          $sig.get(0xB55, $asm01.System.Text.StringBuilder, [$asm01.System.Char], []).CallVirtual("Append", null, result, "-");
                        }
                        switch (tokLen) {
                          case 1: 
                            $sig.get(0xB31, $asm01.System.Text.StringBuilder, [$asm01.System.Int32], []).CallVirtual("Append", null, result, $sig.get(0x7E2, $asm01.System.Int32, [$asm01.System.Int32], []).CallStatic($T0D(), "Abs", null, offset.get_Hours()));
                            break;

                          case 2: 
                            $sig.get(0xB22, $asm01.System.Text.StringBuilder, [$asm01.System.String], []).CallVirtual("Append", null, result, $sig.get(0x274, $asm01.System.String, [$asm01.System.String], []).CallVirtual("ToString", null, $sig.get(0x7E2, $asm01.System.Int32, [$asm01.System.Int32], []).CallStatic($T0D(), "Abs", null, offset.get_Hours()), "00"));
                            break;

                          default: 
                            $sig.get(0xB22, $asm01.System.Text.StringBuilder, [$asm01.System.String], []).CallVirtual("Append", null, result, $sig.get(0x274, $asm01.System.String, [$asm01.System.String], []).CallVirtual("ToString", null, $sig.get(0x7E2, $asm01.System.Int32, [$asm01.System.Int32], []).CallStatic($T0D(), "Abs", null, offset.get_Hours()), "00"));
                            $sig.get(0xB55, $asm01.System.Text.StringBuilder, [$asm01.System.Char], []).CallVirtual("Append", null, result, ":");
                            $sig.get(0xB22, $asm01.System.Text.StringBuilder, [$asm01.System.String], []).CallVirtual("Append", null, result, $sig.get(0x274, $asm01.System.String, [$asm01.System.String], []).CallVirtual("ToString", null, $sig.get(0x7E2, $asm01.System.Int32, [$asm01.System.Int32], []).CallStatic($T0D(), "Abs", null, offset.get_Minutes()), "00"));
                            break;

                        }
                        break;

                      default: 
                        $label0 = 3 /* goto IL_6D3 */ ;
                        continue $labelgroup0;

                    }
                    break;

                }
              } else {
                tokLen = $thisType.CountRepeat(format, i, ch);
                $thisType.ZeroPad(result, dt.get_Minute(), ((tokLen === 1) ? 1 : 2));
              }

              $label0 = 1 /* goto IL_6E0 */ ;
              continue $labelgroup0;
            case 1: /* IL_6E0 */ 
              i += tokLen;
              continue $loop0;

            case 2: /* IL_1E9 */ 
              tokLen = $thisType.CountRepeat(format, i, ch);
              if (tokLen > 7) {
                throw new ($T07())("Invalid Format String");
              }
              var dec = ($T0C().op_Division(
                  $T0C().op_Modulus(
                    dt.get_Ticks(), 
                    $T0C().Create(10000000, 0, 0)
                  ), 
                  $T0C().FromNumber($T0D().Pow(10, ((7 - tokLen) | 0)))
                )).ToNumber();
              var startLen = result.get_Length();
              $thisType.ZeroPad(result, dec, tokLen);
              if (omitZeros) {

                while ((result.get_Length() > startLen) && ((result.get_Chars(((result.get_Length() - 1) | 0))).charCodeAt(0) === "0".charCodeAt(0))) {
                  ($temp00 = ((result.get_Length() - 1) | 0), 
                    result.set_Length($temp00), 
                    $temp00);
                }
                if (!((dec !== 0) || 
                    (startLen <= 0) || ((result.get_Chars(((startLen - 1) | 0))).charCodeAt(0) !== ".".charCodeAt(0)))) {
                  ($temp01 = ((result.get_Length() - 1) | 0), 
                    result.set_Length($temp01), 
                    $temp01);
                }
              }
              $label0 = 1 /* goto IL_6E0 */ ;
              continue $labelgroup0;

            case 3: /* IL_6D3 */ 
              $sig.get(0xB55, $asm01.System.Text.StringBuilder, [$asm01.System.Char], []).CallVirtual("Append", null, result, ch);
              tokLen = 1;
              $label0 = 1 /* goto IL_6E0 */ ;
              continue $labelgroup0;

          }
        }
      }
      return result.toString();
    }
  );

  $.Method({Static:true , Public:true }, "ZeroPad", 
    $sig.make(0xCBC, null, [
        $asm01.TypeRef("System.Text.StringBuilder"), $asm01.TypeRef("System.Int32"), 
        $asm01.TypeRef("System.Int32")
      ], []), 
    function DateTimeUtils_ZeroPad (output, digits, len) {

      for (var s = digits.toString(); s.length < len; s = (("0" + s))) {
      }
      $sig.get(0xB22, $asm01.System.Text.StringBuilder, [$asm01.System.String], []).CallVirtual("Append", null, output, s);
    }
  );

});

JSIL.MakeClass($asm01.TypeRef("System.Security.Permissions.CodeAccessSecurityAttribute"), "System.Security.Permissions.SecurityPermissionAttribute", true, [], function ($) {
  var $thisType = $.publicInterface;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm01.System.Security.Permissions.SecurityAction)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm01.System.Security.Permissions.CodeAccessSecurityAttribute)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm01.System.Security.Permissions.SecurityPermissionFlag)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm01.System.Boolean)) ();
  };

  $.Method({Static:false, Public:true }, ".ctor", 
    $sig.make(0xD53, null, [$asm01.TypeRef("System.Security.Permissions.SecurityAction")], []), 
    function SecurityPermissionAttribute__ctor (action) {
      $T01().prototype._ctor.call(this, action);
      this.m_Flags = $T02().NoFlags;
    }
  );

  $.Method({Static:false, Public:true }, "CreatePermission", 
    $sig.make(0xD59, $asm01.TypeRef("System.Security.IPermission"), [], []), 
    function SecurityPermissionAttribute_CreatePermission () {
      return null;
    }
  );

  $.Method({Static:false, Public:true }, "get_Assertion", 
    $sig.make(0xCD0, $asm01.TypeRef("System.Boolean"), [], []), 
    function SecurityPermissionAttribute_get_Assertion () {
      return ($T02().$Cast((this.m_Flags & $T02().Assertion)) !== $T02().NoFlags);
    }
  );

  $.Method({Static:false, Public:true }, "get_BindingRedirects", 
    $sig.make(0xCD2, $asm01.TypeRef("System.Boolean"), [], []), 
    function SecurityPermissionAttribute_get_BindingRedirects () {
      return ($T02().$Cast((this.m_Flags & $T02().BindingRedirects)) !== $T02().NoFlags);
    }
  );

  $.Method({Static:false, Public:true }, "get_ControlAppDomain", 
    $sig.make(0xCD4, $asm01.TypeRef("System.Boolean"), [], []), 
    function SecurityPermissionAttribute_get_ControlAppDomain () {
      return ($T02().$Cast((this.m_Flags & $T02().ControlAppDomain)) !== $T02().NoFlags);
    }
  );

  $.Method({Static:false, Public:true }, "get_ControlDomainPolicy", 
    $sig.make(0xCD6, $asm01.TypeRef("System.Boolean"), [], []), 
    function SecurityPermissionAttribute_get_ControlDomainPolicy () {
      return ($T02().$Cast((this.m_Flags & $T02().ControlDomainPolicy)) !== $T02().NoFlags);
    }
  );

  $.Method({Static:false, Public:true }, "get_ControlEvidence", 
    $sig.make(0xCFF, $asm01.TypeRef("System.Boolean"), [], []), 
    function SecurityPermissionAttribute_get_ControlEvidence () {
      return ($T02().$Cast((this.m_Flags & $T02().ControlEvidence)) !== $T02().NoFlags);
    }
  );

  $.Method({Static:false, Public:true }, "get_ControlPolicy", 
    $sig.make(0xD04, $asm01.TypeRef("System.Boolean"), [], []), 
    function SecurityPermissionAttribute_get_ControlPolicy () {
      return ($T02().$Cast((this.m_Flags & $T02().ControlPolicy)) !== $T02().NoFlags);
    }
  );

  $.Method({Static:false, Public:true }, "get_ControlPrincipal", 
    $sig.make(0xD08, $asm01.TypeRef("System.Boolean"), [], []), 
    function SecurityPermissionAttribute_get_ControlPrincipal () {
      return ($T02().$Cast((this.m_Flags & $T02().ControlPrincipal)) !== $T02().NoFlags);
    }
  );

  $.Method({Static:false, Public:true }, "get_ControlThread", 
    $sig.make(0xD0B, $asm01.TypeRef("System.Boolean"), [], []), 
    function SecurityPermissionAttribute_get_ControlThread () {
      return ($T02().$Cast((this.m_Flags & $T02().ControlThread)) !== $T02().NoFlags);
    }
  );

  $.Method({Static:false, Public:true }, "get_Execution", 
    $sig.make(0xD10, $asm01.TypeRef("System.Boolean"), [], []), 
    function SecurityPermissionAttribute_get_Execution () {
      return ($T02().$Cast((this.m_Flags & $T02().Execution)) !== $T02().NoFlags);
    }
  );

  $.Method({Static:false, Public:true }, "get_Flags", 
    $sig.make(0xD4F, $asm01.TypeRef("System.Security.Permissions.SecurityPermissionFlag"), [], []), 
    function SecurityPermissionAttribute_get_Flags () {
      return this.m_Flags;
    }
  );

  $.Method({Static:false, Public:true }, "get_Infrastructure", 
    $sig.make(0xD2C, $asm01.TypeRef("System.Boolean"), [], []), 
    function SecurityPermissionAttribute_get_Infrastructure () {
      return ($T02().$Cast((this.m_Flags & $T02().Infrastructure)) !== $T02().NoFlags);
    }
  );

  $.Method({Static:false, Public:true }, "get_RemotingConfiguration", 
    $sig.make(0xD36, $asm01.TypeRef("System.Boolean"), [], []), 
    function SecurityPermissionAttribute_get_RemotingConfiguration () {
      return ($T02().$Cast((this.m_Flags & $T02().RemotingConfiguration)) !== $T02().NoFlags);
    }
  );

  $.Method({Static:false, Public:true }, "get_SerializationFormatter", 
    $sig.make(0xD3D, $asm01.TypeRef("System.Boolean"), [], []), 
    function SecurityPermissionAttribute_get_SerializationFormatter () {
      return ($T02().$Cast((this.m_Flags & $T02().SerializationFormatter)) !== $T02().NoFlags);
    }
  );

  $.Method({Static:false, Public:true }, "get_SkipVerification", 
    $sig.make(0xD44, $asm01.TypeRef("System.Boolean"), [], []), 
    function SecurityPermissionAttribute_get_SkipVerification () {
      return ($T02().$Cast((this.m_Flags & $T02().SkipVerification)) !== $T02().NoFlags);
    }
  );

  $.Method({Static:false, Public:true }, "get_UnmanagedCode", 
    $sig.make(0xD4A, $asm01.TypeRef("System.Boolean"), [], []), 
    function SecurityPermissionAttribute_get_UnmanagedCode () {
      return ($T02().$Cast((this.m_Flags & $T02().UnmanagedCode)) !== $T02().NoFlags);
    }
  );

  $.Method({Static:false, Public:true }, "set_Assertion", 
    $sig.make(0xCD1, null, [$asm01.TypeRef("System.Boolean")], []), 
    function SecurityPermissionAttribute_set_Assertion (value) {
      if (value) {
        this.m_Flags = $T02().$Cast((this.m_Flags | $T02().Assertion));
      } else {
        this.m_Flags = $T02().$Cast((this.m_Flags & -2));
      }
    }
  );

  $.Method({Static:false, Public:true }, "set_BindingRedirects", 
    $sig.make(0xCD3, null, [$asm01.TypeRef("System.Boolean")], []), 
    function SecurityPermissionAttribute_set_BindingRedirects (value) {
      if (value) {
        this.m_Flags = $T02().$Cast((this.m_Flags | $T02().BindingRedirects));
      } else {
        this.m_Flags = $T02().$Cast((this.m_Flags & -8193));
      }
    }
  );

  $.Method({Static:false, Public:true }, "set_ControlAppDomain", 
    $sig.make(0xCD5, null, [$asm01.TypeRef("System.Boolean")], []), 
    function SecurityPermissionAttribute_set_ControlAppDomain (value) {
      if (value) {
        this.m_Flags = $T02().$Cast((this.m_Flags | $T02().ControlAppDomain));
      } else {
        this.m_Flags = $T02().$Cast((this.m_Flags & -1025));
      }
    }
  );

  $.Method({Static:false, Public:true }, "set_ControlDomainPolicy", 
    $sig.make(0xCFA, null, [$asm01.TypeRef("System.Boolean")], []), 
    function SecurityPermissionAttribute_set_ControlDomainPolicy (value) {
      if (value) {
        this.m_Flags = $T02().$Cast((this.m_Flags | $T02().ControlDomainPolicy));
      } else {
        this.m_Flags = $T02().$Cast((this.m_Flags & -257));
      }
    }
  );

  $.Method({Static:false, Public:true }, "set_ControlEvidence", 
    $sig.make(0xD01, null, [$asm01.TypeRef("System.Boolean")], []), 
    function SecurityPermissionAttribute_set_ControlEvidence (value) {
      if (value) {
        this.m_Flags = $T02().$Cast((this.m_Flags | $T02().ControlEvidence));
      } else {
        this.m_Flags = $T02().$Cast((this.m_Flags & -33));
      }
    }
  );

  $.Method({Static:false, Public:true }, "set_ControlPolicy", 
    $sig.make(0xD06, null, [$asm01.TypeRef("System.Boolean")], []), 
    function SecurityPermissionAttribute_set_ControlPolicy (value) {
      if (value) {
        this.m_Flags = $T02().$Cast((this.m_Flags | $T02().ControlPolicy));
      } else {
        this.m_Flags = $T02().$Cast((this.m_Flags & -65));
      }
    }
  );

  $.Method({Static:false, Public:true }, "set_ControlPrincipal", 
    $sig.make(0xD09, null, [$asm01.TypeRef("System.Boolean")], []), 
    function SecurityPermissionAttribute_set_ControlPrincipal (value) {
      if (value) {
        this.m_Flags = $T02().$Cast((this.m_Flags | $T02().ControlPrincipal));
      } else {
        this.m_Flags = $T02().$Cast((this.m_Flags & -513));
      }
    }
  );

  $.Method({Static:false, Public:true }, "set_ControlThread", 
    $sig.make(0xD0D, null, [$asm01.TypeRef("System.Boolean")], []), 
    function SecurityPermissionAttribute_set_ControlThread (value) {
      if (value) {
        this.m_Flags = $T02().$Cast((this.m_Flags | $T02().ControlThread));
      } else {
        this.m_Flags = $T02().$Cast((this.m_Flags & -17));
      }
    }
  );

  $.Method({Static:false, Public:true }, "set_Execution", 
    $sig.make(0xD11, null, [$asm01.TypeRef("System.Boolean")], []), 
    function SecurityPermissionAttribute_set_Execution (value) {
      if (value) {
        this.m_Flags = $T02().$Cast((this.m_Flags | $T02().Execution));
      } else {
        this.m_Flags = $T02().$Cast((this.m_Flags & -9));
      }
    }
  );

  $.Method({Static:false, Public:true }, "set_Flags", 
    $sig.make(0xD51, null, [$asm01.TypeRef("System.Security.Permissions.SecurityPermissionFlag")], []), 
    function SecurityPermissionAttribute_set_Flags (value) {
      this.m_Flags = value;
    }
  );

  $.Method({Static:false, Public:true }, "set_Infrastructure", 
    $sig.make(0xD31, null, [$asm01.TypeRef("System.Boolean")], []), 
    function SecurityPermissionAttribute_set_Infrastructure (value) {
      if (value) {
        this.m_Flags = $T02().$Cast((this.m_Flags | $T02().Infrastructure));
      } else {
        this.m_Flags = $T02().$Cast((this.m_Flags & -4097));
      }
    }
  );

  $.Method({Static:false, Public:true }, "set_RemotingConfiguration", 
    $sig.make(0xD39, null, [$asm01.TypeRef("System.Boolean")], []), 
    function SecurityPermissionAttribute_set_RemotingConfiguration (value) {
      if (value) {
        this.m_Flags = $T02().$Cast((this.m_Flags | $T02().RemotingConfiguration));
      } else {
        this.m_Flags = $T02().$Cast((this.m_Flags & -2049));
      }
    }
  );

  $.Method({Static:false, Public:true }, "set_SerializationFormatter", 
    $sig.make(0xD40, null, [$asm01.TypeRef("System.Boolean")], []), 
    function SecurityPermissionAttribute_set_SerializationFormatter (value) {
      if (value) {
        this.m_Flags = $T02().$Cast((this.m_Flags | $T02().SerializationFormatter));
      } else {
        this.m_Flags = $T02().$Cast((this.m_Flags & -129));
      }
    }
  );

  $.Method({Static:false, Public:true }, "set_SkipVerification", 
    $sig.make(0xD47, null, [$asm01.TypeRef("System.Boolean")], []), 
    function SecurityPermissionAttribute_set_SkipVerification (value) {
      if (value) {
        this.m_Flags = $T02().$Cast((this.m_Flags | $T02().SkipVerification));
      } else {
        this.m_Flags = $T02().$Cast((this.m_Flags & -5));
      }
    }
  );

  $.Method({Static:false, Public:true }, "set_UnmanagedCode", 
    $sig.make(0xD4D, null, [$asm01.TypeRef("System.Boolean")], []), 
    function SecurityPermissionAttribute_set_UnmanagedCode (value) {
      if (value) {
        this.m_Flags = $T02().$Cast((this.m_Flags | $T02().UnmanagedCode));
      } else {
        this.m_Flags = $T02().$Cast((this.m_Flags & -3));
      }
    }
  );

  $.Field({Static:false, Public:false}, "m_Flags", $asm01.TypeRef("System.Security.Permissions.SecurityPermissionFlag")); 
  $.Property({Static:false, Public:true }, "Assertion", $asm01.TypeRef("System.Boolean"));

  $.Property({Static:false, Public:true }, "BindingRedirects", $asm01.TypeRef("System.Boolean"));

  $.Property({Static:false, Public:true }, "ControlAppDomain", $asm01.TypeRef("System.Boolean"));

  $.Property({Static:false, Public:true }, "ControlDomainPolicy", $asm01.TypeRef("System.Boolean"));

  $.Property({Static:false, Public:true }, "ControlEvidence", $asm01.TypeRef("System.Boolean"));

  $.Property({Static:false, Public:true }, "ControlPolicy", $asm01.TypeRef("System.Boolean"));

  $.Property({Static:false, Public:true }, "ControlPrincipal", $asm01.TypeRef("System.Boolean"));

  $.Property({Static:false, Public:true }, "ControlThread", $asm01.TypeRef("System.Boolean"));

  $.Property({Static:false, Public:true }, "Execution", $asm01.TypeRef("System.Boolean"));

  $.Property({Static:false, Public:true }, "Infrastructure", $asm01.TypeRef("System.Boolean"))
    .Attribute($asm01.TypeRef("System.Runtime.InteropServices.ComVisibleAttribute"), function () { return [true]; });

  $.Property({Static:false, Public:true }, "RemotingConfiguration", $asm01.TypeRef("System.Boolean"));

  $.Property({Static:false, Public:true }, "SerializationFormatter", $asm01.TypeRef("System.Boolean"));

  $.Property({Static:false, Public:true }, "SkipVerification", $asm01.TypeRef("System.Boolean"));

  $.Property({Static:false, Public:true }, "UnmanagedCode", $asm01.TypeRef("System.Boolean"));

  $.Property({Static:false, Public:true }, "Flags", $asm01.TypeRef("System.Security.Permissions.SecurityPermissionFlag"));

})
  .Attribute($asm01.TypeRef("System.ObsoleteAttribute"), function () { return ["CAS support is not available with Silverlight applications."]; })
  .Attribute($asm01.TypeRef("System.AttributeUsageAttribute"), function () { return [109]; })
  .Attribute($asm01.TypeRef("System.Runtime.InteropServices.ComVisibleAttribute"), function () { return [true]; });

JSIL.MakeEnum(
  "System.Runtime.ConstrainedExecution.Consistency", true, {
    MayCorruptProcess: 0, 
    MayCorruptAppDomain: 1, 
    MayCorruptInstance: 2, 
    WillNotCorruptState: 3
  }, false
);

JSIL.MakeClass($asm01.TypeRef("System.Attribute"), "System.Runtime.CompilerServices.CompilerGeneratedAttribute", true, [], function ($) {
  var $thisType = $.publicInterface;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm01.System.Attribute)) ();
  };

  $.Method({Static:false, Public:true }, ".ctor", 
    $sig.make(0xE1A, null, [], []), 
    function CompilerGeneratedAttribute__ctor () {
      $T00().prototype._ctor.call(this);
    }
  );

})
  .Attribute($asm01.TypeRef("System.AttributeUsageAttribute"), function () { return [$asm01.System.AttributeTargets.All]; });

JSIL.MakeEnum(
  "JSIL.Meta.JSReadPolicy", true, {
    Unmodified: 0, 
    LogWarning: 1, 
    ThrowError: 2, 
    ReturnDefaultValue: 3
  }, false
);

JSIL.MakeEnum(
  "JSIL.Meta.JSInvokePolicy", true, {
    Unmodified: 0, 
    LogWarning: 1, 
    ThrowError: 2, 
    ReturnDefaultValue: 3
  }, false
);

JSIL.MakeEnum(
  "JSIL.Meta.JSWritePolicy", true, {
    Unmodified: 0, 
    LogWarning: 1, 
    ThrowError: 2, 
    DiscardValue: 3
  }, false
);

JSIL.MakeClass($asm01.TypeRef("System.Attribute"), "JSIL.Meta.JSIgnore", true, [], function ($) {
  var $thisType = $.publicInterface;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm01.System.Attribute)) ();
  };

  $.Method({Static:false, Public:true }, ".ctor", 
    $sig.make(0x851, null, [], []), 
    function JSIgnore__ctor () {
      $T00().prototype._ctor.call(this);
    }
  );

})
  .Attribute($asm01.TypeRef("System.AttributeUsageAttribute"), function () { return [2046]; });

JSIL.MakeClass($asm01.TypeRef("System.Attribute"), "JSIL.Meta.JSPolicy", true, [], function ($) {
  var $thisType = $.publicInterface;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm01.JSIL.Meta.JSReadPolicy)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm01.JSIL.Meta.JSWritePolicy)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm01.JSIL.Meta.JSInvokePolicy)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm01.System.Attribute)) ();
  };

  $.Method({Static:false, Public:true }, ".ctor", 
    $sig.make(0x868, null, [
        $asm01.TypeRef("JSIL.Meta.JSReadPolicy"), $asm01.TypeRef("JSIL.Meta.JSWritePolicy"), 
        $asm01.TypeRef("JSIL.Meta.JSInvokePolicy")
      ], []), 
    function JSPolicy__ctor (read, write, invoke) {
      $T03().prototype._ctor.call(this);
    }
  );

})
  .Attribute($asm01.TypeRef("System.AttributeUsageAttribute"), function () { return [992]; });

JSIL.MakeClass($asm01.TypeRef("System.Attribute"), "JSIL.Meta.JSReplacement", true, [], function ($) {
  var $thisType = $.publicInterface;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm01.System.String)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm01.System.Attribute)) ();
  };

  $.Method({Static:false, Public:true }, ".ctor", 
    $sig.make(0x8D9, null, [$asm01.TypeRef("System.String")], []), 
    function JSReplacement__ctor (expression) {
      $T01().prototype._ctor.call(this);
    }
  );

})
  .Attribute($asm01.TypeRef("System.AttributeUsageAttribute"), function () { return [236]; });

JSIL.MakeClass($asm01.TypeRef("System.Attribute"), "JSIL.Meta.JSChangeName", true, [], function ($) {
  var $thisType = $.publicInterface;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm01.System.String)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm01.System.Attribute)) ();
  };

  $.Method({Static:false, Public:true }, ".ctor", 
    $sig.make(0x90B, null, [$asm01.TypeRef("System.String")], []), 
    function JSChangeName__ctor (newName) {
      $T01().prototype._ctor.call(this);
    }
  );

})
  .Attribute($asm01.TypeRef("System.AttributeUsageAttribute"), function () { return [476]; });

JSIL.MakeClass($asm01.TypeRef("System.Attribute"), "JSIL.Meta.JSChangeToStaticMethod", true, [], function ($) {
  var $thisType = $.publicInterface;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm01.System.String)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm01.System.Attribute)) ();
  };

  $.Method({Static:false, Public:true }, ".ctor", 
    $sig.make(0x927, null, [$asm01.TypeRef("System.String")], []), 
    function JSChangeToStaticMethod__ctor (staticMethodName) {
      $T01().prototype._ctor.call(this);
    }
  );

})
  .Attribute($asm01.TypeRef("System.AttributeUsageAttribute"), function () { return [$asm01.System.AttributeTargets.Constructor]; });

JSIL.MakeClass($asm01.TypeRef("System.Attribute"), "JSIL.Meta.JSRuntimeDispatch", true, [], function ($) {
  var $thisType = $.publicInterface;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm01.System.Attribute)) ();
  };

  $.Method({Static:false, Public:true }, ".ctor", 
    $sig.make(0x957, null, [], []), 
    function JSRuntimeDispatch__ctor () {
      $T00().prototype._ctor.call(this);
    }
  );

})
  .Attribute($asm01.TypeRef("System.AttributeUsageAttribute"), function () { return [224]; });

JSIL.MakeClass($asm01.TypeRef("System.Attribute"), "JSIL.Meta.JSExternal", true, [], function ($) {
  var $thisType = $.publicInterface;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm01.System.Attribute)) ();
  };

  $.Method({Static:false, Public:true }, ".ctor", 
    $sig.make(0x994, null, [], []), 
    function JSExternal__ctor () {
      $T00().prototype._ctor.call(this);
    }
  );

})
  .Attribute($asm01.TypeRef("System.AttributeUsageAttribute"), function () { return [484]; });

JSIL.MakeClass($asm01.TypeRef("System.Attribute"), "JSIL.Meta.JSExtraStaticConstructor", true, [], function ($) {
  var $thisType = $.publicInterface;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm01.System.Attribute)) ();
  };

  $.Method({Static:false, Public:true }, ".ctor", 
    $sig.make(0xA17, null, [], []), 
    function JSExtraStaticConstructor__ctor () {
      $T00().prototype._ctor.call(this);
    }
  );

})
  .Attribute($asm01.TypeRef("System.AttributeUsageAttribute"), function () { return [$asm01.System.AttributeTargets.Constructor]; });

JSIL.MakeClass($asm01.TypeRef("System.Attribute"), "JSIL.Meta.JSReplaceConstructor", true, [], function ($) {
  var $thisType = $.publicInterface;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm01.System.Attribute)) ();
  };

  $.Method({Static:false, Public:true }, ".ctor", 
    $sig.make(0xA44, null, [], []), 
    function JSReplaceConstructor__ctor () {
      $T00().prototype._ctor.call(this);
    }
  );

})
  .Attribute($asm01.TypeRef("System.AttributeUsageAttribute"), function () { return [$asm01.System.AttributeTargets.Constructor]; });

JSIL.MakeClass($asm01.TypeRef("System.Attribute"), "JSIL.Meta.JSImmutable", true, [], function ($) {
  var $thisType = $.publicInterface;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm01.System.Attribute)) ();
  };

  $.Method({Static:false, Public:true }, ".ctor", 
    $sig.make(0xA70, null, [], []), 
    function JSImmutable__ctor () {
      $T00().prototype._ctor.call(this);
    }
  );

})
  .Attribute($asm01.TypeRef("System.AttributeUsageAttribute"), function () { return [268]; });

JSIL.MakeClass($asm01.TypeRef("System.Attribute"), "JSIL.Meta.JSAlwaysAccessAsProperty", true, [], function ($) {
  var $thisType = $.publicInterface;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm01.System.Attribute)) ();
  };

  $.Method({Static:false, Public:true }, ".ctor", 
    $sig.make(0xA99, null, [], []), 
    function JSAlwaysAccessAsProperty__ctor () {
      $T00().prototype._ctor.call(this);
    }
  );

})
  .Attribute($asm01.TypeRef("System.AttributeUsageAttribute"), function () { return [$asm01.System.AttributeTargets.Property]; });

JSIL.MakeClass($asm01.TypeRef("System.Object"), "System.Threading.Thread", true, [], function ($) {
  var $thisType = $.publicInterface;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm01.System.Globalization.CultureInfo)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm01.System.NumberFormatter)) ();
  };

  $.Method({Static:false, Public:true }, ".ctor", 
    $sig.make(0xABE, null, [], []), 
    function Thread__ctor () {
    }
  );

  $.Method({Static:false, Public:true }, "get_CurrentCulture", 
    $sig.make(0xAB2, $asm01.TypeRef("System.Globalization.CultureInfo"), [], []), 
    function Thread_get_CurrentCulture () {
      var culture = this.current_culture;
      if (culture !== null) {
        var result = culture;
      } else {
        culture = (this.current_culture = $T00().ConstructCurrentCulture());
        $T01().SetThreadCurrentCulture(culture);
        result = culture;
      }
      return result;
    }
  );

  $.Method({Static:true , Public:true }, "get_CurrentThread", 
    $sig.make(0xAAC, $.Type, [], []), 
    function Thread_get_CurrentThread () {
      return $thisType.Thread$CurrentThread$value;
    }
  )
    .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

  $.Method({Static:false, Public:true }, "get_CurrentUICulture", 
    $sig.make(0xABA, $asm01.TypeRef("System.Globalization.CultureInfo"), [], []), 
    function Thread_get_CurrentUICulture () {
      return this.get_CurrentCulture();
    }
  );

  $.Method({Static:false, Public:true }, "get_ManagedThreadId", 
    $sig.make(0xAB8, $asm01.TypeRef("System.Int32"), [], []), 
    function Thread_get_ManagedThreadId () {
      return 0;
    }
  );

  $.Method({Static:false, Public:true }, "set_CurrentCulture", 
    $sig.make(0xAB5, null, [$asm01.TypeRef("System.Globalization.CultureInfo")], []), 
    function Thread_set_CurrentCulture (value) {
      this.current_culture = value;
    }
  );

  $.Method({Static:true , Public:true }, "set_CurrentThread", 
    $sig.make(0xAB0, null, [$.Type], []), 
    function Thread_set_CurrentThread (value) {
      $thisType.Thread$CurrentThread$value = value;
    }
  )
    .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

  $.Field({Static:false, Public:false}, "current_culture", $asm01.TypeRef("System.Globalization.CultureInfo")); 
  $.Field({Static:true , Public:false}, "Thread$CurrentThread$value", $.Type)
    .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute")); 
  $.Method({Static:true , Public:false}, ".cctor", 
    $sig.make(0xABB, null, [], []), 
    function Thread__cctor () {
      $thisType.Thread$CurrentThread$value = new $thisType();
    }
  );

  $.Property({Static:true , Public:true }, "CurrentThread", $.Type);

  $.Property({Static:false, Public:true }, "CurrentCulture", $asm01.TypeRef("System.Globalization.CultureInfo"));

  $.Property({Static:false, Public:true }, "ManagedThreadId", $asm01.TypeRef("System.Int32"));

  $.Property({Static:false, Public:true }, "CurrentUICulture", $asm01.TypeRef("System.Globalization.CultureInfo"));

});

JSIL.MakeClass($asm01.TypeRef("System.Object"), "System.Text.StringBuilder", true, [], function ($) {
  var $thisType = $.publicInterface;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm01.System.String)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm01.System.Int32)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm01.System.ArgumentOutOfRangeException)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize(System.Array.Of($asm01.System.Char))) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize($asm01.System.Boolean)) ();
  };
  var $T05 = function () {
    return ($T05 = JSIL.Memoize($asm01.System.Object)) ();
  };
  var $T06 = function () {
    return ($T06 = JSIL.Memoize($asm01.System.Byte)) ();
  };
  var $T07 = function () {
    return ($T07 = JSIL.Memoize($asm01.System.Decimal)) ();
  };
  var $T08 = function () {
    return ($T08 = JSIL.Memoize($asm01.System.Double)) ();
  };
  var $T09 = function () {
    return ($T09 = JSIL.Memoize($asm01.System.Int16)) ();
  };
  var $T0A = function () {
    return ($T0A = JSIL.Memoize($asm01.System.Int64)) ();
  };
  var $T0B = function () {
    return ($T0B = JSIL.Memoize($asm01.System.SByte)) ();
  };
  var $T0C = function () {
    return ($T0C = JSIL.Memoize($asm01.System.Single)) ();
  };
  var $T0D = function () {
    return ($T0D = JSIL.Memoize($asm01.System.UInt16)) ();
  };
  var $T0E = function () {
    return ($T0E = JSIL.Memoize($asm01.System.UInt32)) ();
  };
  var $T0F = function () {
    return ($T0F = JSIL.Memoize($asm01.System.UInt64)) ();
  };
  var $T10 = function () {
    return ($T10 = JSIL.Memoize($asm01.System.Char)) ();
  };
  var $T11 = function () {
    return ($T11 = JSIL.Memoize($asm01.System.ArgumentNullException)) ();
  };
  var $T12 = function () {
    return ($T12 = JSIL.Memoize(System.Array.Of($asm01.System.Object))) ();
  };
  var $T13 = function () {
    return ($T13 = JSIL.Memoize($asm01.System.Environment)) ();
  };
  var $T14 = function () {
    return ($T14 = JSIL.Memoize($asm01.System.Void)) ();
  };
  var $T15 = function () {
    return ($T15 = JSIL.Memoize($asm01.System.Math)) ();
  };
  var $T16 = function () {
    return ($T16 = JSIL.Memoize($asm01.System.IndexOutOfRangeException)) ();
  };
  var $T17 = function () {
    return ($T17 = JSIL.Memoize($asm01.System.ArgumentException)) ();
  };

  $.Method({Static:false, Public:true }, ".ctor", 
    $sig.make(0xAFA, null, [
        $asm01.TypeRef("System.String"), $asm01.TypeRef("System.Int32"), 
        $asm01.TypeRef("System.Int32"), $asm01.TypeRef("System.Int32")
      ], []), 
    function StringBuilder__ctor (value, startIndex, length, capacity) {
      $thisType.prototype._ctor.call(this, 
        value, 
        startIndex, 
        length, 
        capacity, 
        2147483647
      );
    }
  );

  $.Method({Static:false, Public:false}, ".ctor", 
    $sig.make(0xAFD, null, [
        $asm01.TypeRef("System.String"), $asm01.TypeRef("System.Int32"), 
        $asm01.TypeRef("System.Int32"), $asm01.TypeRef("System.Int32"), 
        $asm01.TypeRef("System.Int32")
      ], []), 
    function StringBuilder__ctor (value, startIndex, length, capacity, maxCapacity) {
      if (null === value) {
        value = "";
      }
      if (startIndex < 0) {
        throw new ($T02())("startIndex", startIndex, "StartIndex cannot be less than zero.");
      }
      if (length < 0) {
        throw new ($T02())("length", length, "Length cannot be less than zero.");
      }
      if (capacity < 0) {
        throw new ($T02())("capacity", capacity, "capacity must be greater than zero.");
      }
      if (maxCapacity < 1) {
        throw $sig.get(0xCA7, null, [$asm01.System.String, $asm01.System.String], []).Construct($T02(), "maxCapacity", "maxCapacity is less than one.");
      }
      if (capacity > maxCapacity) {
        throw $sig.get(0xCA7, null, [$asm01.System.String, $asm01.System.String], []).Construct($T02(), "capacity", "Capacity exceeds maximum capacity.");
      }
      if (startIndex > ((value.length - length) | 0)) {
        throw new ($T02())("startIndex", startIndex, "StartIndex and length must refer to a location within the string.");
      }
      if (capacity === 0) {
        if (maxCapacity > 16) {
          capacity = 16;
        } else {
          this._str = (this._cached_str = $T00().Empty);
        }
      }
      this._maxCapacity = maxCapacity;
      if (this._str === null) {
        this._str = $T00().InternalAllocateStr(((length > capacity) ? length : capacity));
      }
      if (length > 0) {
        this._str = $sig.get(0x1A3, $asm01.System.String, [
            $asm01.System.String, $asm01.System.Int32, 
            $asm01.System.String, $asm01.System.Int32, 
            $asm01.System.Int32
          ], []).CallStatic($T00(), "CharCopyJoin", null, 
          this._str, 
          0, 
          value, 
          startIndex, 
          length
        );
      }
      this._length = length;
    }
  );

  $.Method({Static:false, Public:true }, ".ctor", 
    $sig.make(0xB00, null, [], []), 
    function StringBuilder__ctor () {
      $sig.get(0xB08, null, [$asm01.System.String], []).Call($thisType.prototype, "_ctor", null, this, null);
    }
  );

  $.Method({Static:false, Public:true }, ".ctor", 
    $sig.make(0xB02, null, [$asm01.TypeRef("System.Int32")], []), 
    function StringBuilder__ctor (capacity) {
      $thisType.prototype._ctor.call(this, $T00().Empty, 0, 0, capacity);
    }
  );

  $.Method({Static:false, Public:true }, ".ctor", 
    $sig.make(0xB04, null, [$asm01.TypeRef("System.Int32"), $asm01.TypeRef("System.Int32")], []), 
    function StringBuilder__ctor (capacity, maxCapacity) {
      $thisType.prototype._ctor.call(this, 
        $T00().Empty, 
        0, 
        0, 
        capacity, 
        maxCapacity
      );
    }
  );

  $.Method({Static:false, Public:true }, ".ctor", 
    $sig.make(0xB08, null, [$asm01.TypeRef("System.String")], []), 
    function StringBuilder__ctor (value) {
      if (null === value) {
        value = "";
      }
      this._length = value.length;
      this._str = (this._cached_str = value);
      this._maxCapacity = 2147483647;
    }
  );

  $.Method({Static:false, Public:true }, ".ctor", 
    $sig.make(0xB0A, null, [$asm01.TypeRef("System.String"), $asm01.TypeRef("System.Int32")], []), 
    function StringBuilder__ctor (value, capacity) {
      $thisType.prototype._ctor.call(this, ((value === null) ? "" : value), 0, ((value === null) ? 0 : value.length), capacity);
    }
  );

  $.Method({Static:false, Public:true }, "Append", 
    $sig.make(0xB1F, $.Type, [$jsilcore.TypeRef("System.Array", [$asm01.TypeRef("System.Char")])], []), 
    function StringBuilder_Append (value) {
      if (value === null) {
        var result = this;
      } else {
        var needed_cap = ((this._length + value.length) | 0);
        if (!((this._cached_str === null) && (this._str.length >= needed_cap))) {
          this.InternalEnsureCapacity(needed_cap);
        }
        this._str = $sig.get(0x19F, $asm01.System.String, [
            $asm01.System.String, $asm01.System.Int32, 
            System.Array.Of($asm01.System.Char), $asm01.System.Int32, 
            $asm01.System.Int32
          ], []).CallStatic($T00(), "CharCopyJoin", null, 
          this._str, 
          this._length, 
          value, 
          0, 
          value.length
        );
        this._length = needed_cap;
        result = this;
      }
      return result;
    }
  );

  $.Method({Static:false, Public:true }, "Append", 
    $sig.make(0xB22, $.Type, [$asm01.TypeRef("System.String")], []), 
    function StringBuilder_Append (value) {
      if (value === null) {
        var result = this;
      } else if (!((this._length !== 0) || 
          (value.length >= this._maxCapacity) || (value.length <= this._str.length))) {
        this._length = value.length;
        this._cached_str = value;
        this._str = value;
        result = this;
      } else {
        var needed_cap = ((this._length + value.length) | 0);
        if (!((this._cached_str === null) && (this._str.length >= needed_cap))) {
          this.InternalEnsureCapacity(needed_cap);
        }
        this._str = $sig.get(0x1A3, $asm01.System.String, [
            $asm01.System.String, $asm01.System.Int32, 
            $asm01.System.String, $asm01.System.Int32, 
            $asm01.System.Int32
          ], []).CallStatic($T00(), "CharCopyJoin", null, 
          this._str, 
          this._length, 
          value, 
          0, 
          value.length
        );
        this._length = needed_cap;
        result = this;
      }
      return result;
    }
  );

  $.Method({Static:false, Public:true }, "Append", 
    $sig.make(0xB24, $.Type, [$asm01.TypeRef("System.Boolean")], []), 
    function StringBuilder_Append (value) {
      return $sig.get(0xB22, $thisType, [$asm01.System.String], []).CallVirtual("Append", null, this, value.toString());
    }
  );

  $.Method({Static:false, Public:true }, "Append", 
    $sig.make(0xB27, $.Type, [$asm01.TypeRef("System.Byte")], []), 
    function StringBuilder_Append (value) {
      return $sig.get(0xB22, $thisType, [$asm01.System.String], []).CallVirtual("Append", null, this, value.toString());
    }
  );

  $.Method({Static:false, Public:true }, "Append", 
    $sig.make(0xB2A, $.Type, [$asm01.TypeRef("System.Decimal")], []), 
    function StringBuilder_Append (value) {
      return $sig.get(0xB22, $thisType, [$asm01.System.String], []).CallVirtual("Append", null, this, value.toString());
    }
  );

  $.Method({Static:false, Public:true }, "Append", 
    $sig.make(0xB2D, $.Type, [$asm01.TypeRef("System.Double")], []), 
    function StringBuilder_Append (value) {
      return $sig.get(0xB22, $thisType, [$asm01.System.String], []).CallVirtual("Append", null, this, value.toString());
    }
  );

  $.Method({Static:false, Public:true }, "Append", 
    $sig.make(0xB2F, $.Type, [$asm01.TypeRef("System.Int16")], []), 
    function StringBuilder_Append (value) {
      return $sig.get(0xB22, $thisType, [$asm01.System.String], []).CallVirtual("Append", null, this, value.toString());
    }
  );

  $.Method({Static:false, Public:true }, "Append", 
    $sig.make(0xB31, $.Type, [$asm01.TypeRef("System.Int32")], []), 
    function StringBuilder_Append (value) {
      return $sig.get(0xB22, $thisType, [$asm01.System.String], []).CallVirtual("Append", null, this, value.toString());
    }
  );

  $.Method({Static:false, Public:true }, "Append", 
    $sig.make(0xB32, $.Type, [$asm01.TypeRef("System.Int64")], []), 
    function StringBuilder_Append (value) {
      return $sig.get(0xB22, $thisType, [$asm01.System.String], []).CallVirtual("Append", null, this, value.toString());
    }
  );

  $.Method({Static:false, Public:true }, "Append", 
    $sig.make(0xB33, $.Type, [$asm01.TypeRef("System.Object")], []), 
    function StringBuilder_Append (value) {
      if (value === null) {
        var result = this;
      } else {
        result = $sig.get(0xB22, $thisType, [$asm01.System.String], []).CallVirtual("Append", null, this, value.toString());
      }
      return result;
    }
  );

  $.Method({Static:false, Public:true }, "Append", 
    $sig.make(0xB35, $.Type, [$asm01.TypeRef("System.SByte")], []), 
    function StringBuilder_Append (value) {
      return $sig.get(0xB22, $thisType, [$asm01.System.String], []).CallVirtual("Append", null, this, value.toString());
    }
  )
    .Attribute($asm01.TypeRef("System.CLSCompliantAttribute"), function () { return [false]; });

  $.Method({Static:false, Public:true }, "Append", 
    $sig.make(0xB39, $.Type, [$asm01.TypeRef("System.Single")], []), 
    function StringBuilder_Append (value) {
      return $sig.get(0xB22, $thisType, [$asm01.System.String], []).CallVirtual("Append", null, this, value.toString());
    }
  );

  $.Method({Static:false, Public:true }, "Append", 
    $sig.make(0xB49, $.Type, [$asm01.TypeRef("System.UInt16")], []), 
    function StringBuilder_Append (value) {
      return $sig.get(0xB22, $thisType, [$asm01.System.String], []).CallVirtual("Append", null, this, value.toString());
    }
  )
    .Attribute($asm01.TypeRef("System.CLSCompliantAttribute"), function () { return [false]; });

  $.Method({Static:false, Public:true }, "Append", 
    $sig.make(0xB4D, $.Type, [$asm01.TypeRef("System.UInt32")], []), 
    function StringBuilder_Append (value) {
      return $sig.get(0xB22, $thisType, [$asm01.System.String], []).CallVirtual("Append", null, this, value.toString());
    }
  )
    .Attribute($asm01.TypeRef("System.CLSCompliantAttribute"), function () { return [false]; });

  $.Method({Static:false, Public:true }, "Append", 
    $sig.make(0xB52, $.Type, [$asm01.TypeRef("System.UInt64")], []), 
    function StringBuilder_Append (value) {
      return $sig.get(0xB22, $thisType, [$asm01.System.String], []).CallVirtual("Append", null, this, value.toString());
    }
  )
    .Attribute($asm01.TypeRef("System.CLSCompliantAttribute"), function () { return [false]; });

  $.Method({Static:false, Public:true }, "Append", 
    $sig.make(0xB55, $.Type, [$asm01.TypeRef("System.Char")], []), 
    function StringBuilder_Append (value) {
      var needed_cap = ((this._length + 1) | 0);
      if (!((this._cached_str === null) && (this._str.length >= needed_cap))) {
        this.InternalEnsureCapacity(needed_cap);
      }
      (this._str = this._str.substr(0, this._length) + value + this._str.substr(this._length + 1));
      this._length = needed_cap;
      return this;
    }
  );

  $.Method({Static:false, Public:true }, "Append", 
    $sig.make(0xB57, $.Type, [$asm01.TypeRef("System.Char"), $asm01.TypeRef("System.Int32")], []), 
    function StringBuilder_Append (value, repeatCount) {
      if (repeatCount < 0) {
        throw new ($T02())();
      }
      this.InternalEnsureCapacity(((this._length + repeatCount) | 0));

      for (var i = 0; i < repeatCount; ++i) {
        (this._str = this._str.substr(0, this._length++) + value + this._str.substr(this._length++ + 1));
      }
      return this;
    }
  );

  $.Method({Static:false, Public:true }, "Append", 
    $sig.make(0xB59, $.Type, [
        $jsilcore.TypeRef("System.Array", [$asm01.TypeRef("System.Char")]), $asm01.TypeRef("System.Int32"), 
        $asm01.TypeRef("System.Int32")
      ], []), 
    function StringBuilder_Append (value, startIndex, charCount) {
      if (value === null) {
        if (!((startIndex === 0) && (charCount === 0))) {
          throw new ($T11())("value");
        }
        var result = this;
      } else {
        if (!(!((charCount < 0) || 
              (startIndex < 0)) && (startIndex <= ((value.length - charCount) | 0)))) {
          throw new ($T02())();
        }
        var needed_cap = ((this._length + charCount) | 0);
        this.InternalEnsureCapacity(needed_cap);
        this._str = $sig.get(0x19F, $asm01.System.String, [
            $asm01.System.String, $asm01.System.Int32, 
            System.Array.Of($asm01.System.Char), $asm01.System.Int32, 
            $asm01.System.Int32
          ], []).CallStatic($T00(), "CharCopyJoin", null, 
          this._str, 
          this._length, 
          value, 
          startIndex, 
          charCount
        );
        this._length = needed_cap;
        result = this;
      }
      return result;
    }
  );

  $.Method({Static:false, Public:true }, "Append", 
    $sig.make(0xB5B, $.Type, [
        $asm01.TypeRef("System.String"), $asm01.TypeRef("System.Int32"), 
        $asm01.TypeRef("System.Int32")
      ], []), 
    function StringBuilder_Append (value, startIndex, count) {
      if (value === null) {
        if (!((startIndex === 0) || (count === 0))) {
          throw new ($T11())("value");
        }
        var result = this;
      } else {
        if (!(!((count < 0) || 
              (startIndex < 0)) && (startIndex <= ((value.length - count) | 0)))) {
          throw new ($T02())();
        }
        var needed_cap = ((this._length + count) | 0);
        if (!((this._cached_str === null) && (this._str.length >= needed_cap))) {
          this.InternalEnsureCapacity(needed_cap);
        }
        this._str = $sig.get(0x1A3, $asm01.System.String, [
            $asm01.System.String, $asm01.System.Int32, 
            $asm01.System.String, $asm01.System.Int32, 
            $asm01.System.Int32
          ], []).CallStatic($T00(), "CharCopyJoin", null, 
          this._str, 
          this._length, 
          value, 
          startIndex, 
          count
        );
        this._length = needed_cap;
        result = this;
      }
      return result;
    }
  );

  $.Method({Static:false, Public:true }, "AppendFormat", 
    $sig.make(0xB63, $.Type, [$asm01.TypeRef("System.String"), $jsilcore.TypeRef("System.Array", [$asm01.TypeRef("System.Object")])], []), 
    function StringBuilder_AppendFormat (format, args) {
      return this.AppendFormat(null, format, args);
    }
  );

  $.Method({Static:false, Public:false}, "AppendFormat", 
    $sig.make(0xB65, $.Type, [$asm01.TypeRef("System.String"), $asm01.TypeRef("System.Object")], []), 
    function StringBuilder_AppendFormat (format, arg0) {
      return this.AppendFormat(null, format, JSIL.Array.New($T05(), [arg0]));
    }
  );

  $.Method({Static:false, Public:false}, "AppendFormat", 
    $sig.make(0xB67, $.Type, [
        $asm01.TypeRef("System.String"), $asm01.TypeRef("System.Object"), 
        $asm01.TypeRef("System.Object")
      ], []), 
    function StringBuilder_AppendFormat (format, arg0, arg1) {
      return this.AppendFormat(null, format, JSIL.Array.New($T05(), [arg0, arg1]));
    }
  );

  $.Method({Static:false, Public:false}, "AppendFormat", 
    $sig.make(0xB68, $.Type, [
        $asm01.TypeRef("System.String"), $asm01.TypeRef("System.Object"), 
        $asm01.TypeRef("System.Object"), $asm01.TypeRef("System.Object")
      ], []), 
    function StringBuilder_AppendFormat (format, arg0, arg1, arg2) {
      return this.AppendFormat(null, format, JSIL.Array.New($T05(), [arg0, arg1, arg2]));
    }
  );

  $.Method({Static:false, Public:true }, "AppendLine", 
    $sig.make(0xB5F, $.Type, [], []), 
    function StringBuilder_AppendLine () {
      return $sig.get(0xB22, $thisType, [$asm01.System.String], []).CallVirtual("Append", null, this, $T13().get_NewLine());
    }
  )
    .Attribute($asm01.TypeRef("System.Runtime.InteropServices.ComVisibleAttribute"), function () { return [false]; });

  $.Method({Static:false, Public:true }, "AppendLine", 
    $sig.make(0xB61, $.Type, [$asm01.TypeRef("System.String")], []), 
    function StringBuilder_AppendLine (value) {
      return $sig.get(0xB22, $thisType, [$asm01.System.String], []).CallVirtual("Append", null, $sig.get(0xB22, $thisType, [$asm01.System.String], []).CallVirtual("Append", null, this, value), $T13().get_NewLine());
    }
  )
    .Attribute($asm01.TypeRef("System.Runtime.InteropServices.ComVisibleAttribute"), function () { return [false]; });

  $.Method({Static:false, Public:true }, "Clear", 
    $sig.make(0xB5D, $.Type, [], []), 
    function StringBuilder_Clear () {
      this._length = 0;
      return this;
    }
  );

  $.Method({Static:false, Public:true }, "CopyTo", 
    $sig.make(0xBFC, null, [
        $asm01.TypeRef("System.Int32"), $jsilcore.TypeRef("System.Array", [$asm01.TypeRef("System.Char")]), 
        $asm01.TypeRef("System.Int32"), $asm01.TypeRef("System.Int32")
      ], []), 
    function StringBuilder_CopyTo (sourceIndex, destination, destinationIndex, count) {
      if (destination === null) {
        throw new ($T11())("destination");
      }
      if (!(!((((this.get_Length() - count) | 0) < sourceIndex) || 
            (((destination.length - count) | 0) < destinationIndex)) && 
          !((sourceIndex < 0) || 
            (destinationIndex < 0)) && (count >= 0))) {
        throw new ($T02())();
      }

      for (var i = 0; i < count; ++i) {
        destination[((destinationIndex + i) | 0)] = (this._str[((sourceIndex + i) | 0)]);
      }
    }
  )
    .Attribute($asm01.TypeRef("System.Runtime.InteropServices.ComVisibleAttribute"), function () { return [false]; });

  $.Method({Static:false, Public:true }, "EnsureCapacity", 
    $sig.make(0xB0F, $asm01.TypeRef("System.Int32"), [$asm01.TypeRef("System.Int32")], []), 
    function StringBuilder_EnsureCapacity (capacity) {
      if (capacity < 0) {
        throw new ($T02())("Capacity must be greater than 0.");
      }
      if (capacity <= this._str.length) {
        var length = this._str.length;
      } else {
        this.InternalEnsureCapacity(capacity);
        length = this._str.length;
      }
      return length;
    }
  );

  $.Method({Static:false, Public:true }, "Equals", 
    $sig.make(0xB10, $asm01.TypeRef("System.Boolean"), [$.Type], []), 
    function StringBuilder_Equals (sb) {
      return ((sb !== null) && !((this._length !== sb.get_Length()) || 
          !(this._str == sb._str)));
    }
  );

  $.Method({Static:false, Public:true }, "get_Capacity", 
    $sig.make(0xAF0, $asm01.TypeRef("System.Int32"), [], []), 
    function StringBuilder_get_Capacity () {
      if (this._str.length === 0) {
        var result = $T15().Min(this._maxCapacity, 16);
      } else {
        result = this._str.length;
      }
      return result;
    }
  );

  $.Method({Static:false, Public:true }, "get_Chars", 
    $sig.make(0xAF6, $asm01.TypeRef("System.Char"), [$asm01.TypeRef("System.Int32")], []), 
    function StringBuilder_get_Chars (index) {
      if (!((index < this._length) && (index >= 0))) {
        throw new ($T16())();
      }
      return this._str[index];
    }
  );

  $.Method({Static:false, Public:true }, "get_Length", 
    $sig.make(0xAF3, $asm01.TypeRef("System.Int32"), [], []), 
    function StringBuilder_get_Length () {
      return this._length;
    }
  );

  $.Method({Static:false, Public:true }, "get_MaxCapacity", 
    $sig.make(0xAEF, $asm01.TypeRef("System.Int32"), [], []), 
    function StringBuilder_get_MaxCapacity () {
      return this._maxCapacity;
    }
  );

  $.Method({Static:false, Public:true }, "Insert", 
    $sig.make(0xB69, $.Type, [$asm01.TypeRef("System.Int32"), $jsilcore.TypeRef("System.Array", [$asm01.TypeRef("System.Char")])], []), 
    function StringBuilder_Insert (index, value) {
      return $sig.get(0xB6B, $thisType, [$asm01.System.Int32, $asm01.System.String], []).CallVirtual("Insert", null, this, index, new ($T00())(value));
    }
  );

  $.Method({Static:false, Public:true }, "Insert", 
    $sig.make(0xB6B, $.Type, [$asm01.TypeRef("System.Int32"), $asm01.TypeRef("System.String")], []), 
    function StringBuilder_Insert (index, value) {
      if (!((index <= this._length) && (index >= 0))) {
        throw new ($T02())();
      }
      if (!((value !== null) && (value.length !== 0))) {
        var result = this;
      } else {
        this.InternalEnsureCapacity(((this._length + value.length) | 0));
        this._str = $sig.get(0x1A3, $asm01.System.String, [
            $asm01.System.String, $asm01.System.Int32, 
            $asm01.System.String, $asm01.System.Int32, 
            $asm01.System.Int32
          ], []).CallStatic($T00(), "CharCopyJoin", null, 
          this._str, 
          ((index + value.length) | 0), 
          this._str, 
          index, 
          ((this._length - index) | 0)
        );
        this._str = $sig.get(0x1A3, $asm01.System.String, [
            $asm01.System.String, $asm01.System.Int32, 
            $asm01.System.String, $asm01.System.Int32, 
            $asm01.System.Int32
          ], []).CallStatic($T00(), "CharCopyJoin", null, 
          this._str, 
          index, 
          value, 
          0, 
          value.length
        );
        this._length += value.length;
        result = this;
      }
      return result;
    }
  );

  $.Method({Static:false, Public:true }, "Insert", 
    $sig.make(0xB6D, $.Type, [$asm01.TypeRef("System.Int32"), $asm01.TypeRef("System.Boolean")], []), 
    function StringBuilder_Insert (index, value) {
      return $sig.get(0xB6B, $thisType, [$asm01.System.Int32, $asm01.System.String], []).CallVirtual("Insert", null, this, index, value.toString());
    }
  );

  $.Method({Static:false, Public:true }, "Insert", 
    $sig.make(0xB6F, $.Type, [$asm01.TypeRef("System.Int32"), $asm01.TypeRef("System.Byte")], []), 
    function StringBuilder_Insert (index, value) {
      return $sig.get(0xB6B, $thisType, [$asm01.System.Int32, $asm01.System.String], []).CallVirtual("Insert", null, this, index, value.toString());
    }
  );

  $.Method({Static:false, Public:true }, "Insert", 
    $sig.make(0xB71, $.Type, [$asm01.TypeRef("System.Int32"), $asm01.TypeRef("System.Char")], []), 
    function StringBuilder_Insert (index, value) {
      if (!((index <= this._length) && (index >= 0))) {
        throw new ($T02())("index");
      }
      this.InternalEnsureCapacity(((this._length + 1) | 0));
      this._str = $sig.get(0x1A3, $asm01.System.String, [
          $asm01.System.String, $asm01.System.Int32, 
          $asm01.System.String, $asm01.System.Int32, 
          $asm01.System.Int32
        ], []).CallStatic($T00(), "CharCopyJoin", null, 
        this._str, 
        ((index + 1) | 0), 
        this._str, 
        index, 
        ((this._length - index) | 0)
      );
      (this._str = this._str.substr(0, index) + value + this._str.substr(index + 1));
      ++this._length;
      return this;
    }
  );

  $.Method({Static:false, Public:true }, "Insert", 
    $sig.make(0xB75, $.Type, [$asm01.TypeRef("System.Int32"), $asm01.TypeRef("System.Decimal")], []), 
    function StringBuilder_Insert (index, value) {
      return $sig.get(0xB6B, $thisType, [$asm01.System.Int32, $asm01.System.String], []).CallVirtual("Insert", null, this, index, value.toString());
    }
  );

  $.Method({Static:false, Public:true }, "Insert", 
    $sig.make(0xB78, $.Type, [$asm01.TypeRef("System.Int32"), $asm01.TypeRef("System.Double")], []), 
    function StringBuilder_Insert (index, value) {
      return $sig.get(0xB6B, $thisType, [$asm01.System.Int32, $asm01.System.String], []).CallVirtual("Insert", null, this, index, value.toString());
    }
  );

  $.Method({Static:false, Public:true }, "Insert", 
    $sig.make(0xB7C, $.Type, [$asm01.TypeRef("System.Int32"), $asm01.TypeRef("System.Int16")], []), 
    function StringBuilder_Insert (index, value) {
      return $sig.get(0xB6B, $thisType, [$asm01.System.Int32, $asm01.System.String], []).CallVirtual("Insert", null, this, index, value.toString());
    }
  );

  $.Method({Static:false, Public:true }, "Insert", 
    $sig.make(0xB7D, $.Type, [$asm01.TypeRef("System.Int32"), $asm01.TypeRef("System.Int32")], []), 
    function StringBuilder_Insert (index, value) {
      return $sig.get(0xB6B, $thisType, [$asm01.System.Int32, $asm01.System.String], []).CallVirtual("Insert", null, this, index, value.toString());
    }
  );

  $.Method({Static:false, Public:true }, "Insert", 
    $sig.make(0xBA9, $.Type, [$asm01.TypeRef("System.Int32"), $asm01.TypeRef("System.Int64")], []), 
    function StringBuilder_Insert (index, value) {
      return $sig.get(0xB6B, $thisType, [$asm01.System.Int32, $asm01.System.String], []).CallVirtual("Insert", null, this, index, value.toString());
    }
  );

  $.Method({Static:false, Public:true }, "Insert", 
    $sig.make(0xBB1, $.Type, [$asm01.TypeRef("System.Int32"), $asm01.TypeRef("System.Object")], []), 
    function StringBuilder_Insert (index, value) {
      return $sig.get(0xB6B, $thisType, [$asm01.System.Int32, $asm01.System.String], []).CallVirtual("Insert", null, this, index, value.toString());
    }
  );

  $.Method({Static:false, Public:true }, "Insert", 
    $sig.make(0xBBB, $.Type, [$asm01.TypeRef("System.Int32"), $asm01.TypeRef("System.SByte")], []), 
    function StringBuilder_Insert (index, value) {
      return $sig.get(0xB6B, $thisType, [$asm01.System.Int32, $asm01.System.String], []).CallVirtual("Insert", null, this, index, value.toString());
    }
  )
    .Attribute($asm01.TypeRef("System.CLSCompliantAttribute"), function () { return [false]; });

  $.Method({Static:false, Public:true }, "Insert", 
    $sig.make(0xBC3, $.Type, [$asm01.TypeRef("System.Int32"), $asm01.TypeRef("System.Single")], []), 
    function StringBuilder_Insert (index, value) {
      return $sig.get(0xB6B, $thisType, [$asm01.System.Int32, $asm01.System.String], []).CallVirtual("Insert", null, this, index, value.toString());
    }
  );

  $.Method({Static:false, Public:true }, "Insert", 
    $sig.make(0xBD2, $.Type, [$asm01.TypeRef("System.Int32"), $asm01.TypeRef("System.UInt16")], []), 
    function StringBuilder_Insert (index, value) {
      return $sig.get(0xB6B, $thisType, [$asm01.System.Int32, $asm01.System.String], []).CallVirtual("Insert", null, this, index, value.toString());
    }
  )
    .Attribute($asm01.TypeRef("System.CLSCompliantAttribute"), function () { return [false]; });

  $.Method({Static:false, Public:true }, "Insert", 
    $sig.make(0xBDC, $.Type, [$asm01.TypeRef("System.Int32"), $asm01.TypeRef("System.UInt32")], []), 
    function StringBuilder_Insert (index, value) {
      return $sig.get(0xB6B, $thisType, [$asm01.System.Int32, $asm01.System.String], []).CallVirtual("Insert", null, this, index, value.toString());
    }
  )
    .Attribute($asm01.TypeRef("System.CLSCompliantAttribute"), function () { return [false]; });

  $.Method({Static:false, Public:true }, "Insert", 
    $sig.make(0xBF1, $.Type, [$asm01.TypeRef("System.Int32"), $asm01.TypeRef("System.UInt64")], []), 
    function StringBuilder_Insert (index, value) {
      return $sig.get(0xB6B, $thisType, [$asm01.System.Int32, $asm01.System.String], []).CallVirtual("Insert", null, this, index, value.toString());
    }
  )
    .Attribute($asm01.TypeRef("System.CLSCompliantAttribute"), function () { return [false]; });

  $.Method({Static:false, Public:true }, "Insert", 
    $sig.make(0xBF5, $.Type, [
        $asm01.TypeRef("System.Int32"), $asm01.TypeRef("System.String"), 
        $asm01.TypeRef("System.Int32")
      ], []), 
    function StringBuilder_Insert (index, value, count) {
      if (count < 0) {
        throw new ($T02())();
      }
      if (!((value === null) || !(value != $T00().Empty))) {

        for (var insertCount = 0; insertCount < count; ++insertCount) {
          $sig.get(0xB6B, $thisType, [$asm01.System.Int32, $asm01.System.String], []).CallVirtual("Insert", null, this, index, value);
        }
      }
      return this;
    }
  );

  $.Method({Static:false, Public:true }, "Insert", 
    $sig.make(0xBF7, $.Type, [
        $asm01.TypeRef("System.Int32"), $jsilcore.TypeRef("System.Array", [$asm01.TypeRef("System.Char")]), 
        $asm01.TypeRef("System.Int32"), $asm01.TypeRef("System.Int32")
      ], []), 
    function StringBuilder_Insert (index, value, startIndex, charCount) {
      if (value === null) {
        if ((startIndex !== 0) || (charCount !== 0)) {
          throw new ($T11())("value");
        }
        var result = this;
      } else {
        if (!(!((charCount < 0) || 
              (startIndex < 0)) && (startIndex <= ((value.length - charCount) | 0)))) {
          throw new ($T02())();
        }
        result = $sig.get(0xB6B, $thisType, [$asm01.System.Int32, $asm01.System.String], []).CallVirtual("Insert", null, this, index, new ($T00())(value, startIndex, charCount));
      }
      return result;
    }
  );

  $.Method({Static:false, Public:false}, "InternalEnsureCapacity", 
    $sig.make(0xBF9, null, [$asm01.TypeRef("System.Int32")], []), 
    function StringBuilder_InternalEnsureCapacity (size) {
      if (!((size <= this._str.length) && (this._cached_str !== this._str))) {
        var capacity = this._str.length;
        if (size > capacity) {
          if (!((this._cached_str !== this._str) || (capacity >= 16))) {
            capacity = 16;
          }
          capacity = ((capacity << 1) | 0);
          if (size > capacity) {
            capacity = size;
          }
          if (!((capacity < 2147483647) && (capacity >= 0))) {
            capacity = 2147483647;
          }
          if (!((capacity <= this._maxCapacity) || (size > this._maxCapacity))) {
            capacity = this._maxCapacity;
          }
          if (capacity > this._maxCapacity) {
            throw $sig.get(0xCA7, null, [$asm01.System.String, $asm01.System.String], []).Construct($T02(), "size", "capacity was less than the current size.");
          }
        }
        var tmp = $T00().InternalAllocateStr(capacity);
        if (this._length > 0) {
          tmp = $sig.get(0x1A3, $asm01.System.String, [
              $asm01.System.String, $asm01.System.Int32, 
              $asm01.System.String, $asm01.System.Int32, 
              $asm01.System.Int32
            ], []).CallStatic($T00(), "CharCopyJoin", null, 
            tmp, 
            0, 
            this._str, 
            0, 
            this._length
          );
        }
        this._str = tmp;
      }
      this._cached_str = null;
    }
  );

  $.Method({Static:false, Public:true }, "Remove", 
    $sig.make(0xB11, $.Type, [$asm01.TypeRef("System.Int32"), $asm01.TypeRef("System.Int32")], []), 
    function StringBuilder_Remove (startIndex, length) {
      if (!(!((startIndex < 0) || 
            (length < 0)) && (startIndex <= ((this._length - length) | 0)))) {
        throw new ($T02())();
      }
      if (null !== this._cached_str) {
        this.InternalEnsureCapacity(this._length);
      }
      if (((this._length - ((startIndex + length) | 0)) | 0) > 0) {
        this._str = $sig.get(0x1A3, $asm01.System.String, [
            $asm01.System.String, $asm01.System.Int32, 
            $asm01.System.String, $asm01.System.Int32, 
            $asm01.System.Int32
          ], []).CallStatic($T00(), "CharCopyJoin", null, 
          this._str, 
          startIndex, 
          this._str, 
          ((startIndex + length) | 0), 
          ((this._length - ((startIndex + length) | 0)) | 0)
        );
      }
      this._length -= length;
      return this;
    }
  );

  $.Method({Static:false, Public:true }, "Replace", 
    $sig.make(0xB12, $.Type, [$asm01.TypeRef("System.Char"), $asm01.TypeRef("System.Char")], []), 
    function StringBuilder_Replace (oldChar, newChar) {
      return $sig.get(0xB15, $thisType, [
          $asm01.System.Char, $asm01.System.Char, 
          $asm01.System.Int32, $asm01.System.Int32
        ], []).CallVirtual("Replace", null, this, oldChar, newChar, 0, this._length);
    }
  );

  $.Method({Static:false, Public:true }, "Replace", 
    $sig.make(0xB15, $.Type, [
        $asm01.TypeRef("System.Char"), $asm01.TypeRef("System.Char"), 
        $asm01.TypeRef("System.Int32"), $asm01.TypeRef("System.Int32")
      ], []), 
    function StringBuilder_Replace (oldChar, newChar, startIndex, count) {
      if (!(!((startIndex > ((this._length - count) | 0)) || 
            (startIndex < 0)) && (count >= 0))) {
        throw new ($T02())();
      }
      if (null !== this._cached_str) {
        this.InternalEnsureCapacity(this._str.length);
      }

      for (var replaceIterate = startIndex; replaceIterate < ((startIndex + count) | 0); ++replaceIterate) {
        if (this._str[replaceIterate].charCodeAt(0) === oldChar.charCodeAt(0)) {
          (this._str = this._str.substr(0, replaceIterate) + newChar + this._str.substr(replaceIterate + 1));
        }
      }
      return this;
    }
  );

  $.Method({Static:false, Public:true }, "Replace", 
    $sig.make(0xB1A, $.Type, [$asm01.TypeRef("System.String"), $asm01.TypeRef("System.String")], []), 
    function StringBuilder_Replace (oldValue, newValue) {
      return $sig.get(0xB1D, $thisType, [
          $asm01.System.String, $asm01.System.String, 
          $asm01.System.Int32, $asm01.System.Int32
        ], []).CallVirtual("Replace", null, this, oldValue, newValue, 0, this._length);
    }
  );

  $.Method({Static:false, Public:true }, "Replace", 
    $sig.make(0xB1D, $.Type, [
        $asm01.TypeRef("System.String"), $asm01.TypeRef("System.String"), 
        $asm01.TypeRef("System.Int32"), $asm01.TypeRef("System.Int32")
      ], []), 
    function StringBuilder_Replace (oldValue, newValue, startIndex, count) {
      if (oldValue === null) {
        throw new ($T11())("The old value cannot be null.");
      }
      if (!(!((startIndex < 0) || 
            (count < 0)) && (startIndex <= ((this._length - count) | 0)))) {
        throw new ($T02())();
      }
      if (oldValue.length === 0) {
        throw new ($T17())("The old value cannot be zero length.");
      }
      var substr = this._str.Substring(startIndex, count);
      var replace = substr.Replace(oldValue, newValue);
      if (replace === substr) {
        var result = this;
      } else {
        this.InternalEnsureCapacity(((replace.length + ((this._length - count) | 0)) | 0));
        this._str = $sig.get(0x1A3, $asm01.System.String, [
            $asm01.System.String, $asm01.System.Int32, 
            $asm01.System.String, $asm01.System.Int32, 
            $asm01.System.Int32
          ], []).CallStatic($T00(), "CharCopyJoin", null, 
          this._str, 
          ((startIndex + replace.length) | 0), 
          this._str, 
          ((startIndex + count) | 0), 
          ((((this._length - startIndex) | 0) - count) | 0)
        );
        this._str = $sig.get(0x1A3, $asm01.System.String, [
            $asm01.System.String, $asm01.System.Int32, 
            $asm01.System.String, $asm01.System.Int32, 
            $asm01.System.Int32
          ], []).CallStatic($T00(), "CharCopyJoin", null, 
          this._str, 
          startIndex, 
          replace, 
          0, 
          replace.length
        );
        this._length = ((replace.length + ((this._length - count) | 0)) | 0);
        result = this;
      }
      return result;
    }
  );

  $.Method({Static:false, Public:true }, "set_Capacity", 
    $sig.make(0xAF1, null, [$asm01.TypeRef("System.Int32")], []), 
    function StringBuilder_set_Capacity (value) {
      if (value < this._length) {
        throw new ($T17())("Capacity must be larger than length");
      }
      if (value > this._maxCapacity) {
        throw $sig.get(0xCA7, null, [$asm01.System.String, $asm01.System.String], []).Construct($T02(), "value", "Should be less than or equal to MaxCapacity");
      }
      this.InternalEnsureCapacity(value);
    }
  );

  $.Method({Static:false, Public:true }, "set_Chars", 
    $sig.make(0xAF8, null, [$asm01.TypeRef("System.Int32"), $asm01.TypeRef("System.Char")], []), 
    function StringBuilder_set_Chars (index, value) {
      if (!((index < this._length) && (index >= 0))) {
        throw new ($T16())();
      }
      if (null !== this._cached_str) {
        this.InternalEnsureCapacity(this._length);
      }
      (this._str = this._str.substr(0, index) + value + this._str.substr(index + 1));
    }
  );

  $.Method({Static:false, Public:true }, "set_Length", 
    $sig.make(0xAF4, null, [$asm01.TypeRef("System.Int32")], []), 
    function StringBuilder_set_Length (value) {
      if (!((value >= 0) && (value <= this._maxCapacity))) {
        throw new ($T02())();
      }
      if (value !== this._length) {
        if (value < this._length) {
          this.InternalEnsureCapacity(value);
          this._length = value;
        } else {
          this.Append("\0", ((value - this._length) | 0));
        }
      }
    }
  );

  $.Method({Static:false, Public:true }, "toString", 
    $sig.make(0xB0D, $asm01.TypeRef("System.String"), [], []), 
    function StringBuilder_toString () {
      if (this._length === 0) {
        var result = $T00().Empty;
      } else if (null !== this._cached_str) {
        result = this._cached_str;
      } else if (this._length < ((this._str.length >> 1) | 0)) {
        this._cached_str = (this._str.substr(0, this._length));
        result = this._cached_str;
      } else {
        this._cached_str = this._str;
        result = this._str;
      }
      return result;
    }
  );

  $.Method({Static:false, Public:true }, "ToString", 
    $sig.make(0xB0E, $asm01.TypeRef("System.String"), [$asm01.TypeRef("System.Int32"), $asm01.TypeRef("System.Int32")], []), 
    function StringBuilder_ToString (startIndex, length) {
      if (!(!((startIndex < 0) || 
            (length < 0)) && (startIndex <= ((this._length - length) | 0)))) {
        throw new ($T02())();
      }
      if (!((startIndex !== 0) || (length !== this._length))) {
        var result = this.toString();
      } else {
        result = (this._str.substr(startIndex, length));
      }
      return result;
    }
  );

  $.Constant({Static:true , Public:false}, "constDefaultCapacity", 16); 
  $.Field({Static:false, Public:false}, "_length", $asm01.TypeRef("System.Int32")); 
  $.Field({Static:false, Public:false}, "_str", $asm01.TypeRef("System.String")); 
  $.Field({Static:false, Public:false}, "_cached_str", $asm01.TypeRef("System.String")); 
  $.Field({Static:false, Public:false}, "_maxCapacity", $asm01.TypeRef("System.Int32")); 
  $.Property({Static:false, Public:true }, "MaxCapacity", $asm01.TypeRef("System.Int32"));

  $.Property({Static:false, Public:true }, "Capacity", $asm01.TypeRef("System.Int32"));

  $.Property({Static:false, Public:true }, "Length", $asm01.TypeRef("System.Int32"));

  $.Property({Static:false, Public:true }, "Chars", $asm01.TypeRef("System.Char"));

})
  .Attribute($asm01.TypeRef("System.Reflection.DefaultMemberAttribute"), function () { return ["Chars"]; })
  .Attribute($asm01.TypeRef("System.Runtime.InteropServices.ComVisibleAttribute"), function () { return [true]; });

JSIL.MakeClass($asm01.TypeRef("System.Object"), "System.Runtime.InteropServices.OutAttribute", false, [], function ($) {
  var $thisType = $.publicInterface;

  $.Method({Static:false, Public:true }, ".ctor", 
    $sig.make(0xC2E, null, [], []), 
    function OutAttribute__ctor () {
    }
  );

});

JSIL.MakeClass($asm01.TypeRef("System.Object"), "System.Console", true, [], function ($) {
  var $thisType = $.publicInterface;

  $.Method({Static:false, Public:true }, ".ctor", 
    $sig.make(0xCE3, null, [], []), 
    function Console__ctor () {
    }
  );

  $.ExternalMethod({Static:true , Public:true }, "Write", 
    $sig.make(0xCE2, null, [$jsilcore.TypeRef("System.Array", [$asm01.TypeRef("System.Object")])], [])
  )
    .Attribute($asm01.TypeRef("JSIL.Meta.JSMutatedArguments"), function () { return [[]]; })
    .Attribute($asm01.TypeRef("JSIL.Meta.JSRuntimeDispatch"))
    .Attribute($asm01.TypeRef("JSIL.Meta.JSEscapingArguments"), function () { return [[]]; })
    .Attribute($asm01.TypeRef("JSIL.Meta.JSExternal"));

  $.ExternalMethod({Static:true , Public:true }, "WriteLine", 
    $sig.make(0xCE1, null, [$jsilcore.TypeRef("System.Array", [$asm01.TypeRef("System.Object")])], [])
  )
    .Attribute($asm01.TypeRef("JSIL.Meta.JSRuntimeDispatch"))
    .Attribute($asm01.TypeRef("JSIL.Meta.JSMutatedArguments"), function () { return [[]]; })
    .Attribute($asm01.TypeRef("JSIL.Meta.JSEscapingArguments"), function () { return [[]]; })
    .Attribute($asm01.TypeRef("JSIL.Meta.JSExternal"));

});

JSIL.MakeTypeAlias($jsilcore, "System.Char");

JSIL.MakeStaticClass("System.BitConverter", true, [], function ($) {
  var $thisType = $.publicInterface;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm01.System.Double)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm01.System.NotSupportedException)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm01.System.Int64)) ();
  };

  $.Method({Static:true , Public:true }, "DoubleToInt64Bits", 
    $sig.make(0xCFB, $asm01.TypeRef("System.Int64"), [$asm01.TypeRef("System.Double")], []), 
    function BitConverter_DoubleToInt64Bits (source) {
                  var arrayBuffer = new ArrayBuffer(8);
                  var doubleBuffer = new Float64Array(arrayBuffer);
                  doubleBuffer.set([source]);
                  var int32buffer = new Int32Array(arrayBuffer);
                  var low = int32buffer[0];
                  var high = int32buffer[1];
                  return goog.math.Long.fromBits(low, high);;
      throw new ($T01())();
    }
  );

  $.Method({Static:true , Public:true }, "Int64ToDoubleBits", 
    $sig.make(0xCF7, $asm01.TypeRef("System.Double"), [$asm01.TypeRef("System.Int64")], []), 
    function BitConverter_Int64ToDoubleBits (source) {
                  var arrayBuffer = new ArrayBuffer(8);
                  var int32buffer = new Int32Array(arrayBuffer);
                  int32buffer.set([source.low_, source.high_]);
                  var doubleBuffer = new Float64Array(arrayBuffer);
                  return doubleBuffer[0];;
      throw new ($T01())();
    }
  );

});

JSIL.MakeClass($asm01.TypeRef("System.Object"), "System.TimeZone", true, [], function ($) {
  var $thisType = $.publicInterface;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm01.System.Int64)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm01.System.DateTime)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm01.System.CurrentSystemTimeZone)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm01.System.TimeSpan)) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize($asm01.System.Globalization.DaylightTime)) ();
  };
  var $T05 = function () {
    return ($T05 = JSIL.Memoize($asm01.System.ArgumentNullException)) ();
  };
  var $T06 = function () {
    return ($T06 = JSIL.Memoize($asm01.System.Boolean)) ();
  };
  var $T07 = function () {
    return ($T07 = JSIL.Memoize($asm01.System.DateTimeKind)) ();
  };

  $.Method({Static:false, Public:false}, ".ctor", 
    $sig.make(0xD9A, null, [], []), 
    function TimeZone__ctor () {
    }
  );

  $.Method({Static:true , Public:true }, "get_CurrentTimeZone", 
    $sig.make(0xD93, $.Type, [], []), 
    function TimeZone_get_CurrentTimeZone () {
      var now = $T01().GetNow();
      if (!(($thisType.currentTimeZone !== null).valueOf() && $T00().op_LessThanOrEqual(
            $T00().op_Subtraction(now, $thisType.timezone_check), 
            $T00().Create(12797440, 35, 0)
          ))) {
        $thisType.currentTimeZone = new ($T02())(now);
        $thisType.timezone_check = now;
      }
      return $thisType.currentTimeZone;
    }
  );

  $.Method({Static:false, Public:false}, "GetLocalTimeDiff", 
    $sig.make(0xDA8, $asm01.TypeRef("System.TimeSpan"), [$asm01.TypeRef("System.DateTime")], []), 
    function TimeZone_GetLocalTimeDiff (time) {
      return this.GetLocalTimeDiff(time.MemberwiseClone(), this.GetUtcOffset(time.MemberwiseClone()));
    }
  );

  $.Method({Static:false, Public:false}, "GetLocalTimeDiff", 
    $sig.make(0xDAA, $asm01.TypeRef("System.TimeSpan"), [$asm01.TypeRef("System.DateTime"), $asm01.TypeRef("System.TimeSpan")], []), 
    function TimeZone_GetLocalTimeDiff (time, utc_offset) {
      var dlt = this.GetDaylightChanges(time.get_Year());
      if (!$T00().op_Inequality(
          dlt.get_Delta().get_Ticks(), 
          $T00().Create(0, 0, 0)
        )) {
        var result = utc_offset.MemberwiseClone();
      } else {
        var local = time.Add(utc_offset).MemberwiseClone();
        if (!(!$T01().op_LessThan(local, dlt.get_End()) || !$T01().op_LessThanOrEqual($sig.get(0x48A, $asm01.System.DateTime, [$asm01.System.TimeSpan], []).CallVirtual("Subtract", null, dlt.get_End(), dlt.get_Delta()), local))) {
          result = utc_offset.MemberwiseClone();
        } else if (!(!$T01().op_GreaterThanOrEqual(local, dlt.get_Start()) || !$T01().op_GreaterThan(dlt.get_Start().Add(dlt.get_Delta()), local))) {
          result = $T03().op_Subtraction(utc_offset.MemberwiseClone(), dlt.get_Delta()).MemberwiseClone();
        } else {
          result = this.GetUtcOffset(local.MemberwiseClone()).MemberwiseClone();
        }
      }
      return result;
    }
  );

  $.Method({Static:false, Public:true }, "IsDaylightSavingTime", 
    $sig.make(0xDA0, $asm01.TypeRef("System.Boolean"), [$asm01.TypeRef("System.DateTime")], []), 
    function TimeZone_IsDaylightSavingTime (time) {
      return $thisType.IsDaylightSavingTime(time, this.GetDaylightChanges(time.get_Year()));
    }
  );

  $.Method({Static:true , Public:true }, "IsDaylightSavingTime", 
    $sig.make(0xDA2, $asm01.TypeRef("System.Boolean"), [$asm01.TypeRef("System.DateTime"), $asm01.TypeRef("System.Globalization.DaylightTime")], []), 
    function TimeZone_IsDaylightSavingTime (time, daylightTimes) {
      if (daylightTimes === null) {
        throw new ($T05())("daylightTimes");
      }
      if (!$T00().op_Inequality(
          daylightTimes.get_Start().get_Ticks(), 
          daylightTimes.get_End().get_Ticks()
        )) {
        var result = false;
      } else {
        if (!$T00().op_GreaterThanOrEqual(
            daylightTimes.get_Start().get_Ticks(), 
            daylightTimes.get_End().get_Ticks()
          )) {
          if (!($T00().op_GreaterThanOrEqual(
                daylightTimes.get_Start().get_Ticks(), 
                time.get_Ticks()
              ) || $T00().op_LessThanOrEqual(
                daylightTimes.get_End().get_Ticks(), 
                time.get_Ticks()
              ))) {
            result = true;
            return result;
          }
        } else if (!((time.get_Year() !== daylightTimes.get_Start().get_Year()) || 
            (time.get_Year() !== daylightTimes.get_End().get_Year()) || ($T00().op_GreaterThanOrEqual(
                time.get_Ticks(), 
                daylightTimes.get_End().get_Ticks()
              ) && 
              $T00().op_LessThanOrEqual(
                time.get_Ticks(), 
                daylightTimes.get_Start().get_Ticks()
              )))) {
          result = true;
          return result;
        }
        result = false;
      }
      return result;
    }
  );

  $.Method({Static:false, Public:true }, "ToLocalTime", 
    $sig.make(0xDA4, $asm01.TypeRef("System.DateTime"), [$asm01.TypeRef("System.DateTime")], []), 
    function TimeZone_ToLocalTime (time) {
      if (time.get_Kind() === $T07().Local) {
        var result = time.MemberwiseClone();
      } else {
        var utcOffset = this.GetUtcOffset(time.MemberwiseClone()).MemberwiseClone();
        if (!$T00().op_LessThanOrEqual(
            utcOffset.get_Ticks(), 
            $T00().Create(0, 0, 0)
          )) {
          if ($T01().op_LessThan($sig.get(0x4B5, $asm01.System.DateTime, [$asm01.System.DateTime, $asm01.System.TimeSpan], []).CallStatic($T01(), "op_Subtraction", null, $T01().MaxValue, utcOffset), time)) {
            result = $T01().SpecifyKind($T01().MaxValue, $T07().Local);
            return result;
          }
        } else if (!$T00().op_GreaterThanOrEqual(
            utcOffset.get_Ticks(), 
            $T00().Create(0, 0, 0)
          )) {
          if (!$T00().op_GreaterThanOrEqual(
              $T00().op_Addition(
                time.get_Ticks(), 
                utcOffset.get_Ticks()
              ), 
              $T01().MinValue.get_Ticks()
            )) {
            result = $T01().SpecifyKind($T01().MinValue, $T07().Local);
            return result;
          }
        }
        var local = time.Add(utcOffset).MemberwiseClone();
        var dlt = this.GetDaylightChanges(time.get_Year());
        if (!$T00().op_Inequality(
            dlt.get_Delta().get_Ticks(), 
            $T00().Create(0, 0, 0)
          )) {
          result = $T01().SpecifyKind(local, $T07().Local);
        } else if (!(!$T01().op_LessThan(local, dlt.get_End()) || !$T01().op_LessThanOrEqual($sig.get(0x48A, $asm01.System.DateTime, [$asm01.System.TimeSpan], []).CallVirtual("Subtract", null, dlt.get_End(), dlt.get_Delta()), local))) {
          result = $T01().SpecifyKind(local, $T07().Local);
        } else {
          var localOffset = this.GetUtcOffset(local.MemberwiseClone()).MemberwiseClone();
          result = $T01().SpecifyKind(time.Add(localOffset), $T07().Local);
        }
      }
      return result;
    }
  );

  $.Method({Static:false, Public:true }, "ToUniversalTime", 
    $sig.make(0xDA6, $asm01.TypeRef("System.DateTime"), [$asm01.TypeRef("System.DateTime")], []), 
    function TimeZone_ToUniversalTime (time) {
      if (time.get_Kind() === $T07().Utc) {
        var result = time.MemberwiseClone();
      } else {
        var offset = this.GetUtcOffset(time.MemberwiseClone());
        if (!$T00().op_GreaterThanOrEqual(
            offset.get_Ticks(), 
            $T00().Create(0, 0, 0)
          )) {
          if ($T01().op_LessThan($T01().op_Addition($T01().MaxValue, offset), time)) {
            result = $T01().SpecifyKind($T01().MaxValue, $T07().Utc);
            return result;
          }
        } else if (!$T00().op_LessThanOrEqual(
            offset.get_Ticks(), 
            $T00().Create(0, 0, 0)
          )) {
          if ($T01().op_GreaterThan($T01().op_Addition($T01().MinValue, offset), time)) {
            result = $T01().SpecifyKind($T01().MinValue, $T07().Utc);
            return result;
          }
        }
        result = $T01().SpecifyKind(new ($T01())($T00().op_Subtraction(
              time.get_Ticks(), 
              offset.get_Ticks()
            )), $T07().Utc);
      }
      return result;
    }
  );

  $.Field({Static:true , Public:false}, "currentTimeZone", $.Type); 
  $.Field({Static:true , Public:false}, "timezone_check", $asm01.TypeRef("System.Int64")); 
  $.Property({Static:true , Public:true }, "CurrentTimeZone", $.Type);

  $.Property({Static:false, Public:true , Virtual:true }, "DaylightName", $asm01.TypeRef("System.String"));

  $.Property({Static:false, Public:true , Virtual:true }, "StandardName", $asm01.TypeRef("System.String"));

})
  .Attribute($asm01.TypeRef("System.Runtime.InteropServices.ComVisibleAttribute"), function () { return [true]; });

JSIL.MakeClass($asm01.TypeRef("System.TimeZone"), "System.CurrentSystemTimeZone", false, [], function ($) {
  var $thisType = $.publicInterface;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm01.System.Collections.Hashtable)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm01.System.TimeZone)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm01.System.Int64)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize(System.Array.Of($asm01.System.Int64))) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize(System.Array.Of($asm01.System.String))) ();
  };
  var $T05 = function () {
    return ($T05 = JSIL.Memoize($asm01.System.DateTime)) ();
  };
  var $T06 = function () {
    return ($T06 = JSIL.Memoize($asm01.System.NotSupportedException)) ();
  };
  var $T07 = function () {
    return ($T07 = JSIL.Memoize($asm01.System.Locale)) ();
  };
  var $T08 = function () {
    return ($T08 = JSIL.Memoize($asm01.System.Object)) ();
  };
  var $T09 = function () {
    return ($T09 = JSIL.Memoize($asm01.System.Globalization.DaylightTime)) ();
  };
  var $T0A = function () {
    return ($T0A = JSIL.Memoize($asm01.System.Int32)) ();
  };
  var $T0B = function () {
    return ($T0B = JSIL.Memoize($asm01.System.ArgumentOutOfRangeException)) ();
  };
  var $T0C = function () {
    return ($T0C = JSIL.Memoize($asm01.System.Void)) ();
  };
  var $T0D = function () {
    return ($T0D = JSIL.Memoize($asm01.System.Boolean)) ();
  };
  var $T0E = function () {
    return ($T0E = JSIL.Memoize($asm01.System.Threading.Monitor)) ();
  };
  var $T0F = function () {
    return ($T0F = JSIL.Memoize($asm01.System.ArgumentException)) ();
  };
  var $T10 = function () {
    return ($T10 = JSIL.Memoize($asm01.System.TimeSpan)) ();
  };

  $.Method({Static:false, Public:false}, ".ctor", 
    $sig.make(0xDE2, null, [], []), 
    function CurrentSystemTimeZone__ctor () {
      this.m_CachedDaylightChanges = $sig.get(0x637, null, [$asm01.System.Int32], []).Construct($T00(), 1);
      $T01().prototype._ctor.call(this);
    }
  );

  $.Method({Static:false, Public:false}, ".ctor", 
    $sig.make(0xDF3, null, [$asm01.TypeRef("System.Int64")], []), 
    function CurrentSystemTimeZone__ctor (lnow) {
      var data = new JSIL.Variable(null);
      var names = new JSIL.Variable(null);
      this.m_CachedDaylightChanges = $sig.get(0x637, null, [$asm01.System.Int32], []).Construct($T00(), 1);
      $T01().prototype._ctor.call(this);
      var now = new ($T05())(lnow);
      if (!$thisType.GetTimeZoneData(now.get_Year(), /* ref */ data, /* ref */ names)) {
        throw new ($T06())($T07().GetText("Can't get timezone name.", JSIL.Array.New($T08(), 0)));
      }
      this.m_standardName = $T07().GetText(names.value[0], JSIL.Array.New($T08(), 0));
      this.m_daylightName = $T07().GetText(names.value[1], JSIL.Array.New($T08(), 0));
      this.m_ticksOffset = data.value[2];
      var dlt = this.GetDaylightTimeFromData(data.value);
      this.m_CachedDaylightChanges.Add(now.get_Year(), dlt);
      this.OnDeserialization(dlt);
    }
  );

  $.Method({Static:false, Public:true }, "get_DaylightName", 
    $sig.make(0xDD6, $asm01.TypeRef("System.String"), [], []), 
    function CurrentSystemTimeZone_get_DaylightName () {
      return this.m_daylightName;
    }
  );

  $.Method({Static:false, Public:true }, "get_StandardName", 
    $sig.make(0xDD7, $asm01.TypeRef("System.String"), [], []), 
    function CurrentSystemTimeZone_get_StandardName () {
      return this.m_standardName;
    }
  );

  $.Method({Static:false, Public:true }, "GetDaylightChanges", 
    $sig.make(0xDFA, $asm01.TypeRef("System.Globalization.DaylightTime"), [$asm01.TypeRef("System.Int32")], []), 
    function CurrentSystemTimeZone_GetDaylightChanges (year) {
      var data = new JSIL.Variable(null);
      var names = new JSIL.Variable(null);
      var cachedDaylightChanges = null;
      if (!((year >= 1) && (year <= 9999))) {
        throw $sig.get(0xCA7, null, [$asm01.System.String, $asm01.System.String], []).Construct($T0B(), "year", JSIL.ConcatString(year, $T07().GetText(" is not in a range between 1 and 9999.", JSIL.Array.New($T08(), 0))));
      }
      var flag = new JSIL.Variable(false);
      if (year === $thisType.this_year) {
        var result = $thisType.this_year_dlt;
      } else {
        flag.value = false;
        try {
          $T0E().Enter((cachedDaylightChanges = this.m_CachedDaylightChanges), /* ref */ flag);
          var dlt = $T09().$Cast(this.m_CachedDaylightChanges.get_Item(year));
          if (dlt === null) {
            if (!$thisType.GetTimeZoneData(year, /* ref */ data, /* ref */ names)) {
              throw new ($T0F())($T07().GetText(JSIL.ConcatString("Can't get timezone data for ", year), JSIL.Array.New($T08(), 0)));
            }
            dlt = this.GetDaylightTimeFromData(data.value);
            this.m_CachedDaylightChanges.Add(year, dlt);
          }
          result = dlt;
        } finally {
          if (flag.value) {
            $T0E().Exit(cachedDaylightChanges);
          }
        }
      }
      return result;
    }
  );

  $.Method({Static:false, Public:false}, "GetDaylightTimeFromData", 
    $sig.make(0xE04, $asm01.TypeRef("System.Globalization.DaylightTime"), [$jsilcore.TypeRef("System.Array", [$asm01.TypeRef("System.Int64")])], []), 
    function CurrentSystemTimeZone_GetDaylightTimeFromData (data) {
      return new ($T09())(new ($T05())(data[0]), new ($T05())(data[1]), new ($T10())(data[3]));
    }
  );

  $.ExternalMethod({Static:true , Public:false}, "GetTimeZoneData", 
    $sig.make(0xDDD, $asm01.TypeRef("System.Boolean"), [
        $asm01.TypeRef("System.Int32"), $jsilcore.TypeRef("JSIL.Reference", [$jsilcore.TypeRef("System.Array", [$asm01.TypeRef("System.Int64")])]), 
        $jsilcore.TypeRef("JSIL.Reference", [$jsilcore.TypeRef("System.Array", [$asm01.TypeRef("System.String")])])
      ], [])
  );

  $.Method({Static:false, Public:true }, "GetUtcOffset", 
    $sig.make(0xDFF, $asm01.TypeRef("System.TimeSpan"), [$asm01.TypeRef("System.DateTime")], []), 
    function CurrentSystemTimeZone_GetUtcOffset (time) {
      if (this.IsDaylightSavingTime(time)) {
        var result = this.utcOffsetWithDLS.MemberwiseClone();
      } else {
        result = this.utcOffsetWithOutDLS.MemberwiseClone();
      }
      return result;
    }
  );

  $.Method({Static:false, Public:false}, "OnDeserialization", 
    $sig.make(0xE01, null, [$asm01.TypeRef("System.Globalization.DaylightTime")], []), 
    function CurrentSystemTimeZone_OnDeserialization (dlt) {
      var data = new JSIL.Variable(null);
      var names = new JSIL.Variable(null);
      if (dlt === null) {
        $thisType.this_year = $T05().get_Now().get_Year();
        if (!$thisType.GetTimeZoneData($thisType.this_year, /* ref */ data, /* ref */ names)) {
          throw new ($T0F())($T07().GetText(JSIL.ConcatString("Can't get timezone data for ", $thisType.this_year), JSIL.Array.New($T08(), 0)));
        }
        dlt = this.GetDaylightTimeFromData(data.value);
      } else {
        $thisType.this_year = dlt.get_Start().get_Year();
      }
      this.utcOffsetWithOutDLS = new ($T10())(this.m_ticksOffset);
      this.utcOffsetWithDLS = new ($T10())($T02().op_Addition(this.m_ticksOffset, dlt.get_Delta().get_Ticks()));
      $thisType.this_year_dlt = dlt;
    }
  );

  $.Field({Static:false, Public:false}, "m_standardName", $asm01.TypeRef("System.String")); 
  $.Field({Static:false, Public:false}, "m_daylightName", $asm01.TypeRef("System.String")); 
  $.Field({Static:false, Public:false}, "m_CachedDaylightChanges", $asm01.TypeRef("System.Collections.Hashtable")); 
  $.Field({Static:false, Public:false}, "m_ticksOffset", $asm01.TypeRef("System.Int64")); 
  $.Field({Static:false, Public:false}, "utcOffsetWithOutDLS", $asm01.TypeRef("System.TimeSpan")); 
  $.Field({Static:false, Public:false}, "utcOffsetWithDLS", $asm01.TypeRef("System.TimeSpan")); 
  $.Field({Static:true , Public:false}, "this_year", $asm01.TypeRef("System.Int32")); 
  $.Field({Static:true , Public:false}, "this_year_dlt", $asm01.TypeRef("System.Globalization.DaylightTime")); 
  $.Property({Static:false, Public:true , Virtual:true }, "DaylightName", $asm01.TypeRef("System.String"));

  $.Property({Static:false, Public:true , Virtual:true }, "StandardName", $asm01.TypeRef("System.String"));

  $.ImplementInterfaces($asm01.TypeRef("System.Runtime.Serialization.IDeserializationCallback"))
});

JSIL.MakeEnum(
  "System.CurrentSystemTimeZone/TimeZoneData", false, {
    DaylightSavingStartIdx: 0, 
    DaylightSavingEndIdx: 1, 
    UtcOffsetIdx: 2, 
    AdditionalDaylightOffsetIdx: 3
  }, false
);

JSIL.MakeEnum(
  "System.CurrentSystemTimeZone/TimeZoneNames", false, {
    StandardNameIdx: 0, 
    DaylightNameIdx: 1
  }, false
);

JSIL.MakeClass($asm01.TypeRef("System.InvalidOperationException"), "System.ObjectDisposedException", true, [], function ($) {
  var $thisType = $.publicInterface;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm01.System.String)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm01.System.InvalidOperationException)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm01.System.Locale)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm01.System.Object)) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize($asm01.System.Exception)) ();
  };

  $.Method({Static:false, Public:true }, ".ctor", 
    $sig.make(0xE71, null, [$asm01.TypeRef("System.String")], []), 
    function ObjectDisposedException__ctor (objectName) {
      $T01().prototype._ctor.call(this, $T02().GetText("The object was used after being disposed.", JSIL.Array.New($T03(), 0)));
      this.obj_name = objectName;
      this.msg = $T02().GetText("The object was used after being disposed.", JSIL.Array.New($T03(), 0));
    }
  );

  $.Method({Static:false, Public:true }, ".ctor", 
    $sig.make(0xE73, null, [$asm01.TypeRef("System.String"), $asm01.TypeRef("System.String")], []), 
    function ObjectDisposedException__ctor (objectName, message) {
      $T01().prototype._ctor.call(this, message);
      this.obj_name = objectName;
      this.msg = message;
    }
  );

  $.Method({Static:false, Public:true }, ".ctor", 
    $sig.make(0xE75, null, [$asm01.TypeRef("System.String"), $asm01.TypeRef("System.Exception")], []), 
    function ObjectDisposedException__ctor (message, innerException) {
      $sig.get(0xD80, null, [$asm01.System.String, $asm01.System.Exception], []).Call($T01().prototype, "_ctor", null, this, message, innerException);
    }
  );

  $.Method({Static:false, Public:true }, "get_Message", 
    $sig.make(0xE6B, $asm01.TypeRef("System.String"), [], []), 
    function ObjectDisposedException_get_Message () {
      return this.msg;
    }
  );

  $.Method({Static:false, Public:true }, "get_ObjectName", 
    $sig.make(0xE6F, $asm01.TypeRef("System.String"), [], []), 
    function ObjectDisposedException_get_ObjectName () {
      return this.obj_name;
    }
  );

  $.Field({Static:false, Public:false}, "obj_name", $asm01.TypeRef("System.String")); 
  $.Field({Static:false, Public:false}, "msg", $asm01.TypeRef("System.String")); 
  $.Property({Static:false, Public:true , Virtual:true }, "Message", $asm01.TypeRef("System.String"));

  $.Property({Static:false, Public:true }, "ObjectName", $asm01.TypeRef("System.String"));

})
  .Attribute($asm01.TypeRef("System.Runtime.InteropServices.ComVisibleAttribute"), function () { return [true]; });

JSIL.MakeClass($asm01.TypeRef("System.Attribute"), "System.Runtime.CompilerServices.IndexerNameAttribute", true, [], function ($) {
  var $thisType = $.publicInterface;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm01.System.String)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm01.System.Attribute)) ();
  };

  $.Method({Static:false, Public:true }, ".ctor", 
    $sig.make(0xE88, null, [$asm01.TypeRef("System.String")], []), 
    function IndexerNameAttribute__ctor (indexerName) {
      $T01().prototype._ctor.call(this);
    }
  );

})
  .Attribute($asm01.TypeRef("System.AttributeUsageAttribute"), function () { return [$asm01.System.AttributeTargets.Property]; })
  .Attribute($asm01.TypeRef("System.Runtime.InteropServices.ComVisibleAttribute"), function () { return [true]; });

JSIL.MakeClass($asm01.TypeRef("System.Object"), "System.Globalization.CompareInfo", true, [], function ($) {
  var $thisType = $.publicInterface;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm01.System.Object)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm01.System.Globalization.CultureInfo)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm01.System.Boolean)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm01.System.Threading.Monitor)) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize($asm01.System.Collections.Hashtable)) ();
  };
  var $T05 = function () {
    return ($T05 = JSIL.Memoize($asm01.Mono.Globalization.Unicode.SimpleCollator)) ();
  };
  var $T06 = function () {
    return ($T06 = JSIL.Memoize($asm01.System.String)) ();
  };
  var $T07 = function () {
    return ($T07 = JSIL.Memoize($asm01.System.Globalization.CompareOptions)) ();
  };
  var $T08 = function () {
    return ($T08 = JSIL.Memoize($asm01.System.ArgumentException)) ();
  };
  var $T09 = function () {
    return ($T09 = JSIL.Memoize($asm01.System.Int32)) ();
  };
  var $T0A = function () {
    return ($T0A = JSIL.Memoize($asm01.System.ArgumentOutOfRangeException)) ();
  };
  var $T0B = function () {
    return ($T0B = JSIL.Memoize($asm01.System.ArgumentNullException)) ();
  };
  var $T0C = function () {
    return ($T0C = JSIL.Memoize($asm01.System.Reflection.Assembly)) ();
  };
  var $T0D = function () {
    return ($T0D = JSIL.Memoize($asm01.System.Char)) ();
  };
  var $T0E = function () {
    return ($T0E = JSIL.Memoize($asm01.System.NotImplementedException)) ();
  };
  var $T0F = function () {
    return ($T0F = JSIL.Memoize($asm01.System.Void)) ();
  };

  $.Method({Static:false, Public:false}, ".ctor", 
    $sig.make(0x5D3, null, [], []), 
    function CompareInfo__ctor () {
    }
  );

  $.Method({Static:false, Public:false}, ".ctor", 
    $sig.make(0x5D4, null, [$asm01.TypeRef("System.Globalization.CultureInfo")], []), 
    function CompareInfo__ctor (ci) {
      var o = null;
      this.culture = ci.get_LCID();
      var flag = new JSIL.Variable(false);
      if ($thisType.get_UseManagedCollation()) {
        flag.value = false;
        try {
          $T03().Enter((o = $thisType.monitor), /* ref */ flag);
          if ($thisType.collators === null) {
            $thisType.collators = new ($T04())();
          }
          this.collator = $T05().$Cast($thisType.collators.get_Item(ci.get_LCID()));
          if (this.collator === null) {
            this.collator = new ($T05())(ci);
            $thisType.collators.set_Item(ci.get_LCID(), this.collator);
          }
        } finally {
          if (flag.value) {
            $T03().Exit(o);
          }
        }
      }
    }
  );

  $.Method({Static:false, Public:true }, "Compare", 
    $sig.make(0x5D7, $asm01.TypeRef("System.Int32"), [$asm01.TypeRef("System.String"), $asm01.TypeRef("System.String")], []), 
    function CompareInfo_Compare (string1, string2) {
      return this.Compare(string1, string2, $T07().None);
    }
  );

  $.Method({Static:false, Public:true }, "Compare", 
    $sig.make(0x5D8, $asm01.TypeRef("System.Int32"), [
        $asm01.TypeRef("System.String"), $asm01.TypeRef("System.String"), 
        $asm01.TypeRef("System.Globalization.CompareOptions")
      ], []), 
    function CompareInfo_Compare (string1, string2, options) {
      if ($T07().$Cast((options & 1879048223)) !== options) {
        throw new ($T08())("options");
      }
      if (string1 === null) {
        if (string2 === null) {
          var result = 0;
        } else {
          result = -1;
        }
      } else if (string2 === null) {
        result = 1;
      } else if (!((string1.length !== 0) || (string2.length !== 0))) {
        result = 0;
      } else {
        result = this.internal_compare_switch(
          string1, 
          0, 
          string1.length, 
          string2, 
          0, 
          string2.length, 
          options
        );
      }
      return result;
    }
  );

  $.Method({Static:false, Public:true }, "Compare", 
    $sig.make(0x5D9, $asm01.TypeRef("System.Int32"), [
        $asm01.TypeRef("System.String"), $asm01.TypeRef("System.Int32"), 
        $asm01.TypeRef("System.String"), $asm01.TypeRef("System.Int32")
      ], []), 
    function CompareInfo_Compare (string1, offset1, string2, offset2) {
      return this.Compare(
        string1, 
        offset1, 
        string2, 
        offset2, 
        $T07().None
      );
    }
  );

  $.Method({Static:false, Public:true }, "Compare", 
    $sig.make(0x5DA, $asm01.TypeRef("System.Int32"), [
        $asm01.TypeRef("System.String"), $asm01.TypeRef("System.Int32"), 
        $asm01.TypeRef("System.String"), $asm01.TypeRef("System.Int32"), 
        $asm01.TypeRef("System.Globalization.CompareOptions")
      ], []), 
    function CompareInfo_Compare (string1, offset1, string2, offset2, options) {
      if ($T07().$Cast((options & 1879048223)) !== options) {
        throw new ($T08())("options");
      }
      if (string1 === null) {
        if (string2 === null) {
          var result = 0;
        } else {
          result = -1;
        }
      } else if (string2 === null) {
        result = 1;
      } else if (!(((string1.length !== 0) && 
            (offset1 !== string1.length)) || ((string2.length !== 0) && 
            (offset2 !== string2.length)))) {
        result = 0;
      } else {
        if (!((offset1 >= 0) && (offset2 >= 0))) {
          throw new ($T0A())("Offsets must not be less than zero");
        }
        if (offset1 > string1.length) {
          throw new ($T0A())("Offset1 is greater than or equal to the length of string1");
        }
        if (offset2 > string2.length) {
          throw new ($T0A())("Offset2 is greater than or equal to the length of string2");
        }
        result = this.internal_compare_switch(
          string1, 
          offset1, 
          ((string1.length - offset1) | 0), 
          string2, 
          offset2, 
          ((string2.length - offset2) | 0), 
          options
        );
      }
      return result;
    }
  );

  $.Method({Static:false, Public:true }, "Compare", 
    $sig.make(0x5DB, $asm01.TypeRef("System.Int32"), [
        $asm01.TypeRef("System.String"), $asm01.TypeRef("System.Int32"), 
        $asm01.TypeRef("System.Int32"), $asm01.TypeRef("System.String"), 
        $asm01.TypeRef("System.Int32"), $asm01.TypeRef("System.Int32")
      ], []), 
    function CompareInfo_Compare (string1, offset1, length1, string2, offset2, length2) {
      return this.Compare(
        string1, 
        offset1, 
        length1, 
        string2, 
        offset2, 
        length2, 
        $T07().None
      );
    }
  );

  $.Method({Static:false, Public:true }, "Compare", 
    $sig.make(0x5DC, $asm01.TypeRef("System.Int32"), [
        $asm01.TypeRef("System.String"), $asm01.TypeRef("System.Int32"), 
        $asm01.TypeRef("System.Int32"), $asm01.TypeRef("System.String"), 
        $asm01.TypeRef("System.Int32"), $asm01.TypeRef("System.Int32"), 
        $asm01.TypeRef("System.Globalization.CompareOptions")
      ], []), 
    function CompareInfo_Compare (string1, offset1, length1, string2, offset2, length2, options) {
      if ($T07().$Cast((options & 1879048223)) !== options) {
        throw new ($T08())("options");
      }
      if (string1 === null) {
        if (string2 === null) {
          var result = 0;
        } else {
          result = -1;
        }
      } else if (string2 === null) {
        result = 1;
      } else if (!(((string1.length !== 0) && 
            (offset1 !== string1.length) && 
            (length1 !== 0)) || (!((string2.length === 0) || 
              (offset2 === string2.length)) && 
            (length2 !== 0)))) {
        result = 0;
      } else {
        if (!(!((offset1 < 0) || 
              (length1 < 0) || 
              (offset2 < 0)) && (length2 >= 0))) {
          throw new ($T0A())("Offsets and lengths must not be less than zero");
        }
        if (offset1 > string1.length) {
          throw new ($T0A())("Offset1 is greater than or equal to the length of string1");
        }
        if (offset2 > string2.length) {
          throw new ($T0A())("Offset2 is greater than or equal to the length of string2");
        }
        if (length1 > ((string1.length - offset1) | 0)) {
          throw new ($T0A())("Length1 is greater than the number of characters from offset1 to the end of string1");
        }
        if (length2 > ((string2.length - offset2) | 0)) {
          throw new ($T0A())("Length2 is greater than the number of characters from offset2 to the end of string2");
        }
        result = this.internal_compare_switch(
          string1, 
          offset1, 
          length1, 
          string2, 
          offset2, 
          length2, 
          options
        );
      }
      return result;
    }
  );

  $.Method({Static:false, Public:true }, "Object.Equals", 
    $sig.make(0x5DD, $asm01.TypeRef("System.Boolean"), [$asm01.TypeRef("System.Object")], []), 
    function CompareInfo_Object_Equals (value) {
      var other = $thisType.$As(value);
      return ((other !== null) && (other.culture === this.culture));
    }
  );

  $.Method({Static:false, Public:false}, "Finalize", 
    $sig.make(0x5D5, null, [], []), 
    function CompareInfo_Finalize () {
    }
  );

  $.Method({Static:false, Public:true }, "get_LCID", 
    $sig.make(0x5D1, $asm01.TypeRef("System.Int32"), [], []), 
    function CompareInfo_get_LCID () {
      return this.culture;
    }
  );

  $.Method({Static:false, Public:true }, "get_Name", 
    $sig.make(0x5D2, $asm01.TypeRef("System.String"), [], []), 
    function CompareInfo_get_Name () {
      return this.icu_name;
    }
  );

  $.Method({Static:true , Public:false}, "get_UseManagedCollation", 
    $sig.make(0x5D0, $asm01.TypeRef("System.Boolean"), [], []), 
    function CompareInfo_get_UseManagedCollation () {
      return true;
    }
  );

  $.Method({Static:true , Public:true }, "GetCompareInfo", 
    $sig.make(0x5DE, $.Type, [$asm01.TypeRef("System.Int32")], []), 
    function CompareInfo_GetCompareInfo (culture) {
      return $sig.get(0x31F, null, [$asm01.System.Int32], []).Construct($T01(), culture).get_CompareInfo();
    }
  );

  $.Method({Static:true , Public:true }, "GetCompareInfo", 
    $sig.make(0x5DF, $.Type, [$asm01.TypeRef("System.String")], []), 
    function CompareInfo_GetCompareInfo (name) {
      if (name === null) {
        throw new ($T0B())("name");
      }
      return $sig.get(0x325, null, [$asm01.System.String], []).Construct($T01(), name).get_CompareInfo();
    }
  );

  $.Method({Static:true , Public:true }, "GetCompareInfo", 
    $sig.make(0x5E0, $.Type, [$asm01.TypeRef("System.Int32"), $asm01.TypeRef("System.Reflection.Assembly")], []), 
    function CompareInfo_GetCompareInfo (culture, assembly) {
      if (assembly === null) {
        throw new ($T0B())("assembly");
      }
      return $sig.get(0x5DE, $thisType, [$asm01.System.Int32], []).CallStatic($thisType, "GetCompareInfo", null, culture);
    }
  );

  $.Method({Static:true , Public:true }, "GetCompareInfo", 
    $sig.make(0x5E1, $.Type, [$asm01.TypeRef("System.String"), $asm01.TypeRef("System.Reflection.Assembly")], []), 
    function CompareInfo_GetCompareInfo (name, assembly) {
      if (name === null) {
        throw new ($T0B())("name");
      }
      if (assembly === null) {
        throw new ($T0B())("assembly");
      }
      return $sig.get(0x5DF, $thisType, [$asm01.System.String], []).CallStatic($thisType, "GetCompareInfo", null, name);
    }
  );

  $.Method({Static:false, Public:true }, "GetHashCode", 
    $sig.make(0x5E2, $asm01.TypeRef("System.Int32"), [], []), 
    function CompareInfo_GetHashCode () {
      return this.get_LCID();
    }
  );

  $.Method({Static:false, Public:true }, "GetSortKey", 
    $sig.make(0x5E3, $asm01.TypeRef("System.Globalization.SortKey"), [$asm01.TypeRef("System.String")], []), 
    function CompareInfo_GetSortKey (source) {
      return this.GetSortKey(source, $T07().None);
    }
  );

  $.Method({Static:false, Public:true }, "GetSortKey", 
    $sig.make(0x5E4, $asm01.TypeRef("System.Globalization.SortKey"), [$asm01.TypeRef("System.String"), $asm01.TypeRef("System.Globalization.CompareOptions")], []), 
    function CompareInfo_GetSortKey (source, options) {
      if (!((options === $T07().OrdinalIgnoreCase) || (options === $T07().Ordinal))) {
        return this.collator.GetSortKey(source, options);
      }
      throw $sig.get(0x818, null, [$asm01.System.String, $asm01.System.String], []).Construct($T08(), "Now allowed CompareOptions.", "options");
    }
  );

  $.Method({Static:false, Public:true }, "IndexOf", 
    $sig.make(0x5E5, $asm01.TypeRef("System.Int32"), [$asm01.TypeRef("System.String"), $asm01.TypeRef("System.Char")], []), 
    function CompareInfo_IndexOf (source, value) {
      return $sig.get(0x5F0, $asm01.System.Int32, [
          $asm01.System.String, $asm01.System.Char, 
          $asm01.System.Int32, $asm01.System.Int32, 
          $asm01.System.Globalization.CompareOptions
        ], []).CallVirtual("IndexOf", null, this, 
        source, 
        value, 
        0, 
        source.length, 
        $T07().None
      );
    }
  );

  $.Method({Static:false, Public:true }, "IndexOf", 
    $sig.make(0x5E6, $asm01.TypeRef("System.Int32"), [$asm01.TypeRef("System.String"), $asm01.TypeRef("System.String")], []), 
    function CompareInfo_IndexOf (source, value) {
      return $sig.get(0x5F2, $asm01.System.Int32, [
          $asm01.System.String, $asm01.System.String, 
          $asm01.System.Int32, $asm01.System.Int32, 
          $asm01.System.Globalization.CompareOptions
        ], []).CallVirtual("IndexOf", null, this, 
        source, 
        value, 
        0, 
        source.length, 
        $T07().None
      );
    }
  );

  $.Method({Static:false, Public:true }, "IndexOf", 
    $sig.make(0x5E7, $asm01.TypeRef("System.Int32"), [
        $asm01.TypeRef("System.String"), $asm01.TypeRef("System.Char"), 
        $asm01.TypeRef("System.Globalization.CompareOptions")
      ], []), 
    function CompareInfo_IndexOf (source, value, options) {
      return $sig.get(0x5F0, $asm01.System.Int32, [
          $asm01.System.String, $asm01.System.Char, 
          $asm01.System.Int32, $asm01.System.Int32, 
          $asm01.System.Globalization.CompareOptions
        ], []).CallVirtual("IndexOf", null, this, 
        source, 
        value, 
        0, 
        source.length, 
        options
      );
    }
  );

  $.Method({Static:false, Public:true }, "IndexOf", 
    $sig.make(0x5E8, $asm01.TypeRef("System.Int32"), [
        $asm01.TypeRef("System.String"), $asm01.TypeRef("System.Char"), 
        $asm01.TypeRef("System.Int32")
      ], []), 
    function CompareInfo_IndexOf (source, value, startIndex) {
      return $sig.get(0x5F0, $asm01.System.Int32, [
          $asm01.System.String, $asm01.System.Char, 
          $asm01.System.Int32, $asm01.System.Int32, 
          $asm01.System.Globalization.CompareOptions
        ], []).CallVirtual("IndexOf", null, this, 
        source, 
        value, 
        startIndex, 
        ((source.length - startIndex) | 0), 
        $T07().None
      );
    }
  );

  $.Method({Static:false, Public:true }, "IndexOf", 
    $sig.make(0x5E9, $asm01.TypeRef("System.Int32"), [
        $asm01.TypeRef("System.String"), $asm01.TypeRef("System.String"), 
        $asm01.TypeRef("System.Globalization.CompareOptions")
      ], []), 
    function CompareInfo_IndexOf (source, value, options) {
      return $sig.get(0x5F2, $asm01.System.Int32, [
          $asm01.System.String, $asm01.System.String, 
          $asm01.System.Int32, $asm01.System.Int32, 
          $asm01.System.Globalization.CompareOptions
        ], []).CallVirtual("IndexOf", null, this, 
        source, 
        value, 
        0, 
        source.length, 
        options
      );
    }
  );

  $.Method({Static:false, Public:true }, "IndexOf", 
    $sig.make(0x5EA, $asm01.TypeRef("System.Int32"), [
        $asm01.TypeRef("System.String"), $asm01.TypeRef("System.String"), 
        $asm01.TypeRef("System.Int32")
      ], []), 
    function CompareInfo_IndexOf (source, value, startIndex) {
      return $sig.get(0x5F2, $asm01.System.Int32, [
          $asm01.System.String, $asm01.System.String, 
          $asm01.System.Int32, $asm01.System.Int32, 
          $asm01.System.Globalization.CompareOptions
        ], []).CallVirtual("IndexOf", null, this, 
        source, 
        value, 
        startIndex, 
        ((source.length - startIndex) | 0), 
        $T07().None
      );
    }
  );

  $.Method({Static:false, Public:true }, "IndexOf", 
    $sig.make(0x5EB, $asm01.TypeRef("System.Int32"), [
        $asm01.TypeRef("System.String"), $asm01.TypeRef("System.Char"), 
        $asm01.TypeRef("System.Int32"), $asm01.TypeRef("System.Globalization.CompareOptions")
      ], []), 
    function CompareInfo_IndexOf (source, value, startIndex, options) {
      return $sig.get(0x5F0, $asm01.System.Int32, [
          $asm01.System.String, $asm01.System.Char, 
          $asm01.System.Int32, $asm01.System.Int32, 
          $asm01.System.Globalization.CompareOptions
        ], []).CallVirtual("IndexOf", null, this, 
        source, 
        value, 
        startIndex, 
        ((source.length - startIndex) | 0), 
        options
      );
    }
  );

  $.Method({Static:false, Public:true }, "IndexOf", 
    $sig.make(0x5EC, $asm01.TypeRef("System.Int32"), [
        $asm01.TypeRef("System.String"), $asm01.TypeRef("System.Char"), 
        $asm01.TypeRef("System.Int32"), $asm01.TypeRef("System.Int32")
      ], []), 
    function CompareInfo_IndexOf (source, value, startIndex, count) {
      return $sig.get(0x5F0, $asm01.System.Int32, [
          $asm01.System.String, $asm01.System.Char, 
          $asm01.System.Int32, $asm01.System.Int32, 
          $asm01.System.Globalization.CompareOptions
        ], []).CallVirtual("IndexOf", null, this, 
        source, 
        value, 
        startIndex, 
        count, 
        $T07().None
      );
    }
  );

  $.Method({Static:false, Public:true }, "IndexOf", 
    $sig.make(0x5ED, $asm01.TypeRef("System.Int32"), [
        $asm01.TypeRef("System.String"), $asm01.TypeRef("System.String"), 
        $asm01.TypeRef("System.Int32"), $asm01.TypeRef("System.Globalization.CompareOptions")
      ], []), 
    function CompareInfo_IndexOf (source, value, startIndex, options) {
      return $sig.get(0x5F2, $asm01.System.Int32, [
          $asm01.System.String, $asm01.System.String, 
          $asm01.System.Int32, $asm01.System.Int32, 
          $asm01.System.Globalization.CompareOptions
        ], []).CallVirtual("IndexOf", null, this, 
        source, 
        value, 
        startIndex, 
        ((source.length - startIndex) | 0), 
        options
      );
    }
  );

  $.Method({Static:false, Public:true }, "IndexOf", 
    $sig.make(0x5EE, $asm01.TypeRef("System.Int32"), [
        $asm01.TypeRef("System.String"), $asm01.TypeRef("System.String"), 
        $asm01.TypeRef("System.Int32"), $asm01.TypeRef("System.Int32")
      ], []), 
    function CompareInfo_IndexOf (source, value, startIndex, count) {
      return $sig.get(0x5F2, $asm01.System.Int32, [
          $asm01.System.String, $asm01.System.String, 
          $asm01.System.Int32, $asm01.System.Int32, 
          $asm01.System.Globalization.CompareOptions
        ], []).CallVirtual("IndexOf", null, this, 
        source, 
        value, 
        startIndex, 
        count, 
        $T07().None
      );
    }
  );

  $.Method({Static:false, Public:true }, "IndexOf", 
    $sig.make(0x5F0, $asm01.TypeRef("System.Int32"), [
        $asm01.TypeRef("System.String"), $asm01.TypeRef("System.Char"), 
        $asm01.TypeRef("System.Int32"), $asm01.TypeRef("System.Int32"), 
        $asm01.TypeRef("System.Globalization.CompareOptions")
      ], []), 
    function CompareInfo_IndexOf (source, value, startIndex, count, options) {
      if (source === null) {
        throw new ($T0B())("source");
      }
      if (startIndex < 0) {
        throw new ($T0A())("startIndex");
      }
      if (!((count >= 0) && (((source.length - startIndex) | 0) >= count))) {
        throw new ($T0A())("count");
      }
      if ($T07().$Cast((options & 1342177311)) !== options) {
        throw new ($T08())("options");
      }
      if (count === 0) {
        var result = -1;
      } else if ($T07().$Cast((options & $T07().Ordinal)) !== $T07().None) {

        for (var pos = startIndex; pos < ((startIndex + count) | 0); ++pos) {
          if (source[pos].charCodeAt(0) === value.charCodeAt(0)) {
            result = pos;
            return result;
          }
        }
        result = -1;
      } else {
        result = $sig.get(0x5EF, $asm01.System.Int32, [
            $asm01.System.String, $asm01.System.Int32, 
            $asm01.System.Int32, $asm01.System.Char, 
            $asm01.System.Globalization.CompareOptions, $asm01.System.Boolean
          ], []).CallVirtual("internal_index_switch", null, this, 
          source, 
          startIndex, 
          count, 
          value, 
          options, 
          true
        );
      }
      return result;
    }
  );

  $.Method({Static:false, Public:true }, "IndexOf", 
    $sig.make(0x5F2, $asm01.TypeRef("System.Int32"), [
        $asm01.TypeRef("System.String"), $asm01.TypeRef("System.String"), 
        $asm01.TypeRef("System.Int32"), $asm01.TypeRef("System.Int32"), 
        $asm01.TypeRef("System.Globalization.CompareOptions")
      ], []), 
    function CompareInfo_IndexOf (source, value, startIndex, count, options) {
      if (source === null) {
        throw new ($T0B())("source");
      }
      if (value === null) {
        throw new ($T0B())("value");
      }
      if (startIndex < 0) {
        throw new ($T0A())("startIndex");
      }
      if (!((count >= 0) && (((source.length - startIndex) | 0) >= count))) {
        throw new ($T0A())("count");
      }
      if ($T07().$Cast((options & 1342177311)) !== options) {
        throw new ($T08())("options");
      }
      if (value.length === 0) {
        var result = startIndex;
      } else if (count === 0) {
        result = -1;
      } else {
        result = $sig.get(0x5F1, $asm01.System.Int32, [
            $asm01.System.String, $asm01.System.Int32, 
            $asm01.System.Int32, $asm01.System.String, 
            $asm01.System.Globalization.CompareOptions, $asm01.System.Boolean
          ], []).CallVirtual("internal_index_switch", null, this, 
          source, 
          startIndex, 
          count, 
          value, 
          options, 
          true
        );
      }
      return result;
    }
  );

  $.Method({Static:false, Public:false}, "internal_compare_switch", 
    $sig.make(0x5D6, $asm01.TypeRef("System.Int32"), [
        $asm01.TypeRef("System.String"), $asm01.TypeRef("System.Int32"), 
        $asm01.TypeRef("System.Int32"), $asm01.TypeRef("System.String"), 
        $asm01.TypeRef("System.Int32"), $asm01.TypeRef("System.Int32"), 
        $asm01.TypeRef("System.Globalization.CompareOptions")
      ], []), 
    function CompareInfo_internal_compare_switch (str1, offset1, length1, str2, offset2, length2, options) {
      return this.collator.Compare(
        str1, 
        offset1, 
        length1, 
        str2, 
        offset2, 
        length2, 
        options
      );
    }
  );

  $.Method({Static:false, Public:false}, "internal_index_switch", 
    $sig.make(0x5EF, $asm01.TypeRef("System.Int32"), [
        $asm01.TypeRef("System.String"), $asm01.TypeRef("System.Int32"), 
        $asm01.TypeRef("System.Int32"), $asm01.TypeRef("System.Char"), 
        $asm01.TypeRef("System.Globalization.CompareOptions"), $asm01.TypeRef("System.Boolean")
      ], []), 
    function CompareInfo_internal_index_switch (s, sindex, count, c, opt, first) {
      return (first ? $sig.get(0x712, $asm01.System.Int32, [
            $asm01.System.String, $asm01.System.Char, 
            $asm01.System.Int32, $asm01.System.Int32, 
            $asm01.System.Globalization.CompareOptions
          ], []).CallVirtual("IndexOf", null, this.collator, 
          s, 
          c, 
          sindex, 
          count, 
          opt
        ) : $sig.get(0x713, $asm01.System.Int32, [
            $asm01.System.String, $asm01.System.Char, 
            $asm01.System.Int32, $asm01.System.Int32, 
            $asm01.System.Globalization.CompareOptions
          ], []).CallVirtual("LastIndexOf", null, this.collator, 
          s, 
          c, 
          sindex, 
          count, 
          opt
        ));
    }
  );

  $.Method({Static:false, Public:false}, "internal_index_switch", 
    $sig.make(0x5F1, $asm01.TypeRef("System.Int32"), [
        $asm01.TypeRef("System.String"), $asm01.TypeRef("System.Int32"), 
        $asm01.TypeRef("System.Int32"), $asm01.TypeRef("System.String"), 
        $asm01.TypeRef("System.Globalization.CompareOptions"), $asm01.TypeRef("System.Boolean")
      ], []), 
    function CompareInfo_internal_index_switch (s1, sindex, count, s2, opt, first) {
      return (first ? $sig.get(0x715, $asm01.System.Int32, [
            $asm01.System.String, $asm01.System.String, 
            $asm01.System.Int32, $asm01.System.Int32, 
            $asm01.System.Globalization.CompareOptions
          ], []).CallVirtual("IndexOf", null, this.collator, 
          s1, 
          s2, 
          sindex, 
          count, 
          opt
        ) : $sig.get(0x714, $asm01.System.Int32, [
            $asm01.System.String, $asm01.System.String, 
            $asm01.System.Int32, $asm01.System.Int32, 
            $asm01.System.Globalization.CompareOptions
          ], []).CallVirtual("LastIndexOf", null, this.collator, 
          s1, 
          s2, 
          sindex, 
          count, 
          opt
        ));
    }
  );

  $.Method({Static:false, Public:true }, "IsPrefix", 
    $sig.make(0x5F3, $asm01.TypeRef("System.Boolean"), [$asm01.TypeRef("System.String"), $asm01.TypeRef("System.String")], []), 
    function CompareInfo_IsPrefix (source, prefix) {
      return this.IsPrefix(source, prefix, $T07().None);
    }
  );

  $.Method({Static:false, Public:true }, "IsPrefix", 
    $sig.make(0x5F4, $asm01.TypeRef("System.Boolean"), [
        $asm01.TypeRef("System.String"), $asm01.TypeRef("System.String"), 
        $asm01.TypeRef("System.Globalization.CompareOptions")
      ], []), 
    function CompareInfo_IsPrefix (source, prefix, options) {
      if (source === null) {
        throw new ($T0B())("source");
      }
      if (prefix === null) {
        throw new ($T0B())("prefix");
      }
      if ($T07().$Cast((options & 1342177311)) !== options) {
        throw new ($T08())("options");
      }
      if ($thisType.get_UseManagedCollation()) {
        var result = this.collator.IsPrefix(source, prefix, options);
      } else {
        result = ((source.length >= prefix.length) && 
          (this.Compare(
              source, 
              0, 
              prefix.length, 
              prefix, 
              0, 
              prefix.length, 
              options
            ) === 0));
      }
      return result;
    }
  );

  $.Method({Static:true , Public:true }, "IsSortable", 
    $sig.make(0x603, $asm01.TypeRef("System.Boolean"), [$asm01.TypeRef("System.Char")], []), 
    function CompareInfo_IsSortable (ch) {
      throw new ($T0E())();
    }
  )
    .Attribute($asm01.TypeRef("System.Runtime.InteropServices.ComVisibleAttribute"), function () { return [false]; });

  $.Method({Static:true , Public:true }, "IsSortable", 
    $sig.make(0x604, $asm01.TypeRef("System.Boolean"), [$asm01.TypeRef("System.String")], []), 
    function CompareInfo_IsSortable (text) {
      throw new ($T0E())();
    }
  )
    .Attribute($asm01.TypeRef("System.Runtime.InteropServices.ComVisibleAttribute"), function () { return [false]; });

  $.Method({Static:false, Public:true }, "IsSuffix", 
    $sig.make(0x5F5, $asm01.TypeRef("System.Boolean"), [$asm01.TypeRef("System.String"), $asm01.TypeRef("System.String")], []), 
    function CompareInfo_IsSuffix (source, suffix) {
      return this.IsSuffix(source, suffix, $T07().None);
    }
  );

  $.Method({Static:false, Public:true }, "IsSuffix", 
    $sig.make(0x5F6, $asm01.TypeRef("System.Boolean"), [
        $asm01.TypeRef("System.String"), $asm01.TypeRef("System.String"), 
        $asm01.TypeRef("System.Globalization.CompareOptions")
      ], []), 
    function CompareInfo_IsSuffix (source, suffix, options) {
      if (source === null) {
        throw new ($T0B())("source");
      }
      if (suffix === null) {
        throw new ($T0B())("suffix");
      }
      if ($T07().$Cast((options & 1342177311)) !== options) {
        throw new ($T08())("options");
      }
      if ($thisType.get_UseManagedCollation()) {
        var result = this.collator.IsSuffix(source, suffix, options);
      } else {
        result = ((source.length >= suffix.length) && 
          (this.Compare(
              source, 
              ((source.length - suffix.length) | 0), 
              suffix.length, 
              suffix, 
              0, 
              suffix.length, 
              options
            ) === 0));
      }
      return result;
    }
  );

  $.Method({Static:false, Public:true }, "LastIndexOf", 
    $sig.make(0x5F7, $asm01.TypeRef("System.Int32"), [$asm01.TypeRef("System.String"), $asm01.TypeRef("System.Char")], []), 
    function CompareInfo_LastIndexOf (source, value) {
      return $sig.get(0x601, $asm01.System.Int32, [
          $asm01.System.String, $asm01.System.Char, 
          $asm01.System.Int32, $asm01.System.Int32, 
          $asm01.System.Globalization.CompareOptions
        ], []).CallVirtual("LastIndexOf", null, this, 
        source, 
        value, 
        ((source.length - 1) | 0), 
        source.length, 
        $T07().None
      );
    }
  );

  $.Method({Static:false, Public:true }, "LastIndexOf", 
    $sig.make(0x5F8, $asm01.TypeRef("System.Int32"), [$asm01.TypeRef("System.String"), $asm01.TypeRef("System.String")], []), 
    function CompareInfo_LastIndexOf (source, value) {
      return $sig.get(0x602, $asm01.System.Int32, [
          $asm01.System.String, $asm01.System.String, 
          $asm01.System.Int32, $asm01.System.Int32, 
          $asm01.System.Globalization.CompareOptions
        ], []).CallVirtual("LastIndexOf", null, this, 
        source, 
        value, 
        ((source.length - 1) | 0), 
        source.length, 
        $T07().None
      );
    }
  );

  $.Method({Static:false, Public:true }, "LastIndexOf", 
    $sig.make(0x5F9, $asm01.TypeRef("System.Int32"), [
        $asm01.TypeRef("System.String"), $asm01.TypeRef("System.Char"), 
        $asm01.TypeRef("System.Globalization.CompareOptions")
      ], []), 
    function CompareInfo_LastIndexOf (source, value, options) {
      return $sig.get(0x601, $asm01.System.Int32, [
          $asm01.System.String, $asm01.System.Char, 
          $asm01.System.Int32, $asm01.System.Int32, 
          $asm01.System.Globalization.CompareOptions
        ], []).CallVirtual("LastIndexOf", null, this, 
        source, 
        value, 
        ((source.length - 1) | 0), 
        source.length, 
        options
      );
    }
  );

  $.Method({Static:false, Public:true }, "LastIndexOf", 
    $sig.make(0x5FA, $asm01.TypeRef("System.Int32"), [
        $asm01.TypeRef("System.String"), $asm01.TypeRef("System.Char"), 
        $asm01.TypeRef("System.Int32")
      ], []), 
    function CompareInfo_LastIndexOf (source, value, startIndex) {
      return $sig.get(0x601, $asm01.System.Int32, [
          $asm01.System.String, $asm01.System.Char, 
          $asm01.System.Int32, $asm01.System.Int32, 
          $asm01.System.Globalization.CompareOptions
        ], []).CallVirtual("LastIndexOf", null, this, 
        source, 
        value, 
        startIndex, 
        ((startIndex + 1) | 0), 
        $T07().None
      );
    }
  );

  $.Method({Static:false, Public:true }, "LastIndexOf", 
    $sig.make(0x5FB, $asm01.TypeRef("System.Int32"), [
        $asm01.TypeRef("System.String"), $asm01.TypeRef("System.String"), 
        $asm01.TypeRef("System.Globalization.CompareOptions")
      ], []), 
    function CompareInfo_LastIndexOf (source, value, options) {
      return $sig.get(0x602, $asm01.System.Int32, [
          $asm01.System.String, $asm01.System.String, 
          $asm01.System.Int32, $asm01.System.Int32, 
          $asm01.System.Globalization.CompareOptions
        ], []).CallVirtual("LastIndexOf", null, this, 
        source, 
        value, 
        ((source.length - 1) | 0), 
        source.length, 
        options
      );
    }
  );

  $.Method({Static:false, Public:true }, "LastIndexOf", 
    $sig.make(0x5FC, $asm01.TypeRef("System.Int32"), [
        $asm01.TypeRef("System.String"), $asm01.TypeRef("System.String"), 
        $asm01.TypeRef("System.Int32")
      ], []), 
    function CompareInfo_LastIndexOf (source, value, startIndex) {
      return $sig.get(0x602, $asm01.System.Int32, [
          $asm01.System.String, $asm01.System.String, 
          $asm01.System.Int32, $asm01.System.Int32, 
          $asm01.System.Globalization.CompareOptions
        ], []).CallVirtual("LastIndexOf", null, this, 
        source, 
        value, 
        startIndex, 
        ((startIndex + 1) | 0), 
        $T07().None
      );
    }
  );

  $.Method({Static:false, Public:true }, "LastIndexOf", 
    $sig.make(0x5FD, $asm01.TypeRef("System.Int32"), [
        $asm01.TypeRef("System.String"), $asm01.TypeRef("System.Char"), 
        $asm01.TypeRef("System.Int32"), $asm01.TypeRef("System.Globalization.CompareOptions")
      ], []), 
    function CompareInfo_LastIndexOf (source, value, startIndex, options) {
      return $sig.get(0x601, $asm01.System.Int32, [
          $asm01.System.String, $asm01.System.Char, 
          $asm01.System.Int32, $asm01.System.Int32, 
          $asm01.System.Globalization.CompareOptions
        ], []).CallVirtual("LastIndexOf", null, this, 
        source, 
        value, 
        startIndex, 
        ((startIndex + 1) | 0), 
        options
      );
    }
  );

  $.Method({Static:false, Public:true }, "LastIndexOf", 
    $sig.make(0x5FE, $asm01.TypeRef("System.Int32"), [
        $asm01.TypeRef("System.String"), $asm01.TypeRef("System.Char"), 
        $asm01.TypeRef("System.Int32"), $asm01.TypeRef("System.Int32")
      ], []), 
    function CompareInfo_LastIndexOf (source, value, startIndex, count) {
      return $sig.get(0x601, $asm01.System.Int32, [
          $asm01.System.String, $asm01.System.Char, 
          $asm01.System.Int32, $asm01.System.Int32, 
          $asm01.System.Globalization.CompareOptions
        ], []).CallVirtual("LastIndexOf", null, this, 
        source, 
        value, 
        startIndex, 
        count, 
        $T07().None
      );
    }
  );

  $.Method({Static:false, Public:true }, "LastIndexOf", 
    $sig.make(0x5FF, $asm01.TypeRef("System.Int32"), [
        $asm01.TypeRef("System.String"), $asm01.TypeRef("System.String"), 
        $asm01.TypeRef("System.Int32"), $asm01.TypeRef("System.Globalization.CompareOptions")
      ], []), 
    function CompareInfo_LastIndexOf (source, value, startIndex, options) {
      return $sig.get(0x602, $asm01.System.Int32, [
          $asm01.System.String, $asm01.System.String, 
          $asm01.System.Int32, $asm01.System.Int32, 
          $asm01.System.Globalization.CompareOptions
        ], []).CallVirtual("LastIndexOf", null, this, 
        source, 
        value, 
        startIndex, 
        ((startIndex + 1) | 0), 
        options
      );
    }
  );

  $.Method({Static:false, Public:true }, "LastIndexOf", 
    $sig.make(0x600, $asm01.TypeRef("System.Int32"), [
        $asm01.TypeRef("System.String"), $asm01.TypeRef("System.String"), 
        $asm01.TypeRef("System.Int32"), $asm01.TypeRef("System.Int32")
      ], []), 
    function CompareInfo_LastIndexOf (source, value, startIndex, count) {
      return $sig.get(0x602, $asm01.System.Int32, [
          $asm01.System.String, $asm01.System.String, 
          $asm01.System.Int32, $asm01.System.Int32, 
          $asm01.System.Globalization.CompareOptions
        ], []).CallVirtual("LastIndexOf", null, this, 
        source, 
        value, 
        startIndex, 
        count, 
        $T07().None
      );
    }
  );

  $.Method({Static:false, Public:true }, "LastIndexOf", 
    $sig.make(0x601, $asm01.TypeRef("System.Int32"), [
        $asm01.TypeRef("System.String"), $asm01.TypeRef("System.Char"), 
        $asm01.TypeRef("System.Int32"), $asm01.TypeRef("System.Int32"), 
        $asm01.TypeRef("System.Globalization.CompareOptions")
      ], []), 
    function CompareInfo_LastIndexOf (source, value, startIndex, count, options) {
      if (source === null) {
        throw new ($T0B())("source");
      }
      if (startIndex < 0) {
        throw new ($T0A())("startIndex");
      }
      if (!((count >= 0) && (((startIndex - count) | 0) >= -1))) {
        throw new ($T0A())("count");
      }
      if ($T07().$Cast((options & 1342177311)) !== options) {
        throw new ($T08())("options");
      }
      if (count === 0) {
        var result = -1;
      } else if ($T07().$Cast((options & $T07().Ordinal)) !== $T07().None) {

        for (var pos = startIndex; pos > ((startIndex - count) | 0); --pos) {
          if (source[pos].charCodeAt(0) === value.charCodeAt(0)) {
            result = pos;
            return result;
          }
        }
        result = -1;
      } else {
        result = $sig.get(0x5EF, $asm01.System.Int32, [
            $asm01.System.String, $asm01.System.Int32, 
            $asm01.System.Int32, $asm01.System.Char, 
            $asm01.System.Globalization.CompareOptions, $asm01.System.Boolean
          ], []).CallVirtual("internal_index_switch", null, this, 
          source, 
          startIndex, 
          count, 
          value, 
          options, 
          false
        );
      }
      return result;
    }
  );

  $.Method({Static:false, Public:true }, "LastIndexOf", 
    $sig.make(0x602, $asm01.TypeRef("System.Int32"), [
        $asm01.TypeRef("System.String"), $asm01.TypeRef("System.String"), 
        $asm01.TypeRef("System.Int32"), $asm01.TypeRef("System.Int32"), 
        $asm01.TypeRef("System.Globalization.CompareOptions")
      ], []), 
    function CompareInfo_LastIndexOf (source, value, startIndex, count, options) {
      if (source === null) {
        throw new ($T0B())("source");
      }
      if (value === null) {
        throw new ($T0B())("value");
      }
      if (startIndex < 0) {
        throw new ($T0A())("startIndex");
      }
      if (!((count >= 0) && (((startIndex - count) | 0) >= -1))) {
        throw new ($T0A())("count");
      }
      if ($T07().$Cast((options & 1342177311)) !== options) {
        throw new ($T08())("options");
      }
      if (count === 0) {
        var result = -1;
      } else {
        var valuelen = value.length;
        if (valuelen === 0) {
          result = startIndex;
        } else {
          result = $sig.get(0x5F1, $asm01.System.Int32, [
              $asm01.System.String, $asm01.System.Int32, 
              $asm01.System.Int32, $asm01.System.String, 
              $asm01.System.Globalization.CompareOptions, $asm01.System.Boolean
            ], []).CallVirtual("internal_index_switch", null, this, 
            source, 
            startIndex, 
            count, 
            value, 
            options, 
            false
          );
        }
      }
      return result;
    }
  );

  $.Method({Static:false, Public:true }, "toString", 
    $sig.make(0x605, $asm01.TypeRef("System.String"), [], []), 
    function CompareInfo_toString () {
      return JSIL.ConcatString("CompareInfo - ", this.culture);
    }
  );

  $.Constant({Static:true , Public:false}, "ValidCompareOptions_NoStringSort", 1342177311); 
  $.Constant({Static:true , Public:false}, "ValidCompareOptions", 1879048223); 
  $.Field({Static:false, Public:false}, "culture", $asm01.TypeRef("System.Int32")); 
  $.Field({Static:false, Public:false}, "icu_name", $asm01.TypeRef("System.String")); 
  $.Field({Static:false, Public:false}, "win32LCID", $asm01.TypeRef("System.Int32")); 
  $.Field({Static:false, Public:false}, "m_name", $asm01.TypeRef("System.String")); 
  $.Field({Static:false, Public:false}, "collator", $asm01.TypeRef("Mono.Globalization.Unicode.SimpleCollator")); 
  $.Field({Static:true , Public:false}, "collators", $asm01.TypeRef("System.Collections.Hashtable")); 
  $.Field({Static:true , Public:false}, "monitor", $asm01.TypeRef("System.Object")); 
  $.Method({Static:true , Public:false}, ".cctor", 
    $sig.make(0x606, null, [], []), 
    function CompareInfo__cctor () {
      $thisType.monitor = new ($T00())();
    }
  );

  $.Property({Static:true , Public:false}, "UseManagedCollation", $asm01.TypeRef("System.Boolean"));

  $.Property({Static:false, Public:true }, "LCID", $asm01.TypeRef("System.Int32"));

  $.Property({Static:false, Public:true , Virtual:true }, "Name", $asm01.TypeRef("System.String"))
    .Attribute($asm01.TypeRef("System.Runtime.InteropServices.ComVisibleAttribute"), function () { return [false]; });

});

JSIL.MakeClass($asm01.TypeRef("System.Object"), "System.Collections.CollectionDebuggerView", false, [], function ($) {
  var $thisType = $.publicInterface;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm01.System.Collections.ICollection)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize(System.Array.Of($asm01.System.Object))) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm01.System.Object)) ();
  };

  $.Method({Static:false, Public:true }, ".ctor", 
    $sig.make(0xEB7, null, [$asm01.TypeRef("System.Collections.ICollection")], []), 
    function CollectionDebuggerView__ctor (col) {
      this.c = col;
    }
  );

  $.Method({Static:false, Public:true }, "get_Items", 
    $sig.make(0xEB5, $jsilcore.TypeRef("System.Array", [$asm01.TypeRef("System.Object")]), [], []), 
    function CollectionDebuggerView_get_Items () {
      var o = JSIL.Array.New($T02(), this.c.ICollection_get_Count());
      this.c.ICollection_CopyTo(o, 0);
      return o;
    }
  );

  $.Field({Static:false, Public:false, ReadOnly:true }, "c", $asm01.TypeRef("System.Collections.ICollection")); 
  $.Property({Static:false, Public:true }, "Items", $jsilcore.TypeRef("System.Array", [$asm01.TypeRef("System.Object")]))
    .Attribute($asm01.TypeRef("System.Diagnostics.DebuggerBrowsableAttribute"), function () { return [$asm01.System.Diagnostics.DebuggerBrowsableState.RootHidden]; });

});

JSIL.MakeClass($asm01.TypeRef("System.Attribute"), "System.Flags", true, [], function ($) {
  var $thisType = $.publicInterface;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm01.System.Attribute)) ();
  };

  $.Method({Static:false, Public:true }, ".ctor", 
    $sig.make(0xEC1, null, [], []), 
    function Flags__ctor () {
      $T00().prototype._ctor.call(this);
    }
  );

})
  .Attribute($asm01.TypeRef("System.AttributeUsageAttribute"), function () { return [$asm01.System.AttributeTargets.Enum]; });

JSIL.MakeClass($asm01.TypeRef("System.Object"), "System.Environment", true, [], function ($) {
  var $thisType = $.publicInterface;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm01.System.String)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm01.System.NotImplementedException)) ();
  };

  $.Method({Static:false, Public:true }, ".ctor", 
    $sig.make(0xED2, null, [], []), 
    function Environment__ctor () {
    }
  );

  $.Method({Static:true , Public:true }, "get_NewLine", 
    $sig.make(0xED0, $asm01.TypeRef("System.String"), [], []), 
    function Environment_get_NewLine () {
      return "\n";
    }
  );

  $.Method({Static:true , Public:false}, "internalGetEnvironmentVariable", 
    $sig.make(0xED1, $asm01.TypeRef("System.String"), [$asm01.TypeRef("System.String")], []), 
    function Environment_internalGetEnvironmentVariable (p) {
      throw new ($T01())();
    }
  );

  $.Property({Static:true , Public:true }, "NewLine", $asm01.TypeRef("System.String"));

});

JSIL.MakeTypeAlias($jsilcore, "System.Decimal");

JSIL.MakeClass($asm01.TypeRef("System.Attribute"), "System.MonoTODOAttribute", false, [], function ($) {
  var $thisType = $.publicInterface;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm01.System.String)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm01.System.Attribute)) ();
  };

  $.Method({Static:false, Public:true }, ".ctor", 
    $sig.make(0xED9, null, [$asm01.TypeRef("System.String")], []), 
    function MonoTODOAttribute__ctor (message) {
      $T01().prototype._ctor.call(this);
    }
  );

  $.Method({Static:false, Public:true }, ".ctor", 
    $sig.make(0xEDA, null, [], []), 
    function MonoTODOAttribute__ctor () {
      $T01().prototype._ctor.call(this);
    }
  );

});

JSIL.MakeClass($asm01.TypeRef("System.Attribute"), "System.MonoLimitationAttribute", false, [], function ($) {
  var $thisType = $.publicInterface;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm01.System.String)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm01.System.Attribute)) ();
  };

  $.Method({Static:false, Public:true }, ".ctor", 
    $sig.make(0xEE1, null, [$asm01.TypeRef("System.String")], []), 
    function MonoLimitationAttribute__ctor (message) {
      $T01().prototype._ctor.call(this);
    }
  );

  $.Method({Static:false, Public:true }, ".ctor", 
    $sig.make(0xEE2, null, [], []), 
    function MonoLimitationAttribute__ctor () {
      $T01().prototype._ctor.call(this);
    }
  );

});

JSIL.MakeClass($asm01.TypeRef("System.Attribute"), "System.MonoNotSupported", false, [], function ($) {
  var $thisType = $.publicInterface;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm01.System.String)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm01.System.Attribute)) ();
  };

  $.Method({Static:false, Public:true }, ".ctor", 
    $sig.make(0xEE9, null, [$asm01.TypeRef("System.String")], []), 
    function MonoNotSupported__ctor (message) {
      $T01().prototype._ctor.call(this);
    }
  );

  $.Method({Static:false, Public:true }, ".ctor", 
    $sig.make(0xEEA, null, [], []), 
    function MonoNotSupported__ctor () {
      $T01().prototype._ctor.call(this);
    }
  );

});

JSIL.MakeEnum(
  "System.AttributeTargets", true, {
    Assembly: 1, 
    Module: 2, 
    Class: 4, 
    Struct: 8, 
    Enum: 16, 
    Constructor: 32, 
    Method: 64, 
    Property: 128, 
    Field: 256, 
    Event: 512, 
    Interface: 1024, 
    Parameter: 2048, 
    Delegate: 4096, 
    ReturnValue: 8192, 
    GenericParameter: 16384, 
    All: 32767
  }, false
);

JSIL.MakeClass($asm01.TypeRef("System.ArgumentException"), "System.ArgumentNullException", true, [], function ($) {
  var $thisType = $.publicInterface;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm01.System.ArgumentException)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm01.System.Locale)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm01.System.Object)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm01.System.String)) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize($asm01.System.Exception)) ();
  };

  $.Method({Static:false, Public:true }, ".ctor", 
    $sig.make(0x84F, null, [], []), 
    function ArgumentNullException__ctor () {
      $T00().prototype._ctor.call(this, $T01().GetText("Argument cannot be null.", JSIL.Array.New($T02(), 0)));
      this.Exception$HResult$value = -2147467261;
    }
  );

  $.Method({Static:false, Public:true }, ".ctor", 
    $sig.make(0x850, null, [$asm01.TypeRef("System.String")], []), 
    function ArgumentNullException__ctor (paramName) {
      $sig.get(0x818, null, [$asm01.System.String, $asm01.System.String], []).Call($T00().prototype, "_ctor", null, this, $T01().GetText("Argument cannot be null.", JSIL.Array.New($T02(), 0)), paramName);
      this.Exception$HResult$value = -2147467261;
    }
  );

  $.Method({Static:false, Public:true }, ".ctor", 
    $sig.make(0x852, null, [$asm01.TypeRef("System.String"), $asm01.TypeRef("System.String")], []), 
    function ArgumentNullException__ctor (paramName, message) {
      $sig.get(0x818, null, [$asm01.System.String, $asm01.System.String], []).Call($T00().prototype, "_ctor", null, this, message, paramName);
      this.Exception$HResult$value = -2147467261;
    }
  );

  $.Method({Static:false, Public:true }, ".ctor", 
    $sig.make(0x853, null, [$asm01.TypeRef("System.String"), $asm01.TypeRef("System.Exception")], []), 
    function ArgumentNullException__ctor (message, innerException) {
      $sig.get(0x814, null, [$asm01.System.String, $asm01.System.Exception], []).Call($T00().prototype, "_ctor", null, this, message, innerException);
      this.Exception$HResult$value = -2147467261;
    }
  );

  $.Constant({Static:true , Public:false}, "Result", -2147467261); 
})
  .Attribute($asm01.TypeRef("System.Runtime.InteropServices.ComVisibleAttribute"), function () { return [true]; });

JSIL.MakeClass($asm01.TypeRef("System.Object"), "System.String", true, [], function ($) {
  var $thisType = $.publicInterface;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize(System.Array.Of($asm01.System.Object))) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm01.System.Int32)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize(System.Array.Of($asm01.System.Char))) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm01.System.NotImplementedException)) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize($asm01.System.Boolean)) ();
  };
  var $T05 = function () {
    return ($T05 = JSIL.Memoize($asm01.System.Globalization.CultureInfo)) ();
  };
  var $T06 = function () {
    return ($T06 = JSIL.Memoize($asm01.System.ArgumentNullException)) ();
  };
  var $T07 = function () {
    return ($T07 = JSIL.Memoize($asm01.System.ArgumentOutOfRangeException)) ();
  };
  var $T08 = function () {
    return ($T08 = JSIL.Memoize($asm01.System.Globalization.CompareOptions)) ();
  };
  var $T09 = function () {
    return ($T09 = JSIL.Memoize($asm01.System.Globalization.CompareInfo)) ();
  };
  var $T0A = function () {
    return ($T0A = JSIL.Memoize($asm01.System.Object)) ();
  };
  var $T0B = function () {
    return ($T0B = JSIL.Memoize($asm01.System.Type)) ();
  };
  var $T0C = function () {
    return ($T0C = JSIL.Memoize($asm01.System.Char)) ();
  };

  $.Method({Static:false, Public:true }, ".ctor", 
    $sig.make(0x178, null, [], []), 
    function String__ctor () {
    }
  );

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x179, null, [$jsilcore.TypeRef("System.Array", [$asm01.TypeRef("System.Char")])], [])
  )
    .Attribute($asm01.TypeRef("JSIL.Meta.JSExternal"));

  $.ExternalMethod({Static:false, Public:true }, ".ctor", 
    $sig.make(0x17A, null, [
        $jsilcore.TypeRef("System.Array", [$asm01.TypeRef("System.Char")]), $asm01.TypeRef("System.Int32"), 
        $asm01.TypeRef("System.Int32")
      ], [])
  )
    .Attribute($asm01.TypeRef("JSIL.Meta.JSExternal"));

  $.Method({Static:true , Public:false}, "_Concat", 
    $sig.make(0x198, $.Type, [$jsilcore.TypeRef("System.Array", [$asm01.TypeRef("System.Object")])], []), 
    function String__Concat (strings) {
      return $thisType.$Cast(strings.join(""));
    }
  );

  $.Method({Static:true , Public:false}, "CharCopyJoin", 
    $sig.make(0x19F, $.Type, [
        $.Type, $asm01.TypeRef("System.Int32"), 
        $jsilcore.TypeRef("System.Array", [$asm01.TypeRef("System.Char")]), $asm01.TypeRef("System.Int32"), 
        $asm01.TypeRef("System.Int32")
      ], []), 
    function String_CharCopyJoin (dest, targetIndex, source, startIndex, length) {
      return $sig.get(0x1A3, $thisType, [
          $thisType, $asm01.System.Int32, 
          $thisType, $asm01.System.Int32, 
          $asm01.System.Int32
        ], []).CallStatic($thisType, "CharCopyJoin", null, 
        dest, 
        targetIndex, 
        new $thisType(source), 
        startIndex, 
        length
      );
    }
  );

  $.Method({Static:true , Public:false}, "CharCopyJoin", 
    $sig.make(0x1A3, $.Type, [
        $.Type, $asm01.TypeRef("System.Int32"), 
        $.Type, $asm01.TypeRef("System.Int32"), 
        $asm01.TypeRef("System.Int32")
      ], []), 
    function String_CharCopyJoin (dest, targetIndex, source, startIndex, length) {
      return $thisType.$Cast(dest.substr(0, targetIndex) + source.substr(startIndex, length));
    }
  );

  $.Method({Static:true , Public:false}, "Compare", 
    $sig.make(0x1AE, $asm01.TypeRef("System.Int32"), [
        $.Type, $asm01.TypeRef("System.Int32"), 
        $.Type, $asm01.TypeRef("System.Int32"), 
        $asm01.TypeRef("System.Int32")
      ], []), 
    function String_Compare (s, i, p, p_2, p_3) {
      throw new ($T03())();
    }
  );

  $.Method({Static:true , Public:true }, "Compare", 
    $sig.make(0x1B1, $asm01.TypeRef("System.Int32"), [
        $.Type, $asm01.TypeRef("System.Int32"), 
        $.Type, $asm01.TypeRef("System.Int32"), 
        $asm01.TypeRef("System.Int32"), $asm01.TypeRef("System.Boolean"), 
        $asm01.TypeRef("System.Globalization.CultureInfo")
      ], []), 
    function String_Compare (strA, indexA, strB, indexB, length, ignoreCase, culture) {
      if (culture === null) {
        throw new ($T06())("culture");
      }
      if (!(!((indexA > strA.length) || 
            (indexB > strB.length) || 
            (indexA < 0) || 
            (indexB < 0)) && (length >= 0))) {
        throw new ($T07())();
      }
      if (length === 0) {
        var result = 0;
      } else if (strA === null) {
        if (strB === null) {
          result = 0;
        } else {
          result = -1;
        }
      } else if (strB === null) {
        result = 1;
      } else {
        if (ignoreCase) {
          var compopts = $T08().IgnoreCase;
        } else {
          compopts = $T08().None;
        }
        var len = length;
        var len2 = length;
        if (length > ((strA.length - indexA) | 0)) {
          len = ((strA.length - indexA) | 0);
        }
        if (length > ((strB.length - indexB) | 0)) {
          len2 = ((strB.length - indexB) | 0);
        }
        result = culture.get_CompareInfo().Compare(
          strA, 
          indexA, 
          len, 
          strB, 
          indexB, 
          len2, 
          compopts
        );
      }
      return result;
    }
  );

  $.Method({Static:true , Public:true }, "Concat", 
    $sig.make(0x18C, $.Type, [$.Type, $asm01.TypeRef("System.Object")], []), 
    function String_Concat (str0, str1) {
      return $thisType._Concat(JSIL.Array.New($T0A(), [str0, str1.toString()]));
    }
  );

  $.Method({Static:true , Public:true }, "Concat", 
    $sig.make(0x18E, $.Type, [$.Type, "!!0"], ["T"]), 
    function String_Concat$b1 (T, str0, str1) {
      return $thisType._Concat(JSIL.Array.New($T0A(), [str0, str1.toString()]));
    }
  );

  $.ExternalMethod({Static:true , Public:true }, "Format", 
    $sig.make(0x208, $.Type, [$asm01.TypeRef("System.Array") /* AnyType[] */ ], [])
  )
    .Attribute($asm01.TypeRef("JSIL.Meta.JSReplacement"), function () { return ["JSIL.StringFormat.apply($format, $p)"]; });

  $.ExternalMethod({Static:true , Public:true }, "Format", 
    $sig.make(0x208, $.Type, [$asm01.TypeRef("System.Array") /* AnyType[] */ ], [])
  );

  $.Method({Static:false, Public:true }, "get_length", 
    $sig.make(0x7E, $asm01.TypeRef("System.Int32"), [], []), 
    function String_get_length () {
    }
  );

  $.Method({Static:false, Public:true }, "IndexOfAny", 
    $sig.make(0x17D, $asm01.TypeRef("System.Int32"), [$jsilcore.TypeRef("System.Array", [$asm01.TypeRef("System.Char")])], []), 
    function String_IndexOfAny (anyOf) {
      if (anyOf === null) {
        throw new ($T06())();
      }
      if (this.length === 0) {
        var result = -1;
      } else {
        result = this.IndexOfAnyUnchecked(anyOf, 0, this.length);
      }
      return result;
    }
  );

  $.Method({Static:false, Public:true }, "IndexOfAny", 
    $sig.make(0x17E, $asm01.TypeRef("System.Int32"), [$jsilcore.TypeRef("System.Array", [$asm01.TypeRef("System.Char")]), $asm01.TypeRef("System.Int32")], []), 
    function String_IndexOfAny (anyOf, startIndex) {
      if (anyOf === null) {
        throw new ($T06())();
      }
      if (!((startIndex >= 0) && (startIndex <= this.length))) {
        throw new ($T07())();
      }
      return this.IndexOfAnyUnchecked(anyOf, startIndex, ((this.length - startIndex) | 0));
    }
  );

  $.Method({Static:false, Public:true }, "IndexOfAny", 
    $sig.make(0x17F, $asm01.TypeRef("System.Int32"), [
        $jsilcore.TypeRef("System.Array", [$asm01.TypeRef("System.Char")]), $asm01.TypeRef("System.Int32"), 
        $asm01.TypeRef("System.Int32")
      ], []), 
    function String_IndexOfAny (anyOf, startIndex, count) {
      if (anyOf === null) {
        throw new ($T06())();
      }
      if (!((startIndex >= 0) && (startIndex <= this.length))) {
        throw new ($T07())();
      }
      if (!((count >= 0) && (startIndex <= ((this.length - count) | 0)))) {
        throw $sig.get(0xCA7, null, [$thisType, $thisType], []).Construct($T07(), "count", "Count cannot be negative, and startIndex + count must be less than length of the string.");
      }
      return this.IndexOfAnyUnchecked(anyOf, startIndex, count);
    }
  );

  $.Method({Static:false, Public:false}, "IndexOfAnyUnchecked", 
    $sig.make(0x180, $asm01.TypeRef("System.Int32"), [
        $jsilcore.TypeRef("System.Array", [$asm01.TypeRef("System.Char")]), $asm01.TypeRef("System.Int32"), 
        $asm01.TypeRef("System.Int32")
      ], []), 
    function String_IndexOfAnyUnchecked (anyOf, startIndex, count) {
      if (anyOf.length === 0) {
        var result = -1;
      } else {

        for (var i = 0; i < this.length; ++i) {
          var current = (this[i]);

          for (var j = 0; j < anyOf.length; ++j) {
            if (current.charCodeAt(0) === anyOf[j].charCodeAt(0)) {
              result = i;
              return result;
            }
          }
        }
        result = -1;
      }
      return result;
    }
  );

  $.Method({Static:true , Public:false}, "InternalAllocateStr", 
    $sig.make(0x1A1, $.Type, [$asm01.TypeRef("System.Int32")], []), 
    function String_InternalAllocateStr (length) {
      return "";
    }
  );

  $.Method({Static:true , Public:true }, "IsNullOrEmpty", 
    $sig.make(0x1AD, $asm01.TypeRef("System.Boolean"), [$.Type], []), 
    function String_IsNullOrEmpty (s) {
      throw new ($T03())();
    }
  );

  $.Method({Static:false, Public:true }, "Replace", 
    $sig.make(0x1AA, $.Type, [$.Type, $.Type], []), 
    function String_Replace (oldValue, newValue) {
      return $thisType.$Cast(this.replace(oldValue, newValue));
    }
  );

  $.Method({Static:false, Public:true }, "Substring", 
    $sig.make(0x1A7, $.Type, [$asm01.TypeRef("System.Int32"), $asm01.TypeRef("System.Int32")], []), 
    function String_Substring (startIndex, count) {
      if (!((startIndex >= 0) && (startIndex <= this.length))) {
        throw new ($T07())("startIndex");
      }
      if (((startIndex + count) | 0) > this.length) {
        throw new ($T07())("count");
      }
      return this.substr(startIndex, count);
    }
  );

  $.Method({Static:false, Public:true }, "Substring", 
    $sig.make(0x1A9, $.Type, [$asm01.TypeRef("System.Int32")], []), 
    function String_Substring (startIndex) {
      if (!((startIndex >= 0) && (startIndex <= this.length))) {
        throw new ($T07())("startIndex");
      }
      return $thisType.$Cast(this.substr(startIndex));
    }
  );

  $.Method({Static:false, Public:true }, "toLowerCase", 
    $sig.make(0x1AB, $.Type, [], []), 
    function String_toLowerCase () {
    }
  )
    .Attribute($asm01.TypeRef("JSIL.Meta.JSChangeName"), function () { return ["toLowerCase"]; });

  $.Method({Static:false, Public:true }, "toString", 
    $sig.make(0x19A, $.Type, [], []), 
    function String_toString () {
                      if (typeof(this._s) !== "undefined")
                          return this._s;;
      return this;
    }
  );

  $.Field({Static:true , Public:true , ReadOnly:true }, "Empty", $.Type, ""); 
  $.Method({Static:true , Public:false}, ".cctor", 
    $sig.make(0x1B2, null, [], []), 
    function String__cctor () {
      $thisType.Empty = "";
    }
  );

  $.Property({Static:false, Public:true }, "length", $asm01.TypeRef("System.Int32"))
    .Attribute($asm01.TypeRef("JSIL.Meta.JSChangeName"), function () { return ["length"]; });

  $.ExternalProperty({Static:false, Public:true }, "Chars", $asm01.TypeRef("System.Char"))
    .Attribute($asm01.TypeRef("JSIL.Meta.JSReplacement"), function () { return ["$this.substr($idx,1)"]; });

})
  .Attribute($asm01.TypeRef("System.Reflection.DefaultMemberAttribute"), function () { return ["Chars"]; });

JSIL.MakeStaticClass("System.StringEx", true, [], function ($) {
  var $thisType = $.publicInterface;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm01.System.String)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm01.System.NotImplementedException)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm01.System.Int32)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm01.System.Char)) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize(System.Array.Of($asm01.System.Char))) ();
  };

  $.Method({Static:true , Public:true }, "EndsWith", 
    $sig.make(0x91D, $asm01.TypeRef("System.Boolean"), [$asm01.TypeRef("System.String"), $asm01.TypeRef("System.String")], []), 
    function StringEx_EndsWith (self, p) {
      throw new ($T01())();
    }
  )
    .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

  $.Method({Static:true , Public:false}, "FindNotWhiteSpace", 
    $sig.make(0x943, $asm01.TypeRef("System.Int32"), [
        $asm01.TypeRef("System.String"), $asm01.TypeRef("System.Int32"), 
        $asm01.TypeRef("System.Int32"), $asm01.TypeRef("System.Int32")
      ], []), 
    function StringEx_FindNotWhiteSpace (self, pos, target, change) {

      for (; pos !== target; pos += change) {
        var c = (self[pos]);
        if (c.charCodeAt(0) < "\x85".charCodeAt(0)) {
          if (c.charCodeAt(0) !== " ".charCodeAt(0)) {
            if (!((c.charCodeAt(0) >= "\t".charCodeAt(0)) && (c.charCodeAt(0) <= "\r".charCodeAt(0)))) {
              var result = pos;
              return result;
            }
          }
        } else if (!((c.charCodeAt(0) === "\xa0".charCodeAt(0)) || 
            (c.charCodeAt(0) === "\ufeff".charCodeAt(0)) || (c.charCodeAt(0) === "\u3000".charCodeAt(0)))) {
          if (!((c.charCodeAt(0) === "\x85".charCodeAt(0)) || 
              (c.charCodeAt(0) === "\u1680".charCodeAt(0)) || 
              (c.charCodeAt(0) === "\u2028".charCodeAt(0)) || 
              (c.charCodeAt(0) === "\u2029".charCodeAt(0)) || 
              (c.charCodeAt(0) === "\u202f".charCodeAt(0)) || 
              (c.charCodeAt(0) === "\u205f".charCodeAt(0)) || ((c.charCodeAt(0) >= "\u2000".charCodeAt(0)) && 
                (c.charCodeAt(0) <= "\u200b".charCodeAt(0))))) {
            result = pos;
            return result;
          }
        }
      }
      result = pos;
      return result;
    }
  );

  $.Method({Static:true , Public:true }, "Split", 
    $sig.make(0x922, $jsilcore.TypeRef("System.Array", [$asm01.TypeRef("System.String")]), [$asm01.TypeRef("System.String"), $asm01.TypeRef("System.Char")], []), 
    function StringEx_Split (self, p) {
      throw new ($T01())();
    }
  )
    .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

  $.Method({Static:true , Public:true }, "Split", 
    $sig.make(0x923, $jsilcore.TypeRef("System.Array", [$asm01.TypeRef("System.String")]), [
        $asm01.TypeRef("System.String"), $jsilcore.TypeRef("System.Array", [$asm01.TypeRef("System.Char")]), 
        $asm01.TypeRef("System.Int32")
      ], []), 
    function StringEx_Split (self, p, p_2) {
      throw new ($T01())();
    }
  )
    .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

  $.Method({Static:true , Public:true }, "StartsWith", 
    $sig.make(0x91F, $asm01.TypeRef("System.Boolean"), [$asm01.TypeRef("System.String"), $asm01.TypeRef("System.String")], []), 
    function StringEx_StartsWith (self, p) {
      throw new ($T01())();
    }
  )
    .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

  $.Method({Static:true , Public:true }, "Trim", 
    $sig.make(0x926, $asm01.TypeRef("System.String"), [$asm01.TypeRef("System.String")], []), 
    function StringEx_Trim (self) {
      if (self.length === 0) {
        var result = $T00().Empty;
      } else {
        var start = $thisType.FindNotWhiteSpace(self, 0, self.length, 1);
        if (start === self.length) {
          result = $T00().Empty;
        } else {
          var end = $thisType.FindNotWhiteSpace(self, ((self.length - 1) | 0), start, -1);
          var newLength = ((((end - start) | 0) + 1) | 0);
          if (newLength === self.length) {
            result = self;
          } else {
            result = (self.substr(start, newLength));
          }
        }
      }
      return result;
    }
  )
    .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

  $.Method({Static:true , Public:true }, "TrimEnd", 
    $sig.make(0x91C, $asm01.TypeRef("System.String"), [$asm01.TypeRef("System.String"), $jsilcore.TypeRef("System.Array", [$asm01.TypeRef("System.Char")])], []), 
    function StringEx_TrimEnd (self, trimChars) {
      var start = 0;
      if (start === self.length) {
        var result = $T00().Empty;
      } else {
        var end = $thisType.FindNotWhiteSpace(self, ((self.length - 1) | 0), start, -1);
        var newLength = ((((end - start) | 0) + 1) | 0);
        if (newLength === self.length) {
          result = self;
        } else {
          result = (self.substr(start, newLength));
        }
      }
      return result;
    }
  )
    .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

  $.Method({Static:true , Public:true }, "TrimStart", 
    $sig.make(0x8A4, $asm01.TypeRef("System.String"), [$asm01.TypeRef("System.String"), $jsilcore.TypeRef("System.Array", [$asm01.TypeRef("System.Char")])], []), 
    function StringEx_TrimStart (self, trimChars) {
      if (self.length === 0) {
        var result = $T00().Empty;
      } else {
        var start = $thisType.FindNotWhiteSpace(self, 0, self.length, 1);
        if (start === self.length) {
          result = $T00().Empty;
        } else {
          var newLength = ((self.length - start) | 0);
          result = (self.substr(start, newLength));
        }
      }
      return result;
    }
  )
    .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

})
  .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

JSIL.MakeStruct($asm01.TypeRef("System.ValueType"), "System.RuntimeTypeHandle", true, [], function ($) {
  var $thisType = $.publicInterface;

});

JSIL.MakeDelegate("System.EventHandler", true, []);

JSIL.MakeClass($asm01.TypeRef("System.SystemException"), "System.Collections.Generic.KeyNotFoundException", true, [], function ($) {
  var $thisType = $.publicInterface;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm01.System.SystemException)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm01.System.String)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm01.System.Exception)) ();
  };

  $.Method({Static:false, Public:true }, ".ctor", 
    $sig.make(0x9AC, null, [], []), 
    function KeyNotFoundException__ctor () {
      $T00().prototype._ctor.call(this, "The given key was not present in the dictionary.");
    }
  );

  $.Method({Static:false, Public:true }, ".ctor", 
    $sig.make(0x9B0, null, [$asm01.TypeRef("System.String")], []), 
    function KeyNotFoundException__ctor (message) {
      $T00().prototype._ctor.call(this, message);
    }
  );

  $.Method({Static:false, Public:true }, ".ctor", 
    $sig.make(0x9B1, null, [$asm01.TypeRef("System.String"), $asm01.TypeRef("System.Exception")], []), 
    function KeyNotFoundException__ctor (message, innerException) {
      $sig.get(0x7D2, null, [$asm01.System.String, $asm01.System.Exception], []).Call($T00().prototype, "_ctor", null, this, message, innerException);
    }
  );

  $.ImplementInterfaces($asm01.TypeRef("System.Runtime.Serialization.ISerializable"))
})
  .Attribute($asm01.TypeRef("System.Runtime.InteropServices.ComVisibleAttribute"), function () { return [true]; });

JSIL.MakeStruct($asm01.TypeRef("System.ValueType"), "System.Collections.Generic.Link", false, [], function ($) {
  var $thisType = $.publicInterface;

  $.Field({Static:false, Public:true }, "HashCode", $asm01.TypeRef("System.Int32")); 
  $.Field({Static:false, Public:true }, "Next", $asm01.TypeRef("System.Int32")); 
});

JSIL.MakeClass($asm01.TypeRef("System.Object"), "System.Collections.Generic.Dictionary`2", true, ["TKey", "TValue"], function ($) {
  var $thisType = $.publicInterface;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm01.System.Int32)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm01.System.ArgumentNullException)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm01.System.Collections.IEnumerator)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm01.System.IDisposable)) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize($asm01.System.ArgumentException)) ();
  };
  var $T05 = function () {
    return ($T05 = JSIL.Memoize($asm01.System.Void)) ();
  };
  var $T06 = function () {
    return ($T06 = JSIL.Memoize($asm01.System.Boolean)) ();
  };
  var $T07 = function () {
    return ($T07 = JSIL.Memoize($asm01.System.Array)) ();
  };
  var $T08 = function () {
    return ($T08 = JSIL.Memoize($asm01.System.ArgumentOutOfRangeException)) ();
  };
  var $T09 = function () {
    return ($T09 = JSIL.Memoize($asm01.System.Type)) ();
  };
  var $T0A = function () {
    return ($T0A = JSIL.Memoize($asm01.System.Exception)) ();
  };
  var $T0B = function () {
    return ($T0B = JSIL.Memoize($asm01.System.Object)) ();
  };
  var $T0C = function () {
    return ($T0C = JSIL.Memoize(System.Array.Of($asm01.System.Object))) ();
  };
  var $T0D = function () {
    return ($T0D = JSIL.Memoize($asm01.System.Collections.Generic.KeyNotFoundException)) ();
  };
  var $T0E = function () {
    return ($T0E = JSIL.Memoize($asm01.System.Collections.Generic.Link)) ();
  };
  var $T0F = function () {
    return ($T0F = JSIL.Memoize($asm01.System.Collections.Hashtable)) ();
  };
  var $T10 = function () {
    return ($T10 = JSIL.Memoize(System.Array.Of($asm01.System.Int32))) ();
  };
  var $T11 = function () {
    return ($T11 = JSIL.Memoize(System.Array.Of($asm01.System.Collections.Generic.Link))) ();
  };
  var $T12 = function () {
    return ($T12 = JSIL.Memoize(System.Array.Of($asm01.System.Collections.DictionaryEntry))) ();
  };
  var $T13 = function () {
    return ($T13 = JSIL.Memoize($asm01.System.Collections.DictionaryEntry)) ();
  };

  $.Method({Static:false, Public:true }, ".ctor", 
    $sig.make(0x315, null, [], []), 
    function Dictionary$b2__ctor () {
      $thisType.Of($thisType.TKey.get(this), $thisType.TValue.get(this)).prototype.Init.call(this, 10, null);
    }
  );

  $.Method({Static:false, Public:true }, ".ctor", 
    $sig.make(0x317, null, [$asm01.TypeRef("System.Collections.Generic.IEqualityComparer`1", [new JSIL.GenericParameter("TKey", "System.Collections.Generic.Dictionary`2")])], []), 
    function Dictionary$b2__ctor (comparer) {
      $thisType.Of($thisType.TKey.get(this), $thisType.TValue.get(this)).prototype.Init.call(this, 10, comparer);
    }
  );

  $.Method({Static:false, Public:true }, ".ctor", 
    $sig.make(0x319, null, [$asm01.TypeRef("System.Collections.Generic.IDictionary`2", [new JSIL.GenericParameter("TKey", "System.Collections.Generic.Dictionary`2"), new JSIL.GenericParameter("TValue", "System.Collections.Generic.Dictionary`2")])], []), 
    function Dictionary$b2__ctor (dictionary) {
      (new JSIL.MethodSignature(null, [$asm01.TypeRef("System.Collections.Generic.IDictionary`2", [$thisType.TKey.get(this), $thisType.TValue.get(this)]), $asm01.TypeRef("System.Collections.Generic.IEqualityComparer`1", [$thisType.TKey.get(this)])], [])).Call($thisType.Of($thisType.TKey.get(this), $thisType.TValue.get(this)).prototype, "_ctor", null, this, dictionary, null);
    }
  );

  $.Method({Static:false, Public:true }, ".ctor", 
    $sig.make(0x336, null, [$asm01.TypeRef("System.Int32")], []), 
    function Dictionary$b2__ctor (capacity) {
      $thisType.Of($thisType.TKey.get(this), $thisType.TValue.get(this)).prototype.Init.call(this, capacity, null);
    }
  );

  $.Method({Static:false, Public:true }, ".ctor", 
    $sig.make(0x338, null, [$asm01.TypeRef("System.Collections.Generic.IDictionary`2", [new JSIL.GenericParameter("TKey", "System.Collections.Generic.Dictionary`2"), new JSIL.GenericParameter("TValue", "System.Collections.Generic.Dictionary`2")]), $asm01.TypeRef("System.Collections.Generic.IEqualityComparer`1", [new JSIL.GenericParameter("TKey", "System.Collections.Generic.Dictionary`2")])], []), 
    function Dictionary$b2__ctor (dictionary, comparer) {
      if (dictionary === null) {
        throw new ($T01())("dictionary");
      }
      var capacity = dictionary.ICollection$b1_get_Count();
      $thisType.Of($thisType.TKey.get(this), $thisType.TValue.get(this)).prototype.Init.call(this, capacity, comparer);
      var enumerator = dictionary.IEnumerable$b1_GetEnumerator();
      try {

        while (enumerator.IEnumerator_MoveNext()) {
          var entry = enumerator.IEnumerator$b1_get_Current().MemberwiseClone();
          this.Add(
            JSIL.CloneParameter($thisType.TKey.get(this), entry.get_Key()), 
            JSIL.CloneParameter($thisType.TValue.get(this), entry.get_Value())
          );
        }
      } finally {
        if (enumerator !== null) {
          enumerator.IDisposable_Dispose();
        }
      }
    }
  );

  $.Method({Static:false, Public:true }, ".ctor", 
    $sig.make(0x33A, null, [$asm01.TypeRef("System.Int32"), $asm01.TypeRef("System.Collections.Generic.IEqualityComparer`1", [new JSIL.GenericParameter("TKey", "System.Collections.Generic.Dictionary`2")])], []), 
    function Dictionary$b2__ctor (capacity, comparer) {
      $thisType.Of($thisType.TKey.get(this), $thisType.TValue.get(this)).prototype.Init.call(this, capacity, comparer);
    }
  );

  $.Method({Static:false, Public:true }, "Add", 
    $sig.make(0x347, null, [new JSIL.GenericParameter("TKey", "System.Collections.Generic.Dictionary`2"), new JSIL.GenericParameter("TValue", "System.Collections.Generic.Dictionary`2")], []), 
    function Dictionary$b2_Add (key, value) {
      if (key === null) {
        throw new ($T01())("key");
      }
      var hashCode = ((this.hcp.IEqualityComparer$b1_GetHashCode(JSIL.CloneParameter($thisType.TKey.get(this), key)) | -2147483648) | 0);
      var index = ((((hashCode & 2147483647) | 0) % this.table.length) | 0);

      for (var cur = ((this.table[index] - 1) | 0); cur !== -1; cur = this.linkSlots[cur].Next) {
        if (!((this.linkSlots[cur].HashCode !== hashCode) || !this.hcp.IEqualityComparer$b1_Equals(JSIL.CloneParameter($thisType.TKey.get(this), this.keySlots[cur]), JSIL.CloneParameter($thisType.TKey.get(this), key)))) {
          throw new ($T04())("An element with the same key already exists in the dictionary.");
        }
      }
      if (++this.count > this.threshold) {
        $thisType.Of($thisType.TKey.get(this), $thisType.TValue.get(this)).prototype.Resize.call(this);
        index = ((((hashCode & 2147483647) | 0) % this.table.length) | 0);
      }
      cur = this.emptySlot;
      if (cur === -1) {
        cur = this.touchedSlots++;
      } else {
        this.emptySlot = this.linkSlots[cur].Next;
      }
      this.linkSlots[cur].HashCode = hashCode;
      this.linkSlots[cur].Next = ((this.table[index] - 1) | 0);
      this.table[index] = ((cur + 1) | 0);
      this.keySlots[cur] = JSIL.CloneParameter($thisType.TKey.get(this), key);
      this.valueSlots[cur] = value;
      ++this.generation;
    }
  );

  $.Method({Static:false, Public:true }, "Clear", 
    $sig.make(0x349, null, [], []), 
    function Dictionary$b2_Clear () {
      this.count = 0;
                      (function Array_Clear(array, index, length) {
                          var defaultValue = null;
                          for (var i = 0; i<length; i++)
                              array[i+index] = defaultValue;
                      })(this.table, 0, this.table.length);;
                      (function Array_Clear(array, index, length) {
                          var defaultValue = null;
                          for (var i = 0; i<length; i++)
                              array[i+index] = defaultValue;
                      })(this.keySlots, 0, this.keySlots.length);;
                      (function Array_Clear(array, index, length) {
                          var defaultValue = null;
                          for (var i = 0; i<length; i++)
                              array[i+index] = defaultValue;
                      })(this.valueSlots, 0, this.valueSlots.length);;
                      (function Array_Clear(array, index, length) {
                          var defaultValue = null;
                          for (var i = 0; i<length; i++)
                              array[i+index] = defaultValue;
                      })(this.linkSlots, 0, this.linkSlots.length);;
      this.emptySlot = -1;
      this.touchedSlots = 0;
      ++this.generation;
    }
  );

  $.Method({Static:false, Public:true }, "ContainsKey", 
    $sig.make(0x34A, $asm01.TypeRef("System.Boolean"), [new JSIL.GenericParameter("TKey", "System.Collections.Generic.Dictionary`2")], []), 
    function Dictionary$b2_ContainsKey (key) {
      if (key === null) {
        throw new ($T01())("key");
      }
      var hashCode = ((this.hcp.IEqualityComparer$b1_GetHashCode(JSIL.CloneParameter($thisType.TKey.get(this), key)) | -2147483648) | 0);

      for (var cur = ((this.table[((((hashCode & 2147483647) | 0) % this.table.length) | 0)] - 1) | 0); cur !== -1; cur = this.linkSlots[cur].Next) {
        if (!((this.linkSlots[cur].HashCode !== hashCode) || !this.hcp.IEqualityComparer$b1_Equals(JSIL.CloneParameter($thisType.TKey.get(this), this.keySlots[cur]), JSIL.CloneParameter($thisType.TKey.get(this), key)))) {
          var result = true;
          return result;
        }
      }
      result = false;
      return result;
    }
  );

  $.Method({Static:false, Public:false}, "ContainsKeyValuePair", 
    $sig.make(0x35F, $asm01.TypeRef("System.Boolean"), [$asm01.TypeRef("System.Collections.Generic.KeyValuePair`2", [new JSIL.GenericParameter("TKey", "System.Collections.Generic.Dictionary`2"), new JSIL.GenericParameter("TValue", "System.Collections.Generic.Dictionary`2")])], []), 
    function Dictionary$b2_ContainsKeyValuePair (pair) {
      var value = new JSIL.Variable(($thisType.TValue.get(this).IsValueType ? JSIL.CreateInstanceOfType($thisType.TValue.get(this)) : null));
      return (this.TryGetValue(JSIL.CloneParameter($thisType.TKey.get(this), pair.get_Key()), /* ref */ value) && (new JSIL.MethodSignature($asm01.System.Boolean, [$thisType.TValue.get(this), $thisType.TValue.get(this)], [])).CallVirtual("Equals", null, $asm01.System.Collections.Generic.EqualityComparer$b1.Of($thisType.TValue.get(this)).get_Default(), JSIL.CloneParameter($thisType.TValue.get(this), pair.get_Value()), JSIL.CloneParameter($thisType.TValue.get(this), value.value)));
    }
  );

  $.Method({Static:false, Public:true }, "ContainsValue", 
    $sig.make(0x34C, $asm01.TypeRef("System.Boolean"), [new JSIL.GenericParameter("TValue", "System.Collections.Generic.Dictionary`2")], []), 
    function Dictionary$b2_ContainsValue (value) {
      var cmp = $asm01.System.Collections.Generic.EqualityComparer$b1.Of($thisType.TValue.get(this)).get_Default();

      for (var i = 0; i < this.table.length; ++i) {

        for (var cur = ((this.table[i] - 1) | 0); cur !== -1; cur = this.linkSlots[cur].Next) {
          if (cmp.IEqualityComparer$b1_Equals(JSIL.CloneParameter($thisType.TValue.get(this), this.valueSlots[cur]), value)) {
            var result = true;
            return result;
          }
        }
      }
      result = false;
      return result;
    }
  );

  $.Method({Static:false, Public:false}, "CopyTo", 
    $sig.make(0x343, null, [$jsilcore.TypeRef("System.Array", [$asm01.TypeRef("System.Collections.Generic.KeyValuePair`2", [new JSIL.GenericParameter("TKey", "System.Collections.Generic.Dictionary`2"), new JSIL.GenericParameter("TValue", "System.Collections.Generic.Dictionary`2")])]), $asm01.TypeRef("System.Int32")], []), 
    function Dictionary$b2_CopyTo (array, index) {
      $thisType.Of($thisType.TKey.get(this), $thisType.TValue.get(this)).prototype.CopyToCheck.call(this, array, index);
      $thisType.Of($thisType.TKey.get(this), $thisType.TValue.get(this)).prototype.Do_CopyTo$b2($asm01.System.Collections.Generic.KeyValuePair$b2.Of($thisType.TKey.get(this), $thisType.TValue.get(this)), $asm01.System.Collections.Generic.KeyValuePair$b2.Of($thisType.TKey.get(this), $thisType.TValue.get(this))).call(this, array, index, $asm01.System.Collections.Generic.Dictionary$b2_Transform$b1.Of(
            $thisType.TKey.get(this), $thisType.TValue.get(this), 
            $asm01.System.Collections.Generic.KeyValuePair$b2.Of($thisType.TKey.get(this), $thisType.TValue.get(this))
        ).New($thisType.Of($thisType.TKey.get(this), $thisType.TValue.get(this)), $thisType.Of($thisType.TKey.get(this), $thisType.TValue.get(this)).make_pair));
    }
  );

  $.Method({Static:false, Public:false}, "CopyToCheck", 
    $sig.make(0x33D, null, [$asm01.TypeRef("System.Array"), $asm01.TypeRef("System.Int32")], []), 
    function Dictionary$b2_CopyToCheck (array, index) {
      if (array === null) {
        throw new ($T01())("array");
      }
      if (index < 0) {
        throw new ($T08())("index");
      }
      if (index > array.length) {
        throw new ($T04())("index larger than largest valid index of array");
      }
      if (((array.length - index) | 0) < this.get_Count()) {
        throw new ($T04())("Destination array cannot hold the requested elements!");
      }
    }
  );

  $.Method({Static:false, Public:false}, "Do_CopyTo", 
    $sig.make(0x33E, null, [
        $jsilcore.TypeRef("System.Array", ["!!1"]), $asm01.TypeRef("System.Int32"), 
        $asm01.TypeRef("System.Collections.Generic.Dictionary`2/Transform`1", [
            new JSIL.GenericParameter("TKey", "System.Collections.Generic.Dictionary`2"), new JSIL.GenericParameter("TValue", "System.Collections.Generic.Dictionary`2"), 
            "!!0"
          ])
      ], ["TRet", "TElem"]), 
    function Dictionary$b2_Do_CopyTo$b2 (TRet, TElem, array, index, transform) {

      for (var i = 0; i < this.touchedSlots; ++i) {
        if (((this.linkSlots[i].HashCode & -2147483648) | 0) !== 0) {
          array[index++] = JSIL.CloneParameter(TRet, TElem.$Cast(transform(JSIL.CloneParameter($thisType.TKey.get(this), this.keySlots[i]), JSIL.CloneParameter($thisType.TValue.get(this), this.valueSlots[i]))));
        }
      }
    }
  );

  $.Method({Static:false, Public:false}, "Do_ICollectionCopyTo", 
    $sig.make(0x345, null, [
        $asm01.TypeRef("System.Array"), $asm01.TypeRef("System.Int32"), 
        $asm01.TypeRef("System.Collections.Generic.Dictionary`2/Transform`1", [
            new JSIL.GenericParameter("TKey", "System.Collections.Generic.Dictionary`2"), new JSIL.GenericParameter("TValue", "System.Collections.Generic.Dictionary`2"), 
            "!!0"
          ])
      ], ["TRet"]), 
    function Dictionary$b2_Do_ICollectionCopyTo$b1 (TRet, array, index, transform) {
      var src = TRet;
      var tgt = JSIL.GetType(array).GetElementType();
      try {
        if (!((!src.get_IsPrimitive() && 
              !tgt.get_IsPrimitive()) || tgt.IsAssignableFrom(src))) {
          throw new ($T0A())();
        }
        $thisType.Of($thisType.TKey.get(this), $thisType.TValue.get(this)).prototype.Do_CopyTo$b2(TRet, $T0B()).call(this, $T0C().$Cast(array), index, transform);
      } catch ($exception) {
        throw $sig.get(0x81B, null, [
            $asm01.System.String, $asm01.System.String, 
            $asm01.System.Exception
          ], []).Construct($T04(), "Cannot copy source collection elements to destination array", "array", $exception);
      }
    }
  );

  $.Method({Static:false, Public:true }, "get_Comparer", 
    $sig.make(0x2E8, $asm01.TypeRef("System.Collections.Generic.IEqualityComparer`1", [new JSIL.GenericParameter("TKey", "System.Collections.Generic.Dictionary`2")]), [], []), 
    function Dictionary$b2_get_Comparer () {
      return this.hcp;
    }
  );

  $.Method({Static:false, Public:true }, "get_Count", 
    $sig.make(0x2DB, $asm01.TypeRef("System.Int32"), [], []), 
    function Dictionary$b2_get_Count () {
      return this.count;
    }
  );

  $.Method({Static:false, Public:true }, "get_Item", 
    $sig.make(0x2E0, new JSIL.GenericParameter("TValue", "System.Collections.Generic.Dictionary`2"), [new JSIL.GenericParameter("TKey", "System.Collections.Generic.Dictionary`2")], []), 
    function Dictionary$b2_get_Item (key) {
      if (key === null) {
        throw new ($T01())("key");
      }
      var hashCode = ((this.hcp.IEqualityComparer$b1_GetHashCode(JSIL.CloneParameter($thisType.TKey.get(this), key)) | -2147483648) | 0);

      for (var cur = ((this.table[((((hashCode & 2147483647) | 0) % this.table.length) | 0)] - 1) | 0); cur !== -1; cur = this.linkSlots[cur].Next) {
        if (!((this.linkSlots[cur].HashCode !== hashCode) || !this.hcp.IEqualityComparer$b1_Equals(JSIL.CloneParameter($thisType.TKey.get(this), this.keySlots[cur]), JSIL.CloneParameter($thisType.TKey.get(this), key)))) {
          return this.valueSlots[cur];
        }
      }
      throw new ($T0D())();
    }
  );

  $.Method({Static:false, Public:true }, "get_Keys", 
    $sig.make(0x2FE, $asm01.TypeRef("System.Collections.Generic.Dictionary`2/KeyCollection", [new JSIL.GenericParameter("TKey", "System.Collections.Generic.Dictionary`2"), new JSIL.GenericParameter("TValue", "System.Collections.Generic.Dictionary`2")]), [], []), 
    function Dictionary$b2_get_Keys () {
      return new ($asm01.System.Collections.Generic.Dictionary$b2_KeyCollection.Of($thisType.TKey.get(this), $thisType.TValue.get(this))) (this);
    }
  );

  $.Method({Static:false, Public:true }, "get_Values", 
    $sig.make(0x301, $asm01.TypeRef("System.Collections.Generic.Dictionary`2/ValueCollection", [new JSIL.GenericParameter("TKey", "System.Collections.Generic.Dictionary`2"), new JSIL.GenericParameter("TValue", "System.Collections.Generic.Dictionary`2")]), [], []), 
    function Dictionary$b2_get_Values () {
      return new ($asm01.System.Collections.Generic.Dictionary$b2_ValueCollection.Of($thisType.TKey.get(this), $thisType.TValue.get(this))) (this);
    }
  );

  $.Method({Static:false, Public:true }, "GetEnumerator", 
    $sig.make(0x367, $asm01.TypeRef("System.Collections.Generic.Dictionary`2/Enumerator", [new JSIL.GenericParameter("TKey", "System.Collections.Generic.Dictionary`2"), new JSIL.GenericParameter("TValue", "System.Collections.Generic.Dictionary`2")]), [], []), 
    function Dictionary$b2_GetEnumerator () {
      return new ($asm01.System.Collections.Generic.Dictionary$b2_Enumerator.Of($thisType.TKey.get(this), $thisType.TValue.get(this))) (this);
    }
  );

  $.Method({Static:false, Public:false}, "Init", 
    $sig.make(0x33B, null, [$asm01.TypeRef("System.Int32"), $asm01.TypeRef("System.Collections.Generic.IEqualityComparer`1", [new JSIL.GenericParameter("TKey", "System.Collections.Generic.Dictionary`2")])], []), 
    function Dictionary$b2_Init (capacity, hcp) {
      if (capacity < 0) {
        throw new ($T08())("capacity");
      }
      this.hcp = ((hcp !== null) ? hcp : $asm01.System.Collections.Generic.EqualityComparer$b1.Of($thisType.TKey.get(this)).get_Default());
      if (capacity === 0) {
        capacity = 10;
      }
      capacity = (((((capacity / 0.89999997615814209)) | 0) + 1) | 0);
      $thisType.Of($thisType.TKey.get(this), $thisType.TValue.get(this)).prototype.InitArrays.call(this, capacity);
      this.generation = 0;
    }
  );

  $.Method({Static:false, Public:false}, "InitArrays", 
    $sig.make(0x33C, null, [$asm01.TypeRef("System.Int32")], []), 
    function Dictionary$b2_InitArrays (size) {
      this.table = JSIL.Array.New($T00(), size);
      this.linkSlots = JSIL.Array.New($T0E(), size);
      this.emptySlot = -1;
      this.keySlots = JSIL.Array.New($thisType.TKey.get(this), size);
      this.valueSlots = JSIL.Array.New($thisType.TValue.get(this), size);
      this.touchedSlots = 0;
      this.threshold = (((this.table.length * 0.89999997615814209)) | 0);
      if (!((this.threshold !== 0) || (this.table.length <= 0))) {
        this.threshold = 1;
      }
    }
  );

  $.Method({Static:true , Public:false}, "make_pair", 
    $sig.make(0x33F, $asm01.TypeRef("System.Collections.Generic.KeyValuePair`2", [new JSIL.GenericParameter("TKey", "System.Collections.Generic.Dictionary`2"), new JSIL.GenericParameter("TValue", "System.Collections.Generic.Dictionary`2")]), [new JSIL.GenericParameter("TKey", "System.Collections.Generic.Dictionary`2"), new JSIL.GenericParameter("TValue", "System.Collections.Generic.Dictionary`2")], []), 
    function Dictionary$b2_make_pair (key, value) {
      return new ($asm01.System.Collections.Generic.KeyValuePair$b2.Of($thisType.TKey.get(this), $thisType.TValue.get(this))) (key, value);
    }
  );

  $.Method({Static:true , Public:false}, "pick_key", 
    $sig.make(0x340, new JSIL.GenericParameter("TKey", "System.Collections.Generic.Dictionary`2"), [new JSIL.GenericParameter("TKey", "System.Collections.Generic.Dictionary`2"), new JSIL.GenericParameter("TValue", "System.Collections.Generic.Dictionary`2")], []), 
    function Dictionary$b2_pick_key (key, value) {
      return key;
    }
  );

  $.Method({Static:true , Public:false}, "pick_value", 
    $sig.make(0x341, new JSIL.GenericParameter("TValue", "System.Collections.Generic.Dictionary`2"), [new JSIL.GenericParameter("TKey", "System.Collections.Generic.Dictionary`2"), new JSIL.GenericParameter("TValue", "System.Collections.Generic.Dictionary`2")], []), 
    function Dictionary$b2_pick_value (key, value) {
      return value;
    }
  );

  $.Method({Static:false, Public:true }, "Remove", 
    $sig.make(0x34D, $asm01.TypeRef("System.Boolean"), [new JSIL.GenericParameter("TKey", "System.Collections.Generic.Dictionary`2")], []), 
    function Dictionary$b2_Remove (key) {
      if (key === null) {
        throw new ($T01())("key");
      }
      var hashCode = ((this.hcp.IEqualityComparer$b1_GetHashCode(JSIL.CloneParameter($thisType.TKey.get(this), key)) | -2147483648) | 0);
      var index = ((((hashCode & 2147483647) | 0) % this.table.length) | 0);
      var cur = ((this.table[index] - 1) | 0);
      if (cur !== -1) {

        var $label0 = 0;
      $labelgroup0: 
        while (true) {
          switch ($label0) {
            case 0: /* $entry0 */ 
              var prev = -1;

              while ((this.linkSlots[cur].HashCode !== hashCode) || !this.hcp.IEqualityComparer$b1_Equals(JSIL.CloneParameter($thisType.TKey.get(this), this.keySlots[cur]), JSIL.CloneParameter($thisType.TKey.get(this), key))) {
                prev = cur;
                cur = this.linkSlots[cur].Next;
                if (cur === -1) {
                  $label0 = 1 /* goto IL_C1 */ ;
                  continue $labelgroup0;
                }
              }
              $label0 = 1 /* goto IL_C1 */ ;
              continue $labelgroup0;

            case 1: /* IL_C1 */ 
              if (cur === -1) {
                var result = false;
                return result;
              }
              --this.count;
              if (prev === -1) {
                this.table[index] = ((this.linkSlots[cur].Next + 1) | 0);
              } else {
                this.linkSlots[prev].Next = this.linkSlots[cur].Next;
              }
              this.linkSlots[cur].Next = this.emptySlot;
              this.emptySlot = cur;
              this.linkSlots[cur].HashCode = 0;
              this.keySlots[cur] = ($thisType.TKey.get(this).IsValueType ? JSIL.CreateInstanceOfType($thisType.TKey.get(this)) : null);
              this.valueSlots[cur] = ($thisType.TValue.get(this).IsValueType ? JSIL.CreateInstanceOfType($thisType.TValue.get(this)) : null);
              ++this.generation;
              result = true;
              return result;

              break $labelgroup0;
          }
        }
      }
      result = false;
      return result;
    }
  );

  $.Method({Static:false, Public:false}, "Resize", 
    $sig.make(0x346, null, [], []), 
    function Dictionary$b2_Resize () {
      var newSize = $T0F().ToPrime(((((this.table.length << 1) | 0) | 1) | 0));
      var newTable = JSIL.Array.New($T00(), newSize);
      var newLinkSlots = JSIL.Array.New($T0E(), newSize);

      for (var i = 0; i < this.table.length; ++i) {

        for (var cur = ((this.table[i] - 1) | 0); cur !== -1; cur = this.linkSlots[cur].Next) {
          var hashCode = (newLinkSlots[cur].HashCode = ((this.hcp.IEqualityComparer$b1_GetHashCode(JSIL.CloneParameter($thisType.TKey.get(this), this.keySlots[cur])) | -2147483648) | 0));
          var index = ((((hashCode & 2147483647) | 0) % newSize) | 0);
          newLinkSlots[cur].Next = ((newTable[index] - 1) | 0);
          newTable[index] = ((cur + 1) | 0);
        }
      }
      this.table = newTable;
      this.linkSlots = newLinkSlots;
      var newKeySlots = JSIL.Array.New($thisType.TKey.get(this), newSize);
      var newValueSlots = JSIL.Array.New($thisType.TValue.get(this), newSize);
                      ((function(sourceArray, sourceIndex, destinationArray, destinationIndex, length) {
                          var values = [];
                          for (var i=0; i<length; i++)
                              values.push(sourceArray[i + sourceIndex]);
                          for (var i=0; i<length; i++)
                              destinationArray[i+destinationIndex] = values[i];
                      })(this.keySlots, 0, newKeySlots, 0, this.touchedSlots));
                      ((function(sourceArray, sourceIndex, destinationArray, destinationIndex, length) {
                          var values = [];
                          for (var i=0; i<length; i++)
                              values.push(sourceArray[i + sourceIndex]);
                          for (var i=0; i<length; i++)
                              destinationArray[i+destinationIndex] = values[i];
                      })(this.valueSlots, 0, newValueSlots, 0, this.touchedSlots));
      this.keySlots = newKeySlots;
      this.valueSlots = newValueSlots;
      this.threshold = (((newSize * 0.89999997615814209)) | 0);
    }
  );

  $.Method({Static:false, Public:true }, "set_Item", 
    $sig.make(0x2E1, null, [new JSIL.GenericParameter("TKey", "System.Collections.Generic.Dictionary`2"), new JSIL.GenericParameter("TValue", "System.Collections.Generic.Dictionary`2")], []), 
    function Dictionary$b2_set_Item (key, value) {
      if (key === null) {
        throw new ($T01())("key");
      }
      var hashCode = ((this.hcp.IEqualityComparer$b1_GetHashCode(JSIL.CloneParameter($thisType.TKey.get(this), key)) | -2147483648) | 0);
      var index = ((((hashCode & 2147483647) | 0) % this.table.length) | 0);
      var cur = ((this.table[index] - 1) | 0);
      var prev = -1;
      if (cur !== -1) {

      $loop0: 
        while ((this.linkSlots[cur].HashCode !== hashCode) || !this.hcp.IEqualityComparer$b1_Equals(JSIL.CloneParameter($thisType.TKey.get(this), this.keySlots[cur]), JSIL.CloneParameter($thisType.TKey.get(this), key))) {
          prev = cur;
          cur = this.linkSlots[cur].Next;
          if (cur === -1) {
            break $loop0;
          }
        }
      }
      if (cur === -1) {
        if (++this.count > this.threshold) {
          $thisType.Of($thisType.TKey.get(this), $thisType.TValue.get(this)).prototype.Resize.call(this);
          index = ((((hashCode & 2147483647) | 0) % this.table.length) | 0);
        }
        cur = this.emptySlot;
        if (cur === -1) {
          cur = this.touchedSlots++;
        } else {
          this.emptySlot = this.linkSlots[cur].Next;
        }
        this.linkSlots[cur].Next = ((this.table[index] - 1) | 0);
        this.table[index] = ((cur + 1) | 0);
        this.linkSlots[cur].HashCode = hashCode;
        this.keySlots[cur] = JSIL.CloneParameter($thisType.TKey.get(this), key);
      } else if (prev !== -1) {
        this.linkSlots[prev].Next = this.linkSlots[cur].Next;
        this.linkSlots[cur].Next = ((this.table[index] - 1) | 0);
        this.table[index] = ((cur + 1) | 0);
      }
      this.valueSlots[cur] = value;
      ++this.generation;
    }
  );

  $.Method({Static:false, Public:false}, "ICollection`1.Add", 
    $sig.make(0x359, null, [$asm01.TypeRef("System.Collections.Generic.KeyValuePair`2", [new JSIL.GenericParameter("TKey", "System.Collections.Generic.Dictionary`2"), new JSIL.GenericParameter("TValue", "System.Collections.Generic.Dictionary`2")])], []), 
    function Dictionary$b2_ICollection$b1_Add (keyValuePair) {
      this.Add(
        JSIL.CloneParameter($thisType.TKey.get(this), keyValuePair.get_Key()), 
        JSIL.CloneParameter($thisType.TValue.get(this), keyValuePair.get_Value())
      );
    }
  );

  $.Method({Static:false, Public:false}, "ICollection`1.Contains", 
    $sig.make(0x35A, $asm01.TypeRef("System.Boolean"), [$asm01.TypeRef("System.Collections.Generic.KeyValuePair`2", [new JSIL.GenericParameter("TKey", "System.Collections.Generic.Dictionary`2"), new JSIL.GenericParameter("TValue", "System.Collections.Generic.Dictionary`2")])], []), 
    function Dictionary$b2_ICollection$b1_Contains (keyValuePair) {
      return $thisType.Of($thisType.TKey.get(this), $thisType.TValue.get(this)).prototype.ContainsKeyValuePair.call(this, keyValuePair);
    }
  );

  $.Method({Static:false, Public:false}, "ICollection`1.CopyTo", 
    $sig.make(0x35B, null, [$jsilcore.TypeRef("System.Array", [$asm01.TypeRef("System.Collections.Generic.KeyValuePair`2", [new JSIL.GenericParameter("TKey", "System.Collections.Generic.Dictionary`2"), new JSIL.GenericParameter("TValue", "System.Collections.Generic.Dictionary`2")])]), $asm01.TypeRef("System.Int32")], []), 
    function Dictionary$b2_ICollection$b1_CopyTo (array, index) {
      $thisType.Of($thisType.TKey.get(this), $thisType.TValue.get(this)).prototype.CopyTo.call(this, array, index);
    }
  );

  $.Method({Static:false, Public:false}, "ICollection`1.get_IsReadOnly", 
    $sig.make(0x312, $asm01.TypeRef("System.Boolean"), [], []), 
    function Dictionary$b2_ICollection$b1_get_IsReadOnly () {
      return false;
    }
  );

  $.Method({Static:false, Public:false}, "ICollection`1.Remove", 
    $sig.make(0x35D, $asm01.TypeRef("System.Boolean"), [$asm01.TypeRef("System.Collections.Generic.KeyValuePair`2", [new JSIL.GenericParameter("TKey", "System.Collections.Generic.Dictionary`2"), new JSIL.GenericParameter("TValue", "System.Collections.Generic.Dictionary`2")])], []), 
    function Dictionary$b2_ICollection$b1_Remove (keyValuePair) {
      return ($thisType.Of($thisType.TKey.get(this), $thisType.TValue.get(this)).prototype.ContainsKeyValuePair.call(this, keyValuePair.MemberwiseClone()) && this.Remove(JSIL.CloneParameter($thisType.TKey.get(this), keyValuePair.get_Key())));
    }
  );

  $.Method({Static:false, Public:false}, "IDictionary`2.get_Keys", 
    $sig.make(0x2F7, $asm01.TypeRef("System.Collections.Generic.ICollection`1", [new JSIL.GenericParameter("TKey", "System.Collections.Generic.Dictionary`2")]), [], []), 
    function Dictionary$b2_IDictionary$b2_get_Keys () {
      return $thisType.Of($thisType.TKey.get(this), $thisType.TValue.get(this)).prototype.get_Keys.call(this);
    }
  );

  $.Method({Static:false, Public:false}, "IDictionary`2.get_Values", 
    $sig.make(0x2FC, $asm01.TypeRef("System.Collections.Generic.ICollection`1", [new JSIL.GenericParameter("TValue", "System.Collections.Generic.Dictionary`2")]), [], []), 
    function Dictionary$b2_IDictionary$b2_get_Values () {
      return $thisType.Of($thisType.TKey.get(this), $thisType.TValue.get(this)).prototype.get_Values.call(this);
    }
  );

  $.Method({Static:false, Public:false}, "IEnumerable`1.GetEnumerator", 
    $sig.make(0x364, $asm01.TypeRef("System.Collections.Generic.IEnumerator`1", [$asm01.TypeRef("System.Collections.Generic.KeyValuePair`2", [new JSIL.GenericParameter("TKey", "System.Collections.Generic.Dictionary`2"), new JSIL.GenericParameter("TValue", "System.Collections.Generic.Dictionary`2")])]), [], []), 
    function Dictionary$b2_IEnumerable$b1_GetEnumerator () {
      return new ($asm01.System.Collections.Generic.Dictionary$b2_Enumerator.Of($thisType.TKey.get(this), $thisType.TValue.get(this))) (this);
    }
  );

  $.Method({Static:false, Public:false}, "ICollection.CopyTo", 
    $sig.make(0x360, null, [$asm01.TypeRef("System.Array"), $asm01.TypeRef("System.Int32")], []), 
    function Dictionary$b2_ICollection_CopyTo (array, index) {
      var pairs = System.Array.Of($asm01.System.Collections.Generic.KeyValuePair$b2.Of($thisType.TKey.get(this), $thisType.TValue.get(this))).$As(array);
      if (pairs !== null) {
        $thisType.Of($thisType.TKey.get(this), $thisType.TValue.get(this)).prototype.CopyTo.call(this, pairs, index);
      } else {
        $thisType.Of($thisType.TKey.get(this), $thisType.TValue.get(this)).prototype.CopyToCheck.call(this, array, index);
        var entries = $T12().$As(array);
        if (entries !== null) {
          $thisType.Of($thisType.TKey.get(this), $thisType.TValue.get(this)).prototype.Do_CopyTo$b2($T13(), $T13()).call(this, entries, index, function (key, value) {
              return new $asm01.System.Collections.DictionaryEntry(key, value);
            });
        } else {
          $thisType.Of($thisType.TKey.get(this), $thisType.TValue.get(this)).prototype.Do_ICollectionCopyTo$b1($asm01.System.Collections.Generic.KeyValuePair$b2.Of($thisType.TKey.get(this), $thisType.TValue.get(this))).call(this, array, index, $asm01.System.Collections.Generic.Dictionary$b2_Transform$b1.Of(
                $thisType.TKey.get(this), $thisType.TValue.get(this), 
                $asm01.System.Collections.Generic.KeyValuePair$b2.Of($thisType.TKey.get(this), $thisType.TValue.get(this))
            ).New($thisType.Of($thisType.TKey.get(this), $thisType.TValue.get(this)), $thisType.Of($thisType.TKey.get(this), $thisType.TValue.get(this)).make_pair));
        }
      }
    }
  );

  $.Method({Static:false, Public:false}, "ICollection.get_IsSynchronized", 
    $sig.make(0x30D, $asm01.TypeRef("System.Boolean"), [], []), 
    function Dictionary$b2_ICollection_get_IsSynchronized () {
      return false;
    }
  );

  $.Method({Static:false, Public:false}, "ICollection.get_SyncRoot", 
    $sig.make(0x30F, $asm01.TypeRef("System.Object"), [], []), 
    function Dictionary$b2_ICollection_get_SyncRoot () {
      return this;
    }
  );

  $.Method({Static:false, Public:false}, "IDictionary.Add", 
    $sig.make(0x354, null, [$asm01.TypeRef("System.Object"), $asm01.TypeRef("System.Object")], []), 
    function Dictionary$b2_IDictionary_Add (key, value) {
      this.Add(
        JSIL.CloneParameter($thisType.TKey.get(this), $thisType.Of($thisType.TKey.get(this), $thisType.TValue.get(this)).prototype.ToTKey.call(this, key)), 
        JSIL.CloneParameter($thisType.TValue.get(this), $thisType.Of($thisType.TKey.get(this), $thisType.TValue.get(this)).prototype.ToTValue.call(this, value))
      );
    }
  );

  $.Method({Static:false, Public:false}, "IDictionary.Contains", 
    $sig.make(0x356, $asm01.TypeRef("System.Boolean"), [$asm01.TypeRef("System.Object")], []), 
    function Dictionary$b2_IDictionary_Contains (key) {
      if (key === null) {
        throw new ($T01())("key");
      }
      return ($thisType.TKey.get(this).$Is(key) && this.ContainsKey(JSIL.CloneParameter($thisType.TKey.get(this), $thisType.TKey.get(this).$Cast(key))));
    }
  );

  $.Method({Static:false, Public:false}, "IDictionary.get_IsFixedSize", 
    $sig.make(0x307, $asm01.TypeRef("System.Boolean"), [], []), 
    function Dictionary$b2_IDictionary_get_IsFixedSize () {
      return false;
    }
  );

  $.Method({Static:false, Public:false}, "IDictionary.get_IsReadOnly", 
    $sig.make(0x308, $asm01.TypeRef("System.Boolean"), [], []), 
    function Dictionary$b2_IDictionary_get_IsReadOnly () {
      return false;
    }
  );

  $.Method({Static:false, Public:false}, "IDictionary.get_Item", 
    $sig.make(0x309, $asm01.TypeRef("System.Object"), [$asm01.TypeRef("System.Object")], []), 
    function Dictionary$b2_IDictionary_get_Item (key) {
      if (!(($thisType.TKey.get(this).$As(key) === null) || !this.ContainsKey(JSIL.CloneParameter($thisType.TKey.get(this), $thisType.TKey.get(this).$Cast(key))))) {
        var result = JSIL.CloneParameter($thisType.TValue.get(this), this.get_Item(JSIL.CloneParameter($thisType.TKey.get(this), $thisType.Of($thisType.TKey.get(this), $thisType.TValue.get(this)).prototype.ToTKey.call(this, key))));
      } else {
        result = null;
      }
      return result;
    }
  );

  $.Method({Static:false, Public:false}, "IDictionary.get_Keys", 
    $sig.make(0x304, $asm01.TypeRef("System.Collections.ICollection"), [], []), 
    function Dictionary$b2_IDictionary_get_Keys () {
      return $thisType.Of($thisType.TKey.get(this), $thisType.TValue.get(this)).prototype.get_Keys.call(this);
    }
  );

  $.Method({Static:false, Public:false}, "IDictionary.get_Values", 
    $sig.make(0x306, $asm01.TypeRef("System.Collections.ICollection"), [], []), 
    function Dictionary$b2_IDictionary_get_Values () {
      return $thisType.Of($thisType.TKey.get(this), $thisType.TValue.get(this)).prototype.get_Values.call(this);
    }
  );

  $.Method({Static:false, Public:false}, "IDictionary.GetEnumerator", 
    $sig.make(0x366, $asm01.TypeRef("System.Collections.IDictionaryEnumerator"), [], []), 
    function Dictionary$b2_IDictionary_GetEnumerator () {
      return new ($asm01.System.Collections.Generic.Dictionary$b2_ShimEnumerator.Of($thisType.TKey.get(this), $thisType.TValue.get(this))) (this);
    }
  );

  $.Method({Static:false, Public:false}, "IDictionary.Remove", 
    $sig.make(0x357, null, [$asm01.TypeRef("System.Object")], []), 
    function Dictionary$b2_IDictionary_Remove (key) {
      if (key === null) {
        throw new ($T01())("key");
      }
      if ($thisType.TKey.get(this).$Is(key)) {
        this.Remove(JSIL.CloneParameter($thisType.TKey.get(this), $thisType.TKey.get(this).$Cast(key)));
      }
    }
  );

  $.Method({Static:false, Public:false}, "IDictionary.set_Item", 
    $sig.make(0x30B, null, [$asm01.TypeRef("System.Object"), $asm01.TypeRef("System.Object")], []), 
    function Dictionary$b2_IDictionary_set_Item (key, value) {
      this.set_Item(
        JSIL.CloneParameter($thisType.TKey.get(this), $thisType.Of($thisType.TKey.get(this), $thisType.TValue.get(this)).prototype.ToTKey.call(this, key)), 
        JSIL.CloneParameter($thisType.TValue.get(this), $thisType.Of($thisType.TKey.get(this), $thisType.TValue.get(this)).prototype.ToTValue.call(this, value))
      );
    }
  );

  $.Method({Static:false, Public:false}, "IEnumerable.GetEnumerator", 
    $sig.make(0x362, $asm01.TypeRef("System.Collections.IEnumerator"), [], []), 
    function Dictionary$b2_IEnumerable_GetEnumerator () {
      return new ($asm01.System.Collections.Generic.Dictionary$b2_Enumerator.Of($thisType.TKey.get(this), $thisType.TValue.get(this))) (this);
    }
  );

  $.Method({Static:false, Public:false}, "ToTKey", 
    $sig.make(0x351, new JSIL.GenericParameter("TKey", "System.Collections.Generic.Dictionary`2"), [$asm01.TypeRef("System.Object")], []), 
    function Dictionary$b2_ToTKey (key) {
      if (key === null) {
        throw new ($T01())("key");
      }
      if (!$thisType.TKey.get(this).$Is(key)) {
        throw $sig.get(0x818, null, [$asm01.System.String, $asm01.System.String], []).Construct($T04(), ("not of type: " + $thisType.TKey.get(this).toString()), "key");
      }
      return $thisType.TKey.get(this).$Cast(key);
    }
  );

  $.Method({Static:false, Public:false}, "ToTValue", 
    $sig.make(0x352, new JSIL.GenericParameter("TValue", "System.Collections.Generic.Dictionary`2"), [$asm01.TypeRef("System.Object")], []), 
    function Dictionary$b2_ToTValue (value) {
      if (!((value !== null) || $thisType.TValue.get(this).Type$IsValueType$value)) {
        var result = ($thisType.TValue.get(this).IsValueType ? JSIL.CreateInstanceOfType($thisType.TValue.get(this)) : null);
      } else {
        if (!$thisType.TValue.get(this).$Is(value)) {
          throw $sig.get(0x818, null, [$asm01.System.String, $asm01.System.String], []).Construct($T04(), ("not of type: " + $thisType.TValue.get(this).toString()), "value");
        }
        result = JSIL.CloneParameter($thisType.TValue.get(this), $thisType.TValue.get(this).$Cast(value));
      }
      return result;
    }
  );

  $.Method({Static:false, Public:true }, "TryGetValue", 
    $sig.make(0x34F, $asm01.TypeRef("System.Boolean"), [new JSIL.GenericParameter("TKey", "System.Collections.Generic.Dictionary`2"), $jsilcore.TypeRef("JSIL.Reference", [new JSIL.GenericParameter("TValue", "System.Collections.Generic.Dictionary`2")])], []), 
    function Dictionary$b2_TryGetValue (key, /* ref */ value) {
      if (key === null) {
        throw new ($T01())("key");
      }
      var hashCode = ((this.hcp.IEqualityComparer$b1_GetHashCode(JSIL.CloneParameter($thisType.TKey.get(this), key)) | -2147483648) | 0);

      for (var cur = ((this.table[((((hashCode & 2147483647) | 0) % this.table.length) | 0)] - 1) | 0); cur !== -1; cur = this.linkSlots[cur].Next) {
        if (!((this.linkSlots[cur].HashCode !== hashCode) || !this.hcp.IEqualityComparer$b1_Equals(JSIL.CloneParameter($thisType.TKey.get(this), this.keySlots[cur]), JSIL.CloneParameter($thisType.TKey.get(this), key)))) {
          value.value = JSIL.CloneParameter($thisType.TValue.get(this), this.valueSlots[cur]);
          var result = true;
          return result;
        }
      }
      value.value = ($thisType.TValue.get(this).IsValueType ? JSIL.CreateInstanceOfType($thisType.TValue.get(this)) : null);
      result = false;
      return result;
    }
  );

  $.Constant({Static:true , Public:false}, "INITIAL_SIZE", 10); 
  $.Constant({Static:true , Public:false}, "DEFAULT_LOAD_FACTOR", 0.89999997615814209); 
  $.Constant({Static:true , Public:false}, "NO_SLOT", -1); 
  $.Constant({Static:true , Public:false}, "HASH_FLAG", -2147483648); 
  $.Field({Static:false, Public:false}, "table", $jsilcore.TypeRef("System.Array", [$asm01.TypeRef("System.Int32")])); 
  $.Field({Static:false, Public:false}, "linkSlots", $jsilcore.TypeRef("System.Array", [$asm01.TypeRef("System.Collections.Generic.Link")])); 
  $.Field({Static:false, Public:false}, "keySlots", $jsilcore.TypeRef("System.Array", [$.GenericParameter("TKey")])); 
  $.Field({Static:false, Public:false}, "valueSlots", $jsilcore.TypeRef("System.Array", [$.GenericParameter("TValue")])); 
  $.Field({Static:false, Public:false}, "hcp", $asm01.TypeRef("System.Collections.Generic.IEqualityComparer`1", [$.GenericParameter("TKey")])); 
  $.Field({Static:false, Public:false}, "touchedSlots", $asm01.TypeRef("System.Int32")); 
  $.Field({Static:false, Public:false}, "emptySlot", $asm01.TypeRef("System.Int32")); 
  $.Field({Static:false, Public:false}, "count", $asm01.TypeRef("System.Int32")); 
  $.Field({Static:false, Public:false}, "threshold", $asm01.TypeRef("System.Int32")); 
  $.Field({Static:false, Public:false}, "generation", $asm01.TypeRef("System.Int32")); 
  $.Property({Static:false, Public:true , Virtual:true }, "Count", $asm01.TypeRef("System.Int32"));

  $.Property({Static:false, Public:true , Virtual:true }, "Item", new JSIL.GenericParameter("TValue", "System.Collections.Generic.Dictionary`2"));

  $.Property({Static:false, Public:true }, "Comparer", $asm01.TypeRef("System.Collections.Generic.IEqualityComparer`1", [new JSIL.GenericParameter("TKey", "System.Collections.Generic.Dictionary`2")]));

  $.Property({Static:false, Public:false, Virtual:true }, "IDictionary`2.Keys", $asm01.TypeRef("System.Collections.Generic.ICollection`1", [new JSIL.GenericParameter("TKey", "System.Collections.Generic.Dictionary`2")]));

  $.Property({Static:false, Public:false, Virtual:true }, "IDictionary`2.Values", $asm01.TypeRef("System.Collections.Generic.ICollection`1", [new JSIL.GenericParameter("TValue", "System.Collections.Generic.Dictionary`2")]));

  $.Property({Static:false, Public:true }, "Keys", $asm01.TypeRef("System.Collections.Generic.Dictionary`2/KeyCollection", [new JSIL.GenericParameter("TKey", "System.Collections.Generic.Dictionary`2"), new JSIL.GenericParameter("TValue", "System.Collections.Generic.Dictionary`2")]));

  $.Property({Static:false, Public:true }, "Values", $asm01.TypeRef("System.Collections.Generic.Dictionary`2/ValueCollection", [new JSIL.GenericParameter("TKey", "System.Collections.Generic.Dictionary`2"), new JSIL.GenericParameter("TValue", "System.Collections.Generic.Dictionary`2")]));

  $.Property({Static:false, Public:false, Virtual:true }, "IDictionary.Keys", $asm01.TypeRef("System.Collections.ICollection"));

  $.Property({Static:false, Public:false, Virtual:true }, "IDictionary.Values", $asm01.TypeRef("System.Collections.ICollection"));

  $.Property({Static:false, Public:false, Virtual:true }, "IDictionary.IsFixedSize", $asm01.TypeRef("System.Boolean"));

  $.Property({Static:false, Public:false, Virtual:true }, "IDictionary.IsReadOnly", $asm01.TypeRef("System.Boolean"));

  $.Property({Static:false, Public:false, Virtual:true }, "IDictionary.Item", $asm01.TypeRef("System.Object"));

  $.Property({Static:false, Public:false, Virtual:true }, "ICollection.IsSynchronized", $asm01.TypeRef("System.Boolean"));

  $.Property({Static:false, Public:false, Virtual:true }, "ICollection.SyncRoot", $asm01.TypeRef("System.Object"));

  $.Property({Static:false, Public:false, Virtual:true }, "ICollection`1.IsReadOnly", $asm01.TypeRef("System.Boolean"));

  $.ImplementInterfaces(
      $asm01.TypeRef("System.Collections.Generic.IDictionary`2", [new JSIL.GenericParameter("TKey", "System.Collections.Generic.Dictionary`2"), new JSIL.GenericParameter("TValue", "System.Collections.Generic.Dictionary`2")]), $asm01.TypeRef("System.Collections.Generic.ICollection`1", [$asm01.TypeRef("System.Collections.Generic.KeyValuePair`2", [new JSIL.GenericParameter("TKey", "System.Collections.Generic.Dictionary`2"), new JSIL.GenericParameter("TValue", "System.Collections.Generic.Dictionary`2")])]), 
      $asm01.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm01.TypeRef("System.Collections.Generic.KeyValuePair`2", [new JSIL.GenericParameter("TKey", "System.Collections.Generic.Dictionary`2"), new JSIL.GenericParameter("TValue", "System.Collections.Generic.Dictionary`2")])]), $asm01.TypeRef("System.Collections.IDictionary"), 
      $asm01.TypeRef("System.Collections.ICollection"), $asm01.TypeRef("System.Collections.IEnumerable"), 
      $asm01.TypeRef("System.Runtime.Serialization.ISerializable"), $asm01.TypeRef("System.Runtime.Serialization.IDeserializationCallback")
  )
})
  .Attribute($asm01.TypeRef("System.Diagnostics.DebuggerTypeProxyAttribute"), function () { return [$asm01.TypeRef("System.Collections.Generic.CollectionDebuggerView`2")]; })
  .Attribute($asm01.TypeRef("System.Runtime.InteropServices.ComVisibleAttribute"), function () { return [false]; })
  .Attribute($asm01.TypeRef("System.Diagnostics.DebuggerDisplayAttribute"), function () { return ["Count={Count}"]; })
  .Attribute($asm01.TypeRef("System.Reflection.DefaultMemberAttribute"), function () { return ["Item"]; });

JSIL.MakeDelegate("System.Collections.Generic.Dictionary`2/Transform`1", false, ["TKey", "TValue", "TRet"]);

JSIL.MakeClass($asm01.TypeRef("System.Object"), "System.Collections.Generic.Dictionary`2/ShimEnumerator", false, ["TKey", "TValue"], function ($) {
  var $thisType = $.publicInterface;

  $.Method({Static:false, Public:true }, ".ctor", 
    $sig.make(0xFD2, null, [$asm01.TypeRef("System.Collections.Generic.Dictionary`2", [new JSIL.GenericParameter("TKey", "System.Collections.Generic.Dictionary`2/ShimEnumerator"), new JSIL.GenericParameter("TValue", "System.Collections.Generic.Dictionary`2/ShimEnumerator")])], []), 
    function ShimEnumerator__ctor (host) {
      this.host_enumerator = $asm01.System.Collections.Generic.Dictionary$b2.Of($thisType.TKey.get(this), $thisType.TValue.get(this)).prototype.GetEnumerator.call(host);
    }
  );

  $.Method({Static:false, Public:true }, "Dispose", 
    $sig.make(0xFD5, null, [], []), 
    function ShimEnumerator_Dispose () {
      this.host_enumerator.Dispose();
    }
  );

  $.Method({Static:false, Public:true }, "get_Current", 
    $sig.make(0xFCF, $asm01.TypeRef("System.Object"), [], []), 
    function ShimEnumerator_get_Current () {
      return this.get_Entry();
    }
  );

  $.Method({Static:false, Public:true }, "get_Entry", 
    $sig.make(0xFBF, $asm01.TypeRef("System.Collections.DictionaryEntry"), [], []), 
    function ShimEnumerator_get_Entry () {
      return this.host_enumerator.IDictionaryEnumerator_get_Entry();
    }
  );

  $.Method({Static:false, Public:true }, "get_Key", 
    $sig.make(0xFC5, $asm01.TypeRef("System.Object"), [], []), 
    function ShimEnumerator_get_Key () {
      var current = this.host_enumerator.get_Current();
      return current.get_Key();
    }
  );

  $.Method({Static:false, Public:true }, "get_Value", 
    $sig.make(0xFCC, $asm01.TypeRef("System.Object"), [], []), 
    function ShimEnumerator_get_Value () {
      var current = this.host_enumerator.get_Current();
      return current.get_Value();
    }
  );

  $.Method({Static:false, Public:true }, "MoveNext", 
    $sig.make(0xFD8, $asm01.TypeRef("System.Boolean"), [], []), 
    function ShimEnumerator_MoveNext () {
      return this.host_enumerator.MoveNext();
    }
  );

  $.Method({Static:false, Public:true }, "Reset", 
    $sig.make(0xFDD, null, [], []), 
    function ShimEnumerator_Reset () {
      this.host_enumerator.Reset();
    }
  );

  $.Field({Static:false, Public:false}, "host_enumerator", $asm01.TypeRef("System.Collections.Generic.Dictionary`2/Enumerator", [$.GenericParameter("TKey"), $.GenericParameter("TValue")])); 
  $.Property({Static:false, Public:true , Virtual:true }, "Entry", $asm01.TypeRef("System.Collections.DictionaryEntry"));

  $.Property({Static:false, Public:true , Virtual:true }, "Key", $asm01.TypeRef("System.Object"));

  $.Property({Static:false, Public:true , Virtual:true }, "Value", $asm01.TypeRef("System.Object"));

  $.Property({Static:false, Public:true , Virtual:true }, "Current", $asm01.TypeRef("System.Object"));

  $.ImplementInterfaces($asm01.TypeRef("System.Collections.IDictionaryEnumerator"), $asm01.TypeRef("System.Collections.IEnumerator"))
});

JSIL.MakeStruct($asm01.TypeRef("System.ValueType"), "System.Collections.Generic.Dictionary`2/Enumerator", false, ["TKey", "TValue"], function ($) {
  var $thisType = $.publicInterface;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm01.System.Boolean)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm01.System.Int32)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm01.System.Collections.DictionaryEntry)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm01.System.InvalidOperationException)) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize($asm01.System.ObjectDisposedException)) ();
  };

  $.Method({Static:false, Public:false}, ".ctor", 
    $sig.make(0x514, null, [$asm01.TypeRef("System.Collections.Generic.Dictionary`2", [new JSIL.GenericParameter("TKey", "System.Collections.Generic.Dictionary`2/Enumerator"), new JSIL.GenericParameter("TValue", "System.Collections.Generic.Dictionary`2/Enumerator")])], []), 
    function Enumerator__ctor (dictionary) {
      JSIL.CopyMembers(new ($thisType.Of($thisType.TKey.get(this), $thisType.TValue.get(this))) (), this);
      this.dictionary = dictionary;
      this.stamp = dictionary.generation;
    }
  );

  $.Method({Static:false, Public:true }, "Dispose", 
    $sig.make(0x51F, null, [], []), 
    function Enumerator_Dispose () {
      this.dictionary = null;
    }
  );

  $.Method({Static:false, Public:true }, "get_Current", 
    $sig.make(0x505, $asm01.TypeRef("System.Collections.Generic.KeyValuePair`2", [new JSIL.GenericParameter("TKey", "System.Collections.Generic.Dictionary`2/Enumerator"), new JSIL.GenericParameter("TValue", "System.Collections.Generic.Dictionary`2/Enumerator")]), [], []), 
    function Enumerator_get_Current () {
      return this.current;
    }
  );

  $.Method({Static:false, Public:false}, "get_CurrentKey", 
    $sig.make(0x506, new JSIL.GenericParameter("TKey", "System.Collections.Generic.Dictionary`2/Enumerator"), [], []), 
    function Enumerator_get_CurrentKey () {
      this.VerifyCurrent();
      return this.current.get_Key();
    }
  );

  $.Method({Static:false, Public:false}, "get_CurrentValue", 
    $sig.make(0x507, new JSIL.GenericParameter("TValue", "System.Collections.Generic.Dictionary`2/Enumerator"), [], []), 
    function Enumerator_get_CurrentValue () {
      this.VerifyCurrent();
      return this.current.get_Value();
    }
  );

  $.Method({Static:false, Public:true }, "MoveNext", 
    $sig.make(0x516, $asm01.TypeRef("System.Boolean"), [], []), 
    function Enumerator_MoveNext () {
      this.VerifyState();
      if (this.next < 0) {
        var result = false;
      } else {

        while (this.next < this.dictionary.touchedSlots) {
          var cur = this.next++;
          if (((this.dictionary.linkSlots[cur].HashCode & -2147483648) | 0) !== 0) {
            this.current = new ($asm01.System.Collections.Generic.KeyValuePair$b2.Of($thisType.TKey.get(this), $thisType.TValue.get(this))) (this.dictionary.keySlots[cur], this.dictionary.valueSlots[cur]);
            result = true;
            return result;
          }
        }
        this.next = -1;
        result = false;
      }
      return result;
    }
  );

  $.Method({Static:false, Public:false}, "Reset", 
    $sig.make(0x51B, null, [], []), 
    function Enumerator_Reset () {
      this.VerifyState();
      this.next = 0;
    }
  );

  $.Method({Static:false, Public:false}, "IDictionaryEnumerator.get_Entry", 
    $sig.make(0x50E, $asm01.TypeRef("System.Collections.DictionaryEntry"), [], []), 
    function Enumerator_IDictionaryEnumerator_get_Entry () {
      this.VerifyCurrent();
      return new ($T02())(this.current.get_Key(), this.current.get_Value());
    }
  );

  $.Method({Static:false, Public:false}, "IDictionaryEnumerator.get_Key", 
    $sig.make(0x50F, $asm01.TypeRef("System.Object"), [], []), 
    function Enumerator_IDictionaryEnumerator_get_Key () {
      return this.get_CurrentKey();
    }
  );

  $.Method({Static:false, Public:false}, "IDictionaryEnumerator.get_Value", 
    $sig.make(0x511, $asm01.TypeRef("System.Object"), [], []), 
    function Enumerator_IDictionaryEnumerator_get_Value () {
      return this.get_CurrentValue();
    }
  );

  $.Method({Static:false, Public:false}, "IEnumerator.get_Current", 
    $sig.make(0x50B, $asm01.TypeRef("System.Object"), [], []), 
    function Enumerator_IEnumerator_get_Current () {
      this.VerifyCurrent();
      return this.current;
    }
  );

  $.Method({Static:false, Public:false}, "IEnumerator.Reset", 
    $sig.make(0x51A, null, [], []), 
    function Enumerator_IEnumerator_Reset () {
      this.Reset();
    }
  );

  $.Method({Static:false, Public:false}, "VerifyCurrent", 
    $sig.make(0x51E, null, [], []), 
    function Enumerator_VerifyCurrent () {
      this.VerifyState();
      if (this.next <= 0) {
        throw new ($T03())("Current is not valid");
      }
    }
  );

  $.Method({Static:false, Public:false}, "VerifyState", 
    $sig.make(0x51C, null, [], []), 
    function Enumerator_VerifyState () {
      if (this.dictionary === null) {
        throw new ($T04())(null);
      }
      if (this.dictionary.generation !== this.stamp) {
        throw new ($T03())("out of sync");
      }
    }
  );

  $.Field({Static:false, Public:false}, "dictionary", $asm01.TypeRef("System.Collections.Generic.Dictionary`2", [$.GenericParameter("TKey"), $.GenericParameter("TValue")])); 
  $.Field({Static:false, Public:false}, "next", $asm01.TypeRef("System.Int32")); 
  $.Field({Static:false, Public:false}, "stamp", $asm01.TypeRef("System.Int32")); 
  $.Field({Static:false, Public:false}, "current", $asm01.TypeRef("System.Collections.Generic.KeyValuePair`2", [$.GenericParameter("TKey"), $.GenericParameter("TValue")])); 
  $.Property({Static:false, Public:true , Virtual:true }, "Current", $asm01.TypeRef("System.Collections.Generic.KeyValuePair`2", [new JSIL.GenericParameter("TKey", "System.Collections.Generic.Dictionary`2/Enumerator"), new JSIL.GenericParameter("TValue", "System.Collections.Generic.Dictionary`2/Enumerator")]));

  $.Property({Static:false, Public:false}, "CurrentKey", new JSIL.GenericParameter("TKey", "System.Collections.Generic.Dictionary`2/Enumerator"));

  $.Property({Static:false, Public:false}, "CurrentValue", new JSIL.GenericParameter("TValue", "System.Collections.Generic.Dictionary`2/Enumerator"));

  $.Property({Static:false, Public:false, Virtual:true }, "IEnumerator.Current", $asm01.TypeRef("System.Object"));

  $.Property({Static:false, Public:false, Virtual:true }, "IDictionaryEnumerator.Entry", $asm01.TypeRef("System.Collections.DictionaryEntry"));

  $.Property({Static:false, Public:false, Virtual:true }, "IDictionaryEnumerator.Key", $asm01.TypeRef("System.Object"));

  $.Property({Static:false, Public:false, Virtual:true }, "IDictionaryEnumerator.Value", $asm01.TypeRef("System.Object"));

  $.ImplementInterfaces(
      $asm01.TypeRef("System.Collections.Generic.IEnumerator`1", [$asm01.TypeRef("System.Collections.Generic.KeyValuePair`2", [new JSIL.GenericParameter("TKey", "System.Collections.Generic.Dictionary`2/Enumerator"), new JSIL.GenericParameter("TValue", "System.Collections.Generic.Dictionary`2/Enumerator")])]), $asm01.TypeRef("System.IDisposable"), 
      $asm01.TypeRef("System.Collections.IDictionaryEnumerator"), $asm01.TypeRef("System.Collections.IEnumerator")
  )
});

JSIL.MakeClass($asm01.TypeRef("System.Object"), "System.Collections.Generic.Dictionary`2/KeyCollection", false, ["TKey", "TValue"], function ($) {
  var $thisType = $.publicInterface;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm01.System.ArgumentNullException)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm01.System.Int32)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm01.System.NotSupportedException)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm01.System.Array)) ();
  };

  $.Method({Static:false, Public:true }, ".ctor", 
    $sig.make(0x3EB, null, [$asm01.TypeRef("System.Collections.Generic.Dictionary`2", [new JSIL.GenericParameter("TKey", "System.Collections.Generic.Dictionary`2/KeyCollection"), new JSIL.GenericParameter("TValue", "System.Collections.Generic.Dictionary`2/KeyCollection")])], []), 
    function KeyCollection__ctor (dictionary) {
      if (dictionary === null) {
        throw new ($T00())("dictionary");
      }
      this.dictionary = dictionary;
    }
  );

  $.Method({Static:false, Public:true }, "CopyTo", 
    $sig.make(0x3ED, null, [$jsilcore.TypeRef("System.Array", [new JSIL.GenericParameter("TKey", "System.Collections.Generic.Dictionary`2/KeyCollection")]), $asm01.TypeRef("System.Int32")], []), 
    function KeyCollection_CopyTo (array, index) {
      $asm01.System.Collections.Generic.Dictionary$b2.Of($thisType.TKey.get(this), $thisType.TValue.get(this)).prototype.CopyToCheck.call(this.dictionary, array, index);
      $asm01.System.Collections.Generic.Dictionary$b2.Of($thisType.TKey.get(this), $thisType.TValue.get(this)).prototype.Do_CopyTo$b2($thisType.TKey.get(this), $thisType.TKey.get(this)).call(this.dictionary, array, index, $asm01.System.Collections.Generic.Dictionary$b2_Transform$b1.Of(
            $thisType.TKey.get(this), $thisType.TValue.get(this), 
            $thisType.TKey.get(this)
        ).New($asm01.System.Collections.Generic.Dictionary$b2.Of($thisType.TKey.get(this), $thisType.TValue.get(this)), $asm01.System.Collections.Generic.Dictionary$b2.Of($thisType.TKey.get(this), $thisType.TValue.get(this)).pick_key));
    }
  );

  $.Method({Static:false, Public:true }, "get_Count", 
    $sig.make(0x3E4, $asm01.TypeRef("System.Int32"), [], []), 
    function KeyCollection_get_Count () {
      return this.dictionary.get_Count();
    }
  );

  $.Method({Static:false, Public:true }, "GetEnumerator", 
    $sig.make(0x3EF, $asm01.TypeRef("System.Collections.Generic.Dictionary`2/KeyCollection/Enumerator", [new JSIL.GenericParameter("TKey", "System.Collections.Generic.Dictionary`2/KeyCollection"), new JSIL.GenericParameter("TValue", "System.Collections.Generic.Dictionary`2/KeyCollection")]), [], []), 
    function KeyCollection_GetEnumerator () {
      return new ($asm01.System.Collections.Generic.Dictionary$b2_KeyCollection_Enumerator.Of($thisType.TKey.get(this), $thisType.TValue.get(this))) (this.dictionary);
    }
  );

  $.Method({Static:false, Public:false}, "ICollection`1.Add", 
    $sig.make(0x3F3, null, [new JSIL.GenericParameter("TKey", "System.Collections.Generic.Dictionary`2/KeyCollection")], []), 
    function KeyCollection_ICollection$b1_Add (item) {
      throw new ($T02())("this is a read-only collection");
    }
  );

  $.Method({Static:false, Public:false}, "ICollection`1.Clear", 
    $sig.make(0x3F5, null, [], []), 
    function KeyCollection_ICollection$b1_Clear () {
      throw new ($T02())("this is a read-only collection");
    }
  );

  $.Method({Static:false, Public:false}, "ICollection`1.Contains", 
    $sig.make(0x3FA, $asm01.TypeRef("System.Boolean"), [new JSIL.GenericParameter("TKey", "System.Collections.Generic.Dictionary`2/KeyCollection")], []), 
    function KeyCollection_ICollection$b1_Contains (item) {
      return this.dictionary.ContainsKey(item);
    }
  );

  $.Method({Static:false, Public:false}, "ICollection`1.get_IsReadOnly", 
    $sig.make(0x3E7, $asm01.TypeRef("System.Boolean"), [], []), 
    function KeyCollection_ICollection$b1_get_IsReadOnly () {
      return true;
    }
  );

  $.Method({Static:false, Public:false}, "ICollection`1.Remove", 
    $sig.make(0x3FF, $asm01.TypeRef("System.Boolean"), [new JSIL.GenericParameter("TKey", "System.Collections.Generic.Dictionary`2/KeyCollection")], []), 
    function KeyCollection_ICollection$b1_Remove (item) {
      throw new ($T02())("this is a read-only collection");
    }
  );

  $.Method({Static:false, Public:false}, "IEnumerable`1.GetEnumerator", 
    $sig.make(0x402, $asm01.TypeRef("System.Collections.Generic.IEnumerator`1", [new JSIL.GenericParameter("TKey", "System.Collections.Generic.Dictionary`2/KeyCollection")]), [], []), 
    function KeyCollection_IEnumerable$b1_GetEnumerator () {
      return this.GetEnumerator();
    }
  );

  $.Method({Static:false, Public:false}, "ICollection.CopyTo", 
    $sig.make(0x405, null, [$asm01.TypeRef("System.Array"), $asm01.TypeRef("System.Int32")], []), 
    function KeyCollection_ICollection_CopyTo (array, index) {
      var target = System.Array.Of($thisType.TKey.get(this)).$As(array);
      if (target !== null) {
        this.CopyTo(target, index);
      } else {
        $asm01.System.Collections.Generic.Dictionary$b2.Of($thisType.TKey.get(this), $thisType.TValue.get(this)).prototype.CopyToCheck.call(this.dictionary, array, index);
        $asm01.System.Collections.Generic.Dictionary$b2.Of($thisType.TKey.get(this), $thisType.TValue.get(this)).prototype.Do_ICollectionCopyTo$b1($thisType.TKey.get(this)).call(this.dictionary, array, index, $asm01.System.Collections.Generic.Dictionary$b2_Transform$b1.Of(
              $thisType.TKey.get(this), $thisType.TValue.get(this), 
              $thisType.TKey.get(this)
          ).New($asm01.System.Collections.Generic.Dictionary$b2.Of($thisType.TKey.get(this), $thisType.TValue.get(this)), $asm01.System.Collections.Generic.Dictionary$b2.Of($thisType.TKey.get(this), $thisType.TValue.get(this)).pick_key));
      }
    }
  );

  $.Method({Static:false, Public:false}, "ICollection.get_IsSynchronized", 
    $sig.make(0x3E8, $asm01.TypeRef("System.Boolean"), [], []), 
    function KeyCollection_ICollection_get_IsSynchronized () {
      return false;
    }
  );

  $.Method({Static:false, Public:false}, "ICollection.get_SyncRoot", 
    $sig.make(0x3E9, $asm01.TypeRef("System.Object"), [], []), 
    function KeyCollection_ICollection_get_SyncRoot () {
      return this.dictionary.ICollection_get_SyncRoot();
    }
  );

  $.Method({Static:false, Public:false}, "IEnumerable.GetEnumerator", 
    $sig.make(0x408, $asm01.TypeRef("System.Collections.IEnumerator"), [], []), 
    function KeyCollection_IEnumerable_GetEnumerator () {
      return this.GetEnumerator();
    }
  );

  $.Field({Static:false, Public:false}, "dictionary", $asm01.TypeRef("System.Collections.Generic.Dictionary`2", [$.GenericParameter("TKey"), $.GenericParameter("TValue")])); 
  $.Property({Static:false, Public:true , Virtual:true }, "Count", $asm01.TypeRef("System.Int32"));

  $.Property({Static:false, Public:false, Virtual:true }, "ICollection`1.IsReadOnly", $asm01.TypeRef("System.Boolean"));

  $.Property({Static:false, Public:false, Virtual:true }, "ICollection.IsSynchronized", $asm01.TypeRef("System.Boolean"));

  $.Property({Static:false, Public:false, Virtual:true }, "ICollection.SyncRoot", $asm01.TypeRef("System.Object"));

  $.ImplementInterfaces(
      $asm01.TypeRef("System.Collections.Generic.ICollection`1", [new JSIL.GenericParameter("TKey", "System.Collections.Generic.Dictionary`2/KeyCollection")]), $asm01.TypeRef("System.Collections.Generic.IEnumerable`1", [new JSIL.GenericParameter("TKey", "System.Collections.Generic.Dictionary`2/KeyCollection")]), 
      $asm01.TypeRef("System.Collections.ICollection"), $asm01.TypeRef("System.Collections.IEnumerable")
  )
})
  .Attribute($asm01.TypeRef("System.Diagnostics.DebuggerTypeProxyAttribute"), function () { return [$asm01.TypeRef("System.Collections.Generic.CollectionDebuggerView`2")]; })
  .Attribute($asm01.TypeRef("System.Diagnostics.DebuggerDisplayAttribute"), function () { return ["Count={Count}"]; });

JSIL.MakeStruct($asm01.TypeRef("System.ValueType"), "System.Collections.Generic.Dictionary`2/KeyCollection/Enumerator", false, ["TKey", "TValue"], function ($) {
  var $thisType = $.publicInterface;

  $.Method({Static:false, Public:false}, ".ctor", 
    $sig.make(0x552, null, [$asm01.TypeRef("System.Collections.Generic.Dictionary`2", [new JSIL.GenericParameter("TKey", "System.Collections.Generic.Dictionary`2/KeyCollection/Enumerator"), new JSIL.GenericParameter("TValue", "System.Collections.Generic.Dictionary`2/KeyCollection/Enumerator")])], []), 
    function Enumerator__ctor (host) {
      this.host_enumerator = $asm01.System.Collections.Generic.Dictionary$b2.Of($thisType.TKey.get(this), $thisType.TValue.get(this)).prototype.GetEnumerator.call(host);
    }
  );

  $.Method({Static:false, Public:true }, "Dispose", 
    $sig.make(0x554, null, [], []), 
    function Enumerator_Dispose () {
      this.host_enumerator.Dispose();
    }
  );

  $.Method({Static:false, Public:true }, "get_Current", 
    $sig.make(0x54F, new JSIL.GenericParameter("TKey", "System.Collections.Generic.Dictionary`2/KeyCollection/Enumerator"), [], []), 
    function Enumerator_get_Current () {
      return this.host_enumerator.current.get_Key();
    }
  );

  $.Method({Static:false, Public:true }, "MoveNext", 
    $sig.make(0x555, $asm01.TypeRef("System.Boolean"), [], []), 
    function Enumerator_MoveNext () {
      return this.host_enumerator.MoveNext();
    }
  );

  $.Method({Static:false, Public:false}, "IEnumerator.get_Current", 
    $sig.make(0x550, $asm01.TypeRef("System.Object"), [], []), 
    function Enumerator_IEnumerator_get_Current () {
      return this.host_enumerator.get_CurrentKey();
    }
  );

  $.Method({Static:false, Public:false}, "IEnumerator.Reset", 
    $sig.make(0x557, null, [], []), 
    function Enumerator_IEnumerator_Reset () {
      this.host_enumerator.Reset();
    }
  );

  $.Field({Static:false, Public:false}, "host_enumerator", $asm01.TypeRef("System.Collections.Generic.Dictionary`2/Enumerator", [$.GenericParameter("TKey"), $.GenericParameter("TValue")])); 
  $.Property({Static:false, Public:true , Virtual:true }, "Current", new JSIL.GenericParameter("TKey", "System.Collections.Generic.Dictionary`2/KeyCollection/Enumerator"));

  $.Property({Static:false, Public:false, Virtual:true }, "IEnumerator.Current", $asm01.TypeRef("System.Object"));

  $.ImplementInterfaces(
      $asm01.TypeRef("System.Collections.Generic.IEnumerator`1", [new JSIL.GenericParameter("TKey", "System.Collections.Generic.Dictionary`2/KeyCollection/Enumerator")]), $asm01.TypeRef("System.IDisposable"), 
      $asm01.TypeRef("System.Collections.IEnumerator")
  )
});

JSIL.MakeClass($asm01.TypeRef("System.Object"), "System.Collections.Generic.Dictionary`2/ValueCollection", false, ["TKey", "TValue"], function ($) {
  var $thisType = $.publicInterface;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm01.System.ArgumentNullException)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm01.System.Int32)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm01.System.NotSupportedException)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm01.System.Array)) ();
  };

  $.Method({Static:false, Public:true }, ".ctor", 
    $sig.make(0x4E7, null, [$asm01.TypeRef("System.Collections.Generic.Dictionary`2", [new JSIL.GenericParameter("TKey", "System.Collections.Generic.Dictionary`2/ValueCollection"), new JSIL.GenericParameter("TValue", "System.Collections.Generic.Dictionary`2/ValueCollection")])], []), 
    function ValueCollection__ctor (dictionary) {
      if (dictionary === null) {
        throw new ($T00())("dictionary");
      }
      this.dictionary = dictionary;
    }
  );

  $.Method({Static:false, Public:true }, "CopyTo", 
    $sig.make(0x4E8, null, [$jsilcore.TypeRef("System.Array", [new JSIL.GenericParameter("TValue", "System.Collections.Generic.Dictionary`2/ValueCollection")]), $asm01.TypeRef("System.Int32")], []), 
    function ValueCollection_CopyTo (array, index) {
      $asm01.System.Collections.Generic.Dictionary$b2.Of($thisType.TKey.get(this), $thisType.TValue.get(this)).prototype.CopyToCheck.call(this.dictionary, array, index);
      $asm01.System.Collections.Generic.Dictionary$b2.Of($thisType.TKey.get(this), $thisType.TValue.get(this)).prototype.Do_CopyTo$b2($thisType.TValue.get(this), $thisType.TValue.get(this)).call(this.dictionary, array, index, $asm01.System.Collections.Generic.Dictionary$b2_Transform$b1.Of(
            $thisType.TKey.get(this), $thisType.TValue.get(this), 
            $thisType.TValue.get(this)
        ).New($asm01.System.Collections.Generic.Dictionary$b2.Of($thisType.TKey.get(this), $thisType.TValue.get(this)), $asm01.System.Collections.Generic.Dictionary$b2.Of($thisType.TKey.get(this), $thisType.TValue.get(this)).pick_value));
    }
  );

  $.Method({Static:false, Public:true }, "get_Count", 
    $sig.make(0x4E3, $asm01.TypeRef("System.Int32"), [], []), 
    function ValueCollection_get_Count () {
      return this.dictionary.get_Count();
    }
  );

  $.Method({Static:false, Public:true }, "GetEnumerator", 
    $sig.make(0x4E9, $asm01.TypeRef("System.Collections.Generic.Dictionary`2/ValueCollection/Enumerator", [new JSIL.GenericParameter("TKey", "System.Collections.Generic.Dictionary`2/ValueCollection"), new JSIL.GenericParameter("TValue", "System.Collections.Generic.Dictionary`2/ValueCollection")]), [], []), 
    function ValueCollection_GetEnumerator () {
      return new ($asm01.System.Collections.Generic.Dictionary$b2_ValueCollection_Enumerator.Of($thisType.TKey.get(this), $thisType.TValue.get(this))) (this.dictionary);
    }
  );

  $.Method({Static:false, Public:false}, "ICollection`1.Add", 
    $sig.make(0x4EA, null, [new JSIL.GenericParameter("TValue", "System.Collections.Generic.Dictionary`2/ValueCollection")], []), 
    function ValueCollection_ICollection$b1_Add (item) {
      throw new ($T02())("this is a read-only collection");
    }
  );

  $.Method({Static:false, Public:false}, "ICollection`1.Clear", 
    $sig.make(0x4EB, null, [], []), 
    function ValueCollection_ICollection$b1_Clear () {
      throw new ($T02())("this is a read-only collection");
    }
  );

  $.Method({Static:false, Public:false}, "ICollection`1.Contains", 
    $sig.make(0x4EC, $asm01.TypeRef("System.Boolean"), [new JSIL.GenericParameter("TValue", "System.Collections.Generic.Dictionary`2/ValueCollection")], []), 
    function ValueCollection_ICollection$b1_Contains (item) {
      return $asm01.System.Collections.Generic.Dictionary$b2.Of($thisType.TKey.get(this), $thisType.TValue.get(this)).prototype.ContainsValue.call(this.dictionary, item);
    }
  );

  $.Method({Static:false, Public:false}, "ICollection`1.get_IsReadOnly", 
    $sig.make(0x4E4, $asm01.TypeRef("System.Boolean"), [], []), 
    function ValueCollection_ICollection$b1_get_IsReadOnly () {
      return true;
    }
  );

  $.Method({Static:false, Public:false}, "ICollection`1.Remove", 
    $sig.make(0x4ED, $asm01.TypeRef("System.Boolean"), [new JSIL.GenericParameter("TValue", "System.Collections.Generic.Dictionary`2/ValueCollection")], []), 
    function ValueCollection_ICollection$b1_Remove (item) {
      throw new ($T02())("this is a read-only collection");
    }
  );

  $.Method({Static:false, Public:false}, "IEnumerable`1.GetEnumerator", 
    $sig.make(0x4EE, $asm01.TypeRef("System.Collections.Generic.IEnumerator`1", [new JSIL.GenericParameter("TValue", "System.Collections.Generic.Dictionary`2/ValueCollection")]), [], []), 
    function ValueCollection_IEnumerable$b1_GetEnumerator () {
      return this.GetEnumerator();
    }
  );

  $.Method({Static:false, Public:false}, "ICollection.CopyTo", 
    $sig.make(0x4EF, null, [$asm01.TypeRef("System.Array"), $asm01.TypeRef("System.Int32")], []), 
    function ValueCollection_ICollection_CopyTo (array, index) {
      var target = System.Array.Of($thisType.TValue.get(this)).$As(array);
      if (target !== null) {
        this.CopyTo(target, index);
      } else {
        $asm01.System.Collections.Generic.Dictionary$b2.Of($thisType.TKey.get(this), $thisType.TValue.get(this)).prototype.CopyToCheck.call(this.dictionary, array, index);
        $asm01.System.Collections.Generic.Dictionary$b2.Of($thisType.TKey.get(this), $thisType.TValue.get(this)).prototype.Do_ICollectionCopyTo$b1($thisType.TValue.get(this)).call(this.dictionary, array, index, $asm01.System.Collections.Generic.Dictionary$b2_Transform$b1.Of(
              $thisType.TKey.get(this), $thisType.TValue.get(this), 
              $thisType.TValue.get(this)
          ).New($asm01.System.Collections.Generic.Dictionary$b2.Of($thisType.TKey.get(this), $thisType.TValue.get(this)), $asm01.System.Collections.Generic.Dictionary$b2.Of($thisType.TKey.get(this), $thisType.TValue.get(this)).pick_value));
      }
    }
  );

  $.Method({Static:false, Public:false}, "ICollection.get_IsSynchronized", 
    $sig.make(0x4E5, $asm01.TypeRef("System.Boolean"), [], []), 
    function ValueCollection_ICollection_get_IsSynchronized () {
      return false;
    }
  );

  $.Method({Static:false, Public:false}, "ICollection.get_SyncRoot", 
    $sig.make(0x4E6, $asm01.TypeRef("System.Object"), [], []), 
    function ValueCollection_ICollection_get_SyncRoot () {
      return this.dictionary.ICollection_get_SyncRoot();
    }
  );

  $.Method({Static:false, Public:false}, "IEnumerable.GetEnumerator", 
    $sig.make(0x4F0, $asm01.TypeRef("System.Collections.IEnumerator"), [], []), 
    function ValueCollection_IEnumerable_GetEnumerator () {
      return this.GetEnumerator();
    }
  );

  $.Field({Static:false, Public:false}, "dictionary", $asm01.TypeRef("System.Collections.Generic.Dictionary`2", [$.GenericParameter("TKey"), $.GenericParameter("TValue")])); 
  $.Property({Static:false, Public:true , Virtual:true }, "Count", $asm01.TypeRef("System.Int32"));

  $.Property({Static:false, Public:false, Virtual:true }, "ICollection`1.IsReadOnly", $asm01.TypeRef("System.Boolean"));

  $.Property({Static:false, Public:false, Virtual:true }, "ICollection.IsSynchronized", $asm01.TypeRef("System.Boolean"));

  $.Property({Static:false, Public:false, Virtual:true }, "ICollection.SyncRoot", $asm01.TypeRef("System.Object"));

  $.ImplementInterfaces(
      $asm01.TypeRef("System.Collections.Generic.ICollection`1", [new JSIL.GenericParameter("TValue", "System.Collections.Generic.Dictionary`2/ValueCollection")]), $asm01.TypeRef("System.Collections.Generic.IEnumerable`1", [new JSIL.GenericParameter("TValue", "System.Collections.Generic.Dictionary`2/ValueCollection")]), 
      $asm01.TypeRef("System.Collections.ICollection"), $asm01.TypeRef("System.Collections.IEnumerable")
  )
})
  .Attribute($asm01.TypeRef("System.Diagnostics.DebuggerDisplayAttribute"), function () { return ["Count={Count}"]; })
  .Attribute($asm01.TypeRef("System.Diagnostics.DebuggerTypeProxyAttribute"), function () { return [$asm01.TypeRef("System.Collections.Generic.CollectionDebuggerView`2")]; });

JSIL.MakeStruct($asm01.TypeRef("System.ValueType"), "System.Collections.Generic.Dictionary`2/ValueCollection/Enumerator", false, ["TKey", "TValue"], function ($) {
  var $thisType = $.publicInterface;

  $.Method({Static:false, Public:false}, ".ctor", 
    $sig.make(0x574, null, [$asm01.TypeRef("System.Collections.Generic.Dictionary`2", [new JSIL.GenericParameter("TKey", "System.Collections.Generic.Dictionary`2/ValueCollection/Enumerator"), new JSIL.GenericParameter("TValue", "System.Collections.Generic.Dictionary`2/ValueCollection/Enumerator")])], []), 
    function Enumerator__ctor (host) {
      this.host_enumerator = $asm01.System.Collections.Generic.Dictionary$b2.Of($thisType.TKey.get(this), $thisType.TValue.get(this)).prototype.GetEnumerator.call(host);
    }
  );

  $.Method({Static:false, Public:true }, "Dispose", 
    $sig.make(0x575, null, [], []), 
    function Enumerator_Dispose () {
      this.host_enumerator.Dispose();
    }
  );

  $.Method({Static:false, Public:true }, "get_Current", 
    $sig.make(0x56F, new JSIL.GenericParameter("TValue", "System.Collections.Generic.Dictionary`2/ValueCollection/Enumerator"), [], []), 
    function Enumerator_get_Current () {
      return this.host_enumerator.current.get_Value();
    }
  );

  $.Method({Static:false, Public:true }, "MoveNext", 
    $sig.make(0x576, $asm01.TypeRef("System.Boolean"), [], []), 
    function Enumerator_MoveNext () {
      return this.host_enumerator.MoveNext();
    }
  );

  $.Method({Static:false, Public:false}, "IEnumerator.get_Current", 
    $sig.make(0x571, $asm01.TypeRef("System.Object"), [], []), 
    function Enumerator_IEnumerator_get_Current () {
      return this.host_enumerator.get_CurrentValue();
    }
  );

  $.Method({Static:false, Public:false}, "IEnumerator.Reset", 
    $sig.make(0x577, null, [], []), 
    function Enumerator_IEnumerator_Reset () {
      this.host_enumerator.Reset();
    }
  );

  $.Field({Static:false, Public:false}, "host_enumerator", $asm01.TypeRef("System.Collections.Generic.Dictionary`2/Enumerator", [$.GenericParameter("TKey"), $.GenericParameter("TValue")])); 
  $.Property({Static:false, Public:true , Virtual:true }, "Current", new JSIL.GenericParameter("TValue", "System.Collections.Generic.Dictionary`2/ValueCollection/Enumerator"));

  $.Property({Static:false, Public:false, Virtual:true }, "IEnumerator.Current", $asm01.TypeRef("System.Object"));

  $.ImplementInterfaces(
      $asm01.TypeRef("System.Collections.Generic.IEnumerator`1", [new JSIL.GenericParameter("TValue", "System.Collections.Generic.Dictionary`2/ValueCollection/Enumerator")]), $asm01.TypeRef("System.IDisposable"), 
      $asm01.TypeRef("System.Collections.IEnumerator")
  )
});

JSIL.MakeStruct($asm01.TypeRef("System.ValueType"), "System.UIntPtr", true, [], function ($) {
  var $thisType = $.publicInterface;
  $.SetValue("__IsNativeType__", true);
  $.SetValue("__IsIntegral__", false);
  $.SetValue("__IsNumeric__", false);

});

JSIL.MakeTypeAlias($jsilcore, "System.Single");

JSIL.MakeTypeAlias($jsilcore, "System.Reflection.MethodInfo");

JSIL.MakeTypeAlias($jsilcore, "System.Boolean");

JSIL.MakeInterface(
  "System.Runtime.Serialization.IObjectReference", true, [], function ($) {
  }, []);

JSIL.MakeClass($asm01.TypeRef("System.Object"), "System.Runtime.CompilerServices.RuntimeHelpers", true, [], function ($) {
  var $thisType = $.publicInterface;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm01.System.Array)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm01.System.RuntimeFieldHandle)) ();
  };

  $.Method({Static:false, Public:true }, ".ctor", 
    $sig.make(0xAFF, null, [], []), 
    function RuntimeHelpers__ctor () {
    }
  );

  $.Method({Static:true , Public:true }, "InitializeArray", 
    $sig.make(0xAFC, null, [$asm01.TypeRef("System.Array"), $asm01.TypeRef("System.RuntimeFieldHandle")], []), 
    function RuntimeHelpers_InitializeArray (array, fldHandle) {
    }
  );

});

JSIL.MakeClass($asm01.TypeRef("System.Attribute"), "System.Diagnostics.DebuggerBrowsableAttribute", true, [], function ($) {
  var $thisType = $.publicInterface;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm01.System.Diagnostics.DebuggerBrowsableState)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm01.System.Attribute)) ();
  };

  $.Method({Static:false, Public:true }, ".ctor", 
    $sig.make(0xB19, null, [$asm01.TypeRef("System.Diagnostics.DebuggerBrowsableState")], []), 
    function DebuggerBrowsableAttribute__ctor (state) {
      $T01().prototype._ctor.call(this);
      this.state = state;
    }
  );

  $.Method({Static:false, Public:true }, "get_State", 
    $sig.make(0xB16, $asm01.TypeRef("System.Diagnostics.DebuggerBrowsableState"), [], []), 
    function DebuggerBrowsableAttribute_get_State () {
      return this.state;
    }
  );

  $.Field({Static:false, Public:false}, "state", $asm01.TypeRef("System.Diagnostics.DebuggerBrowsableState")); 
  $.Property({Static:false, Public:true }, "State", $asm01.TypeRef("System.Diagnostics.DebuggerBrowsableState"));

})
  .Attribute($asm01.TypeRef("System.AttributeUsageAttribute"), function () { return [384]; })
  .Attribute($asm01.TypeRef("System.Runtime.InteropServices.ComVisibleAttribute"), function () { return [true]; });

JSIL.MakeDelegate("System.Predicate`1", true, ["T"]);

JSIL.MakeClass($asm01.TypeRef("System.SystemException"), "System.FormatException", true, [], function ($) {
  var $thisType = $.publicInterface;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm01.System.SystemException)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm01.System.Locale)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm01.System.Object)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm01.System.String)) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize($asm01.System.Exception)) ();
  };

  $.Method({Static:false, Public:true }, ".ctor", 
    $sig.make(0xB56, null, [], []), 
    function FormatException__ctor () {
      $T00().prototype._ctor.call(this, $T01().GetText("Invalid format.", JSIL.Array.New($T02(), 0)));
      this.Exception$HResult$value = -2146233033;
    }
  );

  $.Method({Static:false, Public:true }, ".ctor", 
    $sig.make(0xB58, null, [$asm01.TypeRef("System.String")], []), 
    function FormatException__ctor (message) {
      $T00().prototype._ctor.call(this, message);
      this.Exception$HResult$value = -2146233033;
    }
  );

  $.Method({Static:false, Public:true }, ".ctor", 
    $sig.make(0xB5A, null, [$asm01.TypeRef("System.String"), $asm01.TypeRef("System.Exception")], []), 
    function FormatException__ctor (message, innerException) {
      $sig.get(0x7D2, null, [$asm01.System.String, $asm01.System.Exception], []).Call($T00().prototype, "_ctor", null, this, message, innerException);
      this.Exception$HResult$value = -2146233033;
    }
  );

  $.Constant({Static:true , Public:false}, "Result", -2146233033); 
})
  .Attribute($asm01.TypeRef("System.Runtime.InteropServices.ComVisibleAttribute"), function () { return [true]; });

JSIL.MakeEnum(
  "System.DayOfWeek", true, {
    Sunday: 0, 
    Monday: 1, 
    Tuesday: 2, 
    Wednesday: 3, 
    Thursday: 4, 
    Friday: 5, 
    Saturday: 6
  }, false
);

JSIL.MakeEnum(
  "System.DateTimeKind", true, {
    Unspecified: 0, 
    Utc: 1, 
    Local: 2
  }, false
);

JSIL.MakeClass($asm01.TypeRef("System.Attribute"), "System.Runtime.ConstrainedExecution.ReliabilityContractAttribute", true, [], function ($) {
  var $thisType = $.publicInterface;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm01.System.Runtime.ConstrainedExecution.Consistency)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm01.System.Runtime.ConstrainedExecution.Cer)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm01.System.Attribute)) ();
  };

  $.Method({Static:false, Public:true }, ".ctor", 
    $sig.make(0xBCF, null, [$asm01.TypeRef("System.Runtime.ConstrainedExecution.Consistency"), $asm01.TypeRef("System.Runtime.ConstrainedExecution.Cer")], []), 
    function ReliabilityContractAttribute__ctor (consistencyGuarantee, cer) {
      $T02().prototype._ctor.call(this);
      this.consistency = consistencyGuarantee;
      this.cer = cer;
    }
  );

  $.Method({Static:false, Public:true }, "get_Cer", 
    $sig.make(0xB7F, $asm01.TypeRef("System.Runtime.ConstrainedExecution.Cer"), [], []), 
    function ReliabilityContractAttribute_get_Cer () {
      return this.cer;
    }
  );

  $.Method({Static:false, Public:true }, "get_ConsistencyGuarantee", 
    $sig.make(0xBC7, $asm01.TypeRef("System.Runtime.ConstrainedExecution.Consistency"), [], []), 
    function ReliabilityContractAttribute_get_ConsistencyGuarantee () {
      return this.consistency;
    }
  );

  $.Field({Static:false, Public:false}, "consistency", $asm01.TypeRef("System.Runtime.ConstrainedExecution.Consistency")); 
  $.Field({Static:false, Public:false}, "cer", $asm01.TypeRef("System.Runtime.ConstrainedExecution.Cer")); 
  $.Property({Static:false, Public:true }, "Cer", $asm01.TypeRef("System.Runtime.ConstrainedExecution.Cer"));

  $.Property({Static:false, Public:true }, "ConsistencyGuarantee", $asm01.TypeRef("System.Runtime.ConstrainedExecution.Consistency"));

})
  .Attribute($asm01.TypeRef("System.AttributeUsageAttribute"), function () { return [1133]; });

JSIL.MakeEnum(
  "System.Runtime.CompilerServices.MethodCodeType", true, {
    IL: 0, 
    Native: 1, 
    OPTIL: 2, 
    Runtime: 3
  }, false
);

JSIL.MakeEnum(
  "System.Globalization.DateTimeStyles", true, {
    None: 0, 
    AllowLeadingWhite: 1, 
    AllowTrailingWhite: 2, 
    AllowInnerWhite: 4, 
    AllowWhiteSpaces: 7, 
    NoCurrentDateDefault: 8, 
    AdjustToUniversal: 16, 
    AssumeLocal: 32, 
    AssumeUniversal: 64, 
    RoundtripKind: 128
  }, false
);

JSIL.MakeEnum(
  "System.Globalization.DateTimeFormatFlags", false, {
    Unused: 0, 
    But: 1, 
    Serialized: 2, 
    By: 3, 
    Microsoft: 4
  }, false
);

JSIL.MakeClass($asm01.TypeRef("System.Object"), "System.Globalization.DateTimeFormatInfo", true, [], function ($) {
  var $thisType = $.publicInterface;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm01.System.String)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm01.System.Boolean)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm01.System.Globalization.GregorianCalendar)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm01.System.Object)) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize($asm01.System.Collections.Generic.List$b1.Of($asm01.System.String))) ();
  };
  var $T05 = function () {
    return ($T05 = JSIL.Memoize($asm01.System.Collections.Generic.IEnumerable$b1.Of($asm01.System.String))) ();
  };
  var $T06 = function () {
    return ($T06 = JSIL.Memoize(System.Array.Of($asm01.System.String))) ();
  };
  var $T07 = function () {
    return ($T07 = JSIL.Memoize($asm01.System.Globalization.CalendarWeekRule)) ();
  };
  var $T08 = function () {
    return ($T08 = JSIL.Memoize($asm01.System.DayOfWeek)) ();
  };
  var $T09 = function () {
    return ($T09 = JSIL.Memoize($asm01.System.Void)) ();
  };
  var $T0A = function () {
    return ($T0A = JSIL.Memoize($asm01.System.ArgumentOutOfRangeException)) ();
  };
  var $T0B = function () {
    return ($T0B = JSIL.Memoize($asm01.System.Int32)) ();
  };
  var $T0C = function () {
    return ($T0C = JSIL.Memoize($asm01.System.Char)) ();
  };
  var $T0D = function () {
    return ($T0D = JSIL.Memoize($asm01.System.ArgumentException)) ();
  };
  var $T0E = function () {
    return ($T0E = JSIL.Memoize($asm01.System.ArgumentNullException)) ();
  };
  var $T0F = function () {
    return ($T0F = JSIL.Memoize($asm01.System.Type)) ();
  };
  var $T10 = function () {
    return ($T10 = JSIL.Memoize($asm01.System.IFormatProvider)) ();
  };
  var $T11 = function () {
    return ($T11 = JSIL.Memoize($asm01.System.InvalidOperationException)) ();
  };
  var $T12 = function () {
    return ($T12 = JSIL.Memoize($asm01.System.Globalization.Calendar)) ();
  };

  $.Method({Static:false, Public:false}, ".ctor", 
    $sig.make(0x567, null, [$asm01.TypeRef("System.Boolean")], []), 
    function DateTimeFormatInfo__ctor (read_only) {
      this.m_isReadOnly = read_only;
      this.amDesignator = "AM";
      this.pmDesignator = "PM";
      this.dateSeparator = "/";
      this.timeSeparator = ":";
      this.shortDatePattern = "MM/dd/yyyy";
      this.longDatePattern = "dddd, dd MMMM yyyy";
      this.shortTimePattern = "HH:mm";
      this.longTimePattern = "HH:mm:ss";
      this.monthDayPattern = "MMMM dd";
      this.yearMonthPattern = "yyyy MMMM";
      this.fullDateTimePattern = "dddd, dd MMMM yyyy HH:mm:ss";
      this._RFC1123Pattern = "ddd, dd MMM yyyy HH':'mm':'ss 'GMT'";
      this._SortableDateTimePattern = "yyyy'-'MM'-'dd'T'HH':'mm':'ss";
      this._UniversalSortableDateTimePattern = "yyyy'-'MM'-'dd HH':'mm':'ss'Z'";
      this.firstDayOfWeek = 0;
      this.calendar = new ($T02())();
      this.calendarWeekRule = 0;
      this.abbreviatedDayNames = $thisType.INVARIANT_ABBREVIATED_DAY_NAMES;
      this.dayNames = $thisType.INVARIANT_DAY_NAMES;
      this.abbreviatedMonthNames = $thisType.INVARIANT_ABBREVIATED_MONTH_NAMES;
      this.monthNames = $thisType.INVARIANT_MONTH_NAMES;
      this.m_genitiveAbbreviatedMonthNames = $thisType.INVARIANT_ABBREVIATED_MONTH_NAMES;
      this.genitiveMonthNames = $thisType.INVARIANT_MONTH_NAMES;
      this.shortDayNames = $thisType.INVARIANT_SHORT_DAY_NAMES;
    }
  );

  $.Method({Static:false, Public:true }, ".ctor", 
    $sig.make(0x568, null, [], []), 
    function DateTimeFormatInfo__ctor () {
      $thisType.prototype._ctor.call(this, false);
    }
  );

  $.Method({Static:false, Public:true }, "Clone", 
    $sig.make(0x56B, $asm01.TypeRef("System.Object"), [], []), 
    function DateTimeFormatInfo_Clone () {
      var clone = $thisType.$Cast($T03().prototype.MemberwiseClone.call(this));
      clone.m_isReadOnly = false;
      return clone;
    }
  );

  $.Method({Static:false, Public:false}, "FillAllDateTimePatterns", 
    $sig.make(0x57D, null, [], []), 
    function DateTimeFormatInfo_FillAllDateTimePatterns () {
      if (this.all_date_time_patterns === null) {
        var al = new ($T04())();
        $T04().prototype.AddRange.call(al, $T05().$Cast(this.GetAllRawDateTimePatterns("d")));
        $T04().prototype.AddRange.call(al, $T05().$Cast(this.GetAllRawDateTimePatterns("D")));
        $T04().prototype.AddRange.call(al, $T05().$Cast(this.GetAllRawDateTimePatterns("g")));
        $T04().prototype.AddRange.call(al, $T05().$Cast(this.GetAllRawDateTimePatterns("G")));
        $T04().prototype.AddRange.call(al, $T05().$Cast(this.GetAllRawDateTimePatterns("f")));
        $T04().prototype.AddRange.call(al, $T05().$Cast(this.GetAllRawDateTimePatterns("F")));
        $T04().prototype.AddRange.call(al, $T05().$Cast(this.GetAllRawDateTimePatterns("m")));
        $T04().prototype.AddRange.call(al, $T05().$Cast(this.GetAllRawDateTimePatterns("M")));
        $T04().prototype.AddRange.call(al, $T05().$Cast(this.GetAllRawDateTimePatterns("r")));
        $T04().prototype.AddRange.call(al, $T05().$Cast(this.GetAllRawDateTimePatterns("R")));
        $T04().prototype.AddRange.call(al, $T05().$Cast(this.GetAllRawDateTimePatterns("s")));
        $T04().prototype.AddRange.call(al, $T05().$Cast(this.GetAllRawDateTimePatterns("t")));
        $T04().prototype.AddRange.call(al, $T05().$Cast(this.GetAllRawDateTimePatterns("T")));
        $T04().prototype.AddRange.call(al, $T05().$Cast(this.GetAllRawDateTimePatterns("u")));
        $T04().prototype.AddRange.call(al, $T05().$Cast(this.GetAllRawDateTimePatterns("U")));
        $T04().prototype.AddRange.call(al, $T05().$Cast(this.GetAllRawDateTimePatterns("y")));
        $T04().prototype.AddRange.call(al, $T05().$Cast(this.GetAllRawDateTimePatterns("Y")));
        this.all_date_time_patterns = $T04().prototype.ToArray.call(al);
      }
    }
  );

  $.Method({Static:false, Public:false}, "FillInvariantPatterns", 
    $sig.make(0x585, null, [], []), 
    function DateTimeFormatInfo_FillInvariantPatterns () {
      this.allShortDatePatterns = JSIL.Array.New($T00(), ["MM/dd/yyyy"]);
      this.allLongDatePatterns = JSIL.Array.New($T00(), ["dddd, dd MMMM yyyy"]);
      this.allLongTimePatterns = JSIL.Array.New($T00(), ["HH:mm:ss"]);
      this.allShortTimePatterns = JSIL.Array.New($T00(), ["HH:mm", "hh:mm tt", "H:mm", "h:mm tt"]);
      this.monthDayPatterns = JSIL.Array.New($T00(), ["MMMM dd"]);
      this.yearMonthPatterns = JSIL.Array.New($T00(), ["yyyy MMMM"]);
    }
  );

  $.Method({Static:false, Public:true }, "get_AbbreviatedDayNames", 
    $sig.make(0x509, $jsilcore.TypeRef("System.Array", [$asm01.TypeRef("System.String")]), [], []), 
    function DateTimeFormatInfo_get_AbbreviatedDayNames () {
      return $T06().$Cast(this.get_RawAbbreviatedDayNames().slice(0));
    }
  );

  $.Method({Static:false, Public:true }, "get_AbbreviatedMonthGenitiveNames", 
    $sig.make(0x55E, $jsilcore.TypeRef("System.Array", [$asm01.TypeRef("System.String")]), [], []), 
    function DateTimeFormatInfo_get_AbbreviatedMonthGenitiveNames () {
      return this.m_genitiveAbbreviatedMonthNames;
    }
  );

  $.Method({Static:false, Public:true }, "get_AbbreviatedMonthNames", 
    $sig.make(0x510, $jsilcore.TypeRef("System.Array", [$asm01.TypeRef("System.String")]), [], []), 
    function DateTimeFormatInfo_get_AbbreviatedMonthNames () {
      return $T06().$Cast(this.get_RawAbbreviatedMonthNames().slice(0));
    }
  );

  $.Method({Static:false, Public:true }, "get_AMDesignator", 
    $sig.make(0x527, $asm01.TypeRef("System.String"), [], []), 
    function DateTimeFormatInfo_get_AMDesignator () {
      return this.amDesignator;
    }
  );

  $.Method({Static:false, Public:false}, "get_Calendar", 
    $sig.make(0x54C, $asm01.TypeRef("System.Globalization.Calendar"), [], []), 
    function DateTimeFormatInfo_get_Calendar () {
      return this.calendar;
    }
  );

  $.Method({Static:false, Public:true }, "get_CalendarWeekRule", 
    $sig.make(0x54E, $asm01.TypeRef("System.Globalization.CalendarWeekRule"), [], []), 
    function DateTimeFormatInfo_get_CalendarWeekRule () {
      return $T07().$Cast(this.calendarWeekRule);
    }
  );

  $.Method({Static:true , Public:true }, "get_CurrentInfo", 
    $sig.make(0x548, $.Type, [], []), 
    function DateTimeFormatInfo_get_CurrentInfo () {
      return new $thisType(true);
    }
  );

  $.Method({Static:false, Public:true }, "get_DateSeparator", 
    $sig.make(0x52E, $asm01.TypeRef("System.String"), [], []), 
    function DateTimeFormatInfo_get_DateSeparator () {
      return this.dateSeparator;
    }
  );

  $.Method({Static:false, Public:true }, "get_DayNames", 
    $sig.make(0x517, $jsilcore.TypeRef("System.Array", [$asm01.TypeRef("System.String")]), [], []), 
    function DateTimeFormatInfo_get_DayNames () {
      return $T06().$Cast(this.get_RawDayNames().slice(0));
    }
  );

  $.Method({Static:false, Public:true }, "get_FirstDayOfWeek", 
    $sig.make(0x54A, $asm01.TypeRef("System.DayOfWeek"), [], []), 
    function DateTimeFormatInfo_get_FirstDayOfWeek () {
      return $T08().$Cast(this.firstDayOfWeek);
    }
  );

  $.Method({Static:false, Public:true }, "get_FullDateTimePattern", 
    $sig.make(0x543, $asm01.TypeRef("System.String"), [], []), 
    function DateTimeFormatInfo_get_FullDateTimePattern () {
      if (this.fullDateTimePattern !== null) {
        var result = this.fullDateTimePattern;
      } else {
        result = ((this.longDatePattern + " " + this.longTimePattern));
      }
      return result;
    }
  );

  $.Method({Static:true , Public:true }, "get_InvariantInfo", 
    $sig.make(0x549, $.Type, [], []), 
    function DateTimeFormatInfo_get_InvariantInfo () {
      if ($thisType.theInvariantDateTimeFormatInfo === null) {
        $thisType.theInvariantDateTimeFormatInfo = $thisType.ReadOnly(new $thisType());
        $thisType.theInvariantDateTimeFormatInfo.FillInvariantPatterns();
      }
      return $thisType.theInvariantDateTimeFormatInfo;
    }
  );

  $.Method({Static:false, Public:true }, "get_IsReadOnly", 
    $sig.make(0x508, $asm01.TypeRef("System.Boolean"), [], []), 
    function DateTimeFormatInfo_get_IsReadOnly () {
      return this.m_isReadOnly;
    }
  );

  $.Method({Static:false, Public:true }, "get_LongDatePattern", 
    $sig.make(0x532, $asm01.TypeRef("System.String"), [], []), 
    function DateTimeFormatInfo_get_LongDatePattern () {
      return this.longDatePattern;
    }
  );

  $.Method({Static:false, Public:true }, "get_LongTimePattern", 
    $sig.make(0x538, $asm01.TypeRef("System.String"), [], []), 
    function DateTimeFormatInfo_get_LongTimePattern () {
      return this.longTimePattern;
    }
  );

  $.Method({Static:false, Public:true }, "get_MonthDayPattern", 
    $sig.make(0x53A, $asm01.TypeRef("System.String"), [], []), 
    function DateTimeFormatInfo_get_MonthDayPattern () {
      return this.monthDayPattern;
    }
  );

  $.Method({Static:false, Public:true }, "get_MonthGenitiveNames", 
    $sig.make(0x562, $jsilcore.TypeRef("System.Array", [$asm01.TypeRef("System.String")]), [], []), 
    function DateTimeFormatInfo_get_MonthGenitiveNames () {
      return this.genitiveMonthNames;
    }
  );

  $.Method({Static:false, Public:true }, "get_MonthNames", 
    $sig.make(0x520, $jsilcore.TypeRef("System.Array", [$asm01.TypeRef("System.String")]), [], []), 
    function DateTimeFormatInfo_get_MonthNames () {
      return $T06().$Cast(this.get_RawMonthNames().slice(0));
    }
  );

  $.Method({Static:false, Public:true }, "get_NativeCalendarName", 
    $sig.make(0x564, $asm01.TypeRef("System.String"), [], []), 
    function DateTimeFormatInfo_get_NativeCalendarName () {
      return $T00().Empty;
    }
  );

  $.Method({Static:false, Public:true }, "get_PMDesignator", 
    $sig.make(0x52B, $asm01.TypeRef("System.String"), [], []), 
    function DateTimeFormatInfo_get_PMDesignator () {
      return this.pmDesignator;
    }
  );

  $.Method({Static:false, Public:false}, "get_RawAbbreviatedDayNames", 
    $sig.make(0x50C, $jsilcore.TypeRef("System.Array", [$asm01.TypeRef("System.String")]), [], []), 
    function DateTimeFormatInfo_get_RawAbbreviatedDayNames () {
      return this.abbreviatedDayNames;
    }
  );

  $.Method({Static:false, Public:false}, "get_RawAbbreviatedMonthNames", 
    $sig.make(0x513, $jsilcore.TypeRef("System.Array", [$asm01.TypeRef("System.String")]), [], []), 
    function DateTimeFormatInfo_get_RawAbbreviatedMonthNames () {
      return this.abbreviatedMonthNames;
    }
  );

  $.Method({Static:false, Public:false}, "get_RawDayNames", 
    $sig.make(0x519, $jsilcore.TypeRef("System.Array", [$asm01.TypeRef("System.String")]), [], []), 
    function DateTimeFormatInfo_get_RawDayNames () {
      return this.dayNames;
    }
  );

  $.Method({Static:false, Public:false}, "get_RawMonthNames", 
    $sig.make(0x523, $jsilcore.TypeRef("System.Array", [$asm01.TypeRef("System.String")]), [], []), 
    function DateTimeFormatInfo_get_RawMonthNames () {
      return this.monthNames;
    }
  );

  $.Method({Static:false, Public:true }, "get_RFC1123Pattern", 
    $sig.make(0x553, $asm01.TypeRef("System.String"), [], []), 
    function DateTimeFormatInfo_get_RFC1123Pattern () {
      return this._RFC1123Pattern;
    }
  );

  $.Method({Static:false, Public:false}, "get_RoundtripPattern", 
    $sig.make(0x556, $asm01.TypeRef("System.String"), [], []), 
    function DateTimeFormatInfo_get_RoundtripPattern () {
      return "yyyy'-'MM'-'dd'T'HH':'mm':'ss.fffffffK";
    }
  );

  $.Method({Static:false, Public:true }, "get_ShortDatePattern", 
    $sig.make(0x534, $asm01.TypeRef("System.String"), [], []), 
    function DateTimeFormatInfo_get_ShortDatePattern () {
      return this.shortDatePattern;
    }
  );

  $.Method({Static:false, Public:true }, "get_ShortestDayNames", 
    $sig.make(0x565, $jsilcore.TypeRef("System.Array", [$asm01.TypeRef("System.String")]), [], []), 
    function DateTimeFormatInfo_get_ShortestDayNames () {
      return this.shortDayNames;
    }
  );

  $.Method({Static:false, Public:true }, "get_ShortTimePattern", 
    $sig.make(0x536, $asm01.TypeRef("System.String"), [], []), 
    function DateTimeFormatInfo_get_ShortTimePattern () {
      return this.shortTimePattern;
    }
  );

  $.Method({Static:false, Public:true }, "get_SortableDateTimePattern", 
    $sig.make(0x559, $asm01.TypeRef("System.String"), [], []), 
    function DateTimeFormatInfo_get_SortableDateTimePattern () {
      return this._SortableDateTimePattern;
    }
  );

  $.Method({Static:false, Public:true }, "get_TimeSeparator", 
    $sig.make(0x530, $asm01.TypeRef("System.String"), [], []), 
    function DateTimeFormatInfo_get_TimeSeparator () {
      return this.timeSeparator;
    }
  );

  $.Method({Static:false, Public:true }, "get_UniversalSortableDateTimePattern", 
    $sig.make(0x55B, $asm01.TypeRef("System.String"), [], []), 
    function DateTimeFormatInfo_get_UniversalSortableDateTimePattern () {
      return this._UniversalSortableDateTimePattern;
    }
  );

  $.Method({Static:false, Public:true }, "get_YearMonthPattern", 
    $sig.make(0x53F, $asm01.TypeRef("System.String"), [], []), 
    function DateTimeFormatInfo_get_YearMonthPattern () {
      return this.yearMonthPattern;
    }
  );

  $.Method({Static:false, Public:true }, "GetAbbreviatedDayName", 
    $sig.make(0x584, $asm01.TypeRef("System.String"), [$asm01.TypeRef("System.DayOfWeek")], []), 
    function DateTimeFormatInfo_GetAbbreviatedDayName (dayofweek) {
      if (!((dayofweek >= $T08().Sunday) && (dayofweek <= $T08().Saturday))) {
        throw new ($T0A())();
      }
      return this.abbreviatedDayNames[dayofweek.valueOf()];
    }
  );

  $.Method({Static:false, Public:true }, "GetAbbreviatedEraName", 
    $sig.make(0x56D, $asm01.TypeRef("System.String"), [$asm01.TypeRef("System.Int32")], []), 
    function DateTimeFormatInfo_GetAbbreviatedEraName (era) {
      if (!((era >= 0) && (era < this.calendar.get_AbbreviatedEraNames().length))) {
        throw $sig.get(0xCA7, null, [$asm01.System.String, $asm01.System.String], []).Construct($T0A(), "era", era.toString());
      }
      return this.calendar.get_AbbreviatedEraNames()[era];
    }
  );

  $.Method({Static:false, Public:true }, "GetAbbreviatedMonthName", 
    $sig.make(0x56E, $asm01.TypeRef("System.String"), [$asm01.TypeRef("System.Int32")], []), 
    function DateTimeFormatInfo_GetAbbreviatedMonthName (month) {
      if (!((month >= 1) && (month <= 13))) {
        throw new ($T0A())();
      }
      return this.abbreviatedMonthNames[((month - 1) | 0)];
    }
  );

  $.Method({Static:false, Public:true }, "GetAllDateTimePatterns", 
    $sig.make(0x57A, $jsilcore.TypeRef("System.Array", [$asm01.TypeRef("System.String")]), [], []), 
    function DateTimeFormatInfo_GetAllDateTimePatterns () {
      return $T06().$Cast(this.GetAllDateTimePatternsInternal().slice(0));
    }
  );

  $.Method({Static:false, Public:true }, "GetAllDateTimePatterns", 
    $sig.make(0x57E, $jsilcore.TypeRef("System.Array", [$asm01.TypeRef("System.String")]), [$asm01.TypeRef("System.Char")], []), 
    function DateTimeFormatInfo_GetAllDateTimePatterns (format) {
      return $T06().$Cast(this.GetAllRawDateTimePatterns(format).slice(0));
    }
  );

  $.Method({Static:false, Public:false}, "GetAllDateTimePatternsInternal", 
    $sig.make(0x57C, $jsilcore.TypeRef("System.Array", [$asm01.TypeRef("System.String")]), [], []), 
    function DateTimeFormatInfo_GetAllDateTimePatternsInternal () {
      this.FillAllDateTimePatterns();
      return this.all_date_time_patterns;
    }
  );

  $.Method({Static:false, Public:false}, "GetAllRawDateTimePatterns", 
    $sig.make(0x580, $jsilcore.TypeRef("System.Array", [$asm01.TypeRef("System.String")]), [$asm01.TypeRef("System.Char")], []), 
    function DateTimeFormatInfo_GetAllRawDateTimePatterns (format) {

      var $label0 = 0;
    $labelgroup0: 
      while (true) {
        switch ($label0) {
          case 0: /* $entry0 */ 
            if (format.charCodeAt(0) <= "U".charCodeAt(0)) {
              switch (format) {
                case "D": 
                  if (!((this.allLongDatePatterns === null) || (this.allLongDatePatterns.length <= 0))) {
                    var result = this.allLongDatePatterns;
                    return result;
                  }
                  result = JSIL.Array.New($T00(), [this.get_LongDatePattern()]);
                  return result;

                case "E": 
                  $label0 = 3 /* goto IL_3D9 */ ;
                  continue $labelgroup0;

                case "F": 
                  break;

                case "G": 
                  var list = this.PopulateCombinedList(this.allShortDatePatterns, this.allLongTimePatterns);
                  if (!((list === null) || (list.length <= 0))) {
                    result = list;
                    return result;
                  }
                  result = JSIL.Array.New($T00(), [(this.get_ShortDatePattern() + " " + this.get_LongTimePattern())]);
                  return result;

                default: 
                  if (format.charCodeAt(0) === "M".charCodeAt(0)) {
                    $label0 = 1 /* goto IL_314 */ ;
                    continue $labelgroup0;
                  }
                  switch (format) {
                    case "R": 
                      $label0 = 2 /* goto IL_394 */ ;
                      continue $labelgroup0;

                    case "S": 
                      $label0 = 3 /* goto IL_3D9 */ ;
                      continue $labelgroup0;

                    case "T": 
                      if (!((this.allLongTimePatterns === null) || (this.allLongTimePatterns.length <= 0))) {
                        result = this.allLongTimePatterns;
                        return result;
                      }
                      result = JSIL.Array.New($T00(), [this.get_LongTimePattern()]);
                      return result;

                    case "U": 
                      break;

                    default: 
                      $label0 = 3 /* goto IL_3D9 */ ;
                      continue $labelgroup0;

                  }
                  break;

              }
              list = this.PopulateCombinedList(this.allLongDatePatterns, this.allLongTimePatterns);
              if (!((list === null) || (list.length <= 0))) {
                result = list;
                return result;
              }
              result = JSIL.Array.New($T00(), [(this.get_LongDatePattern() + " " + this.get_LongTimePattern())]);
              return result;
            } else {
              if (format.charCodeAt(0) <= "g".charCodeAt(0)) {
                if (format.charCodeAt(0) !== "Y".charCodeAt(0)) {
                  switch (format) {
                    case "d": 
                      if (!((this.allShortDatePatterns === null) || (this.allShortDatePatterns.length <= 0))) {
                        result = this.allShortDatePatterns;
                        return result;
                      }
                      result = JSIL.Array.New($T00(), [this.get_ShortDatePattern()]);
                      return result;

                    case "e": 
                      $label0 = 3 /* goto IL_3D9 */ ;
                      continue $labelgroup0;

                    case "f": 
                      list = this.PopulateCombinedList(this.allLongDatePatterns, this.allShortTimePatterns);
                      if (!((list === null) || (list.length <= 0))) {
                        result = list;
                        return result;
                      }
                      result = JSIL.Array.New($T00(), [(this.get_LongDatePattern() + " " + this.get_ShortTimePattern())]);
                      return result;

                    case "g": 
                      list = this.PopulateCombinedList(this.allShortDatePatterns, this.allShortTimePatterns);
                      if (!((list === null) || (list.length <= 0))) {
                        result = list;
                        return result;
                      }
                      result = JSIL.Array.New($T00(), [(this.get_ShortDatePattern() + " " + this.get_ShortTimePattern())]);
                      return result;

                    default: 
                      $label0 = 3 /* goto IL_3D9 */ ;
                      continue $labelgroup0;

                  }
                }
              } else {
                switch (format) {
                  case "m": 
                    $label0 = 1 /* goto IL_314 */ ;
                    continue $labelgroup0;

                  case "n": 
                  case "o": 
                  case "p": 
                  case "q": 
                    $label0 = 3 /* goto IL_3D9 */ ;
                    continue $labelgroup0;

                  case "r": 
                    $label0 = 2 /* goto IL_394 */ ;
                    continue $labelgroup0;

                  case "s": 
                    result = JSIL.Array.New($T00(), [this.get_SortableDateTimePattern()]);
                    return result;

                  case "t": 
                    if (!((this.allShortTimePatterns === null) || (this.allShortTimePatterns.length <= 0))) {
                      result = this.allShortTimePatterns;
                      return result;
                    }
                    result = JSIL.Array.New($T00(), [this.get_ShortTimePattern()]);
                    return result;

                  case "u": 
                    result = JSIL.Array.New($T00(), [this.get_UniversalSortableDateTimePattern()]);
                    return result;

                  default: 
                    if (format.charCodeAt(0) !== "y".charCodeAt(0)) {
                      $label0 = 3 /* goto IL_3D9 */ ;
                      continue $labelgroup0;
                    }
                    break;

                }
              }
              if (!((this.yearMonthPatterns === null) || (this.yearMonthPatterns.length <= 0))) {
                result = this.yearMonthPatterns;
                return result;
              }
              result = JSIL.Array.New($T00(), [this.get_YearMonthPattern()]);
              return result;
            }

            $label0 = 1 /* goto IL_314 */ ;
            continue $labelgroup0;
          case 1: /* IL_314 */ 
            if (!((this.monthDayPatterns === null) || (this.monthDayPatterns.length <= 0))) {
              result = this.monthDayPatterns;
              return result;
            }
            result = JSIL.Array.New($T00(), [this.get_MonthDayPattern()]);
            return result;

            $label0 = 2 /* goto IL_394 */ ;
            continue $labelgroup0;
          case 2: /* IL_394 */ 
            result = JSIL.Array.New($T00(), [this.get_RFC1123Pattern()]);
            return result;

            $label0 = 3 /* goto IL_3D9 */ ;
            continue $labelgroup0;
          case 3: /* IL_3D9 */ 
            throw new ($T0D())("Format specifier was invalid.");

            break $labelgroup0;
        }
      }
    }
  );

  $.Method({Static:false, Public:true }, "GetDayName", 
    $sig.make(0x582, $asm01.TypeRef("System.String"), [$asm01.TypeRef("System.DayOfWeek")], []), 
    function DateTimeFormatInfo_GetDayName (dayofweek) {
      if (!((dayofweek >= $T08().Sunday) && (dayofweek <= $T08().Saturday))) {
        throw new ($T0A())();
      }
      return this.dayNames[dayofweek.valueOf()];
    }
  );

  $.Method({Static:false, Public:true }, "GetEra", 
    $sig.make(0x570, $asm01.TypeRef("System.Int32"), [$asm01.TypeRef("System.String")], []), 
    function DateTimeFormatInfo_GetEra (eraName) {
      if (eraName === null) {
        throw new ($T0E())();
      }
      var eras = this.calendar.get_EraNames();
      var idx = (Array.prototype.indexOf.call(eras, eraName));
      if (idx >= 0) {
        var result = idx;
      } else {
        eras = this.calendar.get_AbbreviatedEraNames();
        idx = (Array.prototype.indexOf.call(eras, eraName));
        if (idx >= 0) {
          result = idx;
        } else {
          result = -1;
        }
      }
      return result;
    }
  );

  $.Method({Static:false, Public:true }, "GetEraName", 
    $sig.make(0x572, $asm01.TypeRef("System.String"), [$asm01.TypeRef("System.Int32")], []), 
    function DateTimeFormatInfo_GetEraName (era) {
      if (!((era >= 0) && (era <= this.calendar.get_EraNames().length))) {
        throw $sig.get(0xCA7, null, [$asm01.System.String, $asm01.System.String], []).Construct($T0A(), "era", era.toString());
      }
      return this.calendar.get_EraNames()[((era - 1) | 0)];
    }
  );

  $.Method({Static:false, Public:true }, "GetFormat", 
    $sig.make(0x56C, $asm01.TypeRef("System.Object"), [$asm01.TypeRef("System.Type")], []), 
    function DateTimeFormatInfo_GetFormat (formatType) {
      return ((formatType === JSIL.GetType(this)) ? this : null);
    }
  );

  $.Method({Static:true , Public:true }, "GetInstance", 
    $sig.make(0x569, $.Type, [$asm01.TypeRef("System.IFormatProvider")], []), 
    function DateTimeFormatInfo_GetInstance (provider) {
      if (provider !== null) {
        var dtfi = $thisType.$Cast(provider.IFormatProvider_GetFormat($thisType.__Type__));
        if (dtfi !== null) {
          var result = dtfi;
          return result;
        }
      }
      result = $thisType.get_CurrentInfo();
      return result;
    }
  );

  $.Method({Static:false, Public:true }, "GetMonthName", 
    $sig.make(0x573, $asm01.TypeRef("System.String"), [$asm01.TypeRef("System.Int32")], []), 
    function DateTimeFormatInfo_GetMonthName (month) {
      if (!((month >= 1) && (month <= 13))) {
        throw new ($T0A())();
      }
      return this.monthNames[((month - 1) | 0)];
    }
  );

  $.Method({Static:false, Public:true }, "GetShortestDayName", 
    $sig.make(0x587, $asm01.TypeRef("System.String"), [$asm01.TypeRef("System.DayOfWeek")], []), 
    function DateTimeFormatInfo_GetShortestDayName (dayOfWeek) {
      if (!((dayOfWeek >= $T08().Sunday) && (dayOfWeek <= $T08().Saturday))) {
        throw new ($T0A())();
      }
      return this.shortDayNames[dayOfWeek.valueOf()];
    }
  )
    .Attribute($asm01.TypeRef("System.Runtime.InteropServices.ComVisibleAttribute"), function () { return [false]; });

  $.Method({Static:false, Public:false}, "PopulateCombinedList", 
    $sig.make(0x586, $jsilcore.TypeRef("System.Array", [$asm01.TypeRef("System.String")]), [$jsilcore.TypeRef("System.Array", [$asm01.TypeRef("System.String")]), $jsilcore.TypeRef("System.Array", [$asm01.TypeRef("System.String")])], []), 
    function DateTimeFormatInfo_PopulateCombinedList (dates, times) {
      if (!((dates === null) || (times === null))) {
        var list = JSIL.Array.New($T00(), ((dates.length * times.length) | 0));
        var i = 0;

        for (var j = 0; j < dates.length; ++j) {

          for (var k = 0; k < times.length; ++k) {
            list[i++] = ((dates[j] + " " + times[k]));
          }
        }
        var result = list;
      } else {
        result = null;
      }
      return result;
    }
  );

  $.Method({Static:true , Public:true }, "ReadOnly", 
    $sig.make(0x56A, $.Type, [$.Type], []), 
    function DateTimeFormatInfo_ReadOnly (dtfi) {
      var copy = $thisType.$Cast(dtfi.Clone());
      copy.m_isReadOnly = true;
      return copy;
    }
  );

  $.Method({Static:false, Public:true }, "set_AbbreviatedDayNames", 
    $sig.make(0x50A, null, [$jsilcore.TypeRef("System.Array", [$asm01.TypeRef("System.String")])], []), 
    function DateTimeFormatInfo_set_AbbreviatedDayNames (value) {
      this.set_RawAbbreviatedDayNames(value);
    }
  );

  $.Method({Static:false, Public:true }, "set_AbbreviatedMonthGenitiveNames", 
    $sig.make(0x560, null, [$jsilcore.TypeRef("System.Array", [$asm01.TypeRef("System.String")])], []), 
    function DateTimeFormatInfo_set_AbbreviatedMonthGenitiveNames (value) {
      this.m_genitiveAbbreviatedMonthNames = value;
    }
  );

  $.Method({Static:false, Public:true }, "set_AbbreviatedMonthNames", 
    $sig.make(0x512, null, [$jsilcore.TypeRef("System.Array", [$asm01.TypeRef("System.String")])], []), 
    function DateTimeFormatInfo_set_AbbreviatedMonthNames (value) {
      this.set_RawAbbreviatedMonthNames(value);
    }
  );

  $.Method({Static:false, Public:true }, "set_AMDesignator", 
    $sig.make(0x528, null, [$asm01.TypeRef("System.String")], []), 
    function DateTimeFormatInfo_set_AMDesignator (value) {
      if (this.get_IsReadOnly()) {
        throw new ($T11())($thisType.MSG_READONLY);
      }
      if (value === null) {
        throw new ($T0E())();
      }
      this.amDesignator = value;
    }
  );

  $.Method({Static:false, Public:false}, "set_Calendar", 
    $sig.make(0x54D, null, [$asm01.TypeRef("System.Globalization.Calendar")], []), 
    function DateTimeFormatInfo_set_Calendar (value) {
      if (this.get_IsReadOnly()) {
        throw new ($T11())($thisType.MSG_READONLY);
      }
      if (value === null) {
        throw new ($T0E())();
      }
      this.calendar = value;
    }
  );

  $.Method({Static:false, Public:true }, "set_CalendarWeekRule", 
    $sig.make(0x551, null, [$asm01.TypeRef("System.Globalization.CalendarWeekRule")], []), 
    function DateTimeFormatInfo_set_CalendarWeekRule (value) {
      if (this.get_IsReadOnly()) {
        throw new ($T11())($thisType.MSG_READONLY);
      }
      this.calendarWeekRule = value.valueOf();
    }
  );

  $.Method({Static:false, Public:true }, "set_DateSeparator", 
    $sig.make(0x52F, null, [$asm01.TypeRef("System.String")], []), 
    function DateTimeFormatInfo_set_DateSeparator (value) {
      if (this.get_IsReadOnly()) {
        throw new ($T11())($thisType.MSG_READONLY);
      }
      if (value === null) {
        throw new ($T0E())();
      }
      this.dateSeparator = value;
    }
  );

  $.Method({Static:false, Public:true }, "set_DayNames", 
    $sig.make(0x518, null, [$jsilcore.TypeRef("System.Array", [$asm01.TypeRef("System.String")])], []), 
    function DateTimeFormatInfo_set_DayNames (value) {
      this.set_RawDayNames(value);
    }
  );

  $.Method({Static:false, Public:true }, "set_FirstDayOfWeek", 
    $sig.make(0x54B, null, [$asm01.TypeRef("System.DayOfWeek")], []), 
    function DateTimeFormatInfo_set_FirstDayOfWeek (value) {
      if (this.get_IsReadOnly()) {
        throw new ($T11())($thisType.MSG_READONLY);
      }
      if (!((value >= $T08().Sunday) && (value <= $T08().Saturday))) {
        throw new ($T0A())();
      }
      this.firstDayOfWeek = value.valueOf();
    }
  );

  $.Method({Static:false, Public:true }, "set_FullDateTimePattern", 
    $sig.make(0x544, null, [$asm01.TypeRef("System.String")], []), 
    function DateTimeFormatInfo_set_FullDateTimePattern (value) {
      if (this.get_IsReadOnly()) {
        throw new ($T11())($thisType.MSG_READONLY);
      }
      if (value === null) {
        throw new ($T0E())();
      }
      this.fullDateTimePattern = value;
    }
  );

  $.Method({Static:false, Public:true }, "set_LongDatePattern", 
    $sig.make(0x533, null, [$asm01.TypeRef("System.String")], []), 
    function DateTimeFormatInfo_set_LongDatePattern (value) {
      if (this.get_IsReadOnly()) {
        throw new ($T11())($thisType.MSG_READONLY);
      }
      if (value === null) {
        throw new ($T0E())();
      }
      this.longDatePattern = value;
    }
  );

  $.Method({Static:false, Public:true }, "set_LongTimePattern", 
    $sig.make(0x539, null, [$asm01.TypeRef("System.String")], []), 
    function DateTimeFormatInfo_set_LongTimePattern (value) {
      if (this.get_IsReadOnly()) {
        throw new ($T11())($thisType.MSG_READONLY);
      }
      if (value === null) {
        throw new ($T0E())();
      }
      this.longTimePattern = value;
    }
  );

  $.Method({Static:false, Public:true }, "set_MonthDayPattern", 
    $sig.make(0x53C, null, [$asm01.TypeRef("System.String")], []), 
    function DateTimeFormatInfo_set_MonthDayPattern (value) {
      if (this.get_IsReadOnly()) {
        throw new ($T11())($thisType.MSG_READONLY);
      }
      if (value === null) {
        throw new ($T0E())();
      }
      this.monthDayPattern = value;
    }
  );

  $.Method({Static:false, Public:true }, "set_MonthGenitiveNames", 
    $sig.make(0x563, null, [$jsilcore.TypeRef("System.Array", [$asm01.TypeRef("System.String")])], []), 
    function DateTimeFormatInfo_set_MonthGenitiveNames (value) {
      this.genitiveMonthNames = value;
    }
  );

  $.Method({Static:false, Public:true }, "set_MonthNames", 
    $sig.make(0x521, null, [$jsilcore.TypeRef("System.Array", [$asm01.TypeRef("System.String")])], []), 
    function DateTimeFormatInfo_set_MonthNames (value) {
      this.set_RawMonthNames(value);
    }
  );

  $.Method({Static:false, Public:true }, "set_PMDesignator", 
    $sig.make(0x52C, null, [$asm01.TypeRef("System.String")], []), 
    function DateTimeFormatInfo_set_PMDesignator (value) {
      if (this.get_IsReadOnly()) {
        throw new ($T11())($thisType.MSG_READONLY);
      }
      if (value === null) {
        throw new ($T0E())();
      }
      this.pmDesignator = value;
    }
  );

  $.Method({Static:false, Public:false}, "set_RawAbbreviatedDayNames", 
    $sig.make(0x50D, null, [$jsilcore.TypeRef("System.Array", [$asm01.TypeRef("System.String")])], []), 
    function DateTimeFormatInfo_set_RawAbbreviatedDayNames (value) {
      if (this.get_IsReadOnly()) {
        throw new ($T11())($thisType.MSG_READONLY);
      }
      if (value === null) {
        throw new ($T0E())();
      }
      if ((value.length) !== 7) {
        throw new ($T0D())($thisType.MSG_ARRAYSIZE_DAY);
      }
      this.abbreviatedDayNames = $T06().$Cast(value.slice(0));
    }
  );

  $.Method({Static:false, Public:false}, "set_RawAbbreviatedMonthNames", 
    $sig.make(0x515, null, [$jsilcore.TypeRef("System.Array", [$asm01.TypeRef("System.String")])], []), 
    function DateTimeFormatInfo_set_RawAbbreviatedMonthNames (value) {
      if (this.get_IsReadOnly()) {
        throw new ($T11())($thisType.MSG_READONLY);
      }
      if (value === null) {
        throw new ($T0E())();
      }
      if ((value.length) !== 13) {
        throw new ($T0D())($thisType.MSG_ARRAYSIZE_MONTH);
      }
      this.abbreviatedMonthNames = $T06().$Cast(value.slice(0));
    }
  );

  $.Method({Static:false, Public:false}, "set_RawDayNames", 
    $sig.make(0x51D, null, [$jsilcore.TypeRef("System.Array", [$asm01.TypeRef("System.String")])], []), 
    function DateTimeFormatInfo_set_RawDayNames (value) {
      if (this.get_IsReadOnly()) {
        throw new ($T11())($thisType.MSG_READONLY);
      }
      if (value === null) {
        throw new ($T0E())();
      }
      if ((value.length) !== 7) {
        throw new ($T0D())($thisType.MSG_ARRAYSIZE_DAY);
      }
      this.dayNames = $T06().$Cast(value.slice(0));
    }
  );

  $.Method({Static:false, Public:false}, "set_RawMonthNames", 
    $sig.make(0x525, null, [$jsilcore.TypeRef("System.Array", [$asm01.TypeRef("System.String")])], []), 
    function DateTimeFormatInfo_set_RawMonthNames (value) {
      if (this.get_IsReadOnly()) {
        throw new ($T11())($thisType.MSG_READONLY);
      }
      if (value === null) {
        throw new ($T0E())();
      }
      if ((value.length) !== 13) {
        throw new ($T0D())($thisType.MSG_ARRAYSIZE_MONTH);
      }
      this.monthNames = $T06().$Cast(value.slice(0));
    }
  );

  $.Method({Static:false, Public:true }, "set_ShortDatePattern", 
    $sig.make(0x535, null, [$asm01.TypeRef("System.String")], []), 
    function DateTimeFormatInfo_set_ShortDatePattern (value) {
      if (this.get_IsReadOnly()) {
        throw new ($T11())($thisType.MSG_READONLY);
      }
      if (value === null) {
        throw new ($T0E())();
      }
      this.shortDatePattern = value;
    }
  );

  $.Method({Static:false, Public:true }, "set_ShortestDayNames", 
    $sig.make(0x566, null, [$jsilcore.TypeRef("System.Array", [$asm01.TypeRef("System.String")])], []), 
    function DateTimeFormatInfo_set_ShortestDayNames (value) {
      if (value === null) {
        throw new ($T0E())();
      }
      if (value.length !== 7) {
        throw new ($T0D())("Array must have 7 entries");
      }

      for (var i = 0; i < 7; ++i) {
        if (value[i] === null) {
          throw new ($T0E())($T00().Format("Element {0} is null", i));
        }
      }
      this.shortDayNames = value;
    }
  );

  $.Method({Static:false, Public:true }, "set_ShortTimePattern", 
    $sig.make(0x537, null, [$asm01.TypeRef("System.String")], []), 
    function DateTimeFormatInfo_set_ShortTimePattern (value) {
      if (this.get_IsReadOnly()) {
        throw new ($T11())($thisType.MSG_READONLY);
      }
      if (value === null) {
        throw new ($T0E())();
      }
      this.shortTimePattern = value;
    }
  );

  $.Method({Static:false, Public:true }, "set_TimeSeparator", 
    $sig.make(0x531, null, [$asm01.TypeRef("System.String")], []), 
    function DateTimeFormatInfo_set_TimeSeparator (value) {
      if (this.get_IsReadOnly()) {
        throw new ($T11())($thisType.MSG_READONLY);
      }
      if (value === null) {
        throw new ($T0E())();
      }
      this.timeSeparator = value;
    }
  );

  $.Method({Static:false, Public:true }, "set_YearMonthPattern", 
    $sig.make(0x540, null, [$asm01.TypeRef("System.String")], []), 
    function DateTimeFormatInfo_set_YearMonthPattern (value) {
      if (this.get_IsReadOnly()) {
        throw new ($T11())($thisType.MSG_READONLY);
      }
      if (value === null) {
        throw new ($T0E())();
      }
      this.yearMonthPattern = value;
    }
  );

  $.Method({Static:false, Public:true }, "SetAllDateTimePatterns", 
    $sig.make(0x588, null, [$jsilcore.TypeRef("System.Array", [$asm01.TypeRef("System.String")]), $asm01.TypeRef("System.Char")], []), 
    function DateTimeFormatInfo_SetAllDateTimePatterns (patterns, format) {

      var $label0 = 0;
    $labelgroup0: 
      while (true) {
        switch ($label0) {
          case 0: /* $entry0 */ 
            if (patterns === null) {
              throw new ($T0E())("patterns");
            }
            if (patterns.length === 0) {
              throw $sig.get(0x818, null, [$asm01.System.String, $asm01.System.String], []).Construct($T0D(), "patterns", "The argument patterns must not be of zero-length");
            }
            if (format.charCodeAt(0) <= "Y".charCodeAt(0)) {
              if (format.charCodeAt(0) <= "M".charCodeAt(0)) {
                if (format.charCodeAt(0) === "D".charCodeAt(0)) {
                  this.allLongDatePatterns = patterns;
                  return;
                }
                if (format.charCodeAt(0) !== "M".charCodeAt(0)) {
                  $label0 = 2 /* goto IL_AB */ ;
                  continue $labelgroup0;
                }
                $label0 = 1 /* goto IL_7E */ ;
                continue $labelgroup0;
              } else {
                if (format.charCodeAt(0) === "T".charCodeAt(0)) {
                  this.allLongTimePatterns = patterns;
                  return;
                }
                if (format.charCodeAt(0) !== "Y".charCodeAt(0)) {
                  $label0 = 2 /* goto IL_AB */ ;
                  continue $labelgroup0;
                }
              }
            } else if (format.charCodeAt(0) <= "m".charCodeAt(0)) {
              if (format.charCodeAt(0) === "d".charCodeAt(0)) {
                this.allShortDatePatterns = patterns;
                return;
              }
              if (format.charCodeAt(0) !== "m".charCodeAt(0)) {
                $label0 = 2 /* goto IL_AB */ ;
                continue $labelgroup0;
              }
              $label0 = 1 /* goto IL_7E */ ;
              continue $labelgroup0;
            } else {
              if (format.charCodeAt(0) === "t".charCodeAt(0)) {
                this.allShortTimePatterns = patterns;
                return;
              }
              if (format.charCodeAt(0) !== "y".charCodeAt(0)) {
                $label0 = 2 /* goto IL_AB */ ;
                continue $labelgroup0;
              }
            }
            this.yearMonthPatterns = patterns;
            return;

            $label0 = 1 /* goto IL_7E */ ;
            continue $labelgroup0;
          case 1: /* IL_7E */ 
            this.monthDayPatterns = patterns;
            return;

            $label0 = 2 /* goto IL_AB */ ;
            continue $labelgroup0;
          case 2: /* IL_AB */ 
            throw $sig.get(0x818, null, [$asm01.System.String, $asm01.System.String], []).Construct($T0D(), "format", "Format specifier is invalid");

            break $labelgroup0;
        }
      }
    }
  )
    .Attribute($asm01.TypeRef("System.Runtime.InteropServices.ComVisibleAttribute"), function () { return [false]; });

  $.Constant({Static:true , Public:false}, "_RoundtripPattern", "yyyy'-'MM'-'dd'T'HH':'mm':'ss.fffffffK"); 
  $.Field({Static:true , Public:false, ReadOnly:true }, "MSG_READONLY", $asm01.TypeRef("System.String"), "This instance is read only"); 
  $.Field({Static:true , Public:false, ReadOnly:true }, "MSG_ARRAYSIZE_MONTH", $asm01.TypeRef("System.String"), "An array with exactly 13 elements is needed"); 
  $.Field({Static:true , Public:false, ReadOnly:true }, "MSG_ARRAYSIZE_DAY", $asm01.TypeRef("System.String"), "An array with exactly 7 elements is needed"); 
  $.Field({Static:true , Public:false, ReadOnly:true }, "INVARIANT_ABBREVIATED_DAY_NAMES", $jsilcore.TypeRef("System.Array", [$asm01.TypeRef("System.String")])); 
  $.Field({Static:true , Public:false, ReadOnly:true }, "INVARIANT_DAY_NAMES", $jsilcore.TypeRef("System.Array", [$asm01.TypeRef("System.String")])); 
  $.Field({Static:true , Public:false, ReadOnly:true }, "INVARIANT_ABBREVIATED_MONTH_NAMES", $jsilcore.TypeRef("System.Array", [$asm01.TypeRef("System.String")])); 
  $.Field({Static:true , Public:false, ReadOnly:true }, "INVARIANT_MONTH_NAMES", $jsilcore.TypeRef("System.Array", [$asm01.TypeRef("System.String")])); 
  $.Field({Static:true , Public:false, ReadOnly:true }, "INVARIANT_SHORT_DAY_NAMES", $jsilcore.TypeRef("System.Array", [$asm01.TypeRef("System.String")])); 
  $.Field({Static:true , Public:false}, "theInvariantDateTimeFormatInfo", $.Type); 
  $.Field({Static:false, Public:false}, "m_isReadOnly", $asm01.TypeRef("System.Boolean")); 
  $.Field({Static:false, Public:false}, "amDesignator", $asm01.TypeRef("System.String")); 
  $.Field({Static:false, Public:false}, "pmDesignator", $asm01.TypeRef("System.String")); 
  $.Field({Static:false, Public:false}, "dateSeparator", $asm01.TypeRef("System.String")); 
  $.Field({Static:false, Public:false}, "timeSeparator", $asm01.TypeRef("System.String")); 
  $.Field({Static:false, Public:false}, "shortDatePattern", $asm01.TypeRef("System.String")); 
  $.Field({Static:false, Public:false}, "longDatePattern", $asm01.TypeRef("System.String")); 
  $.Field({Static:false, Public:false}, "shortTimePattern", $asm01.TypeRef("System.String")); 
  $.Field({Static:false, Public:false}, "longTimePattern", $asm01.TypeRef("System.String")); 
  $.Field({Static:false, Public:false}, "monthDayPattern", $asm01.TypeRef("System.String")); 
  $.Field({Static:false, Public:false}, "yearMonthPattern", $asm01.TypeRef("System.String")); 
  $.Field({Static:false, Public:false}, "fullDateTimePattern", $asm01.TypeRef("System.String")); 
  $.Field({Static:false, Public:false}, "_RFC1123Pattern", $asm01.TypeRef("System.String")); 
  $.Field({Static:false, Public:false}, "_SortableDateTimePattern", $asm01.TypeRef("System.String")); 
  $.Field({Static:false, Public:false}, "_UniversalSortableDateTimePattern", $asm01.TypeRef("System.String")); 
  $.Field({Static:false, Public:false}, "firstDayOfWeek", $asm01.TypeRef("System.Int32")); 
  $.Field({Static:false, Public:false}, "calendar", $asm01.TypeRef("System.Globalization.Calendar")); 
  $.Field({Static:false, Public:false}, "calendarWeekRule", $asm01.TypeRef("System.Int32")); 
  $.Field({Static:false, Public:false}, "abbreviatedDayNames", $jsilcore.TypeRef("System.Array", [$asm01.TypeRef("System.String")])); 
  $.Field({Static:false, Public:false}, "dayNames", $jsilcore.TypeRef("System.Array", [$asm01.TypeRef("System.String")])); 
  $.Field({Static:false, Public:false}, "monthNames", $jsilcore.TypeRef("System.Array", [$asm01.TypeRef("System.String")])); 
  $.Field({Static:false, Public:false}, "abbreviatedMonthNames", $jsilcore.TypeRef("System.Array", [$asm01.TypeRef("System.String")])); 
  $.Field({Static:false, Public:false}, "allShortDatePatterns", $jsilcore.TypeRef("System.Array", [$asm01.TypeRef("System.String")])); 
  $.Field({Static:false, Public:false}, "allLongDatePatterns", $jsilcore.TypeRef("System.Array", [$asm01.TypeRef("System.String")])); 
  $.Field({Static:false, Public:false}, "allShortTimePatterns", $jsilcore.TypeRef("System.Array", [$asm01.TypeRef("System.String")])); 
  $.Field({Static:false, Public:false}, "allLongTimePatterns", $jsilcore.TypeRef("System.Array", [$asm01.TypeRef("System.String")])); 
  $.Field({Static:false, Public:false}, "monthDayPatterns", $jsilcore.TypeRef("System.Array", [$asm01.TypeRef("System.String")])); 
  $.Field({Static:false, Public:false}, "yearMonthPatterns", $jsilcore.TypeRef("System.Array", [$asm01.TypeRef("System.String")])); 
  $.Field({Static:false, Public:false}, "shortDayNames", $jsilcore.TypeRef("System.Array", [$asm01.TypeRef("System.String")])); 
  $.Field({Static:false, Public:false}, "nDataItem", $asm01.TypeRef("System.Int32")); 
  $.Field({Static:false, Public:false}, "m_useUserOverride", $asm01.TypeRef("System.Boolean")); 
  $.Field({Static:false, Public:false}, "m_isDefaultCalendar", $asm01.TypeRef("System.Boolean")); 
  $.Field({Static:false, Public:false}, "CultureID", $asm01.TypeRef("System.Int32")); 
  $.Field({Static:false, Public:false}, "bUseCalendarInfo", $asm01.TypeRef("System.Boolean")); 
  $.Field({Static:false, Public:false}, "generalShortTimePattern", $asm01.TypeRef("System.String")); 
  $.Field({Static:false, Public:false}, "generalLongTimePattern", $asm01.TypeRef("System.String")); 
  $.Field({Static:false, Public:false}, "m_eraNames", $jsilcore.TypeRef("System.Array", [$asm01.TypeRef("System.String")])); 
  $.Field({Static:false, Public:false}, "m_abbrevEraNames", $jsilcore.TypeRef("System.Array", [$asm01.TypeRef("System.String")])); 
  $.Field({Static:false, Public:false}, "m_abbrevEnglishEraNames", $jsilcore.TypeRef("System.Array", [$asm01.TypeRef("System.String")])); 
  $.Field({Static:false, Public:false}, "m_dateWords", $jsilcore.TypeRef("System.Array", [$asm01.TypeRef("System.String")])); 
  $.Field({Static:false, Public:false}, "optionalCalendars", $jsilcore.TypeRef("System.Array", [$asm01.TypeRef("System.Int32")])); 
  $.Field({Static:false, Public:false}, "m_superShortDayNames", $jsilcore.TypeRef("System.Array", [$asm01.TypeRef("System.String")])); 
  $.Field({Static:false, Public:false}, "genitiveMonthNames", $jsilcore.TypeRef("System.Array", [$asm01.TypeRef("System.String")])); 
  $.Field({Static:false, Public:false}, "m_genitiveAbbreviatedMonthNames", $jsilcore.TypeRef("System.Array", [$asm01.TypeRef("System.String")])); 
  $.Field({Static:false, Public:false}, "leapYearMonthNames", $jsilcore.TypeRef("System.Array", [$asm01.TypeRef("System.String")])); 
  $.Field({Static:false, Public:false}, "formatFlags", $asm01.TypeRef("System.Globalization.DateTimeFormatFlags")); 
  $.Field({Static:false, Public:false}, "m_name", $asm01.TypeRef("System.String")); 
  $.Field({Static:false, Public:false}, "all_date_time_patterns", $asm01.TypeRef("System.Array")); 
  $.Method({Static:true , Public:false}, ".cctor", 
    $sig.make(0x589, null, [], []), 
    function DateTimeFormatInfo__cctor () {
      $thisType.MSG_READONLY = "This instance is read only";
      $thisType.MSG_ARRAYSIZE_MONTH = "An array with exactly 13 elements is needed";
      $thisType.MSG_ARRAYSIZE_DAY = "An array with exactly 7 elements is needed";
      $thisType.INVARIANT_ABBREVIATED_DAY_NAMES = JSIL.Array.New($T00(), ["Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"]);
      $thisType.INVARIANT_DAY_NAMES = JSIL.Array.New($T00(), ["Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"]);
      $thisType.INVARIANT_ABBREVIATED_MONTH_NAMES = JSIL.Array.New($T00(), ["Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec", ""]);
      $thisType.INVARIANT_MONTH_NAMES = JSIL.Array.New($T00(), ["January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December", ""]);
      $thisType.INVARIANT_SHORT_DAY_NAMES = JSIL.Array.New($T00(), ["Su", "Mo", "Tu", "We", "Th", "Fr", "Sa"]);
    }
  );

  $.Property({Static:false, Public:true }, "IsReadOnly", $asm01.TypeRef("System.Boolean"));

  $.Property({Static:false, Public:true }, "AbbreviatedDayNames", $jsilcore.TypeRef("System.Array", [$asm01.TypeRef("System.String")]));

  $.Property({Static:false, Public:false}, "RawAbbreviatedDayNames", $jsilcore.TypeRef("System.Array", [$asm01.TypeRef("System.String")]));

  $.Property({Static:false, Public:true }, "AbbreviatedMonthNames", $jsilcore.TypeRef("System.Array", [$asm01.TypeRef("System.String")]));

  $.Property({Static:false, Public:false}, "RawAbbreviatedMonthNames", $jsilcore.TypeRef("System.Array", [$asm01.TypeRef("System.String")]));

  $.Property({Static:false, Public:true }, "DayNames", $jsilcore.TypeRef("System.Array", [$asm01.TypeRef("System.String")]));

  $.Property({Static:false, Public:false}, "RawDayNames", $jsilcore.TypeRef("System.Array", [$asm01.TypeRef("System.String")]));

  $.Property({Static:false, Public:true }, "MonthNames", $jsilcore.TypeRef("System.Array", [$asm01.TypeRef("System.String")]));

  $.Property({Static:false, Public:false}, "RawMonthNames", $jsilcore.TypeRef("System.Array", [$asm01.TypeRef("System.String")]));

  $.Property({Static:false, Public:true }, "AMDesignator", $asm01.TypeRef("System.String"));

  $.Property({Static:false, Public:true }, "PMDesignator", $asm01.TypeRef("System.String"));

  $.Property({Static:false, Public:true }, "DateSeparator", $asm01.TypeRef("System.String"));

  $.Property({Static:false, Public:true }, "TimeSeparator", $asm01.TypeRef("System.String"));

  $.Property({Static:false, Public:true }, "LongDatePattern", $asm01.TypeRef("System.String"));

  $.Property({Static:false, Public:true }, "ShortDatePattern", $asm01.TypeRef("System.String"));

  $.Property({Static:false, Public:true }, "ShortTimePattern", $asm01.TypeRef("System.String"));

  $.Property({Static:false, Public:true }, "LongTimePattern", $asm01.TypeRef("System.String"));

  $.Property({Static:false, Public:true }, "MonthDayPattern", $asm01.TypeRef("System.String"));

  $.Property({Static:false, Public:true }, "YearMonthPattern", $asm01.TypeRef("System.String"));

  $.Property({Static:false, Public:true }, "FullDateTimePattern", $asm01.TypeRef("System.String"));

  $.Property({Static:true , Public:true }, "CurrentInfo", $.Type);

  $.Property({Static:true , Public:true }, "InvariantInfo", $.Type);

  $.Property({Static:false, Public:true }, "FirstDayOfWeek", $asm01.TypeRef("System.DayOfWeek"));

  $.Property({Static:false, Public:false}, "Calendar", $asm01.TypeRef("System.Globalization.Calendar"));

  $.Property({Static:false, Public:true }, "CalendarWeekRule", $asm01.TypeRef("System.Globalization.CalendarWeekRule"));

  $.Property({Static:false, Public:true }, "RFC1123Pattern", $asm01.TypeRef("System.String"));

  $.Property({Static:false, Public:false}, "RoundtripPattern", $asm01.TypeRef("System.String"));

  $.Property({Static:false, Public:true }, "SortableDateTimePattern", $asm01.TypeRef("System.String"));

  $.Property({Static:false, Public:true }, "UniversalSortableDateTimePattern", $asm01.TypeRef("System.String"));

  $.Property({Static:false, Public:true }, "AbbreviatedMonthGenitiveNames", $jsilcore.TypeRef("System.Array", [$asm01.TypeRef("System.String")]))
    .Attribute($asm01.TypeRef("System.Runtime.InteropServices.ComVisibleAttribute"), function () { return [false]; })
    .Attribute($asm01.TypeRef("System.MonoLimitationAttribute"), function () { return ["Returns only the English month abbreviated names"]; });

  $.Property({Static:false, Public:true }, "MonthGenitiveNames", $jsilcore.TypeRef("System.Array", [$asm01.TypeRef("System.String")]))
    .Attribute($asm01.TypeRef("System.MonoLimitationAttribute"), function () { return ["Returns only the English month names"]; })
    .Attribute($asm01.TypeRef("System.Runtime.InteropServices.ComVisibleAttribute"), function () { return [false]; });

  $.Property({Static:false, Public:true }, "NativeCalendarName", $asm01.TypeRef("System.String"))
    .Attribute($asm01.TypeRef("System.Runtime.InteropServices.ComVisibleAttribute"), function () { return [false]; })
    .Attribute($asm01.TypeRef("System.MonoLimitationAttribute"), function () { return ["Returns an empty string as if the calendar name wasn't available"]; });

  $.Property({Static:false, Public:true }, "ShortestDayNames", $jsilcore.TypeRef("System.Array", [$asm01.TypeRef("System.String")]))
    .Attribute($asm01.TypeRef("System.Runtime.InteropServices.ComVisibleAttribute"), function () { return [false]; });

  $.ImplementInterfaces($asm01.TypeRef("System.ICloneable"), $asm01.TypeRef("System.IFormatProvider"))
})
  .Attribute($asm01.TypeRef("System.Runtime.InteropServices.ComVisibleAttribute"), function () { return [true]; });

JSIL.MakeClass($asm01.TypeRef("System.Object"), "System.Collections.Hashtable", true, [], function ($) {
  var $thisType = $.publicInterface;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm01.System.Int32)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm01.System.Single)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm01.System.Collections.IHashCodeProvider)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm01.System.Collections.IComparer)) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize($asm01.System.ArgumentOutOfRangeException)) ();
  };
  var $T05 = function () {
    return ($T05 = JSIL.Memoize($asm01.System.Double)) ();
  };
  var $T06 = function () {
    return ($T06 = JSIL.Memoize($asm01.System.ArgumentException)) ();
  };
  var $T07 = function () {
    return ($T07 = JSIL.Memoize($asm01.System.Collections.Hashtable_Slot)) ();
  };
  var $T08 = function () {
    return ($T08 = JSIL.Memoize(System.Array.Of($asm01.System.Collections.Hashtable_Slot))) ();
  };
  var $T09 = function () {
    return ($T09 = JSIL.Memoize(System.Array.Of($asm01.System.Int32))) ();
  };
  var $T0A = function () {
    return ($T0A = JSIL.Memoize($asm01.System.Collections.IDictionary)) ();
  };
  var $T0B = function () {
    return ($T0B = JSIL.Memoize($asm01.System.ArgumentNullException)) ();
  };
  var $T0C = function () {
    return ($T0C = JSIL.Memoize($asm01.System.Collections.IDictionaryEnumerator)) ();
  };
  var $T0D = function () {
    return ($T0D = JSIL.Memoize($asm01.System.Collections.IEnumerator)) ();
  };
  var $T0E = function () {
    return ($T0E = JSIL.Memoize($asm01.System.Collections.IEqualityComparer)) ();
  };
  var $T0F = function () {
    return ($T0F = JSIL.Memoize($asm01.System.Object)) ();
  };
  var $T10 = function () {
    return ($T10 = JSIL.Memoize($asm01.System.Collections.Hashtable_KeyMarker)) ();
  };
  var $T11 = function () {
    return ($T11 = JSIL.Memoize($asm01.System.Boolean)) ();
  };
  var $T12 = function () {
    return ($T12 = JSIL.Memoize($asm01.System.Array)) ();
  };
  var $T13 = function () {
    return ($T13 = JSIL.Memoize($asm01.System.Collections.Hashtable_EnumeratorMode)) ();
  };
  var $T14 = function () {
    return ($T14 = JSIL.Memoize($asm01.System.Collections.Hashtable_Enumerator)) ();
  };
  var $T15 = function () {
    return ($T15 = JSIL.Memoize($asm01.System.UInt32)) ();
  };
  var $T16 = function () {
    return ($T16 = JSIL.Memoize($asm01.System.Int64)) ();
  };
  var $T17 = function () {
    return ($T17 = JSIL.Memoize($asm01.System.UInt64)) ();
  };
  var $T18 = function () {
    return ($T18 = JSIL.Memoize($asm01.System.Collections.Hashtable_HashKeys)) ();
  };
  var $T19 = function () {
    return ($T19 = JSIL.Memoize($asm01.System.Collections.Hashtable_HashValues)) ();
  };
  var $T1A = function () {
    return ($T1A = JSIL.Memoize($asm01.System.Void)) ();
  };
  var $T1B = function () {
    return ($T1B = JSIL.Memoize($asm01.System.Collections.Hashtable_SyncHashtable)) ();
  };

  $.Method({Static:false, Public:true }, ".ctor", 
    $sig.make(0x634, null, [], []), 
    function Hashtable__ctor () {
      $sig.get(0x636, null, [$asm01.System.Int32, $asm01.System.Single], []).Call($thisType.prototype, "_ctor", null, this, 0, 1);
    }
  );

  $.Method({Static:false, Public:true }, ".ctor", 
    $sig.make(0x635, null, [
        $asm01.TypeRef("System.Int32"), $asm01.TypeRef("System.Single"), 
        $asm01.TypeRef("System.Collections.IHashCodeProvider"), $asm01.TypeRef("System.Collections.IComparer")
      ], []), 
    function Hashtable__ctor (capacity, loadFactor, hcp, comparer) {
      if (capacity < 0) {
        throw $sig.get(0xCA7, null, [$asm01.System.String, $asm01.System.String], []).Construct($T04(), "capacity", "negative capacity");
      }
      if (!(!((loadFactor < 0.10000000149011612) || 
            (loadFactor > 1)) && !$T01().IsNaN(loadFactor))) {
        throw $sig.get(0xCA7, null, [$asm01.System.String, $asm01.System.String], []).Construct($T04(), "loadFactor", "load factor");
      }
      if (capacity === 0) {
        ++capacity;
      }
      this.loadFactor = (0.75 * loadFactor);
      var tableSize = (capacity / this.loadFactor);
      if (tableSize > 2147483647) {
        throw new ($T06())("Size is too big");
      }
      var size = ((tableSize) | 0);
      size = $thisType.ToPrime(size);
      this.SetTable(JSIL.Array.New($T07(), size), JSIL.Array.New($T00(), size));
      this.set_hcp(hcp);
      this.set_comparer(comparer);
      this.inUse = 0;
      this.modificationCount = 0;
    }
  )
    .Attribute($asm01.TypeRef("System.ObsoleteAttribute"), function () { return ["Please use Hashtable(int, float, IEqualityComparer) instead"]; });

  $.Method({Static:false, Public:true }, ".ctor", 
    $sig.make(0x636, null, [$asm01.TypeRef("System.Int32"), $asm01.TypeRef("System.Single")], []), 
    function Hashtable__ctor (capacity, loadFactor) {
      $sig.get(0x635, null, [
          $asm01.System.Int32, $asm01.System.Single, 
          $asm01.System.Collections.IHashCodeProvider, $asm01.System.Collections.IComparer
        ], []).Call($thisType.prototype, "_ctor", null, this, capacity, loadFactor, null, null);
    }
  );

  $.Method({Static:false, Public:true }, ".ctor", 
    $sig.make(0x637, null, [$asm01.TypeRef("System.Int32")], []), 
    function Hashtable__ctor (capacity) {
      $sig.get(0x636, null, [$asm01.System.Int32, $asm01.System.Single], []).Call($thisType.prototype, "_ctor", null, this, capacity, 1);
    }
  );

  $.Method({Static:false, Public:false}, ".ctor", 
    $sig.make(0x638, null, [$.Type], []), 
    function Hashtable__ctor (source) {
      this.inUse = source.inUse;
      this.loadFactor = source.loadFactor;
      this.table = $T08().$Cast(source.table.slice(0));
      this.hashes = $T09().$Cast(source.hashes.slice(0));
      this.threshold = source.threshold;
      this.hcpRef = source.hcpRef;
      this.comparerRef = source.comparerRef;
      this.equalityComparer = source.equalityComparer;
    }
  );

  $.Method({Static:false, Public:true }, ".ctor", 
    $sig.make(0x639, null, [
        $asm01.TypeRef("System.Int32"), $asm01.TypeRef("System.Collections.IHashCodeProvider"), 
        $asm01.TypeRef("System.Collections.IComparer")
      ], []), 
    function Hashtable__ctor (capacity, hcp, comparer) {
      $sig.get(0x635, null, [
          $asm01.System.Int32, $asm01.System.Single, 
          $asm01.System.Collections.IHashCodeProvider, $asm01.System.Collections.IComparer
        ], []).Call($thisType.prototype, "_ctor", null, this, capacity, 1, hcp, comparer);
    }
  )
    .Attribute($asm01.TypeRef("System.ObsoleteAttribute"), function () { return ["Please use Hashtable(int, IEqualityComparer) instead"]; });

  $.Method({Static:false, Public:true }, ".ctor", 
    $sig.make(0x63A, null, [
        $asm01.TypeRef("System.Collections.IDictionary"), $asm01.TypeRef("System.Single"), 
        $asm01.TypeRef("System.Collections.IHashCodeProvider"), $asm01.TypeRef("System.Collections.IComparer")
      ], []), 
    function Hashtable__ctor (d, loadFactor, hcp, comparer) {
      $sig.get(0x635, null, [
          $asm01.System.Int32, $asm01.System.Single, 
          $asm01.System.Collections.IHashCodeProvider, $asm01.System.Collections.IComparer
        ], []).Call($thisType.prototype, "_ctor", null, this, ((d !== null) ? d.ICollection_get_Count() : 0), loadFactor, hcp, comparer);
      if (d === null) {
        throw new ($T0B())("dictionary");
      }

      for (var it = d.IDictionary_GetEnumerator(); it.IEnumerator_MoveNext(); ) {
        this.Add(
          it.IDictionaryEnumerator_get_Key(), 
          it.IDictionaryEnumerator_get_Value()
        );
      }
    }
  )
    .Attribute($asm01.TypeRef("System.ObsoleteAttribute"), function () { return ["Please use Hashtable(IDictionary, float, IEqualityComparer) instead"]; });

  $.Method({Static:false, Public:true }, ".ctor", 
    $sig.make(0x63B, null, [$asm01.TypeRef("System.Collections.IDictionary"), $asm01.TypeRef("System.Single")], []), 
    function Hashtable__ctor (d, loadFactor) {
      $sig.get(0x63A, null, [
          $asm01.System.Collections.IDictionary, $asm01.System.Single, 
          $asm01.System.Collections.IHashCodeProvider, $asm01.System.Collections.IComparer
        ], []).Call($thisType.prototype, "_ctor", null, this, d, loadFactor, null, null);
    }
  );

  $.Method({Static:false, Public:true }, ".ctor", 
    $sig.make(0x63C, null, [$asm01.TypeRef("System.Collections.IDictionary")], []), 
    function Hashtable__ctor (d) {
      $sig.get(0x63B, null, [$asm01.System.Collections.IDictionary, $asm01.System.Single], []).Call($thisType.prototype, "_ctor", null, this, d, 1);
    }
  );

  $.Method({Static:false, Public:true }, ".ctor", 
    $sig.make(0x63D, null, [
        $asm01.TypeRef("System.Collections.IDictionary"), $asm01.TypeRef("System.Collections.IHashCodeProvider"), 
        $asm01.TypeRef("System.Collections.IComparer")
      ], []), 
    function Hashtable__ctor (d, hcp, comparer) {
      $sig.get(0x63A, null, [
          $asm01.System.Collections.IDictionary, $asm01.System.Single, 
          $asm01.System.Collections.IHashCodeProvider, $asm01.System.Collections.IComparer
        ], []).Call($thisType.prototype, "_ctor", null, this, d, 1, hcp, comparer);
    }
  )
    .Attribute($asm01.TypeRef("System.ObsoleteAttribute"), function () { return ["Please use Hashtable(IDictionary, IEqualityComparer) instead"]; });

  $.Method({Static:false, Public:true }, ".ctor", 
    $sig.make(0x63E, null, [$asm01.TypeRef("System.Collections.IHashCodeProvider"), $asm01.TypeRef("System.Collections.IComparer")], []), 
    function Hashtable__ctor (hcp, comparer) {
      $sig.get(0x635, null, [
          $asm01.System.Int32, $asm01.System.Single, 
          $asm01.System.Collections.IHashCodeProvider, $asm01.System.Collections.IComparer
        ], []).Call($thisType.prototype, "_ctor", null, this, 1, 1, hcp, comparer);
    }
  )
    .Attribute($asm01.TypeRef("System.ObsoleteAttribute"), function () { return ["Please use Hashtable(IEqualityComparer) instead"]; });

  $.Method({Static:false, Public:true }, ".ctor", 
    $sig.make(0x63F, null, [$asm01.TypeRef("System.Collections.IDictionary"), $asm01.TypeRef("System.Collections.IEqualityComparer")], []), 
    function Hashtable__ctor (d, equalityComparer) {
      $sig.get(0x640, null, [
          $asm01.System.Collections.IDictionary, $asm01.System.Single, 
          $asm01.System.Collections.IEqualityComparer
        ], []).Call($thisType.prototype, "_ctor", null, this, d, 1, equalityComparer);
    }
  );

  $.Method({Static:false, Public:true }, ".ctor", 
    $sig.make(0x640, null, [
        $asm01.TypeRef("System.Collections.IDictionary"), $asm01.TypeRef("System.Single"), 
        $asm01.TypeRef("System.Collections.IEqualityComparer")
      ], []), 
    function Hashtable__ctor (d, loadFactor, equalityComparer) {
      $sig.get(0x63B, null, [$asm01.System.Collections.IDictionary, $asm01.System.Single], []).Call($thisType.prototype, "_ctor", null, this, d, loadFactor);
      this.equalityComparer = equalityComparer;
    }
  );

  $.Method({Static:false, Public:true }, ".ctor", 
    $sig.make(0x641, null, [$asm01.TypeRef("System.Collections.IEqualityComparer")], []), 
    function Hashtable__ctor (equalityComparer) {
      $sig.get(0x643, null, [
          $asm01.System.Int32, $asm01.System.Single, 
          $asm01.System.Collections.IEqualityComparer
        ], []).Call($thisType.prototype, "_ctor", null, this, 1, 1, equalityComparer);
    }
  );

  $.Method({Static:false, Public:true }, ".ctor", 
    $sig.make(0x642, null, [$asm01.TypeRef("System.Int32"), $asm01.TypeRef("System.Collections.IEqualityComparer")], []), 
    function Hashtable__ctor (capacity, equalityComparer) {
      $sig.get(0x643, null, [
          $asm01.System.Int32, $asm01.System.Single, 
          $asm01.System.Collections.IEqualityComparer
        ], []).Call($thisType.prototype, "_ctor", null, this, capacity, 1, equalityComparer);
    }
  );

  $.Method({Static:false, Public:true }, ".ctor", 
    $sig.make(0x643, null, [
        $asm01.TypeRef("System.Int32"), $asm01.TypeRef("System.Single"), 
        $asm01.TypeRef("System.Collections.IEqualityComparer")
      ], []), 
    function Hashtable__ctor (capacity, loadFactor, equalityComparer) {
      $sig.get(0x636, null, [$asm01.System.Int32, $asm01.System.Single], []).Call($thisType.prototype, "_ctor", null, this, capacity, loadFactor);
      this.equalityComparer = equalityComparer;
    }
  );

  $.Method({Static:false, Public:true }, "Add", 
    $sig.make(0x646, null, [$asm01.TypeRef("System.Object"), $asm01.TypeRef("System.Object")], []), 
    function Hashtable_Add (key, value) {
      this.PutImpl(key, value, false);
    }
  );

  $.Method({Static:false, Public:false}, "AdjustThreshold", 
    $sig.make(0x651, null, [], []), 
    function Hashtable_AdjustThreshold () {
      var size = this.table.length;
      this.threshold = (((size * this.loadFactor)) | 0);
      if (this.threshold >= size) {
        this.threshold = ((size - 1) | 0);
      }
    }
  );

  $.Method({Static:true , Public:false}, "CalcPrime", 
    $sig.make(0x658, $asm01.TypeRef("System.Int32"), [$asm01.TypeRef("System.Int32")], []), 
    function Hashtable_CalcPrime (x) {

      for (var i = ((((x & -2) | 0) - 1) | 0); i < 2147483647; i += 2) {
        if ($thisType.TestPrime(i)) {
          var result = i;
          return result;
        }
      }
      result = x;
      return result;
    }
  );

  $.Method({Static:false, Public:true }, "Clear", 
    $sig.make(0x647, null, [], []), 
    function Hashtable_Clear () {

      for (var i = 0; i < this.table.length; ++i) {
        this.table[i].key = null;
        this.table[i].value = null;
        this.hashes[i] = 0;
      }
      this.inUse = 0;
      ++this.modificationCount;
    }
  )
    .Attribute($asm01.TypeRef("System.Runtime.ConstrainedExecution.ReliabilityContractAttribute"), function () { return [$asm01.System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, $asm01.System.Runtime.ConstrainedExecution.Cer.Success]; });

  $.Method({Static:false, Public:true }, "Clone", 
    $sig.make(0x64D, $asm01.TypeRef("System.Object"), [], []), 
    function Hashtable_Clone () {
      return $sig.get(0x638, null, [$thisType], []).Construct($thisType, this);
    }
  );

  $.Method({Static:false, Public:true }, "Contains", 
    $sig.make(0x648, $asm01.TypeRef("System.Boolean"), [$asm01.TypeRef("System.Object")], []), 
    function Hashtable_Contains (key) {
      return (this.Find(key) >= 0);
    }
  );

  $.Method({Static:false, Public:true }, "ContainsKey", 
    $sig.make(0x64B, $asm01.TypeRef("System.Boolean"), [$asm01.TypeRef("System.Object")], []), 
    function Hashtable_ContainsKey (key) {
      return this.Contains(key);
    }
  );

  $.Method({Static:false, Public:true }, "ContainsValue", 
    $sig.make(0x64C, $asm01.TypeRef("System.Boolean"), [$asm01.TypeRef("System.Object")], []), 
    function Hashtable_ContainsValue (value) {
      var size = this.table.length;
      var table = this.table;
      if (value === null) {

        for (var i = 0; i < size; ++i) {
          var entry = table[i].MemberwiseClone();
          if (!((entry.key === null) || 
              (entry.key === $T10().Removed) || (entry.value !== null))) {
            var result = true;
            return result;
          }
        }
      } else {

        for (i = 0; i < size; ++i) {
          entry = table[i].MemberwiseClone();
          if (!((entry.key === null) || 
              (entry.key === $T10().Removed) || !value.Object_Equals(entry.value))) {
            result = true;
            return result;
          }
        }
      }
      result = false;
      return result;
    }
  );

  $.Method({Static:false, Public:true }, "CopyTo", 
    $sig.make(0x645, null, [$asm01.TypeRef("System.Array"), $asm01.TypeRef("System.Int32")], []), 
    function Hashtable_CopyTo (array, arrayIndex) {
      if (null === array) {
        throw new ($T0B())("array");
      }
      if (arrayIndex < 0) {
        throw new ($T04())("arrayIndex");
      }
      if (array.get_Rank() > 1) {
        throw new ($T06())("array is multidimensional");
      }
      if (!((array.length <= 0) || (arrayIndex < array.length))) {
        throw new ($T06())("arrayIndex is equal to or greater than array.Length");
      }
      if (((arrayIndex + this.inUse) | 0) > array.length) {
        throw new ($T06())("Not enough room from arrayIndex to end of array for this Hashtable");
      }
      var it = this.GetEnumerator();
      var i = arrayIndex;

      while (it.IEnumerator_MoveNext()) {
        $sig.get(0x353, null, [$asm01.System.Object, $asm01.System.Int32], []).CallVirtual("SetValue", null, array, it.IDictionaryEnumerator_get_Entry(), i++);
      }
    }
  );

  $.Method({Static:false, Public:false}, "CopyToArray", 
    $sig.make(0x656, null, [
        $asm01.TypeRef("System.Array"), $asm01.TypeRef("System.Int32"), 
        $asm01.TypeRef("System.Collections.Hashtable/EnumeratorMode")
      ], []), 
    function Hashtable_CopyToArray (arr, i, mode) {

      for (var it = new ($T14())(this, mode); it.IEnumerator_MoveNext(); ) {
        $sig.get(0x353, null, [$asm01.System.Object, $asm01.System.Int32], []).CallVirtual("SetValue", null, arr, it.IEnumerator_get_Current(), i++);
      }
    }
  );

  $.Method({Static:false, Public:false}, "Find", 
    $sig.make(0x653, $asm01.TypeRef("System.Int32"), [$asm01.TypeRef("System.Object")], []), 
    function Hashtable_Find (key) {
      if (key === null) {
        throw $sig.get(0x852, null, [$asm01.System.String, $asm01.System.String], []).Construct($T0B(), "key", "null key");
      }
      var table = this.table;
      var size = table.length;
      var h = ((this.GetHash(key) & 2147483647) | 0);
      var indx = h;
      var step = (((((((h >> 5) | 0) + 1) | 0) % (size - 1)) + 1) | 0);

    $loop0: 
      for (var i = size; i > 0; --i) {
        indx = (indx % size);
        var entry = table[$T17().FromNumber(indx).ToNumber()].MemberwiseClone();
        var hashMix = this.hashes[$T17().FromNumber(indx).ToNumber()];
        var j = entry.key;
        if (j === null) {
          break $loop0;
        }
        if (!((j !== key) && ((((hashMix & 2147483647) | 0) !== h) || 
              !this.KeyEquals(key, j)))) {
          var result = indx;
          return result;
        }
        if (((hashMix & -2147483648) | 0) === 0) {
          break $loop0;
        }
        indx += step;
      }
      result = -1;
      return result;
    }
  );

  $.Method({Static:false, Public:false}, "get_comparer", 
    $sig.make(0x626, $asm01.TypeRef("System.Collections.IComparer"), [], []), 
    function Hashtable_get_comparer () {
      return this.comparerRef;
    }
  );

  $.Method({Static:false, Public:true }, "get_Count", 
    $sig.make(0x62B, $asm01.TypeRef("System.Int32"), [], []), 
    function Hashtable_get_Count () {
      return this.inUse;
    }
  );

  $.Method({Static:false, Public:false}, "get_EqualityComparer", 
    $sig.make(0x62A, $asm01.TypeRef("System.Collections.IEqualityComparer"), [], []), 
    function Hashtable_get_EqualityComparer () {
      return this.equalityComparer;
    }
  );

  $.Method({Static:false, Public:false}, "get_hcp", 
    $sig.make(0x628, $asm01.TypeRef("System.Collections.IHashCodeProvider"), [], []), 
    function Hashtable_get_hcp () {
      return this.hcpRef;
    }
  );

  $.Method({Static:false, Public:true }, "get_IsFixedSize", 
    $sig.make(0x62E, $asm01.TypeRef("System.Boolean"), [], []), 
    function Hashtable_get_IsFixedSize () {
      return false;
    }
  );

  $.Method({Static:false, Public:true }, "get_IsReadOnly", 
    $sig.make(0x62F, $asm01.TypeRef("System.Boolean"), [], []), 
    function Hashtable_get_IsReadOnly () {
      return false;
    }
  );

  $.Method({Static:false, Public:true }, "get_IsSynchronized", 
    $sig.make(0x62C, $asm01.TypeRef("System.Boolean"), [], []), 
    function Hashtable_get_IsSynchronized () {
      return false;
    }
  );

  $.Method({Static:false, Public:true }, "get_Item", 
    $sig.make(0x632, $asm01.TypeRef("System.Object"), [$asm01.TypeRef("System.Object")], []), 
    function Hashtable_get_Item (key) {
      if (key === null) {
        throw $sig.get(0x852, null, [$asm01.System.String, $asm01.System.String], []).Construct($T0B(), "key", "null key");
      }
      var table = this.table;
      var size = table.length;
      var h = ((this.GetHash(key) & 2147483647) | 0);
      var indx = h;
      var step = (((((((h >> 5) | 0) + 1) | 0) % (size - 1)) + 1) | 0);

    $loop0: 
      for (var i = size; i > 0; --i) {
        indx = (indx % size);
        var entry = table[$T17().FromNumber(indx).ToNumber()].MemberwiseClone();
        var hashMix = this.hashes[$T17().FromNumber(indx).ToNumber()];
        var j = entry.key;
        if (j === null) {
          break $loop0;
        }
        if (!((j !== key) && ((((hashMix & 2147483647) | 0) !== h) || 
              !this.KeyEquals(key, j)))) {
          var result = entry.value;
          return result;
        }
        if (((hashMix & -2147483648) | 0) === 0) {
          break $loop0;
        }
        indx += step;
      }
      result = null;
      return result;
    }
  );

  $.Method({Static:false, Public:true }, "get_Keys", 
    $sig.make(0x630, $asm01.TypeRef("System.Collections.ICollection"), [], []), 
    function Hashtable_get_Keys () {
      if (this.hashKeys === null) {
        this.hashKeys = new ($T18())(this);
      }
      return this.hashKeys;
    }
  );

  $.Method({Static:false, Public:true }, "get_SyncRoot", 
    $sig.make(0x62D, $asm01.TypeRef("System.Object"), [], []), 
    function Hashtable_get_SyncRoot () {
      return this;
    }
  );

  $.Method({Static:false, Public:true }, "get_Values", 
    $sig.make(0x631, $asm01.TypeRef("System.Collections.ICollection"), [], []), 
    function Hashtable_get_Values () {
      if (this.hashValues === null) {
        this.hashValues = new ($T19())(this);
      }
      return this.hashValues;
    }
  );

  $.Method({Static:false, Public:true }, "GetEnumerator", 
    $sig.make(0x649, $asm01.TypeRef("System.Collections.IDictionaryEnumerator"), [], []), 
    function Hashtable_GetEnumerator () {
      return new ($T14())(this, $T13().ENTRY_MODE);
    }
  );

  $.Method({Static:false, Public:false}, "GetHash", 
    $sig.make(0x64F, $asm01.TypeRef("System.Int32"), [$asm01.TypeRef("System.Object")], []), 
    function Hashtable_GetHash (key) {
      if (this.equalityComparer !== null) {
        var hashCode = this.equalityComparer.IEqualityComparer_GetHashCode(key);
      } else if (this.hcpRef === null) {
        hashCode = (JSIL.ObjectHashCode(key));
      } else {
        hashCode = this.hcpRef.IHashCodeProvider_GetHashCode(key);
      }
      return hashCode;
    }
  );

  $.Method({Static:false, Public:false}, "KeyEquals", 
    $sig.make(0x650, $asm01.TypeRef("System.Boolean"), [$asm01.TypeRef("System.Object"), $asm01.TypeRef("System.Object")], []), 
    function Hashtable_KeyEquals (item, key) {
      if (key === $T10().Removed) {
        var result = false;
      } else if (this.equalityComparer !== null) {
        result = this.equalityComparer.IEqualityComparer_Equals(item, key);
      } else if (this.comparerRef === null) {
        result = item.Object_Equals(key);
      } else {
        result = (this.comparerRef.IComparer_Compare(item, key) === 0);
      }
      return result;
    }
  );

  $.Method({Static:false, Public:false}, "PutImpl", 
    $sig.make(0x655, null, [
        $asm01.TypeRef("System.Object"), $asm01.TypeRef("System.Object"), 
        $asm01.TypeRef("System.Boolean")
      ], []), 
    function Hashtable_PutImpl (key, value, overwrite) {
      if (key === null) {
        throw $sig.get(0x852, null, [$asm01.System.String, $asm01.System.String], []).Construct($T0B(), "key", "null key");
      }
      if (this.inUse >= this.threshold) {
        this.Rehash();
      }
      var size = this.table.length;
      var h = ((this.GetHash(key) & 2147483647) | 0);
      var spot = h;
      var table = this.table;
      var hashes = this.hashes;
      var freeIndx = -1;

    $loop0: 
      for (var i = 0; $T16().op_LessThan(
          $T16().FromNumber(i), 
          $T17().FromNumber(size).ToInt64()
        ); ) {
        var indx = (spot % size);
        var entry = table[indx];
        var hashMix = hashes[indx];
        if (!((freeIndx !== -1) || 
            (entry.key !== $T10().Removed) || (((hashMix & -2147483648) | 0) === 0))) {
          freeIndx = indx;
        }
        if (!((entry.key !== null) && ((entry.key !== $T10().Removed) || 
              (((hashMix & -2147483648) | 0) !== 0)))) {
          if (freeIndx === -1) {
            freeIndx = indx;
          }
          break $loop0;
        }
        if (!((((hashMix & 2147483647) | 0) !== h) || !this.KeyEquals(key, entry.key))) {
          if (overwrite) {
            table[indx].value = value;
            ++this.modificationCount;
            return;
          }
          throw new ($T06())(JSIL.ConcatString("Key duplication when adding: ", key));
        } else {
          if (freeIndx === -1) {
            hashes[indx] |= -2147483648;
          }
          spot += ((((spot >>> 5) + 1) % (size - 1)) + 1);
          ++i;
        }
      }
      if (freeIndx !== -1) {
        table[freeIndx].key = key;
        table[freeIndx].value = value;
        hashes[freeIndx] |= h;
        ++this.inUse;
        ++this.modificationCount;
        return;
      }
    }
  );

  $.Method({Static:false, Public:false}, "Rehash", 
    $sig.make(0x654, null, [], []), 
    function Hashtable_Rehash () {
      var oldSize = this.table.length;
      var newSize = $thisType.ToPrime(((((oldSize << 1) | 0) | 1) | 0));
      var newTable = JSIL.Array.New($T07(), newSize);
      var newHashes = JSIL.Array.New($T00(), newSize);

      for (var i = 0; i < oldSize; ++i) {
        var s = this.table[i].MemberwiseClone();
        if (s.key !== null) {
          var h = ((this.hashes[i] & 2147483647) | 0);
          var spot = h;
          var step = (((((((h >> 5) | 0) + 1) | 0) % (newSize - 1)) + 1) | 0);

          for (var j = (spot % newSize); newTable[$T17().FromNumber(j).ToNumber()].key !== null; ) {
            newHashes[$T17().FromNumber(j).ToNumber()] |= -2147483648;
            spot += step;
            j = (spot % newSize);
          }
          newTable[$T17().FromNumber(j).ToNumber()].key = s.key;
          newTable[$T17().FromNumber(j).ToNumber()].value = s.value;
          newHashes[$T17().FromNumber(j).ToNumber()] |= h;
        }
      }
      ++this.modificationCount;
      this.SetTable(newTable, newHashes);
    }
  );

  $.Method({Static:false, Public:true }, "Remove", 
    $sig.make(0x64A, null, [$asm01.TypeRef("System.Object")], []), 
    function Hashtable_Remove (key) {
      var i = this.Find(key);
      if (i >= 0) {
        var table = this.table;
        var h = this.hashes[i];
        h = ((h & -2147483648) | 0);
        this.hashes[i] = h;
        table[i].key = ((h !== 0) ? $T10().Removed : null);
        table[i].value = null;
        --this.inUse;
        ++this.modificationCount;
      }
    }
  )
    .Attribute($asm01.TypeRef("System.Runtime.ConstrainedExecution.ReliabilityContractAttribute"), function () { return [$asm01.System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, $asm01.System.Runtime.ConstrainedExecution.Cer.MayFail]; });

  $.Method({Static:false, Public:false}, "set_comparer", 
    $sig.make(0x627, null, [$asm01.TypeRef("System.Collections.IComparer")], []), 
    function Hashtable_set_comparer (value) {
      this.comparerRef = value;
    }
  );

  $.Method({Static:false, Public:false}, "set_hcp", 
    $sig.make(0x629, null, [$asm01.TypeRef("System.Collections.IHashCodeProvider")], []), 
    function Hashtable_set_hcp (value) {
      this.hcpRef = value;
    }
  );

  $.Method({Static:false, Public:true }, "set_Item", 
    $sig.make(0x633, null, [$asm01.TypeRef("System.Object"), $asm01.TypeRef("System.Object")], []), 
    function Hashtable_set_Item (key, value) {
      this.PutImpl(key, value, true);
    }
  );

  $.Method({Static:false, Public:false}, "SetTable", 
    $sig.make(0x652, null, [$jsilcore.TypeRef("System.Array", [$asm01.TypeRef("System.Collections.Hashtable/Slot")]), $jsilcore.TypeRef("System.Array", [$asm01.TypeRef("System.Int32")])], []), 
    function Hashtable_SetTable (table, hashes) {
      if (table === null) {
        throw new ($T0B())("table");
      }
      this.table = table;
      this.hashes = hashes;
      this.AdjustThreshold();
    }
  );

  $.Method({Static:true , Public:true }, "Synchronized", 
    $sig.make(0x64E, $.Type, [$.Type], []), 
    function Hashtable_Synchronized (table) {
      if (table === null) {
        throw new ($T0B())("table");
      }
      return new ($T1B())(table);
    }
  );

  $.Method({Static:false, Public:false}, "IEnumerable.GetEnumerator", 
    $sig.make(0x644, $asm01.TypeRef("System.Collections.IEnumerator"), [], []), 
    function Hashtable_IEnumerable_GetEnumerator () {
      return new ($T14())(this, $T13().ENTRY_MODE);
    }
  );

  $.Method({Static:true , Public:false}, "TestPrime", 
    $sig.make(0x657, $asm01.TypeRef("System.Boolean"), [$asm01.TypeRef("System.Int32")], []), 
    function Hashtable_TestPrime (x) {
      if (((x & 1) | 0) !== 0) {
        var top = ((Math.sqrt(x)) | 0);

        for (var i = 3; i < top; i += 2) {
          if (((x % i) | 0) === 0) {
            var result = false;
            return result;
          }
        }
        result = true;
      } else {
        result = (x === 2);
      }
      return result;
    }
  );

  $.Method({Static:true , Public:false}, "ToPrime", 
    $sig.make(0x659, $asm01.TypeRef("System.Int32"), [$asm01.TypeRef("System.Int32")], []), 
    function Hashtable_ToPrime (x) {

      for (var i = 0; i < $thisType.primeTbl.length; ++i) {
        if (x <= $thisType.primeTbl[i]) {
          var result = $thisType.primeTbl[i];
          return result;
        }
      }
      result = $thisType.CalcPrime(x);
      return result;
    }
  );

  $.Constant({Static:true , Public:false}, "CHAIN_MARKER", -2147483648); 
  $.Field({Static:false, Public:false}, "table", $jsilcore.TypeRef("System.Array", [$asm01.TypeRef("System.Collections.Hashtable/Slot")])); 
  $.Field({Static:false, Public:false}, "hashes", $jsilcore.TypeRef("System.Array", [$asm01.TypeRef("System.Int32")])); 
  $.Field({Static:false, Public:false}, "hashKeys", $asm01.TypeRef("System.Collections.Hashtable/HashKeys")); 
  $.Field({Static:false, Public:false}, "hashValues", $asm01.TypeRef("System.Collections.Hashtable/HashValues")); 
  $.Field({Static:false, Public:false}, "hcpRef", $asm01.TypeRef("System.Collections.IHashCodeProvider")); 
  $.Field({Static:false, Public:false}, "comparerRef", $asm01.TypeRef("System.Collections.IComparer")); 
  $.Field({Static:false, Public:false}, "equalityComparer", $asm01.TypeRef("System.Collections.IEqualityComparer")); 
  $.Field({Static:false, Public:false}, "inUse", $asm01.TypeRef("System.Int32")); 
  $.Field({Static:false, Public:false}, "modificationCount", $asm01.TypeRef("System.Int32")); 
  $.Field({Static:false, Public:false}, "loadFactor", $asm01.TypeRef("System.Single")); 
  $.Field({Static:false, Public:false}, "threshold", $asm01.TypeRef("System.Int32")); 
  $.Field({Static:true , Public:false, ReadOnly:true }, "primeTbl", $jsilcore.TypeRef("System.Array", [$asm01.TypeRef("System.Int32")])); 
  $.Method({Static:true , Public:false}, ".cctor", 
    $sig.make(0x65A, null, [], []), 
    function Hashtable__cctor () {
      $thisType.primeTbl = JSIL.Array.New($T00(), [11, 19, 37, 73, 109, 163, 251, 367, 557, 823, 1237, 1861, 2777, 4177, 6247, 9371, 14057, 21089, 31627, 47431, 71143, 106721, 160073, 240101, 360163, 540217, 810343, 1215497, 1823231, 2734867, 4102283, 6153409, 9230113, 13845163]);
    }
  );

  $.Property({Static:false, Public:false}, "comparer", $asm01.TypeRef("System.Collections.IComparer"))
    .Attribute($asm01.TypeRef("System.ObsoleteAttribute"), function () { return ["Please use EqualityComparer property."]; });

  $.Property({Static:false, Public:false}, "hcp", $asm01.TypeRef("System.Collections.IHashCodeProvider"))
    .Attribute($asm01.TypeRef("System.ObsoleteAttribute"), function () { return ["Please use EqualityComparer property."]; });

  $.Property({Static:false, Public:false}, "EqualityComparer", $asm01.TypeRef("System.Collections.IEqualityComparer"));

  $.Property({Static:false, Public:true , Virtual:true }, "Count", $asm01.TypeRef("System.Int32"));

  $.Property({Static:false, Public:true , Virtual:true }, "IsSynchronized", $asm01.TypeRef("System.Boolean"));

  $.Property({Static:false, Public:true , Virtual:true }, "SyncRoot", $asm01.TypeRef("System.Object"));

  $.Property({Static:false, Public:true , Virtual:true }, "IsFixedSize", $asm01.TypeRef("System.Boolean"));

  $.Property({Static:false, Public:true , Virtual:true }, "IsReadOnly", $asm01.TypeRef("System.Boolean"));

  $.Property({Static:false, Public:true , Virtual:true }, "Keys", $asm01.TypeRef("System.Collections.ICollection"));

  $.Property({Static:false, Public:true , Virtual:true }, "Values", $asm01.TypeRef("System.Collections.ICollection"));

  $.Property({Static:false, Public:true , Virtual:true }, "Item", $asm01.TypeRef("System.Object"));

  $.ImplementInterfaces(
      $asm01.TypeRef("System.Collections.IDictionary"), $asm01.TypeRef("System.Collections.ICollection"), 
      $asm01.TypeRef("System.Collections.IEnumerable"), $asm01.TypeRef("System.ICloneable"), 
      $asm01.TypeRef("System.Runtime.Serialization.ISerializable"), $asm01.TypeRef("System.Runtime.Serialization.IDeserializationCallback")
  )
})
  .Attribute($asm01.TypeRef("System.Runtime.InteropServices.ComVisibleAttribute"), function () { return [true]; })
  .Attribute($asm01.TypeRef("System.Diagnostics.DebuggerTypeProxyAttribute"), function () { return [$asm01.TypeRef("System.Collections.CollectionDebuggerView")]; })
  .Attribute($asm01.TypeRef("System.Reflection.DefaultMemberAttribute"), function () { return ["Item"]; })
  .Attribute($asm01.TypeRef("System.Diagnostics.DebuggerDisplayAttribute"), function () { return ["Count={Count}"]; });

JSIL.MakeStruct($asm01.TypeRef("System.ValueType"), "System.Collections.Hashtable/Slot", false, [], function ($) {
  var $thisType = $.publicInterface;

  $.Field({Static:false, Public:false}, "key", $asm01.TypeRef("System.Object")); 
  $.Field({Static:false, Public:false}, "value", $asm01.TypeRef("System.Object")); 
});

JSIL.MakeClass($asm01.TypeRef("System.Object"), "System.Collections.Hashtable/KeyMarker", false, [], function ($) {
  var $thisType = $.publicInterface;

  $.Method({Static:false, Public:true }, ".ctor", 
    $sig.make(0xEFD, null, [], []), 
    function KeyMarker__ctor () {
    }
  );

  $.Field({Static:true , Public:true , ReadOnly:true }, "Removed", $.Type); 
  $.Method({Static:true , Public:false}, ".cctor", 
    $sig.make(0xEFF, null, [], []), 
    function KeyMarker__cctor () {
      $thisType.Removed = new $thisType();
    }
  );

});

JSIL.MakeEnum(
  "System.Collections.Hashtable/EnumeratorMode", false, {
    KEY_MODE: 0, 
    VALUE_MODE: 1, 
    ENTRY_MODE: 2
  }, false
);

JSIL.MakeClass($asm01.TypeRef("System.Object"), "System.Collections.Hashtable/Enumerator", false, [], function ($) {
  var $thisType = $.publicInterface;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm01.System.Collections.Hashtable)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm01.System.Collections.Hashtable_EnumeratorMode)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm01.System.InvalidOperationException)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm01.System.Object)) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize($asm01.System.Collections.DictionaryEntry)) ();
  };
  var $T05 = function () {
    return ($T05 = JSIL.Memoize($asm01.System.Exception)) ();
  };
  var $T06 = function () {
    return ($T06 = JSIL.Memoize($asm01.System.Collections.Hashtable_Slot)) ();
  };
  var $T07 = function () {
    return ($T07 = JSIL.Memoize($asm01.System.Collections.Hashtable_KeyMarker)) ();
  };
  var $T08 = function () {
    return ($T08 = JSIL.Memoize($asm01.System.Boolean)) ();
  };

  $.Method({Static:false, Public:true }, ".ctor", 
    $sig.make(0xF2D, null, [$asm01.TypeRef("System.Collections.Hashtable"), $asm01.TypeRef("System.Collections.Hashtable/EnumeratorMode")], []), 
    function Enumerator__ctor (host, mode) {
      this.host = host;
      this.stamp = host.modificationCount;
      this.size = host.table.length;
      this.mode = mode;
      this.Reset();
    }
  );

  $.Method({Static:false, Public:true }, ".ctor", 
    $sig.make(0xF2F, null, [$asm01.TypeRef("System.Collections.Hashtable")], []), 
    function Enumerator__ctor (host) {
      $thisType.prototype._ctor.call(this, host, $T01().KEY_MODE);
    }
  );

  $.Method({Static:false, Public:false}, "FailFast", 
    $sig.make(0xF33, null, [], []), 
    function Enumerator_FailFast () {
      if (this.host.modificationCount !== this.stamp) {
        throw new ($T02())($thisType.xstr);
      }
    }
  );

  $.Method({Static:false, Public:true }, "get_Current", 
    $sig.make(0xF29, $asm01.TypeRef("System.Object"), [], []), 
    function Enumerator_get_Current () {
      if (this.currentKey === null) {
        throw new ($T02())();
      }
      switch (this.mode.valueOf()) {
        case 0: 
          var result = this.currentKey;
          break;

        case 1: 
          result = this.currentValue;
          break;

        case 2: 
          result = new ($T04())(this.currentKey, this.currentValue);
          break;

        default: 
          throw new ($T05())("should never happen");

      }
      return result;
    }
  );

  $.Method({Static:false, Public:true }, "get_Entry", 
    $sig.make(0xF21, $asm01.TypeRef("System.Collections.DictionaryEntry"), [], []), 
    function Enumerator_get_Entry () {
      if (this.currentKey === null) {
        throw new ($T02())();
      }
      this.FailFast();
      return new ($T04())(this.currentKey, this.currentValue);
    }
  );

  $.Method({Static:false, Public:true }, "get_Key", 
    $sig.make(0xF22, $asm01.TypeRef("System.Object"), [], []), 
    function Enumerator_get_Key () {
      if (this.currentKey === null) {
        throw new ($T02())();
      }
      this.FailFast();
      return this.currentKey;
    }
  );

  $.Method({Static:false, Public:true }, "get_Value", 
    $sig.make(0xF24, $asm01.TypeRef("System.Object"), [], []), 
    function Enumerator_get_Value () {
      if (this.currentKey === null) {
        throw new ($T02())();
      }
      this.FailFast();
      return this.currentValue;
    }
  );

  $.Method({Static:false, Public:true }, "MoveNext", 
    $sig.make(0xF38, $asm01.TypeRef("System.Boolean"), [], []), 
    function Enumerator_MoveNext () {
      this.FailFast();
      if (this.pos < this.size) {

        while (++this.pos < this.size) {
          var entry = this.host.table[this.pos].MemberwiseClone();
          if (!((entry.key === null) || (entry.key === $T07().Removed))) {
            this.currentKey = entry.key;
            this.currentValue = entry.value;
            var result = true;
            return result;
          }
        }
      }
      this.currentKey = null;
      this.currentValue = null;
      result = false;
      return result;
    }
  );

  $.Method({Static:false, Public:true }, "Reset", 
    $sig.make(0xF35, null, [], []), 
    function Enumerator_Reset () {
      this.FailFast();
      this.pos = -1;
      this.currentKey = null;
      this.currentValue = null;
    }
  );

  $.Field({Static:false, Public:false}, "host", $asm01.TypeRef("System.Collections.Hashtable")); 
  $.Field({Static:false, Public:false}, "currentKey", $asm01.TypeRef("System.Object")); 
  $.Field({Static:false, Public:false}, "currentValue", $asm01.TypeRef("System.Object")); 
  $.Field({Static:false, Public:false}, "stamp", $asm01.TypeRef("System.Int32")); 
  $.Field({Static:false, Public:false}, "pos", $asm01.TypeRef("System.Int32")); 
  $.Field({Static:false, Public:false}, "size", $asm01.TypeRef("System.Int32")); 
  $.Field({Static:false, Public:false}, "mode", $asm01.TypeRef("System.Collections.Hashtable/EnumeratorMode")); 
  $.Field({Static:true , Public:false, ReadOnly:true }, "xstr", $asm01.TypeRef("System.String"), "Hashtable.Enumerator: snapshot out of sync."); 
  $.Method({Static:true , Public:false}, ".cctor", 
    $sig.make(0xF3C, null, [], []), 
    function Enumerator__cctor () {
      $thisType.xstr = "Hashtable.Enumerator: snapshot out of sync.";
    }
  );

  $.Property({Static:false, Public:true , Virtual:true }, "Entry", $asm01.TypeRef("System.Collections.DictionaryEntry"));

  $.Property({Static:false, Public:true , Virtual:true }, "Key", $asm01.TypeRef("System.Object"));

  $.Property({Static:false, Public:true , Virtual:true }, "Value", $asm01.TypeRef("System.Object"));

  $.Property({Static:false, Public:true , Virtual:true }, "Current", $asm01.TypeRef("System.Object"));

  $.ImplementInterfaces($asm01.TypeRef("System.Collections.IDictionaryEnumerator"), $asm01.TypeRef("System.Collections.IEnumerator"))
});

JSIL.MakeClass($asm01.TypeRef("System.Object"), "System.Collections.Hashtable/HashKeys", false, [], function ($) {
  var $thisType = $.publicInterface;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm01.System.Collections.Hashtable)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm01.System.ArgumentNullException)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm01.System.Array)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm01.System.Int32)) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize($asm01.System.ArgumentException)) ();
  };
  var $T05 = function () {
    return ($T05 = JSIL.Memoize($asm01.System.ArgumentOutOfRangeException)) ();
  };
  var $T06 = function () {
    return ($T06 = JSIL.Memoize($asm01.System.Collections.Hashtable_EnumeratorMode)) ();
  };
  var $T07 = function () {
    return ($T07 = JSIL.Memoize($asm01.System.Collections.Hashtable_Enumerator)) ();
  };

  $.Method({Static:false, Public:true }, ".ctor", 
    $sig.make(0x730, null, [$asm01.TypeRef("System.Collections.Hashtable")], []), 
    function HashKeys__ctor (host) {
      if (host === null) {
        throw new ($T01())();
      }
      this.host = host;
    }
  );

  $.Method({Static:false, Public:true }, "CopyTo", 
    $sig.make(0x731, null, [$asm01.TypeRef("System.Array"), $asm01.TypeRef("System.Int32")], []), 
    function HashKeys_CopyTo (array, arrayIndex) {
      if (array === null) {
        throw new ($T01())("array");
      }
      if (array.get_Rank() !== 1) {
        throw new ($T04())("array");
      }
      if (arrayIndex < 0) {
        throw new ($T05())("arrayIndex");
      }
      if (((array.length - arrayIndex) | 0) < this.get_Count()) {
        throw new ($T04())("not enough space");
      }
      this.host.CopyToArray(array, arrayIndex, $T06().KEY_MODE);
    }
  );

  $.Method({Static:false, Public:true }, "get_Count", 
    $sig.make(0x72D, $asm01.TypeRef("System.Int32"), [], []), 
    function HashKeys_get_Count () {
      return this.host.get_Count();
    }
  );

  $.Method({Static:false, Public:true }, "get_IsSynchronized", 
    $sig.make(0x72E, $asm01.TypeRef("System.Boolean"), [], []), 
    function HashKeys_get_IsSynchronized () {
      return this.host.get_IsSynchronized();
    }
  );

  $.Method({Static:false, Public:true }, "get_SyncRoot", 
    $sig.make(0x72F, $asm01.TypeRef("System.Object"), [], []), 
    function HashKeys_get_SyncRoot () {
      return this.host.get_SyncRoot();
    }
  );

  $.Method({Static:false, Public:true }, "GetEnumerator", 
    $sig.make(0x732, $asm01.TypeRef("System.Collections.IEnumerator"), [], []), 
    function HashKeys_GetEnumerator () {
      return new ($T07())(this.host, $T06().KEY_MODE);
    }
  );

  $.Field({Static:false, Public:false}, "host", $asm01.TypeRef("System.Collections.Hashtable")); 
  $.Property({Static:false, Public:true , Virtual:true }, "Count", $asm01.TypeRef("System.Int32"));

  $.Property({Static:false, Public:true , Virtual:true }, "IsSynchronized", $asm01.TypeRef("System.Boolean"));

  $.Property({Static:false, Public:true , Virtual:true }, "SyncRoot", $asm01.TypeRef("System.Object"));

  $.ImplementInterfaces($asm01.TypeRef("System.Collections.ICollection"), $asm01.TypeRef("System.Collections.IEnumerable"))
})
  .Attribute($asm01.TypeRef("System.Diagnostics.DebuggerDisplayAttribute"), function () { return ["Count={Count}"]; })
  .Attribute($asm01.TypeRef("System.Diagnostics.DebuggerTypeProxyAttribute"), function () { return [$asm01.TypeRef("System.Collections.CollectionDebuggerView")]; });

JSIL.MakeClass($asm01.TypeRef("System.Object"), "System.Collections.Hashtable/HashValues", false, [], function ($) {
  var $thisType = $.publicInterface;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm01.System.Collections.Hashtable)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm01.System.ArgumentNullException)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm01.System.Array)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm01.System.Int32)) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize($asm01.System.ArgumentException)) ();
  };
  var $T05 = function () {
    return ($T05 = JSIL.Memoize($asm01.System.ArgumentOutOfRangeException)) ();
  };
  var $T06 = function () {
    return ($T06 = JSIL.Memoize($asm01.System.Collections.Hashtable_EnumeratorMode)) ();
  };
  var $T07 = function () {
    return ($T07 = JSIL.Memoize($asm01.System.Collections.Hashtable_Enumerator)) ();
  };

  $.Method({Static:false, Public:true }, ".ctor", 
    $sig.make(0x73C, null, [$asm01.TypeRef("System.Collections.Hashtable")], []), 
    function HashValues__ctor (host) {
      if (host === null) {
        throw new ($T01())();
      }
      this.host = host;
    }
  );

  $.Method({Static:false, Public:true }, "CopyTo", 
    $sig.make(0x73D, null, [$asm01.TypeRef("System.Array"), $asm01.TypeRef("System.Int32")], []), 
    function HashValues_CopyTo (array, arrayIndex) {
      if (array === null) {
        throw new ($T01())("array");
      }
      if (array.get_Rank() !== 1) {
        throw new ($T04())("array");
      }
      if (arrayIndex < 0) {
        throw new ($T05())("arrayIndex");
      }
      if (((array.length - arrayIndex) | 0) < this.get_Count()) {
        throw new ($T04())("not enough space");
      }
      this.host.CopyToArray(array, arrayIndex, $T06().VALUE_MODE);
    }
  );

  $.Method({Static:false, Public:true }, "get_Count", 
    $sig.make(0x739, $asm01.TypeRef("System.Int32"), [], []), 
    function HashValues_get_Count () {
      return this.host.get_Count();
    }
  );

  $.Method({Static:false, Public:true }, "get_IsSynchronized", 
    $sig.make(0x73A, $asm01.TypeRef("System.Boolean"), [], []), 
    function HashValues_get_IsSynchronized () {
      return this.host.get_IsSynchronized();
    }
  );

  $.Method({Static:false, Public:true }, "get_SyncRoot", 
    $sig.make(0x73B, $asm01.TypeRef("System.Object"), [], []), 
    function HashValues_get_SyncRoot () {
      return this.host.get_SyncRoot();
    }
  );

  $.Method({Static:false, Public:true }, "GetEnumerator", 
    $sig.make(0x73E, $asm01.TypeRef("System.Collections.IEnumerator"), [], []), 
    function HashValues_GetEnumerator () {
      return new ($T07())(this.host, $T06().VALUE_MODE);
    }
  );

  $.Field({Static:false, Public:false}, "host", $asm01.TypeRef("System.Collections.Hashtable")); 
  $.Property({Static:false, Public:true , Virtual:true }, "Count", $asm01.TypeRef("System.Int32"));

  $.Property({Static:false, Public:true , Virtual:true }, "IsSynchronized", $asm01.TypeRef("System.Boolean"));

  $.Property({Static:false, Public:true , Virtual:true }, "SyncRoot", $asm01.TypeRef("System.Object"));

  $.ImplementInterfaces($asm01.TypeRef("System.Collections.ICollection"), $asm01.TypeRef("System.Collections.IEnumerable"))
})
  .Attribute($asm01.TypeRef("System.Diagnostics.DebuggerTypeProxyAttribute"), function () { return [$asm01.TypeRef("System.Collections.CollectionDebuggerView")]; })
  .Attribute($asm01.TypeRef("System.Diagnostics.DebuggerDisplayAttribute"), function () { return ["Count={Count}"]; });

JSIL.MakeClass($asm01.TypeRef("System.Collections.Hashtable"), "System.Collections.Hashtable/SyncHashtable", false, [], function ($) {
  var $thisType = $.publicInterface;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm01.System.Collections.Hashtable)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm01.System.ArgumentNullException)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm01.System.Object)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm01.System.Boolean)) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize($asm01.System.Threading.Monitor)) ();
  };
  var $T05 = function () {
    return ($T05 = JSIL.Memoize($asm01.System.Array)) ();
  };
  var $T06 = function () {
    return ($T06 = JSIL.Memoize($asm01.System.Int32)) ();
  };
  var $T07 = function () {
    return ($T07 = JSIL.Memoize($asm01.System.Collections.ICollection)) ();
  };
  var $T08 = function () {
    return ($T08 = JSIL.Memoize($asm01.System.Collections.Hashtable_Enumerator)) ();
  };
  var $T09 = function () {
    return ($T09 = JSIL.Memoize($asm01.System.Collections.Hashtable_EnumeratorMode)) ();
  };

  $.Method({Static:false, Public:true }, ".ctor", 
    $sig.make(0xF6B, null, [$asm01.TypeRef("System.Collections.Hashtable")], []), 
    function SyncHashtable__ctor (host) {
      $T00().prototype._ctor.call(this);
      if (host === null) {
        throw new ($T01())();
      }
      this.host = host;
    }
  );

  $.Method({Static:false, Public:true }, "Add", 
    $sig.make(0xF7A, null, [$asm01.TypeRef("System.Object"), $asm01.TypeRef("System.Object")], []), 
    function SyncHashtable_Add (key, value) {
      var syncRoot = null;
      var flag = new JSIL.Variable(false);
      try {
        $T04().Enter((syncRoot = this.host.get_SyncRoot()), /* ref */ flag);
        this.host.Add(key, value);
      } finally {
        if (flag.value) {
          $T04().Exit(syncRoot);
        }
      }
    }
  );

  $.Method({Static:false, Public:true }, "Clear", 
    $sig.make(0xF7F, null, [], []), 
    function SyncHashtable_Clear () {
      var syncRoot = null;
      var flag = new JSIL.Variable(false);
      try {
        $T04().Enter((syncRoot = this.host.get_SyncRoot()), /* ref */ flag);
        this.host.Clear();
      } finally {
        if (flag.value) {
          $T04().Exit(syncRoot);
        }
      }
    }
  );

  $.Method({Static:false, Public:true }, "Clone", 
    $sig.make(0xF9F, $asm01.TypeRef("System.Object"), [], []), 
    function SyncHashtable_Clone () {
      var syncRoot = null;
      var flag = new JSIL.Variable(false);
      try {
        $T04().Enter((syncRoot = this.host.get_SyncRoot()), /* ref */ flag);
        var result = new $thisType($T00().$Cast(this.host.Clone()));
      } finally {
        if (flag.value) {
          $T04().Exit(syncRoot);
        }
      }
      return result;
    }
  );

  $.Method({Static:false, Public:true }, "Contains", 
    $sig.make(0xF83, $asm01.TypeRef("System.Boolean"), [$asm01.TypeRef("System.Object")], []), 
    function SyncHashtable_Contains (key) {
      return (this.host.Find(key) >= 0);
    }
  );

  $.Method({Static:false, Public:true }, "ContainsKey", 
    $sig.make(0xF9A, $asm01.TypeRef("System.Boolean"), [$asm01.TypeRef("System.Object")], []), 
    function SyncHashtable_ContainsKey (key) {
      return this.host.Contains(key);
    }
  );

  $.Method({Static:false, Public:true }, "ContainsValue", 
    $sig.make(0xF9C, $asm01.TypeRef("System.Boolean"), [$asm01.TypeRef("System.Object")], []), 
    function SyncHashtable_ContainsValue (value) {
      return this.host.ContainsValue(value);
    }
  );

  $.Method({Static:false, Public:true }, "CopyTo", 
    $sig.make(0xF74, null, [$asm01.TypeRef("System.Array"), $asm01.TypeRef("System.Int32")], []), 
    function SyncHashtable_CopyTo (array, arrayIndex) {
      this.host.CopyTo(array, arrayIndex);
    }
  );

  $.Method({Static:false, Public:true }, "get_Count", 
    $sig.make(0xF48, $asm01.TypeRef("System.Int32"), [], []), 
    function SyncHashtable_get_Count () {
      return this.host.get_Count();
    }
  );

  $.Method({Static:false, Public:true }, "get_IsFixedSize", 
    $sig.make(0xF51, $asm01.TypeRef("System.Boolean"), [], []), 
    function SyncHashtable_get_IsFixedSize () {
      return this.host.get_IsFixedSize();
    }
  );

  $.Method({Static:false, Public:true }, "get_IsReadOnly", 
    $sig.make(0xF55, $asm01.TypeRef("System.Boolean"), [], []), 
    function SyncHashtable_get_IsReadOnly () {
      return this.host.get_IsReadOnly();
    }
  );

  $.Method({Static:false, Public:true }, "get_IsSynchronized", 
    $sig.make(0xF4C, $asm01.TypeRef("System.Boolean"), [], []), 
    function SyncHashtable_get_IsSynchronized () {
      return true;
    }
  );

  $.Method({Static:false, Public:true }, "get_Item", 
    $sig.make(0xF64, $asm01.TypeRef("System.Object"), [$asm01.TypeRef("System.Object")], []), 
    function SyncHashtable_get_Item (key) {
      return this.host.get_Item(key);
    }
  );

  $.Method({Static:false, Public:true }, "get_Keys", 
    $sig.make(0xF5B, $asm01.TypeRef("System.Collections.ICollection"), [], []), 
    function SyncHashtable_get_Keys () {
      var syncRoot = null;
      var keys = null;
      var flag = new JSIL.Variable(false);
      try {
        $T04().Enter((syncRoot = this.host.get_SyncRoot()), /* ref */ flag);
        keys = this.host.get_Keys();
      } finally {
        if (flag.value) {
          $T04().Exit(syncRoot);
        }
      }
      return keys;
    }
  );

  $.Method({Static:false, Public:true }, "get_SyncRoot", 
    $sig.make(0xF4E, $asm01.TypeRef("System.Object"), [], []), 
    function SyncHashtable_get_SyncRoot () {
      return this.host.get_SyncRoot();
    }
  );

  $.Method({Static:false, Public:true }, "get_Values", 
    $sig.make(0xF5E, $asm01.TypeRef("System.Collections.ICollection"), [], []), 
    function SyncHashtable_get_Values () {
      var syncRoot = null;
      var vals = null;
      var flag = new JSIL.Variable(false);
      try {
        $T04().Enter((syncRoot = this.host.get_SyncRoot()), /* ref */ flag);
        vals = this.host.get_Values();
      } finally {
        if (flag.value) {
          $T04().Exit(syncRoot);
        }
      }
      return vals;
    }
  );

  $.Method({Static:false, Public:true }, "GetEnumerator", 
    $sig.make(0xF91, $asm01.TypeRef("System.Collections.IDictionaryEnumerator"), [], []), 
    function SyncHashtable_GetEnumerator () {
      return new ($T08())(this.host, $T09().ENTRY_MODE);
    }
  );

  $.Method({Static:false, Public:true }, "Remove", 
    $sig.make(0xF95, null, [$asm01.TypeRef("System.Object")], []), 
    function SyncHashtable_Remove (key) {
      var syncRoot = null;
      var flag = new JSIL.Variable(false);
      try {
        $T04().Enter((syncRoot = this.host.get_SyncRoot()), /* ref */ flag);
        this.host.Remove(key);
      } finally {
        if (flag.value) {
          $T04().Exit(syncRoot);
        }
      }
    }
  );

  $.Method({Static:false, Public:true }, "set_Item", 
    $sig.make(0xF68, null, [$asm01.TypeRef("System.Object"), $asm01.TypeRef("System.Object")], []), 
    function SyncHashtable_set_Item (key, value) {
      var syncRoot = null;
      var flag = new JSIL.Variable(false);
      try {
        $T04().Enter((syncRoot = this.host.get_SyncRoot()), /* ref */ flag);
        this.host.set_Item(key, value);
      } finally {
        if (flag.value) {
          $T04().Exit(syncRoot);
        }
      }
    }
  );

  $.Method({Static:false, Public:false}, "IEnumerable.GetEnumerator", 
    $sig.make(0xF71, $asm01.TypeRef("System.Collections.IEnumerator"), [], []), 
    function SyncHashtable_IEnumerable_GetEnumerator () {
      return new ($T08())(this.host, $T09().ENTRY_MODE);
    }
  );

  $.Field({Static:false, Public:false}, "host", $asm01.TypeRef("System.Collections.Hashtable")); 
  $.Property({Static:false, Public:true , Virtual:true }, "Count", $asm01.TypeRef("System.Int32"));

  $.Property({Static:false, Public:true , Virtual:true }, "IsSynchronized", $asm01.TypeRef("System.Boolean"));

  $.Property({Static:false, Public:true , Virtual:true }, "SyncRoot", $asm01.TypeRef("System.Object"));

  $.Property({Static:false, Public:true , Virtual:true }, "IsFixedSize", $asm01.TypeRef("System.Boolean"));

  $.Property({Static:false, Public:true , Virtual:true }, "IsReadOnly", $asm01.TypeRef("System.Boolean"));

  $.Property({Static:false, Public:true , Virtual:true }, "Keys", $asm01.TypeRef("System.Collections.ICollection"));

  $.Property({Static:false, Public:true , Virtual:true }, "Values", $asm01.TypeRef("System.Collections.ICollection"));

  $.Property({Static:false, Public:true , Virtual:true }, "Item", $asm01.TypeRef("System.Object"));

  $.ImplementInterfaces($asm01.TypeRef("System.Collections.IEnumerable"))
})
  .Attribute($asm01.TypeRef("System.Reflection.DefaultMemberAttribute"), function () { return ["Item"]; });

JSIL.MakeClass($asm01.TypeRef("System.Object"), "System.Collections.ArrayList", true, [], function ($) {
  var $thisType = $.publicInterface;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm01.System.Object)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm01.System.Collections.ICollection)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm01.System.ArgumentNullException)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm01.System.Array)) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize($asm01.System.RankException)) ();
  };
  var $T05 = function () {
    return ($T05 = JSIL.Memoize($asm01.System.Int32)) ();
  };
  var $T06 = function () {
    return ($T06 = JSIL.Memoize($asm01.System.Boolean)) ();
  };
  var $T07 = function () {
    return ($T07 = JSIL.Memoize($asm01.System.InvalidOperationException)) ();
  };
  var $T08 = function () {
    return ($T08 = JSIL.Memoize(System.Array.Of($asm01.System.Object))) ();
  };
  var $T09 = function () {
    return ($T09 = JSIL.Memoize($asm01.System.Void)) ();
  };
  var $T0A = function () {
    return ($T0A = JSIL.Memoize($asm01.System.Collections.IList)) ();
  };
  var $T0B = function () {
    return ($T0B = JSIL.Memoize($asm01.System.Collections.ArrayList_ArrayListAdapter)) ();
  };
  var $T0C = function () {
    return ($T0C = JSIL.Memoize($asm01.System.Exception)) ();
  };
  var $T0D = function () {
    return ($T0D = JSIL.Memoize($asm01.System.ArgumentException)) ();
  };
  var $T0E = function () {
    return ($T0E = JSIL.Memoize($asm01.System.Collections.IComparer)) ();
  };
  var $T0F = function () {
    return ($T0F = JSIL.Memoize($asm01.System.Collections.ArrayList_FixedSizeArrayListWrapper)) ();
  };
  var $T10 = function () {
    return ($T10 = JSIL.Memoize($asm01.System.Collections.ArrayList_FixedSizeListWrapper)) ();
  };
  var $T11 = function () {
    return ($T11 = JSIL.Memoize($asm01.System.Collections.ArrayList_SimpleEnumerator)) ();
  };
  var $T12 = function () {
    return ($T12 = JSIL.Memoize($asm01.System.Collections.ArrayList_ArrayListEnumerator)) ();
  };
  var $T13 = function () {
    return ($T13 = JSIL.Memoize($asm01.System.Collections.ArrayList_RangedArrayList)) ();
  };
  var $T14 = function () {
    return ($T14 = JSIL.Memoize($asm01.System.ArgumentOutOfRangeException)) ();
  };
  var $T15 = function () {
    return ($T15 = JSIL.Memoize($asm01.System.Collections.ArrayList_ReadOnlyArrayListWrapper)) ();
  };
  var $T16 = function () {
    return ($T16 = JSIL.Memoize($asm01.System.Collections.ArrayList_ReadOnlyListWrapper)) ();
  };
  var $T17 = function () {
    return ($T17 = JSIL.Memoize($asm01.System.Collections.ArrayList_SynchronizedArrayListWrapper)) ();
  };
  var $T18 = function () {
    return ($T18 = JSIL.Memoize($asm01.System.Collections.ArrayList_SynchronizedListWrapper)) ();
  };
  var $T19 = function () {
    return ($T19 = JSIL.Memoize($asm01.System.String)) ();
  };
  var $T1A = function () {
    return ($T1A = JSIL.Memoize($asm01.System.Type)) ();
  };

  $.Method({Static:false, Public:true }, ".ctor", 
    $sig.make(0xD19, null, [], []), 
    function ArrayList__ctor () {
      this._items = $thisType.EmptyArray;
    }
  );

  $.Method({Static:false, Public:true }, ".ctor", 
    $sig.make(0xD1B, null, [$asm01.TypeRef("System.Collections.ICollection")], []), 
    function ArrayList__ctor (c) {
      if (c === null) {
        throw new ($T02())("c");
      }
      var array = $T03().$As(c);
      if (!((array === null) || (array.get_Rank() === 1))) {
        throw new ($T04())();
      }
      this._items = JSIL.Array.New($T00(), c.ICollection_get_Count());
      this.AddRange(c);
    }
  );

  $.Method({Static:false, Public:true }, ".ctor", 
    $sig.make(0xD1D, null, [$asm01.TypeRef("System.Int32")], []), 
    function ArrayList__ctor (capacity) {
      if (capacity < 0) {
        $thisType.ThrowNewArgumentOutOfRangeException("capacity", capacity, "The initial capacity can't be smaller than zero.");
      }
      if (capacity === 0) {
        capacity = 4;
      }
      this._items = JSIL.Array.New($T00(), capacity);
    }
  );

  $.Method({Static:false, Public:false}, ".ctor", 
    $sig.make(0xD1F, null, [$asm01.TypeRef("System.Int32"), $asm01.TypeRef("System.Boolean")], []), 
    function ArrayList__ctor (initialCapacity, forceZeroSize) {
      if (forceZeroSize) {
        this._items = null;
        return;
      }
      throw new ($T07())("Use ArrayList(int)");
    }
  );

  $.Method({Static:false, Public:false}, ".ctor", 
    $sig.make(0xD20, null, [
        $jsilcore.TypeRef("System.Array", [$asm01.TypeRef("System.Object")]), $asm01.TypeRef("System.Int32"), 
        $asm01.TypeRef("System.Int32")
      ], []), 
    function ArrayList__ctor (array, index, count) {
      if (count === 0) {
        this._items = JSIL.Array.New($T00(), 4);
      } else {
        this._items = JSIL.Array.New($T00(), count);
      }
                      ((function(sourceArray, sourceIndex, destinationArray, destinationIndex, length) {
                          var values = [];
                          for (var i=0; i<length; i++)
                              values.push(sourceArray[i + sourceIndex]);
                          for (var i=0; i<length; i++)
                              destinationArray[i+destinationIndex] = values[i];
                      })(array, index, this._items, 0, count));
      this._size = count;
    }
  );

  $.Method({Static:true , Public:true }, "Adapter", 
    $sig.make(0xD74, $.Type, [$asm01.TypeRef("System.Collections.IList")], []), 
    function ArrayList_Adapter (list) {
      if (list === null) {
        throw new ($T02())("list");
      }
      var arrayList = $thisType.$As(list);
      if (arrayList !== null) {
        var result = arrayList;
      } else {
        arrayList = new ($T0B())(list);
        if (list.ICollection_get_IsSynchronized()) {
          result = $sig.get(0xD76, $thisType, [$thisType], []).CallStatic($thisType, "Synchronized", null, arrayList);
        } else {
          result = arrayList;
        }
      }
      return result;
    }
  );

  $.Method({Static:false, Public:true }, "Add", 
    $sig.make(0xD26, $asm01.TypeRef("System.Int32"), [$asm01.TypeRef("System.Object")], []), 
    function ArrayList_Add (value) {
      if (this._items.length <= this._size) {
        this.EnsureCapacity(((this._size + 1) | 0));
      }
      this._items[this._size] = value;
      ++this._version;
      return this._size++;
    }
  );

  $.Method({Static:false, Public:true }, "AddRange", 
    $sig.make(0xD57, null, [$asm01.TypeRef("System.Collections.ICollection")], []), 
    function ArrayList_AddRange (c) {
      this.InsertRange(this._size, c);
    }
  );

  $.Method({Static:false, Public:true }, "BinarySearch", 
    $sig.make(0xD58, $asm01.TypeRef("System.Int32"), [$asm01.TypeRef("System.Object")], []), 
    function ArrayList_BinarySearch (value) {
      try {
        var result = (new JSIL.MethodSignature($asm01.System.Int32, [
              $jsilcore.TypeRef("System.Array", ["!!0"]), $asm01.System.Int32, 
              $asm01.System.Int32, $asm01.System.Object
            ], ["T"])).CallStatic($T03(), "BinarySearch$b1", [$asm01.System.Object], this._items, 0, this._size, value);
      } catch ($exception) {
        if ($T07().$Is($exception)) {
          throw new ($T0D())($exception.get_Message());
        } else {
          throw $exception;
        }
      }
      return result;
    }
  );

  $.Method({Static:false, Public:true }, "BinarySearch", 
    $sig.make(0xD5A, $asm01.TypeRef("System.Int32"), [$asm01.TypeRef("System.Object"), $asm01.TypeRef("System.Collections.IComparer")], []), 
    function ArrayList_BinarySearch (value, comparer) {
      try {
        var result = $T03().BinarySearch(
          this._items, 
          0, 
          this._size, 
          value, 
          comparer
        );
      } catch ($exception) {
        if ($T07().$Is($exception)) {
          throw new ($T0D())($exception.get_Message());
        } else {
          throw $exception;
        }
      }
      return result;
    }
  );

  $.Method({Static:false, Public:true }, "BinarySearch", 
    $sig.make(0xD5B, $asm01.TypeRef("System.Int32"), [
        $asm01.TypeRef("System.Int32"), $asm01.TypeRef("System.Int32"), 
        $asm01.TypeRef("System.Object"), $asm01.TypeRef("System.Collections.IComparer")
      ], []), 
    function ArrayList_BinarySearch (index, count, value, comparer) {
      try {
        var result = $T03().BinarySearch(
          this._items, 
          index, 
          count, 
          value, 
          comparer
        );
      } catch ($exception) {
        if ($T07().$Is($exception)) {
          throw new ($T0D())($exception.get_Message());
        } else {
          throw $exception;
        }
      }
      return result;
    }
  );

  $.Method({Static:true , Public:false}, "CheckRange", 
    $sig.make(0xD70, null, [
        $asm01.TypeRef("System.Int32"), $asm01.TypeRef("System.Int32"), 
        $asm01.TypeRef("System.Int32")
      ], []), 
    function ArrayList_CheckRange (index, count, listCount) {
      if (index < 0) {
        $thisType.ThrowNewArgumentOutOfRangeException("index", index, "Can't be less than 0.");
      }
      if (count < 0) {
        $thisType.ThrowNewArgumentOutOfRangeException("count", count, "Can't be less than 0.");
      }
      if (index > ((listCount - count) | 0)) {
        throw $sig.get(0x818, null, [$asm01.System.String, $asm01.System.String], []).Construct($T0D(), "Index and count do not denote a valid range of elements.", "index");
      }
    }
  );

  $.Method({Static:false, Public:true }, "Clear", 
    $sig.make(0xD28, null, [], []), 
    function ArrayList_Clear () {
                      (function Array_Clear(array, index, length) {
                          var defaultValue = null;
                          for (var i = 0; i<length; i++)
                              array[i+index] = defaultValue;
                      })(this._items, 0, this._size);;
      this._size = 0;
      ++this._version;
    }
  );

  $.Method({Static:false, Public:true }, "Clone", 
    $sig.make(0xD6E, $asm01.TypeRef("System.Object"), [], []), 
    function ArrayList_Clone () {
      return $sig.get(0xD20, null, [
          System.Array.Of($asm01.System.Object), $asm01.System.Int32, 
          $asm01.System.Int32
        ], []).Construct($thisType, this._items, 0, this._size);
    }
  );

  $.Method({Static:false, Public:true }, "Contains", 
    $sig.make(0xD2A, $asm01.TypeRef("System.Boolean"), [$asm01.TypeRef("System.Object")], []), 
    function ArrayList_Contains (item) {
      return (this.IndexOf(item, 0, this._size) > -1);
    }
  );

  $.Method({Static:false, Public:false}, "Contains", 
    $sig.make(0xD2B, $asm01.TypeRef("System.Boolean"), [
        $asm01.TypeRef("System.Object"), $asm01.TypeRef("System.Int32"), 
        $asm01.TypeRef("System.Int32")
      ], []), 
    function ArrayList_Contains (value, startIndex, count) {
      return (this.IndexOf(value, startIndex, count) > -1);
    }
  );

  $.Method({Static:false, Public:true }, "CopyTo", 
    $sig.make(0xD50, null, [$asm01.TypeRef("System.Array")], []), 
    function ArrayList_CopyTo (array) {
                      ((function (source, dest, length) {
                          for (var i = 0; i<length; i++)
                              dest[i] = source[i];
                      })(this._items, array, this._size));
    }
  );

  $.Method({Static:false, Public:true }, "CopyTo", 
    $sig.make(0xD52, null, [$asm01.TypeRef("System.Array"), $asm01.TypeRef("System.Int32")], []), 
    function ArrayList_CopyTo (array, arrayIndex) {
      this.CopyTo(0, array, arrayIndex, this._size);
    }
  );

  $.Method({Static:false, Public:true }, "CopyTo", 
    $sig.make(0xD54, null, [
        $asm01.TypeRef("System.Int32"), $asm01.TypeRef("System.Array"), 
        $asm01.TypeRef("System.Int32"), $asm01.TypeRef("System.Int32")
      ], []), 
    function ArrayList_CopyTo (index, array, arrayIndex, count) {
      if (array === null) {
        throw new ($T02())("array");
      }
      if (array.get_Rank() !== 1) {
        throw $sig.get(0x818, null, [$asm01.System.String, $asm01.System.String], []).Construct($T0D(), "Must have only 1 dimensions.", "array");
      }
                      ((function(sourceArray, sourceIndex, destinationArray, destinationIndex, length) {
                          var values = [];
                          for (var i=0; i<length; i++)
                              values.push(sourceArray[i + sourceIndex]);
                          for (var i=0; i<length; i++)
                              destinationArray[i+destinationIndex] = values[i];
                      })(this._items, index, array, arrayIndex, count));
    }
  );

  $.Method({Static:false, Public:false}, "EnsureCapacity", 
    $sig.make(0xD22, null, [$asm01.TypeRef("System.Int32")], []), 
    function ArrayList_EnsureCapacity (count) {
      if (count > this._items.length) {
        var newLength = ((this._items.length << 1) | 0);
        if (newLength === 0) {
          newLength = 4;
        }

        for (; newLength < count; newLength = ((newLength << 1) | 0)) {
        }
        var newData = JSIL.Array.New($T00(), newLength);
                        ((function(sourceArray, sourceIndex, destinationArray, destinationIndex, length) {
                            var values = [];
                            for (var i=0; i<length; i++)
                                values.push(sourceArray[i + sourceIndex]);
                            for (var i=0; i<length; i++)
                                destinationArray[i+destinationIndex] = values[i];
                        })(this._items, 0, newData, 0, this._items.length));
        this._items = newData;
      }
    }
  );

  $.Method({Static:true , Public:true }, "FixedSize", 
    $sig.make(0xD82, $.Type, [$.Type], []), 
    function ArrayList_FixedSize (list) {
      if (list === null) {
        throw new ($T02())("list");
      }
      if (list.get_IsFixedSize()) {
        var result = list;
      } else {
        result = new ($T0F())(list);
      }
      return result;
    }
  );

  $.Method({Static:true , Public:true }, "FixedSize", 
    $sig.make(0xD85, $asm01.TypeRef("System.Collections.IList"), [$asm01.TypeRef("System.Collections.IList")], []), 
    function ArrayList_FixedSize (list) {
      if (list === null) {
        throw new ($T02())("list");
      }
      if (list.IList_get_IsFixedSize()) {
        var result = list;
      } else {
        result = new ($T10())(list);
      }
      return result;
    }
  );

  $.Method({Static:false, Public:true }, "get_Capacity", 
    $sig.make(0xCCA, $asm01.TypeRef("System.Int32"), [], []), 
    function ArrayList_get_Capacity () {
      return this._items.length;
    }
  );

  $.Method({Static:false, Public:true }, "get_Count", 
    $sig.make(0xCC7, $asm01.TypeRef("System.Int32"), [], []), 
    function ArrayList_get_Count () {
      return this._size;
    }
  );

  $.Method({Static:false, Public:true }, "get_IsFixedSize", 
    $sig.make(0xD0E, $asm01.TypeRef("System.Boolean"), [], []), 
    function ArrayList_get_IsFixedSize () {
      return false;
    }
  );

  $.Method({Static:false, Public:true }, "get_IsReadOnly", 
    $sig.make(0xD12, $asm01.TypeRef("System.Boolean"), [], []), 
    function ArrayList_get_IsReadOnly () {
      return false;
    }
  );

  $.Method({Static:false, Public:true }, "get_IsSynchronized", 
    $sig.make(0xD16, $asm01.TypeRef("System.Boolean"), [], []), 
    function ArrayList_get_IsSynchronized () {
      return false;
    }
  );

  $.Method({Static:false, Public:true }, "get_Item", 
    $sig.make(0xCC4, $asm01.TypeRef("System.Object"), [$asm01.TypeRef("System.Int32")], []), 
    function ArrayList_get_Item (index) {
      if (!((index >= 0) && (index < this._size))) {
        $thisType.ThrowNewArgumentOutOfRangeException("index", index, "Index is less than 0 or more than or equal to the list count.");
      }
      return this._items[index];
    }
  );

  $.Method({Static:false, Public:true }, "get_SyncRoot", 
    $sig.make(0xD18, $asm01.TypeRef("System.Object"), [], []), 
    function ArrayList_get_SyncRoot () {
      return this;
    }
  );

  $.Method({Static:false, Public:true }, "GetEnumerator", 
    $sig.make(0xD55, $asm01.TypeRef("System.Collections.IEnumerator"), [], []), 
    function ArrayList_GetEnumerator () {
      return new ($T11())(this);
    }
  );

  $.Method({Static:false, Public:true }, "GetEnumerator", 
    $sig.make(0xD56, $asm01.TypeRef("System.Collections.IEnumerator"), [$asm01.TypeRef("System.Int32"), $asm01.TypeRef("System.Int32")], []), 
    function ArrayList_GetEnumerator (index, count) {
      $thisType.CheckRange(index, count, this._size);
      return new ($T12())(this, index, count);
    }
  );

  $.Method({Static:false, Public:true }, "GetRange", 
    $sig.make(0xD5C, $.Type, [$asm01.TypeRef("System.Int32"), $asm01.TypeRef("System.Int32")], []), 
    function ArrayList_GetRange (index, count) {
      $thisType.CheckRange(index, count, this._size);
      if (this.get_IsSynchronized()) {
        var result = $sig.get(0xD76, $thisType, [$thisType], []).CallStatic($thisType, "Synchronized", null, new ($T13())(this, index, count));
      } else {
        result = new ($T13())(this, index, count);
      }
      return result;
    }
  );

  $.Method({Static:false, Public:true }, "IndexOf", 
    $sig.make(0xD2E, $asm01.TypeRef("System.Int32"), [$asm01.TypeRef("System.Object")], []), 
    function ArrayList_IndexOf (value) {
      return this.IndexOf(value, 0);
    }
  );

  $.Method({Static:false, Public:true }, "IndexOf", 
    $sig.make(0xD30, $asm01.TypeRef("System.Int32"), [$asm01.TypeRef("System.Object"), $asm01.TypeRef("System.Int32")], []), 
    function ArrayList_IndexOf (value, startIndex) {
      return this.IndexOf(value, startIndex, ((this._size - startIndex) | 0));
    }
  );

  $.Method({Static:false, Public:true }, "IndexOf", 
    $sig.make(0xD33, $asm01.TypeRef("System.Int32"), [
        $asm01.TypeRef("System.Object"), $asm01.TypeRef("System.Int32"), 
        $asm01.TypeRef("System.Int32")
      ], []), 
    function ArrayList_IndexOf (value, startIndex, count) {
      if (!((startIndex >= 0) && (startIndex <= this._size))) {
        $thisType.ThrowNewArgumentOutOfRangeException("startIndex", startIndex, "Does not specify valid index.");
      }
      if (count < 0) {
        $thisType.ThrowNewArgumentOutOfRangeException("count", count, "Can't be less than 0.");
      }
      if (startIndex > ((this._size - count) | 0)) {
        throw $sig.get(0xCA7, null, [$asm01.System.String, $asm01.System.String], []).Construct($T14(), "count", "Start index and count do not specify a valid range.");
      }
      return                 ((function Array_IndexOf(_items, item, index, count) {
                          var result = Array.prototype.indexOf.call(_items, item, index);
                          return result > count ? -1 : result;
                      })(this._items, value, startIndex, count));
    }
  );

  $.Method({Static:false, Public:true }, "Insert", 
    $sig.make(0xD3C, null, [$asm01.TypeRef("System.Int32"), $asm01.TypeRef("System.Object")], []), 
    function ArrayList_Insert (index, value) {
      if (!((index >= 0) && (index <= this._size))) {
        $thisType.ThrowNewArgumentOutOfRangeException("index", index, "Index must be >= 0 and <= Count.");
      }
      this.Shift(index, 1);
      this._items[index] = value;
      ++this._size;
      ++this._version;
    }
  );

  $.Method({Static:false, Public:true }, "InsertRange", 
    $sig.make(0xD3E, null, [$asm01.TypeRef("System.Int32"), $asm01.TypeRef("System.Collections.ICollection")], []), 
    function ArrayList_InsertRange (index, c) {
      if (c === null) {
        throw new ($T02())("c");
      }
      if (!((index >= 0) && (index <= this._size))) {
        $thisType.ThrowNewArgumentOutOfRangeException("index", index, "Index must be >= 0 and <= Count.");
      }
      var i = c.ICollection_get_Count();
      if (this._items.length < ((this._size + i) | 0)) {
        this.EnsureCapacity(((this._size + i) | 0));
      }
      if (index < this._size) {
                        ((function(sourceArray, sourceIndex, destinationArray, destinationIndex, length) {
                            var values = [];
                            for (var i=0; i<length; i++)
                                values.push(sourceArray[i + sourceIndex]);
                            for (var i=0; i<length; i++)
                                destinationArray[i+destinationIndex] = values[i];
                        })(this._items, index, this._items, ((index + i) | 0), ((this._size - index) | 0)));
      }
      if (c.ICollection_get_SyncRoot() === this) {
                        ((function(sourceArray, sourceIndex, destinationArray, destinationIndex, length) {
                            var values = [];
                            for (var i=0; i<length; i++)
                                values.push(sourceArray[i + sourceIndex]);
                            for (var i=0; i<length; i++)
                                destinationArray[i+destinationIndex] = values[i];
                        })(this._items, 0, this._items, index, index));
                        ((function(sourceArray, sourceIndex, destinationArray, destinationIndex, length) {
                            var values = [];
                            for (var i=0; i<length; i++)
                                values.push(sourceArray[i + sourceIndex]);
                            for (var i=0; i<length; i++)
                                destinationArray[i+destinationIndex] = values[i];
                        })(this._items, ((index + i) | 0), this._items, ((index << 1) | 0), ((this._size - index) | 0)));
      } else {
        c.ICollection_CopyTo(this._items, index);
      }
      this._size += c.ICollection_get_Count();
      ++this._version;
    }
  );

  $.Method({Static:false, Public:true }, "LastIndexOf", 
    $sig.make(0xD35, $asm01.TypeRef("System.Int32"), [$asm01.TypeRef("System.Object")], []), 
    function ArrayList_LastIndexOf (value) {
      return this.LastIndexOf(value, ((this._size - 1) | 0));
    }
  );

  $.Method({Static:false, Public:true }, "LastIndexOf", 
    $sig.make(0xD38, $asm01.TypeRef("System.Int32"), [$asm01.TypeRef("System.Object"), $asm01.TypeRef("System.Int32")], []), 
    function ArrayList_LastIndexOf (value, startIndex) {
      return this.LastIndexOf(value, startIndex, ((startIndex + 1) | 0));
    }
  );

  $.Method({Static:false, Public:true }, "LastIndexOf", 
    $sig.make(0xD3A, $asm01.TypeRef("System.Int32"), [
        $asm01.TypeRef("System.Object"), $asm01.TypeRef("System.Int32"), 
        $asm01.TypeRef("System.Int32")
      ], []), 
    function ArrayList_LastIndexOf (value, startIndex, count) {
      return $T03().LastIndexOf$b1($T00())(this._items, value, startIndex, count);
    }
  );

  $.Method({Static:true , Public:true }, "ReadOnly", 
    $sig.make(0xD7C, $.Type, [$.Type], []), 
    function ArrayList_ReadOnly (list) {
      if (list === null) {
        throw new ($T02())("list");
      }
      if (list.get_IsReadOnly()) {
        var result = list;
      } else {
        result = new ($T15())(list);
      }
      return result;
    }
  );

  $.Method({Static:true , Public:true }, "ReadOnly", 
    $sig.make(0xD7F, $asm01.TypeRef("System.Collections.IList"), [$asm01.TypeRef("System.Collections.IList")], []), 
    function ArrayList_ReadOnly (list) {
      if (list === null) {
        throw new ($T02())("list");
      }
      if (list.IList_get_IsReadOnly()) {
        var result = list;
      } else {
        result = new ($T16())(list);
      }
      return result;
    }
  );

  $.Method({Static:false, Public:true }, "Remove", 
    $sig.make(0xD41, null, [$asm01.TypeRef("System.Object")], []), 
    function ArrayList_Remove (obj) {
      var x = this.IndexOf(obj);
      if (x > -1) {
        this.RemoveAt(x);
      }
      ++this._version;
    }
  );

  $.Method({Static:false, Public:true }, "RemoveAt", 
    $sig.make(0xD43, null, [$asm01.TypeRef("System.Int32")], []), 
    function ArrayList_RemoveAt (index) {
      if (!((index >= 0) && (index < this._size))) {
        $thisType.ThrowNewArgumentOutOfRangeException("index", index, "Less than 0 or more than list count.");
      }
      this.Shift(index, -1);
      --this._size;
      ++this._version;
    }
  );

  $.Method({Static:false, Public:true }, "RemoveRange", 
    $sig.make(0xD46, null, [$asm01.TypeRef("System.Int32"), $asm01.TypeRef("System.Int32")], []), 
    function ArrayList_RemoveRange (index, count) {
      $thisType.CheckRange(index, count, this._size);
      this.Shift(index, -count);
      this._size -= count;
      ++this._version;
    }
  );

  $.Method({Static:true , Public:true }, "Repeat", 
    $sig.make(0xD88, $.Type, [$asm01.TypeRef("System.Object"), $asm01.TypeRef("System.Int32")], []), 
    function ArrayList_Repeat (value, count) {
      var arrayList = $sig.get(0xD1D, null, [$asm01.System.Int32], []).Construct($thisType, count);

      for (var i = 0; i < count; ++i) {
        arrayList.Add(value);
      }
      return arrayList;
    }
  );

  $.Method({Static:false, Public:true }, "Reverse", 
    $sig.make(0xD48, null, [], []), 
    function ArrayList_Reverse () {
      $T03().Reverse(this._items, 0, this._size);
      ++this._version;
    }
  );

  $.Method({Static:false, Public:true }, "Reverse", 
    $sig.make(0xD4B, null, [$asm01.TypeRef("System.Int32"), $asm01.TypeRef("System.Int32")], []), 
    function ArrayList_Reverse (index, count) {
      $thisType.CheckRange(index, count, this._size);
      $T03().Reverse(this._items, index, count);
      ++this._version;
    }
  );

  $.Method({Static:false, Public:true }, "set_Capacity", 
    $sig.make(0xCCC, null, [$asm01.TypeRef("System.Int32")], []), 
    function ArrayList_set_Capacity (value) {
      if (value < this._size) {
        $thisType.ThrowNewArgumentOutOfRangeException("Capacity", value, "Must be more than count.");
      }
      var newArray = JSIL.Array.New($T00(), value);
                      ((function(sourceArray, sourceIndex, destinationArray, destinationIndex, length) {
                          var values = [];
                          for (var i=0; i<length; i++)
                              values.push(sourceArray[i + sourceIndex]);
                          for (var i=0; i<length; i++)
                              destinationArray[i+destinationIndex] = values[i];
                      })(this._items, 0, newArray, 0, this._size));
      this._items = newArray;
    }
  );

  $.Method({Static:false, Public:true }, "set_Item", 
    $sig.make(0xCC5, null, [$asm01.TypeRef("System.Int32"), $asm01.TypeRef("System.Object")], []), 
    function ArrayList_set_Item (index, value) {
      if (!((index >= 0) && (index < this._size))) {
        $thisType.ThrowNewArgumentOutOfRangeException("index", index, "Index is less than 0 or more than or equal to the list count.");
      }
      this._items[index] = value;
      ++this._version;
    }
  );

  $.Method({Static:false, Public:true }, "SetRange", 
    $sig.make(0xD5D, null, [$asm01.TypeRef("System.Int32"), $asm01.TypeRef("System.Collections.ICollection")], []), 
    function ArrayList_SetRange (index, c) {
      if (c === null) {
        throw new ($T02())("c");
      }
      if (!((index >= 0) && (((index + c.ICollection_get_Count()) | 0) <= this._size))) {
        throw new ($T14())("index");
      }
      c.ICollection_CopyTo(this._items, index);
      ++this._version;
    }
  );

  $.Method({Static:false, Public:false}, "Shift", 
    $sig.make(0xD24, null, [$asm01.TypeRef("System.Int32"), $asm01.TypeRef("System.Int32")], []), 
    function ArrayList_Shift (index, count) {
      if (count > 0) {
        if (((this._size + count) | 0) > this._items.length) {

          for (var newLength = ((this._items.length > 0) ? ((this._items.length << 1) | 0) : 1); newLength < ((this._size + count) | 0); newLength = ((newLength << 1) | 0)) {
          }
          var newData = JSIL.Array.New($T00(), newLength);
                          ((function(sourceArray, sourceIndex, destinationArray, destinationIndex, length) {
                              var values = [];
                              for (var i=0; i<length; i++)
                                  values.push(sourceArray[i + sourceIndex]);
                              for (var i=0; i<length; i++)
                                  destinationArray[i+destinationIndex] = values[i];
                          })(this._items, 0, newData, 0, index));
                          ((function(sourceArray, sourceIndex, destinationArray, destinationIndex, length) {
                              var values = [];
                              for (var i=0; i<length; i++)
                                  values.push(sourceArray[i + sourceIndex]);
                              for (var i=0; i<length; i++)
                                  destinationArray[i+destinationIndex] = values[i];
                          })(this._items, index, newData, ((index + count) | 0), ((this._size - index) | 0)));
          this._items = newData;
        } else {
                          ((function(sourceArray, sourceIndex, destinationArray, destinationIndex, length) {
                              var values = [];
                              for (var i=0; i<length; i++)
                                  values.push(sourceArray[i + sourceIndex]);
                              for (var i=0; i<length; i++)
                                  destinationArray[i+destinationIndex] = values[i];
                          })(this._items, index, this._items, ((index + count) | 0), ((this._size - index) | 0)));
        }
      } else if (count < 0) {
        var x = ((index - count) | 0);
                        ((function(sourceArray, sourceIndex, destinationArray, destinationIndex, length) {
                            var values = [];
                            for (var i=0; i<length; i++)
                                values.push(sourceArray[i + sourceIndex]);
                            for (var i=0; i<length; i++)
                                destinationArray[i+destinationIndex] = values[i];
                        })(this._items, x, this._items, index, ((this._size - x) | 0)));
                        (function Array_Clear(array, index, length) {
                            var defaultValue = null;
                            for (var i = 0; i<length; i++)
                                array[i+index] = defaultValue;
                        })(this._items, ((this._size + count) | 0), -count);;
      }
    }
  );

  $.Method({Static:false, Public:true }, "Sort", 
    $sig.make(0xD62, null, [], []), 
    function ArrayList_Sort () {
      (new JSIL.MethodSignature(null, [
            $jsilcore.TypeRef("System.Array", ["!!0"]), $asm01.System.Int32, 
            $asm01.System.Int32
          ], ["T"])).CallStatic($T03(), "Sort$b1", [$asm01.System.Object], this._items, 0, this._size);
      ++this._version;
    }
  );

  $.Method({Static:false, Public:true }, "Sort", 
    $sig.make(0xD65, null, [$asm01.TypeRef("System.Collections.IComparer")], []), 
    function ArrayList_Sort (comparer) {
      $T03().Sort(this._items, 0, this._size, comparer);
    }
  );

  $.Method({Static:false, Public:true }, "Sort", 
    $sig.make(0xD66, null, [
        $asm01.TypeRef("System.Int32"), $asm01.TypeRef("System.Int32"), 
        $asm01.TypeRef("System.Collections.IComparer")
      ], []), 
    function ArrayList_Sort (index, count, comparer) {
      $thisType.CheckRange(index, count, this._size);
      $T03().Sort(this._items, index, count, comparer);
    }
  );

  $.Method({Static:true , Public:true }, "Synchronized", 
    $sig.make(0xD76, $.Type, [$.Type], []), 
    function ArrayList_Synchronized (list) {
      if (list === null) {
        throw new ($T02())("list");
      }
      if (list.get_IsSynchronized()) {
        var result = list;
      } else {
        result = new ($T17())(list);
      }
      return result;
    }
  );

  $.Method({Static:true , Public:true }, "Synchronized", 
    $sig.make(0xD78, $asm01.TypeRef("System.Collections.IList"), [$asm01.TypeRef("System.Collections.IList")], []), 
    function ArrayList_Synchronized (list) {
      if (list === null) {
        throw new ($T02())("list");
      }
      if (list.ICollection_get_IsSynchronized()) {
        var result = list;
      } else {
        result = new ($T18())(list);
      }
      return result;
    }
  );

  $.Method({Static:true , Public:false}, "ThrowNewArgumentOutOfRangeException", 
    $sig.make(0xD72, null, [
        $asm01.TypeRef("System.String"), $asm01.TypeRef("System.Object"), 
        $asm01.TypeRef("System.String")
      ], []), 
    function ArrayList_ThrowNewArgumentOutOfRangeException (name, actual, message) {
      throw new ($T14())(name, actual, message);
    }
  );

  $.Method({Static:false, Public:true }, "ToArray", 
    $sig.make(0xD69, $jsilcore.TypeRef("System.Array", [$asm01.TypeRef("System.Object")]), [], []), 
    function ArrayList_ToArray () {
      var retval = JSIL.Array.New($T00(), this._size);
      this.CopyTo(retval);
      return retval;
    }
  );

  $.Method({Static:false, Public:true }, "ToArray", 
    $sig.make(0xD6A, $asm01.TypeRef("System.Array"), [$asm01.TypeRef("System.Type")], []), 
    function ArrayList_ToArray (type) {
      var retval = (JSIL.Array.New(type, this._size));
      this.CopyTo(retval);
      return retval;
    }
  );

  $.Method({Static:false, Public:true }, "TrimToSize", 
    $sig.make(0xD61, null, [], []), 
    function ArrayList_TrimToSize () {
      if (this._items.length > this._size) {
        if (this._size === 0) {
          var newArray = JSIL.Array.New($T00(), 4);
        } else {
          newArray = JSIL.Array.New($T00(), this._size);
        }
                        ((function(sourceArray, sourceIndex, destinationArray, destinationIndex, length) {
                            var values = [];
                            for (var i=0; i<length; i++)
                                values.push(sourceArray[i + sourceIndex]);
                            for (var i=0; i<length; i++)
                                destinationArray[i+destinationIndex] = values[i];
                        })(this._items, 0, newArray, 0, this._size));
        this._items = newArray;
      }
    }
  );

  $.Constant({Static:true , Public:false}, "DefaultInitialCapacity", 4); 
  $.Field({Static:false, Public:false}, "_items", $jsilcore.TypeRef("System.Array", [$asm01.TypeRef("System.Object")])); 
  $.Field({Static:false, Public:false}, "_size", $asm01.TypeRef("System.Int32")); 
  $.Field({Static:false, Public:false}, "_version", $asm01.TypeRef("System.Int32")); 
  $.Field({Static:true , Public:false, ReadOnly:true }, "EmptyArray", $jsilcore.TypeRef("System.Array", [$asm01.TypeRef("System.Object")]), function ($pi) {
      return JSIL.Array.New($asm01.System.Object, 0);
    }); 
  $.Method({Static:true , Public:false}, ".cctor", 
    $sig.make(0xD8B, null, [], []), 
    function ArrayList__cctor () {
      $thisType.EmptyArray = JSIL.Array.New($T00(), 0);
    }
  );

  $.Property({Static:false, Public:true , Virtual:true }, "Item", $asm01.TypeRef("System.Object"));

  $.Property({Static:false, Public:true , Virtual:true }, "Count", $asm01.TypeRef("System.Int32"));

  $.Property({Static:false, Public:true , Virtual:true }, "Capacity", $asm01.TypeRef("System.Int32"));

  $.Property({Static:false, Public:true , Virtual:true }, "IsFixedSize", $asm01.TypeRef("System.Boolean"));

  $.Property({Static:false, Public:true , Virtual:true }, "IsReadOnly", $asm01.TypeRef("System.Boolean"));

  $.Property({Static:false, Public:true , Virtual:true }, "IsSynchronized", $asm01.TypeRef("System.Boolean"));

  $.Property({Static:false, Public:true , Virtual:true }, "SyncRoot", $asm01.TypeRef("System.Object"));

  $.ImplementInterfaces(
      $asm01.TypeRef("System.Collections.IList"), $asm01.TypeRef("System.ICloneable"), 
      $asm01.TypeRef("System.Collections.ICollection"), $asm01.TypeRef("System.Collections.IEnumerable")
  )
})
  .Attribute($asm01.TypeRef("System.Runtime.InteropServices.ComVisibleAttribute"), function () { return [true]; })
  .Attribute($asm01.TypeRef("System.Diagnostics.DebuggerDisplayAttribute"), function () { return ["Count={Count}"]; })
  .Attribute($asm01.TypeRef("System.Diagnostics.DebuggerTypeProxyAttribute"), function () { return [$asm01.TypeRef("System.Collections.CollectionDebuggerView")]; })
  .Attribute($asm01.TypeRef("System.Reflection.DefaultMemberAttribute"), function () { return ["Item"]; });

JSIL.MakeClass($asm01.TypeRef("System.Object"), "System.Collections.ArrayList/ArrayListEnumerator", false, [], function ($) {
  var $thisType = $.publicInterface;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm01.System.Collections.ArrayList)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm01.System.Int32)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm01.System.Object)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm01.System.InvalidOperationException)) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize($asm01.System.Boolean)) ();
  };

  $.Method({Static:false, Public:true }, ".ctor", 
    $sig.make(0xFA2, null, [$asm01.TypeRef("System.Collections.ArrayList")], []), 
    function ArrayListEnumerator__ctor (list) {
      $thisType.prototype._ctor.call(this, list, 0, list.get_Count());
    }
  );

  $.Method({Static:false, Public:true }, ".ctor", 
    $sig.make(0xFA9, null, [
        $asm01.TypeRef("System.Collections.ArrayList"), $asm01.TypeRef("System.Int32"), 
        $asm01.TypeRef("System.Int32")
      ], []), 
    function ArrayListEnumerator__ctor (list, index, count) {
      this.m_List = list;
      this.m_Index = index;
      this.m_Count = count;
      this.m_Pos = ((this.m_Index - 1) | 0);
      this.m_Current = null;
      this.m_ExpectedStateChanges = list._version;
    }
  );

  $.Method({Static:false, Public:true }, "Clone", 
    $sig.make(0xFA6, $asm01.TypeRef("System.Object"), [], []), 
    function ArrayListEnumerator_Clone () {
      return $T02().prototype.MemberwiseClone.call(this);
    }
  );

  $.Method({Static:false, Public:true }, "get_Current", 
    $sig.make(0xF9E, $asm01.TypeRef("System.Object"), [], []), 
    function ArrayListEnumerator_get_Current () {
      if (this.m_Pos === ((this.m_Index - 1) | 0)) {
        throw new ($T03())("Enumerator unusable (Reset pending, or past end of array.");
      }
      return this.m_Current;
    }
  );

  $.Method({Static:false, Public:true }, "MoveNext", 
    $sig.make(0xFB4, $asm01.TypeRef("System.Boolean"), [], []), 
    function ArrayListEnumerator_MoveNext () {
      if (this.m_List._version !== this.m_ExpectedStateChanges) {
        throw new ($T03())("List has changed.");
      }
      ++this.m_Pos;
      if (((this.m_Pos - this.m_Index) | 0) < this.m_Count) {
        this.m_Current = this.m_List.get_Item(this.m_Pos);
        var result = true;
      } else {
        result = false;
      }
      return result;
    }
  );

  $.Method({Static:false, Public:true }, "Reset", 
    $sig.make(0xFB5, null, [], []), 
    function ArrayListEnumerator_Reset () {
      this.m_Current = null;
      this.m_Pos = ((this.m_Index - 1) | 0);
    }
  );

  $.Field({Static:false, Public:false}, "m_Current", $asm01.TypeRef("System.Object")); 
  $.Field({Static:false, Public:false}, "m_List", $asm01.TypeRef("System.Collections.ArrayList")); 
  $.Field({Static:false, Public:false}, "m_Pos", $asm01.TypeRef("System.Int32")); 
  $.Field({Static:false, Public:false}, "m_Index", $asm01.TypeRef("System.Int32")); 
  $.Field({Static:false, Public:false}, "m_Count", $asm01.TypeRef("System.Int32")); 
  $.Field({Static:false, Public:false}, "m_ExpectedStateChanges", $asm01.TypeRef("System.Int32")); 
  $.Property({Static:false, Public:true , Virtual:true }, "Current", $asm01.TypeRef("System.Object"));

  $.ImplementInterfaces($asm01.TypeRef("System.Collections.IEnumerator"), $asm01.TypeRef("System.ICloneable"))
});

JSIL.MakeClass($asm01.TypeRef("System.Object"), "System.Collections.ArrayList/SimpleEnumerator", false, [], function ($) {
  var $thisType = $.publicInterface;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm01.System.Object)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm01.System.Collections.ArrayList)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm01.System.InvalidOperationException)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm01.System.Boolean)) ();
  };

  $.Method({Static:false, Public:true }, ".ctor", 
    $sig.make(0x1014, null, [$asm01.TypeRef("System.Collections.ArrayList")], []), 
    function SimpleEnumerator__ctor (list) {
      this.list = list;
      this.index = -1;
      this.version = list._version;
      this.currentElement = $thisType.endFlag;
    }
  );

  $.Method({Static:false, Public:true }, "Clone", 
    $sig.make(0x1015, $asm01.TypeRef("System.Object"), [], []), 
    function SimpleEnumerator_Clone () {
      return $T00().prototype.MemberwiseClone.call(this);
    }
  );

  $.Method({Static:false, Public:true }, "get_Current", 
    $sig.make(0x1013, $asm01.TypeRef("System.Object"), [], []), 
    function SimpleEnumerator_get_Current () {
      if (this.currentElement !== $thisType.endFlag) {
        return this.currentElement;
      }
      if (this.index === -1) {
        throw new ($T02())("Enumerator not started");
      }
      throw new ($T02())("Enumerator ended");
    }
  );

  $.Method({Static:false, Public:true }, "MoveNext", 
    $sig.make(0x1017, $asm01.TypeRef("System.Boolean"), [], []), 
    function SimpleEnumerator_MoveNext () {
      if (this.version !== this.list._version) {
        throw new ($T02())("List has changed.");
      }
      if (++this.index < this.list.get_Count()) {
        this.currentElement = this.list.get_Item(this.index);
        var result = true;
      } else {
        this.currentElement = $thisType.endFlag;
        result = false;
      }
      return result;
    }
  );

  $.Method({Static:false, Public:true }, "Reset", 
    $sig.make(0x1018, null, [], []), 
    function SimpleEnumerator_Reset () {
      if (this.version !== this.list._version) {
        throw new ($T02())("List has changed.");
      }
      this.currentElement = $thisType.endFlag;
      this.index = -1;
    }
  );

  $.Field({Static:false, Public:false}, "list", $asm01.TypeRef("System.Collections.ArrayList")); 
  $.Field({Static:false, Public:false}, "currentElement", $asm01.TypeRef("System.Object")); 
  $.Field({Static:false, Public:false}, "index", $asm01.TypeRef("System.Int32")); 
  $.Field({Static:false, Public:false}, "version", $asm01.TypeRef("System.Int32")); 
  $.Field({Static:true , Public:false}, "endFlag", $asm01.TypeRef("System.Object")); 
  $.Method({Static:true , Public:false}, ".cctor", 
    $sig.make(0x1019, null, [], []), 
    function SimpleEnumerator__cctor () {
      $thisType.endFlag = new ($T00())();
    }
  );

  $.Property({Static:false, Public:true , Virtual:true }, "Current", $asm01.TypeRef("System.Object"));

  $.ImplementInterfaces($asm01.TypeRef("System.Collections.IEnumerator"), $asm01.TypeRef("System.ICloneable"))
});

JSIL.MakeClass($asm01.TypeRef("System.Collections.ArrayList"), "System.Collections.ArrayList/ArrayListAdapter", false, [], function ($) {
  var $thisType = $.publicInterface;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm01.System.Collections.IList)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm01.System.Collections.ArrayList)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm01.System.Object)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm01.System.Collections.ICollection)) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize($asm01.System.Collections.IEnumerator)) ();
  };
  var $T05 = function () {
    return ($T05 = JSIL.Memoize($asm01.System.Collections.IEnumerable)) ();
  };
  var $T06 = function () {
    return ($T06 = JSIL.Memoize($asm01.System.IDisposable)) ();
  };
  var $T07 = function () {
    return ($T07 = JSIL.Memoize($asm01.System.Collections.IComparer)) ();
  };
  var $T08 = function () {
    return ($T08 = JSIL.Memoize($asm01.System.Int32)) ();
  };
  var $T09 = function () {
    return ($T09 = JSIL.Memoize($asm01.System.Collections.Comparer)) ();
  };
  var $T0A = function () {
    return ($T0A = JSIL.Memoize($asm01.System.Array)) ();
  };
  var $T0B = function () {
    return ($T0B = JSIL.Memoize($asm01.System.ArgumentException)) ();
  };
  var $T0C = function () {
    return ($T0C = JSIL.Memoize($asm01.System.Collections.ArrayList_ArrayListAdapter_EnumeratorWithRange)) ();
  };
  var $T0D = function () {
    return ($T0D = JSIL.Memoize($asm01.System.Collections.ArrayList_RangedArrayList)) ();
  };
  var $T0E = function () {
    return ($T0E = JSIL.Memoize($asm01.System.ArgumentOutOfRangeException)) ();
  };
  var $T0F = function () {
    return ($T0F = JSIL.Memoize($asm01.System.ArgumentNullException)) ();
  };
  var $T10 = function () {
    return ($T10 = JSIL.Memoize(System.Array.Of($asm01.System.Object))) ();
  };
  var $T11 = function () {
    return ($T11 = JSIL.Memoize($asm01.System.Type)) ();
  };
  var $T12 = function () {
    return ($T12 = JSIL.Memoize($asm01.System.Void)) ();
  };

  $.Method({Static:false, Public:true }, ".ctor", 
    $sig.make(0xF1D, null, [$asm01.TypeRef("System.Collections.IList")], []), 
    function ArrayListAdapter__ctor (adaptee) {
      $T01().prototype._ctor.call(this, 0, true);
      this.m_Adaptee = adaptee;
    }
  );

  $.Method({Static:false, Public:true }, "Add", 
    $sig.make(0xF1E, $asm01.TypeRef("System.Int32"), [$asm01.TypeRef("System.Object")], []), 
    function ArrayListAdapter_Add (value) {
      return this.m_Adaptee.IList_Add(value);
    }
  );

  $.Method({Static:false, Public:true }, "AddRange", 
    $sig.make(0xF69, null, [$asm01.TypeRef("System.Collections.ICollection")], []), 
    function ArrayListAdapter_AddRange (c) {
      var enumerator = c.IEnumerable_GetEnumerator();
      try {

        while (enumerator.IEnumerator_MoveNext()) {
          var value = enumerator.IEnumerator_get_Current();
          this.m_Adaptee.IList_Add(value);
        }
      } finally {
        var disposable = $T06().$As(enumerator);
        if (disposable !== null) {
          disposable.IDisposable_Dispose();
        }
      }
    }
  );

  $.Method({Static:false, Public:true }, "BinarySearch", 
    $sig.make(0xF6C, $asm01.TypeRef("System.Int32"), [$asm01.TypeRef("System.Object")], []), 
    function ArrayListAdapter_BinarySearch (value) {
      return this.BinarySearch(value, null);
    }
  );

  $.Method({Static:false, Public:true }, "BinarySearch", 
    $sig.make(0xF6E, $asm01.TypeRef("System.Int32"), [$asm01.TypeRef("System.Object"), $asm01.TypeRef("System.Collections.IComparer")], []), 
    function ArrayListAdapter_BinarySearch (value, comparer) {
      return this.BinarySearch(0, this.m_Adaptee.ICollection_get_Count(), value, comparer);
    }
  );

  $.Method({Static:false, Public:true }, "BinarySearch", 
    $sig.make(0xF72, $asm01.TypeRef("System.Int32"), [
        $asm01.TypeRef("System.Int32"), $asm01.TypeRef("System.Int32"), 
        $asm01.TypeRef("System.Object"), $asm01.TypeRef("System.Collections.IComparer")
      ], []), 
    function ArrayListAdapter_BinarySearch (index, count, value, comparer) {
      $T01().CheckRange(index, count, this.m_Adaptee.ICollection_get_Count());
      if (comparer === null) {
        comparer = $T09().Default;
      }
      var x = index;

      for (var y = ((((index + count) | 0) - 1) | 0); x <= y; ) {
        var z = ((x + ((((y - x) | 0) / 2) | 0)) | 0);
        var r = comparer.IComparer_Compare(value, this.m_Adaptee.IList_get_Item(z));
        if (r < 0) {
          y = ((z - 1) | 0);
        } else {
          if (r <= 0) {
            var result = z;
            return result;
          }
          x = ((z + 1) | 0);
        }
      }
      result = ~x;
      return result;
    }
  );

  $.Method({Static:false, Public:true }, "Clear", 
    $sig.make(0xF1F, null, [], []), 
    function ArrayListAdapter_Clear () {
      this.m_Adaptee.IList_Clear();
    }
  );

  $.Method({Static:false, Public:true }, "Clone", 
    $sig.make(0xF75, $asm01.TypeRef("System.Object"), [], []), 
    function ArrayListAdapter_Clone () {
      return new $thisType(this.m_Adaptee);
    }
  );

  $.Method({Static:false, Public:true }, "Contains", 
    $sig.make(0xF20, $asm01.TypeRef("System.Boolean"), [$asm01.TypeRef("System.Object")], []), 
    function ArrayListAdapter_Contains (value) {
      return this.m_Adaptee.IList_Contains(value);
    }
  );

  $.Method({Static:false, Public:true }, "CopyTo", 
    $sig.make(0xF57, null, [$asm01.TypeRef("System.Array")], []), 
    function ArrayListAdapter_CopyTo (array) {
      this.m_Adaptee.ICollection_CopyTo(array, 0);
    }
  );

  $.Method({Static:false, Public:true }, "CopyTo", 
    $sig.make(0xF5A, null, [$asm01.TypeRef("System.Array"), $asm01.TypeRef("System.Int32")], []), 
    function ArrayListAdapter_CopyTo (array, index) {
      this.m_Adaptee.ICollection_CopyTo(array, index);
    }
  );

  $.Method({Static:false, Public:true }, "CopyTo", 
    $sig.make(0xF60, null, [
        $asm01.TypeRef("System.Int32"), $asm01.TypeRef("System.Array"), 
        $asm01.TypeRef("System.Int32"), $asm01.TypeRef("System.Int32")
      ], []), 
    function ArrayListAdapter_CopyTo (index, array, arrayIndex, count) {
      if (index < 0) {
        $T01().ThrowNewArgumentOutOfRangeException("index", index, "Can't be less than zero.");
      }
      if (arrayIndex < 0) {
        $T01().ThrowNewArgumentOutOfRangeException("arrayIndex", arrayIndex, "Can't be less than zero.");
      }
      if (count < 0) {
        $T01().ThrowNewArgumentOutOfRangeException("index", index, "Can't be less than zero.");
      }
      if (index >= this.m_Adaptee.ICollection_get_Count()) {
        throw $sig.get(0x818, null, [$asm01.System.String, $asm01.System.String], []).Construct($T0B(), "Can't be more or equal to list count.", "index");
      }
      if (array.get_Rank() > 1) {
        throw new ($T0B())("Can't copy into multi-dimensional array.");
      }
      if (arrayIndex >= array.length) {
        throw new ($T0B())("arrayIndex can't be greater than array.Length - 1.");
      }
      if (((((array.length - arrayIndex) | 0) + 1) | 0) < count) {
        throw new ($T0B())("Destination array is too small.");
      }
      if (index > ((this.m_Adaptee.ICollection_get_Count() - count) | 0)) {
        throw $sig.get(0x818, null, [$asm01.System.String, $asm01.System.String], []).Construct($T0B(), "Index and count do not denote a valid range of elements.", "index");
      }

      for (var i = 0; i < count; ++i) {
        $sig.get(0x353, null, [$asm01.System.Object, $asm01.System.Int32], []).CallVirtual("SetValue", null, array, this.m_Adaptee.IList_get_Item(((index + i) | 0)), ((arrayIndex + i) | 0));
      }
    }
  );

  $.Method({Static:false, Public:true }, "get_Capacity", 
    $sig.make(0xEFC, $asm01.TypeRef("System.Int32"), [], []), 
    function ArrayListAdapter_get_Capacity () {
      return this.m_Adaptee.ICollection_get_Count();
    }
  );

  $.Method({Static:false, Public:true }, "get_Count", 
    $sig.make(0xEFB, $asm01.TypeRef("System.Int32"), [], []), 
    function ArrayListAdapter_get_Count () {
      return this.m_Adaptee.ICollection_get_Count();
    }
  );

  $.Method({Static:false, Public:true }, "get_IsFixedSize", 
    $sig.make(0xF04, $asm01.TypeRef("System.Boolean"), [], []), 
    function ArrayListAdapter_get_IsFixedSize () {
      return this.m_Adaptee.IList_get_IsFixedSize();
    }
  );

  $.Method({Static:false, Public:true }, "get_IsReadOnly", 
    $sig.make(0xF14, $asm01.TypeRef("System.Boolean"), [], []), 
    function ArrayListAdapter_get_IsReadOnly () {
      return this.m_Adaptee.IList_get_IsReadOnly();
    }
  );

  $.Method({Static:false, Public:true }, "get_IsSynchronized", 
    $sig.make(0xF1B, $asm01.TypeRef("System.Boolean"), [], []), 
    function ArrayListAdapter_get_IsSynchronized () {
      return this.m_Adaptee.ICollection_get_IsSynchronized();
    }
  );

  $.Method({Static:false, Public:true }, "get_Item", 
    $sig.make(0xEF7, $asm01.TypeRef("System.Object"), [$asm01.TypeRef("System.Int32")], []), 
    function ArrayListAdapter_get_Item (index) {
      return this.m_Adaptee.IList_get_Item(index);
    }
  );

  $.Method({Static:false, Public:true }, "get_SyncRoot", 
    $sig.make(0xF18, $asm01.TypeRef("System.Object"), [], []), 
    function ArrayListAdapter_get_SyncRoot () {
      return this.m_Adaptee.ICollection_get_SyncRoot();
    }
  );

  $.Method({Static:false, Public:true }, "GetEnumerator", 
    $sig.make(0xF62, $asm01.TypeRef("System.Collections.IEnumerator"), [], []), 
    function ArrayListAdapter_GetEnumerator () {
      return this.m_Adaptee.IEnumerable_GetEnumerator();
    }
  );

  $.Method({Static:false, Public:true }, "GetEnumerator", 
    $sig.make(0xF65, $asm01.TypeRef("System.Collections.IEnumerator"), [$asm01.TypeRef("System.Int32"), $asm01.TypeRef("System.Int32")], []), 
    function ArrayListAdapter_GetEnumerator (index, count) {
      $T01().CheckRange(index, count, this.m_Adaptee.ICollection_get_Count());
      return new ($T0C())(this.m_Adaptee.IEnumerable_GetEnumerator(), index, count);
    }
  );

  $.Method({Static:false, Public:true }, "GetRange", 
    $sig.make(0xF77, $asm01.TypeRef("System.Collections.ArrayList"), [$asm01.TypeRef("System.Int32"), $asm01.TypeRef("System.Int32")], []), 
    function ArrayListAdapter_GetRange (index, count) {
      $T01().CheckRange(index, count, this.m_Adaptee.ICollection_get_Count());
      return new ($T0D())(this, index, count);
    }
  );

  $.Method({Static:false, Public:true }, "IndexOf", 
    $sig.make(0xF26, $asm01.TypeRef("System.Int32"), [$asm01.TypeRef("System.Object")], []), 
    function ArrayListAdapter_IndexOf (value) {
      return this.m_Adaptee.IList_IndexOf(value);
    }
  );

  $.Method({Static:false, Public:true }, "IndexOf", 
    $sig.make(0xF27, $asm01.TypeRef("System.Int32"), [$asm01.TypeRef("System.Object"), $asm01.TypeRef("System.Int32")], []), 
    function ArrayListAdapter_IndexOf (value, startIndex) {
      return this.IndexOf(value, startIndex, ((this.m_Adaptee.ICollection_get_Count() - startIndex) | 0));
    }
  );

  $.Method({Static:false, Public:true }, "IndexOf", 
    $sig.make(0xF2B, $asm01.TypeRef("System.Int32"), [
        $asm01.TypeRef("System.Object"), $asm01.TypeRef("System.Int32"), 
        $asm01.TypeRef("System.Int32")
      ], []), 
    function ArrayListAdapter_IndexOf (value, startIndex, count) {
      if (!((startIndex >= 0) && (startIndex <= this.m_Adaptee.ICollection_get_Count()))) {
        $T01().ThrowNewArgumentOutOfRangeException("startIndex", startIndex, "Does not specify valid index.");
      }
      if (count < 0) {
        $T01().ThrowNewArgumentOutOfRangeException("count", count, "Can't be less than 0.");
      }
      if (startIndex > ((this.m_Adaptee.ICollection_get_Count() - count) | 0)) {
        throw $sig.get(0xCA7, null, [$asm01.System.String, $asm01.System.String], []).Construct($T0E(), "count", "Start index and count do not specify a valid range.");
      }
      if (value === null) {

        for (var i = startIndex; i < ((startIndex + count) | 0); ++i) {
          if (this.m_Adaptee.IList_get_Item(i) === null) {
            var result = i;
            return result;
          }
        }
      } else {

        for (i = startIndex; i < ((startIndex + count) | 0); ++i) {
          if (value.Object_Equals(this.m_Adaptee.IList_get_Item(i))) {
            result = i;
            return result;
          }
        }
      }
      result = -1;
      return result;
    }
  );

  $.Method({Static:false, Public:true }, "Insert", 
    $sig.make(0xF37, null, [$asm01.TypeRef("System.Int32"), $asm01.TypeRef("System.Object")], []), 
    function ArrayListAdapter_Insert (index, value) {
      this.m_Adaptee.IList_Insert(index, value);
    }
  );

  $.Method({Static:false, Public:true }, "InsertRange", 
    $sig.make(0xF39, null, [$asm01.TypeRef("System.Int32"), $asm01.TypeRef("System.Collections.ICollection")], []), 
    function ArrayListAdapter_InsertRange (index, c) {
      if (c === null) {
        throw new ($T0F())("c");
      }
      if (index > this.m_Adaptee.ICollection_get_Count()) {
        $T01().ThrowNewArgumentOutOfRangeException("index", index, "Index must be >= 0 and <= Count.");
      }
      var enumerator = c.IEnumerable_GetEnumerator();
      try {

        while (enumerator.IEnumerator_MoveNext()) {
          var value = enumerator.IEnumerator_get_Current();
          this.m_Adaptee.IList_Insert(index++, value);
        }
      } finally {
        var disposable = $T06().$As(enumerator);
        if (disposable !== null) {
          disposable.IDisposable_Dispose();
        }
      }
    }
  );

  $.Method({Static:false, Public:true }, "LastIndexOf", 
    $sig.make(0xF2E, $asm01.TypeRef("System.Int32"), [$asm01.TypeRef("System.Object")], []), 
    function ArrayListAdapter_LastIndexOf (value) {
      return this.LastIndexOf(value, ((this.m_Adaptee.ICollection_get_Count() - 1) | 0));
    }
  );

  $.Method({Static:false, Public:true }, "LastIndexOf", 
    $sig.make(0xF31, $asm01.TypeRef("System.Int32"), [$asm01.TypeRef("System.Object"), $asm01.TypeRef("System.Int32")], []), 
    function ArrayListAdapter_LastIndexOf (value, startIndex) {
      return this.LastIndexOf(value, startIndex, ((startIndex + 1) | 0));
    }
  );

  $.Method({Static:false, Public:true }, "LastIndexOf", 
    $sig.make(0xF34, $asm01.TypeRef("System.Int32"), [
        $asm01.TypeRef("System.Object"), $asm01.TypeRef("System.Int32"), 
        $asm01.TypeRef("System.Int32")
      ], []), 
    function ArrayListAdapter_LastIndexOf (value, startIndex, count) {
      if (startIndex < 0) {
        $T01().ThrowNewArgumentOutOfRangeException("startIndex", startIndex, "< 0");
      }
      if (count < 0) {
        $T01().ThrowNewArgumentOutOfRangeException("count", count, "count is negative.");
      }
      if (((((startIndex - count) | 0) + 1) | 0) < 0) {
        $T01().ThrowNewArgumentOutOfRangeException("count", count, "count is too large.");
      }
      if (value === null) {

        for (var i = startIndex; i > ((startIndex - count) | 0); --i) {
          if (this.m_Adaptee.IList_get_Item(i) === null) {
            var result = i;
            return result;
          }
        }
      } else {

        for (i = startIndex; i > ((startIndex - count) | 0); --i) {
          if (value.Object_Equals(this.m_Adaptee.IList_get_Item(i))) {
            result = i;
            return result;
          }
        }
      }
      result = -1;
      return result;
    }
  );

  $.Method({Static:true , Public:false}, "QuickSort", 
    $sig.make(0xF96, null, [
        $asm01.TypeRef("System.Collections.IList"), $asm01.TypeRef("System.Int32"), 
        $asm01.TypeRef("System.Int32"), $asm01.TypeRef("System.Collections.IComparer")
      ], []), 
    function ArrayListAdapter_QuickSort (list, left, right, comparer) {
      if (left < right) {
        var middle = ((left + ((((right - left) | 0) / 2) | 0)) | 0);
        if (comparer.IComparer_Compare(
            list.IList_get_Item(middle), 
            list.IList_get_Item(left)
          ) < 0) {
          $thisType.Swap(list, middle, left);
        }
        if (comparer.IComparer_Compare(
            list.IList_get_Item(right), 
            list.IList_get_Item(left)
          ) < 0) {
          $thisType.Swap(list, right, left);
        }
        if (comparer.IComparer_Compare(
            list.IList_get_Item(right), 
            list.IList_get_Item(middle)
          ) < 0) {
          $thisType.Swap(list, right, middle);
        }
        if (((((right - left) | 0) + 1) | 0) > 3) {
          $thisType.Swap(list, ((right - 1) | 0), middle);
          var pivot = list.IList_get_Item(((right - 1) | 0));
          var i = left;
          var j = ((right - 1) | 0);

        $loop0: 
          while (true) {

            while (comparer.IComparer_Compare(list.IList_get_Item(++i), pivot) < 0) {
            }

            while (comparer.IComparer_Compare(list.IList_get_Item(--j), pivot) > 0) {
            }
            if (i >= j) {
              break $loop0;
            }
            $thisType.Swap(list, i, j);
          }
          $thisType.Swap(list, ((right - 1) | 0), i);
          $thisType.QuickSort(list, left, ((i - 1) | 0), comparer);
          $thisType.QuickSort(list, ((i + 1) | 0), right, comparer);
        }
      }
    }
  );

  $.Method({Static:false, Public:true }, "Remove", 
    $sig.make(0xF3B, null, [$asm01.TypeRef("System.Object")], []), 
    function ArrayListAdapter_Remove (value) {
      this.m_Adaptee.IList_Remove(value);
    }
  );

  $.Method({Static:false, Public:true }, "RemoveAt", 
    $sig.make(0xF3D, null, [$asm01.TypeRef("System.Int32")], []), 
    function ArrayListAdapter_RemoveAt (index) {
      this.m_Adaptee.IList_RemoveAt(index);
    }
  );

  $.Method({Static:false, Public:true }, "RemoveRange", 
    $sig.make(0xF3F, null, [$asm01.TypeRef("System.Int32"), $asm01.TypeRef("System.Int32")], []), 
    function ArrayListAdapter_RemoveRange (index, count) {
      $T01().CheckRange(index, count, this.m_Adaptee.ICollection_get_Count());

      for (var i = 0; i < count; ++i) {
        this.m_Adaptee.IList_RemoveAt(index);
      }
    }
  );

  $.Method({Static:false, Public:true }, "Reverse", 
    $sig.make(0xF41, null, [], []), 
    function ArrayListAdapter_Reverse () {
      this.Reverse(0, this.m_Adaptee.ICollection_get_Count());
    }
  );

  $.Method({Static:false, Public:true }, "Reverse", 
    $sig.make(0xF4D, null, [$asm01.TypeRef("System.Int32"), $asm01.TypeRef("System.Int32")], []), 
    function ArrayListAdapter_Reverse (index, count) {
      $T01().CheckRange(index, count, this.m_Adaptee.ICollection_get_Count());

      for (var i = 0; i < ((count / 2) | 0); ++i) {
        var tmp = this.m_Adaptee.IList_get_Item(((i + index) | 0));
        this.m_Adaptee.IList_set_Item(((i + index) | 0), this.m_Adaptee.IList_get_Item(((((((((index + count) | 0) - i) | 0) + index) | 0) - 1) | 0)));
        this.m_Adaptee.IList_set_Item(((((((((index + count) | 0) - i) | 0) + index) | 0) - 1) | 0), tmp);
      }
    }
  );

  $.Method({Static:false, Public:true }, "set_Capacity", 
    $sig.make(0xEFE, null, [$asm01.TypeRef("System.Int32")], []), 
    function ArrayListAdapter_set_Capacity (value) {
      if (value < this.m_Adaptee.ICollection_get_Count()) {
        throw new ($T0B())("capacity");
      }
    }
  );

  $.Method({Static:false, Public:true }, "set_Item", 
    $sig.make(0xEF9, null, [$asm01.TypeRef("System.Int32"), $asm01.TypeRef("System.Object")], []), 
    function ArrayListAdapter_set_Item (index, value) {
      this.m_Adaptee.IList_set_Item(index, value);
    }
  );

  $.Method({Static:false, Public:true }, "SetRange", 
    $sig.make(0xF53, null, [$asm01.TypeRef("System.Int32"), $asm01.TypeRef("System.Collections.ICollection")], []), 
    function ArrayListAdapter_SetRange (index, c) {
      if (c === null) {
        throw new ($T0F())("c");
      }
      if (!((index >= 0) && (((index + c.ICollection_get_Count()) | 0) <= this.m_Adaptee.ICollection_get_Count()))) {
        throw new ($T0E())("index");
      }
      var x = index;
      var enumerator = c.IEnumerable_GetEnumerator();
      try {

        while (enumerator.IEnumerator_MoveNext()) {
          var value = enumerator.IEnumerator_get_Current();
          this.m_Adaptee.IList_set_Item(x++, value);
        }
      } finally {
        var disposable = $T06().$As(enumerator);
        if (disposable !== null) {
          disposable.IDisposable_Dispose();
        }
      }
    }
  );

  $.Method({Static:false, Public:true }, "Sort", 
    $sig.make(0xF84, null, [], []), 
    function ArrayListAdapter_Sort () {
      this.Sort($T09().Default);
    }
  );

  $.Method({Static:false, Public:true }, "Sort", 
    $sig.make(0xF88, null, [$asm01.TypeRef("System.Collections.IComparer")], []), 
    function ArrayListAdapter_Sort (comparer) {
      this.Sort(0, this.m_Adaptee.ICollection_get_Count(), comparer);
    }
  );

  $.Method({Static:false, Public:true }, "Sort", 
    $sig.make(0xF90, null, [
        $asm01.TypeRef("System.Int32"), $asm01.TypeRef("System.Int32"), 
        $asm01.TypeRef("System.Collections.IComparer")
      ], []), 
    function ArrayListAdapter_Sort (index, count, comparer) {
      $T01().CheckRange(index, count, this.m_Adaptee.ICollection_get_Count());
      if (comparer === null) {
        comparer = $T09().Default;
      }
      $thisType.QuickSort(this.m_Adaptee, index, ((((index + count) | 0) - 1) | 0), comparer);
    }
  );

  $.Method({Static:true , Public:false}, "Swap", 
    $sig.make(0xF93, null, [
        $asm01.TypeRef("System.Collections.IList"), $asm01.TypeRef("System.Int32"), 
        $asm01.TypeRef("System.Int32")
      ], []), 
    function ArrayListAdapter_Swap (list, x, y) {
      var tmp = list.IList_get_Item(x);
      list.IList_set_Item(x, list.IList_get_Item(y));
      list.IList_set_Item(y, tmp);
    }
  );

  $.Method({Static:false, Public:true }, "ToArray", 
    $sig.make(0xF98, $jsilcore.TypeRef("System.Array", [$asm01.TypeRef("System.Object")]), [], []), 
    function ArrayListAdapter_ToArray () {
      var retval = JSIL.Array.New($T02(), this.m_Adaptee.ICollection_get_Count());
      this.m_Adaptee.ICollection_CopyTo(retval, 0);
      return retval;
    }
  );

  $.Method({Static:false, Public:true }, "ToArray", 
    $sig.make(0xF9B, $asm01.TypeRef("System.Array"), [$asm01.TypeRef("System.Type")], []), 
    function ArrayListAdapter_ToArray (elementType) {
      var retval = (JSIL.Array.New(elementType, this.m_Adaptee.ICollection_get_Count()));
      this.m_Adaptee.ICollection_CopyTo(retval, 0);
      return retval;
    }
  );

  $.Method({Static:false, Public:true }, "TrimToSize", 
    $sig.make(0xF7B, null, [], []), 
    function ArrayListAdapter_TrimToSize () {
    }
  );

  $.Field({Static:false, Public:false}, "m_Adaptee", $asm01.TypeRef("System.Collections.IList")); 
  $.Property({Static:false, Public:true , Virtual:true }, "Item", $asm01.TypeRef("System.Object"));

  $.Property({Static:false, Public:true , Virtual:true }, "Count", $asm01.TypeRef("System.Int32"));

  $.Property({Static:false, Public:true , Virtual:true }, "Capacity", $asm01.TypeRef("System.Int32"));

  $.Property({Static:false, Public:true , Virtual:true }, "IsFixedSize", $asm01.TypeRef("System.Boolean"));

  $.Property({Static:false, Public:true , Virtual:true }, "IsReadOnly", $asm01.TypeRef("System.Boolean"));

  $.Property({Static:false, Public:true , Virtual:true }, "SyncRoot", $asm01.TypeRef("System.Object"));

  $.Property({Static:false, Public:true , Virtual:true }, "IsSynchronized", $asm01.TypeRef("System.Boolean"));

})
  .Attribute($asm01.TypeRef("System.Reflection.DefaultMemberAttribute"), function () { return ["Item"]; });

JSIL.MakeClass($asm01.TypeRef("System.Object"), "System.Collections.ArrayList/ArrayListAdapter/EnumeratorWithRange", false, [], function ($) {
  var $thisType = $.publicInterface;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm01.System.Collections.IEnumerator)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm01.System.Int32)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm01.System.Object)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm01.System.Boolean)) ();
  };

  $.Method({Static:false, Public:true }, ".ctor", 
    $sig.make(0x10ED, null, [
        $asm01.TypeRef("System.Collections.IEnumerator"), $asm01.TypeRef("System.Int32"), 
        $asm01.TypeRef("System.Int32")
      ], []), 
    function EnumeratorWithRange__ctor (enumerator, index, count) {
      this.m_Count = 0;
      this.m_StartIndex = index;
      this.m_MaxCount = count;
      this.m_Enumerator = enumerator;
      this.Reset();
    }
  );

  $.Method({Static:false, Public:true }, "Clone", 
    $sig.make(0x10EE, $asm01.TypeRef("System.Object"), [], []), 
    function EnumeratorWithRange_Clone () {
      return $T02().prototype.MemberwiseClone.call(this);
    }
  );

  $.Method({Static:false, Public:true }, "get_Current", 
    $sig.make(0x10EC, $asm01.TypeRef("System.Object"), [], []), 
    function EnumeratorWithRange_get_Current () {
      return this.m_Enumerator.IEnumerator_get_Current();
    }
  );

  $.Method({Static:false, Public:true }, "MoveNext", 
    $sig.make(0x10EF, $asm01.TypeRef("System.Boolean"), [], []), 
    function EnumeratorWithRange_MoveNext () {
      if (this.m_Count >= this.m_MaxCount) {
        var result = false;
      } else {
        ++this.m_Count;
        result = this.m_Enumerator.IEnumerator_MoveNext();
      }
      return result;
    }
  );

  $.Method({Static:false, Public:true }, "Reset", 
    $sig.make(0x10F0, null, [], []), 
    function EnumeratorWithRange_Reset () {
      this.m_Count = 0;
      this.m_Enumerator.IEnumerator_Reset();

      for (var i = 0; i < this.m_StartIndex; ++i) {
        this.m_Enumerator.IEnumerator_MoveNext();
      }
    }
  );

  $.Field({Static:false, Public:false}, "m_StartIndex", $asm01.TypeRef("System.Int32")); 
  $.Field({Static:false, Public:false}, "m_Count", $asm01.TypeRef("System.Int32")); 
  $.Field({Static:false, Public:false}, "m_MaxCount", $asm01.TypeRef("System.Int32")); 
  $.Field({Static:false, Public:false}, "m_Enumerator", $asm01.TypeRef("System.Collections.IEnumerator")); 
  $.Property({Static:false, Public:true , Virtual:true }, "Current", $asm01.TypeRef("System.Object"));

  $.ImplementInterfaces($asm01.TypeRef("System.Collections.IEnumerator"), $asm01.TypeRef("System.ICloneable"))
});

JSIL.MakeClass($asm01.TypeRef("System.Collections.ArrayList"), "System.Collections.ArrayList/ArrayListWrapper", false, [], function ($) {
  var $thisType = $.publicInterface;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm01.System.Collections.ArrayList)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm01.System.Object)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm01.System.Collections.ICollection)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm01.System.Collections.IComparer)) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize($asm01.System.Int32)) ();
  };
  var $T05 = function () {
    return ($T05 = JSIL.Memoize($asm01.System.Array)) ();
  };
  var $T06 = function () {
    return ($T06 = JSIL.Memoize($asm01.System.Type)) ();
  };

  $.Method({Static:false, Public:true }, ".ctor", 
    $sig.make(0xF3E, null, [$asm01.TypeRef("System.Collections.ArrayList")], []), 
    function ArrayListWrapper__ctor (innerArrayList) {
      $T00().prototype._ctor.call(this);
      this.m_InnerArrayList = innerArrayList;
    }
  );

  $.Method({Static:false, Public:true }, "Add", 
    $sig.make(0xF79, $asm01.TypeRef("System.Int32"), [$asm01.TypeRef("System.Object")], []), 
    function ArrayListWrapper_Add (value) {
      return this.m_InnerArrayList.Add(value);
    }
  );

  $.Method({Static:false, Public:true }, "AddRange", 
    $sig.make(0xFCA, null, [$asm01.TypeRef("System.Collections.ICollection")], []), 
    function ArrayListWrapper_AddRange (c) {
      this.m_InnerArrayList.AddRange(c);
    }
  );

  $.Method({Static:false, Public:true }, "BinarySearch", 
    $sig.make(0xFCD, $asm01.TypeRef("System.Int32"), [$asm01.TypeRef("System.Object")], []), 
    function ArrayListWrapper_BinarySearch (value) {
      return this.m_InnerArrayList.BinarySearch(value);
    }
  );

  $.Method({Static:false, Public:true }, "BinarySearch", 
    $sig.make(0xFCE, $asm01.TypeRef("System.Int32"), [$asm01.TypeRef("System.Object"), $asm01.TypeRef("System.Collections.IComparer")], []), 
    function ArrayListWrapper_BinarySearch (value, comparer) {
      return this.m_InnerArrayList.BinarySearch(value, comparer);
    }
  );

  $.Method({Static:false, Public:true }, "BinarySearch", 
    $sig.make(0xFD0, $asm01.TypeRef("System.Int32"), [
        $asm01.TypeRef("System.Int32"), $asm01.TypeRef("System.Int32"), 
        $asm01.TypeRef("System.Object"), $asm01.TypeRef("System.Collections.IComparer")
      ], []), 
    function ArrayListWrapper_BinarySearch (index, count, value, comparer) {
      return this.m_InnerArrayList.BinarySearch(index, count, value, comparer);
    }
  );

  $.Method({Static:false, Public:true }, "Clear", 
    $sig.make(0xF7D, null, [], []), 
    function ArrayListWrapper_Clear () {
      this.m_InnerArrayList.Clear();
    }
  );

  $.Method({Static:false, Public:true }, "Clone", 
    $sig.make(0xFD3, $asm01.TypeRef("System.Object"), [], []), 
    function ArrayListWrapper_Clone () {
      return this.m_InnerArrayList.Clone();
    }
  );

  $.Method({Static:false, Public:true }, "Contains", 
    $sig.make(0xF81, $asm01.TypeRef("System.Boolean"), [$asm01.TypeRef("System.Object")], []), 
    function ArrayListWrapper_Contains (value) {
      return this.m_InnerArrayList.Contains(value);
    }
  );

  $.Method({Static:false, Public:true }, "CopyTo", 
    $sig.make(0xFC0, null, [$asm01.TypeRef("System.Array")], []), 
    function ArrayListWrapper_CopyTo (array) {
      this.m_InnerArrayList.CopyTo(array);
    }
  );

  $.Method({Static:false, Public:true }, "CopyTo", 
    $sig.make(0xFC2, null, [$asm01.TypeRef("System.Array"), $asm01.TypeRef("System.Int32")], []), 
    function ArrayListWrapper_CopyTo (array, index) {
      this.m_InnerArrayList.CopyTo(array, index);
    }
  );

  $.Method({Static:false, Public:true }, "CopyTo", 
    $sig.make(0xFC7, null, [
        $asm01.TypeRef("System.Int32"), $asm01.TypeRef("System.Array"), 
        $asm01.TypeRef("System.Int32"), $asm01.TypeRef("System.Int32")
      ], []), 
    function ArrayListWrapper_CopyTo (index, array, arrayIndex, count) {
      this.m_InnerArrayList.CopyTo(index, array, arrayIndex, count);
    }
  );

  $.Method({Static:false, Public:true }, "get_Capacity", 
    $sig.make(0xF01, $asm01.TypeRef("System.Int32"), [], []), 
    function ArrayListWrapper_get_Capacity () {
      return this.m_InnerArrayList.get_Capacity();
    }
  );

  $.Method({Static:false, Public:true }, "get_Count", 
    $sig.make(0xF00, $asm01.TypeRef("System.Int32"), [], []), 
    function ArrayListWrapper_get_Count () {
      return this.m_InnerArrayList.get_Count();
    }
  );

  $.Method({Static:false, Public:true }, "get_IsFixedSize", 
    $sig.make(0xF25, $asm01.TypeRef("System.Boolean"), [], []), 
    function ArrayListWrapper_get_IsFixedSize () {
      return this.m_InnerArrayList.get_IsFixedSize();
    }
  );

  $.Method({Static:false, Public:true }, "get_IsReadOnly", 
    $sig.make(0xF2A, $asm01.TypeRef("System.Boolean"), [], []), 
    function ArrayListWrapper_get_IsReadOnly () {
      return this.m_InnerArrayList.get_IsReadOnly();
    }
  );

  $.Method({Static:false, Public:true }, "get_IsSynchronized", 
    $sig.make(0xF36, $asm01.TypeRef("System.Boolean"), [], []), 
    function ArrayListWrapper_get_IsSynchronized () {
      return this.m_InnerArrayList.get_IsSynchronized();
    }
  );

  $.Method({Static:false, Public:true }, "get_Item", 
    $sig.make(0xEF8, $asm01.TypeRef("System.Object"), [$asm01.TypeRef("System.Int32")], []), 
    function ArrayListWrapper_get_Item (index) {
      return this.m_InnerArrayList.get_Item(index);
    }
  );

  $.Method({Static:false, Public:true }, "get_SyncRoot", 
    $sig.make(0xF3A, $asm01.TypeRef("System.Object"), [], []), 
    function ArrayListWrapper_get_SyncRoot () {
      return this.m_InnerArrayList.get_SyncRoot();
    }
  );

  $.Method({Static:false, Public:true }, "GetEnumerator", 
    $sig.make(0xFC8, $asm01.TypeRef("System.Collections.IEnumerator"), [], []), 
    function ArrayListWrapper_GetEnumerator () {
      return this.m_InnerArrayList.GetEnumerator();
    }
  );

  $.Method({Static:false, Public:true }, "GetEnumerator", 
    $sig.make(0xFC9, $asm01.TypeRef("System.Collections.IEnumerator"), [$asm01.TypeRef("System.Int32"), $asm01.TypeRef("System.Int32")], []), 
    function ArrayListWrapper_GetEnumerator (index, count) {
      return this.m_InnerArrayList.GetEnumerator(index, count);
    }
  );

  $.Method({Static:false, Public:true }, "GetRange", 
    $sig.make(0xFD6, $asm01.TypeRef("System.Collections.ArrayList"), [$asm01.TypeRef("System.Int32"), $asm01.TypeRef("System.Int32")], []), 
    function ArrayListWrapper_GetRange (index, count) {
      return this.m_InnerArrayList.GetRange(index, count);
    }
  );

  $.Method({Static:false, Public:true }, "IndexOf", 
    $sig.make(0xF87, $asm01.TypeRef("System.Int32"), [$asm01.TypeRef("System.Object")], []), 
    function ArrayListWrapper_IndexOf (value) {
      return this.m_InnerArrayList.IndexOf(value);
    }
  );

  $.Method({Static:false, Public:true }, "IndexOf", 
    $sig.make(0xF8F, $asm01.TypeRef("System.Int32"), [$asm01.TypeRef("System.Object"), $asm01.TypeRef("System.Int32")], []), 
    function ArrayListWrapper_IndexOf (value, startIndex) {
      return this.m_InnerArrayList.IndexOf(value, startIndex);
    }
  );

  $.Method({Static:false, Public:true }, "IndexOf", 
    $sig.make(0xF92, $asm01.TypeRef("System.Int32"), [
        $asm01.TypeRef("System.Object"), $asm01.TypeRef("System.Int32"), 
        $asm01.TypeRef("System.Int32")
      ], []), 
    function ArrayListWrapper_IndexOf (value, startIndex, count) {
      return this.m_InnerArrayList.IndexOf(value, startIndex, count);
    }
  );

  $.Method({Static:false, Public:true }, "Insert", 
    $sig.make(0xF9D, null, [$asm01.TypeRef("System.Int32"), $asm01.TypeRef("System.Object")], []), 
    function ArrayListWrapper_Insert (index, value) {
      this.m_InnerArrayList.Insert(index, value);
    }
  );

  $.Method({Static:false, Public:true }, "InsertRange", 
    $sig.make(0xFA1, null, [$asm01.TypeRef("System.Int32"), $asm01.TypeRef("System.Collections.ICollection")], []), 
    function ArrayListWrapper_InsertRange (index, c) {
      this.m_InnerArrayList.InsertRange(index, c);
    }
  );

  $.Method({Static:false, Public:true }, "LastIndexOf", 
    $sig.make(0xF94, $asm01.TypeRef("System.Int32"), [$asm01.TypeRef("System.Object")], []), 
    function ArrayListWrapper_LastIndexOf (value) {
      return this.m_InnerArrayList.LastIndexOf(value);
    }
  );

  $.Method({Static:false, Public:true }, "LastIndexOf", 
    $sig.make(0xF97, $asm01.TypeRef("System.Int32"), [$asm01.TypeRef("System.Object"), $asm01.TypeRef("System.Int32")], []), 
    function ArrayListWrapper_LastIndexOf (value, startIndex) {
      return this.m_InnerArrayList.LastIndexOf(value, startIndex);
    }
  );

  $.Method({Static:false, Public:true }, "LastIndexOf", 
    $sig.make(0xF99, $asm01.TypeRef("System.Int32"), [
        $asm01.TypeRef("System.Object"), $asm01.TypeRef("System.Int32"), 
        $asm01.TypeRef("System.Int32")
      ], []), 
    function ArrayListWrapper_LastIndexOf (value, startIndex, count) {
      return this.m_InnerArrayList.LastIndexOf(value, startIndex, count);
    }
  );

  $.Method({Static:false, Public:true }, "Remove", 
    $sig.make(0xFA5, null, [$asm01.TypeRef("System.Object")], []), 
    function ArrayListWrapper_Remove (value) {
      this.m_InnerArrayList.Remove(value);
    }
  );

  $.Method({Static:false, Public:true }, "RemoveAt", 
    $sig.make(0xFAB, null, [$asm01.TypeRef("System.Int32")], []), 
    function ArrayListWrapper_RemoveAt (index) {
      this.m_InnerArrayList.RemoveAt(index);
    }
  );

  $.Method({Static:false, Public:true }, "RemoveRange", 
    $sig.make(0xFAE, null, [$asm01.TypeRef("System.Int32"), $asm01.TypeRef("System.Int32")], []), 
    function ArrayListWrapper_RemoveRange (index, count) {
      this.m_InnerArrayList.RemoveRange(index, count);
    }
  );

  $.Method({Static:false, Public:true }, "Reverse", 
    $sig.make(0xFB0, null, [], []), 
    function ArrayListWrapper_Reverse () {
      this.m_InnerArrayList.Reverse();
    }
  );

  $.Method({Static:false, Public:true }, "Reverse", 
    $sig.make(0xFBA, null, [$asm01.TypeRef("System.Int32"), $asm01.TypeRef("System.Int32")], []), 
    function ArrayListWrapper_Reverse (index, count) {
      this.m_InnerArrayList.Reverse(index, count);
    }
  );

  $.Method({Static:false, Public:true }, "set_Capacity", 
    $sig.make(0xF06, null, [$asm01.TypeRef("System.Int32")], []), 
    function ArrayListWrapper_set_Capacity (value) {
      this.m_InnerArrayList.set_Capacity(value);
    }
  );

  $.Method({Static:false, Public:true }, "set_Item", 
    $sig.make(0xEFA, null, [$asm01.TypeRef("System.Int32"), $asm01.TypeRef("System.Object")], []), 
    function ArrayListWrapper_set_Item (index, value) {
      this.m_InnerArrayList.set_Item(index, value);
    }
  );

  $.Method({Static:false, Public:true }, "SetRange", 
    $sig.make(0xFBD, null, [$asm01.TypeRef("System.Int32"), $asm01.TypeRef("System.Collections.ICollection")], []), 
    function ArrayListWrapper_SetRange (index, c) {
      this.m_InnerArrayList.SetRange(index, c);
    }
  );

  $.Method({Static:false, Public:true }, "Sort", 
    $sig.make(0xFDC, null, [], []), 
    function ArrayListWrapper_Sort () {
      this.m_InnerArrayList.Sort();
    }
  );

  $.Method({Static:false, Public:true }, "Sort", 
    $sig.make(0xFE1, null, [$asm01.TypeRef("System.Collections.IComparer")], []), 
    function ArrayListWrapper_Sort (comparer) {
      this.m_InnerArrayList.Sort(comparer);
    }
  );

  $.Method({Static:false, Public:true }, "Sort", 
    $sig.make(0xFE5, null, [
        $asm01.TypeRef("System.Int32"), $asm01.TypeRef("System.Int32"), 
        $asm01.TypeRef("System.Collections.IComparer")
      ], []), 
    function ArrayListWrapper_Sort (index, count, comparer) {
      this.m_InnerArrayList.Sort(index, count, comparer);
    }
  );

  $.Method({Static:false, Public:true }, "ToArray", 
    $sig.make(0xFE9, $jsilcore.TypeRef("System.Array", [$asm01.TypeRef("System.Object")]), [], []), 
    function ArrayListWrapper_ToArray () {
      return this.m_InnerArrayList.ToArray();
    }
  );

  $.Method({Static:false, Public:true }, "ToArray", 
    $sig.make(0xFEF, $asm01.TypeRef("System.Array"), [$asm01.TypeRef("System.Type")], []), 
    function ArrayListWrapper_ToArray (elementType) {
      return this.m_InnerArrayList.ToArray(elementType);
    }
  );

  $.Method({Static:false, Public:true }, "TrimToSize", 
    $sig.make(0xFD9, null, [], []), 
    function ArrayListWrapper_TrimToSize () {
      this.m_InnerArrayList.TrimToSize();
    }
  );

  $.Field({Static:false, Public:false}, "m_InnerArrayList", $asm01.TypeRef("System.Collections.ArrayList")); 
  $.Property({Static:false, Public:true , Virtual:true }, "Item", $asm01.TypeRef("System.Object"));

  $.Property({Static:false, Public:true , Virtual:true }, "Count", $asm01.TypeRef("System.Int32"));

  $.Property({Static:false, Public:true , Virtual:true }, "Capacity", $asm01.TypeRef("System.Int32"));

  $.Property({Static:false, Public:true , Virtual:true }, "IsFixedSize", $asm01.TypeRef("System.Boolean"));

  $.Property({Static:false, Public:true , Virtual:true }, "IsReadOnly", $asm01.TypeRef("System.Boolean"));

  $.Property({Static:false, Public:true , Virtual:true }, "IsSynchronized", $asm01.TypeRef("System.Boolean"));

  $.Property({Static:false, Public:true , Virtual:true }, "SyncRoot", $asm01.TypeRef("System.Object"));

})
  .Attribute($asm01.TypeRef("System.Reflection.DefaultMemberAttribute"), function () { return ["Item"]; });

JSIL.MakeClass($asm01.TypeRef("System.Collections.ArrayList/ArrayListWrapper"), "System.Collections.ArrayList/SynchronizedArrayListWrapper", false, [], function ($) {
  var $thisType = $.publicInterface;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm01.System.Collections.ArrayList)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm01.System.Collections.ArrayList_ArrayListWrapper)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm01.System.Object)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm01.System.Boolean)) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize($asm01.System.Threading.Monitor)) ();
  };
  var $T05 = function () {
    return ($T05 = JSIL.Memoize($asm01.System.Int32)) ();
  };
  var $T06 = function () {
    return ($T06 = JSIL.Memoize($asm01.System.Collections.ICollection)) ();
  };
  var $T07 = function () {
    return ($T07 = JSIL.Memoize($asm01.System.Collections.IComparer)) ();
  };
  var $T08 = function () {
    return ($T08 = JSIL.Memoize($asm01.System.Array)) ();
  };
  var $T09 = function () {
    return ($T09 = JSIL.Memoize($asm01.System.Collections.IEnumerator)) ();
  };
  var $T0A = function () {
    return ($T0A = JSIL.Memoize(System.Array.Of($asm01.System.Object))) ();
  };
  var $T0B = function () {
    return ($T0B = JSIL.Memoize($asm01.System.Type)) ();
  };

  $.Method({Static:false, Public:false}, ".ctor", 
    $sig.make(0x1047, null, [$asm01.TypeRef("System.Collections.ArrayList")], []), 
    function SynchronizedArrayListWrapper__ctor (innerArrayList) {
      $T01().prototype._ctor.call(this, innerArrayList);
      this.m_SyncRoot = innerArrayList.get_SyncRoot();
    }
  );

  $.Method({Static:false, Public:true }, "Add", 
    $sig.make(0x104A, $asm01.TypeRef("System.Int32"), [$asm01.TypeRef("System.Object")], []), 
    function SynchronizedArrayListWrapper_Add (value) {
      var syncRoot = null;
      var flag = new JSIL.Variable(false);
      try {
        $T04().Enter((syncRoot = this.m_SyncRoot), /* ref */ flag);
        var result = this.m_InnerArrayList.Add(value);
      } finally {
        if (flag.value) {
          $T04().Exit(syncRoot);
        }
      }
      return result;
    }
  );

  $.Method({Static:false, Public:true }, "AddRange", 
    $sig.make(0x1081, null, [$asm01.TypeRef("System.Collections.ICollection")], []), 
    function SynchronizedArrayListWrapper_AddRange (c) {
      var syncRoot = null;
      var flag = new JSIL.Variable(false);
      try {
        $T04().Enter((syncRoot = this.m_SyncRoot), /* ref */ flag);
        this.m_InnerArrayList.AddRange(c);
      } finally {
        if (flag.value) {
          $T04().Exit(syncRoot);
        }
      }
    }
  );

  $.Method({Static:false, Public:true }, "BinarySearch", 
    $sig.make(0x1086, $asm01.TypeRef("System.Int32"), [$asm01.TypeRef("System.Object")], []), 
    function SynchronizedArrayListWrapper_BinarySearch (value) {
      var syncRoot = null;
      var flag = new JSIL.Variable(false);
      try {
        $T04().Enter((syncRoot = this.m_SyncRoot), /* ref */ flag);
        var result = this.m_InnerArrayList.BinarySearch(value);
      } finally {
        if (flag.value) {
          $T04().Exit(syncRoot);
        }
      }
      return result;
    }
  );

  $.Method({Static:false, Public:true }, "BinarySearch", 
    $sig.make(0x1087, $asm01.TypeRef("System.Int32"), [$asm01.TypeRef("System.Object"), $asm01.TypeRef("System.Collections.IComparer")], []), 
    function SynchronizedArrayListWrapper_BinarySearch (value, comparer) {
      var syncRoot = null;
      var flag = new JSIL.Variable(false);
      try {
        $T04().Enter((syncRoot = this.m_SyncRoot), /* ref */ flag);
        var result = this.m_InnerArrayList.BinarySearch(value, comparer);
      } finally {
        if (flag.value) {
          $T04().Exit(syncRoot);
        }
      }
      return result;
    }
  );

  $.Method({Static:false, Public:true }, "BinarySearch", 
    $sig.make(0x1089, $asm01.TypeRef("System.Int32"), [
        $asm01.TypeRef("System.Int32"), $asm01.TypeRef("System.Int32"), 
        $asm01.TypeRef("System.Object"), $asm01.TypeRef("System.Collections.IComparer")
      ], []), 
    function SynchronizedArrayListWrapper_BinarySearch (index, count, value, comparer) {
      var syncRoot = null;
      var flag = new JSIL.Variable(false);
      try {
        $T04().Enter((syncRoot = this.m_SyncRoot), /* ref */ flag);
        var result = this.m_InnerArrayList.BinarySearch(index, count, value, comparer);
      } finally {
        if (flag.value) {
          $T04().Exit(syncRoot);
        }
      }
      return result;
    }
  );

  $.Method({Static:false, Public:true }, "Clear", 
    $sig.make(0x104D, null, [], []), 
    function SynchronizedArrayListWrapper_Clear () {
      var syncRoot = null;
      var flag = new JSIL.Variable(false);
      try {
        $T04().Enter((syncRoot = this.m_SyncRoot), /* ref */ flag);
        this.m_InnerArrayList.Clear();
      } finally {
        if (flag.value) {
          $T04().Exit(syncRoot);
        }
      }
    }
  );

  $.Method({Static:false, Public:true }, "Clone", 
    $sig.make(0x108D, $asm01.TypeRef("System.Object"), [], []), 
    function SynchronizedArrayListWrapper_Clone () {
      var syncRoot = null;
      var flag = new JSIL.Variable(false);
      try {
        $T04().Enter((syncRoot = this.m_SyncRoot), /* ref */ flag);
        var result = this.m_InnerArrayList.Clone();
      } finally {
        if (flag.value) {
          $T04().Exit(syncRoot);
        }
      }
      return result;
    }
  );

  $.Method({Static:false, Public:true }, "Contains", 
    $sig.make(0x104F, $asm01.TypeRef("System.Boolean"), [$asm01.TypeRef("System.Object")], []), 
    function SynchronizedArrayListWrapper_Contains (value) {
      var syncRoot = null;
      var flag = new JSIL.Variable(false);
      try {
        $T04().Enter((syncRoot = this.m_SyncRoot), /* ref */ flag);
        var result = this.m_InnerArrayList.Contains(value);
      } finally {
        if (flag.value) {
          $T04().Exit(syncRoot);
        }
      }
      return result;
    }
  );

  $.Method({Static:false, Public:true }, "CopyTo", 
    $sig.make(0x1074, null, [$asm01.TypeRef("System.Array")], []), 
    function SynchronizedArrayListWrapper_CopyTo (array) {
      var syncRoot = null;
      var flag = new JSIL.Variable(false);
      try {
        $T04().Enter((syncRoot = this.m_SyncRoot), /* ref */ flag);
        this.m_InnerArrayList.CopyTo(array);
      } finally {
        if (flag.value) {
          $T04().Exit(syncRoot);
        }
      }
    }
  );

  $.Method({Static:false, Public:true }, "CopyTo", 
    $sig.make(0x1076, null, [$asm01.TypeRef("System.Array"), $asm01.TypeRef("System.Int32")], []), 
    function SynchronizedArrayListWrapper_CopyTo (array, index) {
      var syncRoot = null;
      var flag = new JSIL.Variable(false);
      try {
        $T04().Enter((syncRoot = this.m_SyncRoot), /* ref */ flag);
        this.m_InnerArrayList.CopyTo(array, index);
      } finally {
        if (flag.value) {
          $T04().Exit(syncRoot);
        }
      }
    }
  );

  $.Method({Static:false, Public:true }, "CopyTo", 
    $sig.make(0x1079, null, [
        $asm01.TypeRef("System.Int32"), $asm01.TypeRef("System.Array"), 
        $asm01.TypeRef("System.Int32"), $asm01.TypeRef("System.Int32")
      ], []), 
    function SynchronizedArrayListWrapper_CopyTo (index, array, arrayIndex, count) {
      var syncRoot = null;
      var flag = new JSIL.Variable(false);
      try {
        $T04().Enter((syncRoot = this.m_SyncRoot), /* ref */ flag);
        this.m_InnerArrayList.CopyTo(index, array, arrayIndex, count);
      } finally {
        if (flag.value) {
          $T04().Exit(syncRoot);
        }
      }
    }
  );

  $.Method({Static:false, Public:true }, "get_Capacity", 
    $sig.make(0x1036, $asm01.TypeRef("System.Int32"), [], []), 
    function SynchronizedArrayListWrapper_get_Capacity () {
      var syncRoot = null;
      var flag = new JSIL.Variable(false);
      try {
        $T04().Enter((syncRoot = this.m_SyncRoot), /* ref */ flag);
        var capacity = this.m_InnerArrayList.get_Capacity();
      } finally {
        if (flag.value) {
          $T04().Exit(syncRoot);
        }
      }
      return capacity;
    }
  );

  $.Method({Static:false, Public:true }, "get_Count", 
    $sig.make(0x1034, $asm01.TypeRef("System.Int32"), [], []), 
    function SynchronizedArrayListWrapper_get_Count () {
      var syncRoot = null;
      var flag = new JSIL.Variable(false);
      try {
        $T04().Enter((syncRoot = this.m_SyncRoot), /* ref */ flag);
        var count = this.m_InnerArrayList.get_Count();
      } finally {
        if (flag.value) {
          $T04().Exit(syncRoot);
        }
      }
      return count;
    }
  );

  $.Method({Static:false, Public:true }, "get_IsFixedSize", 
    $sig.make(0x103B, $asm01.TypeRef("System.Boolean"), [], []), 
    function SynchronizedArrayListWrapper_get_IsFixedSize () {
      var syncRoot = null;
      var flag = new JSIL.Variable(false);
      try {
        $T04().Enter((syncRoot = this.m_SyncRoot), /* ref */ flag);
        var isFixedSize = this.m_InnerArrayList.get_IsFixedSize();
      } finally {
        if (flag.value) {
          $T04().Exit(syncRoot);
        }
      }
      return isFixedSize;
    }
  );

  $.Method({Static:false, Public:true }, "get_IsReadOnly", 
    $sig.make(0x1040, $asm01.TypeRef("System.Boolean"), [], []), 
    function SynchronizedArrayListWrapper_get_IsReadOnly () {
      var syncRoot = null;
      var flag = new JSIL.Variable(false);
      try {
        $T04().Enter((syncRoot = this.m_SyncRoot), /* ref */ flag);
        var isReadOnly = this.m_InnerArrayList.get_IsReadOnly();
      } finally {
        if (flag.value) {
          $T04().Exit(syncRoot);
        }
      }
      return isReadOnly;
    }
  );

  $.Method({Static:false, Public:true }, "get_IsSynchronized", 
    $sig.make(0x1042, $asm01.TypeRef("System.Boolean"), [], []), 
    function SynchronizedArrayListWrapper_get_IsSynchronized () {
      return true;
    }
  );

  $.Method({Static:false, Public:true }, "get_Item", 
    $sig.make(0x1032, $asm01.TypeRef("System.Object"), [$asm01.TypeRef("System.Int32")], []), 
    function SynchronizedArrayListWrapper_get_Item (index) {
      var syncRoot = null;
      var flag = new JSIL.Variable(false);
      try {
        $T04().Enter((syncRoot = this.m_SyncRoot), /* ref */ flag);
        var result = this.m_InnerArrayList.get_Item(index);
      } finally {
        if (flag.value) {
          $T04().Exit(syncRoot);
        }
      }
      return result;
    }
  );

  $.Method({Static:false, Public:true }, "get_SyncRoot", 
    $sig.make(0x1045, $asm01.TypeRef("System.Object"), [], []), 
    function SynchronizedArrayListWrapper_get_SyncRoot () {
      return this.m_SyncRoot;
    }
  );

  $.Method({Static:false, Public:true }, "GetEnumerator", 
    $sig.make(0x107B, $asm01.TypeRef("System.Collections.IEnumerator"), [], []), 
    function SynchronizedArrayListWrapper_GetEnumerator () {
      var syncRoot = null;
      var flag = new JSIL.Variable(false);
      try {
        $T04().Enter((syncRoot = this.m_SyncRoot), /* ref */ flag);
        var enumerator = this.m_InnerArrayList.GetEnumerator();
      } finally {
        if (flag.value) {
          $T04().Exit(syncRoot);
        }
      }
      return enumerator;
    }
  );

  $.Method({Static:false, Public:true }, "GetEnumerator", 
    $sig.make(0x107D, $asm01.TypeRef("System.Collections.IEnumerator"), [$asm01.TypeRef("System.Int32"), $asm01.TypeRef("System.Int32")], []), 
    function SynchronizedArrayListWrapper_GetEnumerator (index, count) {
      var syncRoot = null;
      var flag = new JSIL.Variable(false);
      try {
        $T04().Enter((syncRoot = this.m_SyncRoot), /* ref */ flag);
        var enumerator = this.m_InnerArrayList.GetEnumerator(index, count);
      } finally {
        if (flag.value) {
          $T04().Exit(syncRoot);
        }
      }
      return enumerator;
    }
  );

  $.Method({Static:false, Public:true }, "GetRange", 
    $sig.make(0x108F, $asm01.TypeRef("System.Collections.ArrayList"), [$asm01.TypeRef("System.Int32"), $asm01.TypeRef("System.Int32")], []), 
    function SynchronizedArrayListWrapper_GetRange (index, count) {
      var syncRoot = null;
      var flag = new JSIL.Variable(false);
      try {
        $T04().Enter((syncRoot = this.m_SyncRoot), /* ref */ flag);
        var range = this.m_InnerArrayList.GetRange(index, count);
      } finally {
        if (flag.value) {
          $T04().Exit(syncRoot);
        }
      }
      return range;
    }
  );

  $.Method({Static:false, Public:true }, "IndexOf", 
    $sig.make(0x1052, $asm01.TypeRef("System.Int32"), [$asm01.TypeRef("System.Object")], []), 
    function SynchronizedArrayListWrapper_IndexOf (value) {
      var syncRoot = null;
      var flag = new JSIL.Variable(false);
      try {
        $T04().Enter((syncRoot = this.m_SyncRoot), /* ref */ flag);
        var result = this.m_InnerArrayList.IndexOf(value);
      } finally {
        if (flag.value) {
          $T04().Exit(syncRoot);
        }
      }
      return result;
    }
  );

  $.Method({Static:false, Public:true }, "IndexOf", 
    $sig.make(0x1054, $asm01.TypeRef("System.Int32"), [$asm01.TypeRef("System.Object"), $asm01.TypeRef("System.Int32")], []), 
    function SynchronizedArrayListWrapper_IndexOf (value, startIndex) {
      var syncRoot = null;
      var flag = new JSIL.Variable(false);
      try {
        $T04().Enter((syncRoot = this.m_SyncRoot), /* ref */ flag);
        var result = this.m_InnerArrayList.IndexOf(value, startIndex);
      } finally {
        if (flag.value) {
          $T04().Exit(syncRoot);
        }
      }
      return result;
    }
  );

  $.Method({Static:false, Public:true }, "IndexOf", 
    $sig.make(0x1055, $asm01.TypeRef("System.Int32"), [
        $asm01.TypeRef("System.Object"), $asm01.TypeRef("System.Int32"), 
        $asm01.TypeRef("System.Int32")
      ], []), 
    function SynchronizedArrayListWrapper_IndexOf (value, startIndex, count) {
      var syncRoot = null;
      var flag = new JSIL.Variable(false);
      try {
        $T04().Enter((syncRoot = this.m_SyncRoot), /* ref */ flag);
        var result = this.m_InnerArrayList.IndexOf(value, startIndex, count);
      } finally {
        if (flag.value) {
          $T04().Exit(syncRoot);
        }
      }
      return result;
    }
  );

  $.Method({Static:false, Public:true }, "Insert", 
    $sig.make(0x1063, null, [$asm01.TypeRef("System.Int32"), $asm01.TypeRef("System.Object")], []), 
    function SynchronizedArrayListWrapper_Insert (index, value) {
      var syncRoot = null;
      var flag = new JSIL.Variable(false);
      try {
        $T04().Enter((syncRoot = this.m_SyncRoot), /* ref */ flag);
        this.m_InnerArrayList.Insert(index, value);
      } finally {
        if (flag.value) {
          $T04().Exit(syncRoot);
        }
      }
    }
  );

  $.Method({Static:false, Public:true }, "InsertRange", 
    $sig.make(0x1066, null, [$asm01.TypeRef("System.Int32"), $asm01.TypeRef("System.Collections.ICollection")], []), 
    function SynchronizedArrayListWrapper_InsertRange (index, c) {
      var syncRoot = null;
      var flag = new JSIL.Variable(false);
      try {
        $T04().Enter((syncRoot = this.m_SyncRoot), /* ref */ flag);
        this.m_InnerArrayList.InsertRange(index, c);
      } finally {
        if (flag.value) {
          $T04().Exit(syncRoot);
        }
      }
    }
  );

  $.Method({Static:false, Public:true }, "LastIndexOf", 
    $sig.make(0x1057, $asm01.TypeRef("System.Int32"), [$asm01.TypeRef("System.Object")], []), 
    function SynchronizedArrayListWrapper_LastIndexOf (value) {
      var syncRoot = null;
      var flag = new JSIL.Variable(false);
      try {
        $T04().Enter((syncRoot = this.m_SyncRoot), /* ref */ flag);
        var result = this.m_InnerArrayList.LastIndexOf(value);
      } finally {
        if (flag.value) {
          $T04().Exit(syncRoot);
        }
      }
      return result;
    }
  );

  $.Method({Static:false, Public:true }, "LastIndexOf", 
    $sig.make(0x105E, $asm01.TypeRef("System.Int32"), [$asm01.TypeRef("System.Object"), $asm01.TypeRef("System.Int32")], []), 
    function SynchronizedArrayListWrapper_LastIndexOf (value, startIndex) {
      var syncRoot = null;
      var flag = new JSIL.Variable(false);
      try {
        $T04().Enter((syncRoot = this.m_SyncRoot), /* ref */ flag);
        var result = this.m_InnerArrayList.LastIndexOf(value, startIndex);
      } finally {
        if (flag.value) {
          $T04().Exit(syncRoot);
        }
      }
      return result;
    }
  );

  $.Method({Static:false, Public:true }, "LastIndexOf", 
    $sig.make(0x1061, $asm01.TypeRef("System.Int32"), [
        $asm01.TypeRef("System.Object"), $asm01.TypeRef("System.Int32"), 
        $asm01.TypeRef("System.Int32")
      ], []), 
    function SynchronizedArrayListWrapper_LastIndexOf (value, startIndex, count) {
      var syncRoot = null;
      var flag = new JSIL.Variable(false);
      try {
        $T04().Enter((syncRoot = this.m_SyncRoot), /* ref */ flag);
        var result = this.m_InnerArrayList.LastIndexOf(value, startIndex, count);
      } finally {
        if (flag.value) {
          $T04().Exit(syncRoot);
        }
      }
      return result;
    }
  );

  $.Method({Static:false, Public:true }, "Remove", 
    $sig.make(0x1067, null, [$asm01.TypeRef("System.Object")], []), 
    function SynchronizedArrayListWrapper_Remove (value) {
      var syncRoot = null;
      var flag = new JSIL.Variable(false);
      try {
        $T04().Enter((syncRoot = this.m_SyncRoot), /* ref */ flag);
        this.m_InnerArrayList.Remove(value);
      } finally {
        if (flag.value) {
          $T04().Exit(syncRoot);
        }
      }
    }
  );

  $.Method({Static:false, Public:true }, "RemoveAt", 
    $sig.make(0x106A, null, [$asm01.TypeRef("System.Int32")], []), 
    function SynchronizedArrayListWrapper_RemoveAt (index) {
      var syncRoot = null;
      var flag = new JSIL.Variable(false);
      try {
        $T04().Enter((syncRoot = this.m_SyncRoot), /* ref */ flag);
        this.m_InnerArrayList.RemoveAt(index);
      } finally {
        if (flag.value) {
          $T04().Exit(syncRoot);
        }
      }
    }
  );

  $.Method({Static:false, Public:true }, "RemoveRange", 
    $sig.make(0x106B, null, [$asm01.TypeRef("System.Int32"), $asm01.TypeRef("System.Int32")], []), 
    function SynchronizedArrayListWrapper_RemoveRange (index, count) {
      var syncRoot = null;
      var flag = new JSIL.Variable(false);
      try {
        $T04().Enter((syncRoot = this.m_SyncRoot), /* ref */ flag);
        this.m_InnerArrayList.RemoveRange(index, count);
      } finally {
        if (flag.value) {
          $T04().Exit(syncRoot);
        }
      }
    }
  );

  $.Method({Static:false, Public:true }, "Reverse", 
    $sig.make(0x106E, null, [], []), 
    function SynchronizedArrayListWrapper_Reverse () {
      var syncRoot = null;
      var flag = new JSIL.Variable(false);
      try {
        $T04().Enter((syncRoot = this.m_SyncRoot), /* ref */ flag);
        this.m_InnerArrayList.Reverse();
      } finally {
        if (flag.value) {
          $T04().Exit(syncRoot);
        }
      }
    }
  );

  $.Method({Static:false, Public:true }, "Reverse", 
    $sig.make(0x106F, null, [$asm01.TypeRef("System.Int32"), $asm01.TypeRef("System.Int32")], []), 
    function SynchronizedArrayListWrapper_Reverse (index, count) {
      var syncRoot = null;
      var flag = new JSIL.Variable(false);
      try {
        $T04().Enter((syncRoot = this.m_SyncRoot), /* ref */ flag);
        this.m_InnerArrayList.Reverse(index, count);
      } finally {
        if (flag.value) {
          $T04().Exit(syncRoot);
        }
      }
    }
  );

  $.Method({Static:false, Public:true }, "set_Capacity", 
    $sig.make(0x1038, null, [$asm01.TypeRef("System.Int32")], []), 
    function SynchronizedArrayListWrapper_set_Capacity (value) {
      var syncRoot = null;
      var flag = new JSIL.Variable(false);
      try {
        $T04().Enter((syncRoot = this.m_SyncRoot), /* ref */ flag);
        this.m_InnerArrayList.set_Capacity(value);
      } finally {
        if (flag.value) {
          $T04().Exit(syncRoot);
        }
      }
    }
  );

  $.Method({Static:false, Public:true }, "set_Item", 
    $sig.make(0x1033, null, [$asm01.TypeRef("System.Int32"), $asm01.TypeRef("System.Object")], []), 
    function SynchronizedArrayListWrapper_set_Item (index, value) {
      var syncRoot = null;
      var flag = new JSIL.Variable(false);
      try {
        $T04().Enter((syncRoot = this.m_SyncRoot), /* ref */ flag);
        this.m_InnerArrayList.set_Item(index, value);
      } finally {
        if (flag.value) {
          $T04().Exit(syncRoot);
        }
      }
    }
  );

  $.Method({Static:false, Public:true }, "Sort", 
    $sig.make(0x1094, null, [], []), 
    function SynchronizedArrayListWrapper_Sort () {
      var syncRoot = null;
      var flag = new JSIL.Variable(false);
      try {
        $T04().Enter((syncRoot = this.m_SyncRoot), /* ref */ flag);
        this.m_InnerArrayList.Sort();
      } finally {
        if (flag.value) {
          $T04().Exit(syncRoot);
        }
      }
    }
  );

  $.Method({Static:false, Public:true }, "Sort", 
    $sig.make(0x1095, null, [$asm01.TypeRef("System.Collections.IComparer")], []), 
    function SynchronizedArrayListWrapper_Sort (comparer) {
      var syncRoot = null;
      var flag = new JSIL.Variable(false);
      try {
        $T04().Enter((syncRoot = this.m_SyncRoot), /* ref */ flag);
        this.m_InnerArrayList.Sort(comparer);
      } finally {
        if (flag.value) {
          $T04().Exit(syncRoot);
        }
      }
    }
  );

  $.Method({Static:false, Public:true }, "Sort", 
    $sig.make(0x1097, null, [
        $asm01.TypeRef("System.Int32"), $asm01.TypeRef("System.Int32"), 
        $asm01.TypeRef("System.Collections.IComparer")
      ], []), 
    function SynchronizedArrayListWrapper_Sort (index, count, comparer) {
      var syncRoot = null;
      var flag = new JSIL.Variable(false);
      try {
        $T04().Enter((syncRoot = this.m_SyncRoot), /* ref */ flag);
        this.m_InnerArrayList.Sort(index, count, comparer);
      } finally {
        if (flag.value) {
          $T04().Exit(syncRoot);
        }
      }
    }
  );

  $.Method({Static:false, Public:true }, "ToArray", 
    $sig.make(0x1098, $jsilcore.TypeRef("System.Array", [$asm01.TypeRef("System.Object")]), [], []), 
    function SynchronizedArrayListWrapper_ToArray () {
      var syncRoot = null;
      var flag = new JSIL.Variable(false);
      try {
        $T04().Enter((syncRoot = this.m_SyncRoot), /* ref */ flag);
        var result = this.m_InnerArrayList.ToArray();
      } finally {
        if (flag.value) {
          $T04().Exit(syncRoot);
        }
      }
      return result;
    }
  );

  $.Method({Static:false, Public:true }, "ToArray", 
    $sig.make(0x109B, $asm01.TypeRef("System.Array"), [$asm01.TypeRef("System.Type")], []), 
    function SynchronizedArrayListWrapper_ToArray (elementType) {
      var syncRoot = null;
      var flag = new JSIL.Variable(false);
      try {
        $T04().Enter((syncRoot = this.m_SyncRoot), /* ref */ flag);
        var result = this.m_InnerArrayList.ToArray(elementType);
      } finally {
        if (flag.value) {
          $T04().Exit(syncRoot);
        }
      }
      return result;
    }
  );

  $.Method({Static:false, Public:true }, "TrimToSize", 
    $sig.make(0x1091, null, [], []), 
    function SynchronizedArrayListWrapper_TrimToSize () {
      var syncRoot = null;
      var flag = new JSIL.Variable(false);
      try {
        $T04().Enter((syncRoot = this.m_SyncRoot), /* ref */ flag);
        this.m_InnerArrayList.TrimToSize();
      } finally {
        if (flag.value) {
          $T04().Exit(syncRoot);
        }
      }
    }
  );

  $.Field({Static:false, Public:false}, "m_SyncRoot", $asm01.TypeRef("System.Object")); 
  $.Property({Static:false, Public:true , Virtual:true }, "Item", $asm01.TypeRef("System.Object"));

  $.Property({Static:false, Public:true , Virtual:true }, "Count", $asm01.TypeRef("System.Int32"));

  $.Property({Static:false, Public:true , Virtual:true }, "Capacity", $asm01.TypeRef("System.Int32"));

  $.Property({Static:false, Public:true , Virtual:true }, "IsFixedSize", $asm01.TypeRef("System.Boolean"));

  $.Property({Static:false, Public:true , Virtual:true }, "IsReadOnly", $asm01.TypeRef("System.Boolean"));

  $.Property({Static:false, Public:true , Virtual:true }, "IsSynchronized", $asm01.TypeRef("System.Boolean"));

  $.Property({Static:false, Public:true , Virtual:true }, "SyncRoot", $asm01.TypeRef("System.Object"));

})
  .Attribute($asm01.TypeRef("System.Reflection.DefaultMemberAttribute"), function () { return ["Item"]; });

JSIL.MakeClass($asm01.TypeRef("System.Collections.ArrayList/ArrayListWrapper"), "System.Collections.ArrayList/FixedSizeArrayListWrapper", false, [], function ($) {
  var $thisType = $.publicInterface;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm01.System.Collections.ArrayList)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm01.System.Collections.ArrayList_ArrayListWrapper)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm01.System.Object)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm01.System.NotSupportedException)) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize($asm01.System.Collections.ICollection)) ();
  };
  var $T05 = function () {
    return ($T05 = JSIL.Memoize($asm01.System.Int32)) ();
  };

  $.Method({Static:false, Public:true }, ".ctor", 
    $sig.make(0x10CB, null, [$asm01.TypeRef("System.Collections.ArrayList")], []), 
    function FixedSizeArrayListWrapper__ctor (innerList) {
      $T01().prototype._ctor.call(this, innerList);
    }
  );

  $.Method({Static:false, Public:true }, "Add", 
    $sig.make(0x10CC, $asm01.TypeRef("System.Int32"), [$asm01.TypeRef("System.Object")], []), 
    function FixedSizeArrayListWrapper_Add (value) {
      throw new ($T03())(this.get_ErrorMessage());
    }
  );

  $.Method({Static:false, Public:true }, "AddRange", 
    $sig.make(0x10CD, null, [$asm01.TypeRef("System.Collections.ICollection")], []), 
    function FixedSizeArrayListWrapper_AddRange (c) {
      throw new ($T03())(this.get_ErrorMessage());
    }
  );

  $.Method({Static:false, Public:true }, "Clear", 
    $sig.make(0x10CE, null, [], []), 
    function FixedSizeArrayListWrapper_Clear () {
      throw new ($T03())(this.get_ErrorMessage());
    }
  );

  $.Method({Static:false, Public:true }, "get_Capacity", 
    $sig.make(0x10C8, $asm01.TypeRef("System.Int32"), [], []), 
    function FixedSizeArrayListWrapper_get_Capacity () {
      return $T01().prototype.get_Capacity.call(this);
    }
  );

  $.Method({Static:false, Public:false}, "get_ErrorMessage", 
    $sig.make(0x10C7, $asm01.TypeRef("System.String"), [], []), 
    function FixedSizeArrayListWrapper_get_ErrorMessage () {
      return "Can't add or remove from a fixed-size list.";
    }
  );

  $.Method({Static:false, Public:true }, "get_IsFixedSize", 
    $sig.make(0x10CA, $asm01.TypeRef("System.Boolean"), [], []), 
    function FixedSizeArrayListWrapper_get_IsFixedSize () {
      return true;
    }
  );

  $.Method({Static:false, Public:true }, "Insert", 
    $sig.make(0x10CF, null, [$asm01.TypeRef("System.Int32"), $asm01.TypeRef("System.Object")], []), 
    function FixedSizeArrayListWrapper_Insert (index, value) {
      throw new ($T03())(this.get_ErrorMessage());
    }
  );

  $.Method({Static:false, Public:true }, "InsertRange", 
    $sig.make(0x10D0, null, [$asm01.TypeRef("System.Int32"), $asm01.TypeRef("System.Collections.ICollection")], []), 
    function FixedSizeArrayListWrapper_InsertRange (index, c) {
      throw new ($T03())(this.get_ErrorMessage());
    }
  );

  $.Method({Static:false, Public:true }, "Remove", 
    $sig.make(0x10D1, null, [$asm01.TypeRef("System.Object")], []), 
    function FixedSizeArrayListWrapper_Remove (value) {
      throw new ($T03())(this.get_ErrorMessage());
    }
  );

  $.Method({Static:false, Public:true }, "RemoveAt", 
    $sig.make(0x10D2, null, [$asm01.TypeRef("System.Int32")], []), 
    function FixedSizeArrayListWrapper_RemoveAt (index) {
      throw new ($T03())(this.get_ErrorMessage());
    }
  );

  $.Method({Static:false, Public:true }, "RemoveRange", 
    $sig.make(0x10D3, null, [$asm01.TypeRef("System.Int32"), $asm01.TypeRef("System.Int32")], []), 
    function FixedSizeArrayListWrapper_RemoveRange (index, count) {
      throw new ($T03())(this.get_ErrorMessage());
    }
  );

  $.Method({Static:false, Public:true }, "set_Capacity", 
    $sig.make(0x10C9, null, [$asm01.TypeRef("System.Int32")], []), 
    function FixedSizeArrayListWrapper_set_Capacity (value) {
      throw new ($T03())(this.get_ErrorMessage());
    }
  );

  $.Method({Static:false, Public:true }, "TrimToSize", 
    $sig.make(0x10D4, null, [], []), 
    function FixedSizeArrayListWrapper_TrimToSize () {
      throw new ($T03())(this.get_ErrorMessage());
    }
  );

  $.Property({Static:false, Public:false, Virtual:true }, "ErrorMessage", $asm01.TypeRef("System.String"));

  $.Property({Static:false, Public:true , Virtual:true }, "Capacity", $asm01.TypeRef("System.Int32"));

  $.Property({Static:false, Public:true , Virtual:true }, "IsFixedSize", $asm01.TypeRef("System.Boolean"));

});

JSIL.MakeClass($asm01.TypeRef("System.Collections.ArrayList/FixedSizeArrayListWrapper"), "System.Collections.ArrayList/ReadOnlyArrayListWrapper", false, [], function ($) {
  var $thisType = $.publicInterface;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm01.System.Collections.ArrayList)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm01.System.Collections.ArrayList_FixedSizeArrayListWrapper)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm01.System.Int32)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm01.System.NotSupportedException)) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize($asm01.System.Object)) ();
  };
  var $T05 = function () {
    return ($T05 = JSIL.Memoize($asm01.System.Collections.ICollection)) ();
  };
  var $T06 = function () {
    return ($T06 = JSIL.Memoize($asm01.System.Collections.IComparer)) ();
  };

  $.Method({Static:false, Public:true }, ".ctor", 
    $sig.make(0x10DF, null, [$asm01.TypeRef("System.Collections.ArrayList")], []), 
    function ReadOnlyArrayListWrapper__ctor (innerArrayList) {
      $T01().prototype._ctor.call(this, innerArrayList);
    }
  );

  $.Method({Static:false, Public:false}, "get_ErrorMessage", 
    $sig.make(0x10DB, $asm01.TypeRef("System.String"), [], []), 
    function ReadOnlyArrayListWrapper_get_ErrorMessage () {
      return "Can't modify a readonly list.";
    }
  );

  $.Method({Static:false, Public:true }, "get_IsReadOnly", 
    $sig.make(0x10DC, $asm01.TypeRef("System.Boolean"), [], []), 
    function ReadOnlyArrayListWrapper_get_IsReadOnly () {
      return true;
    }
  );

  $.Method({Static:false, Public:true }, "get_Item", 
    $sig.make(0x10DD, $asm01.TypeRef("System.Object"), [$asm01.TypeRef("System.Int32")], []), 
    function ReadOnlyArrayListWrapper_get_Item (index) {
      return this.m_InnerArrayList.get_Item(index);
    }
  );

  $.Method({Static:false, Public:true }, "Reverse", 
    $sig.make(0x10E0, null, [], []), 
    function ReadOnlyArrayListWrapper_Reverse () {
      throw new ($T03())(this.get_ErrorMessage());
    }
  );

  $.Method({Static:false, Public:true }, "Reverse", 
    $sig.make(0x10E1, null, [$asm01.TypeRef("System.Int32"), $asm01.TypeRef("System.Int32")], []), 
    function ReadOnlyArrayListWrapper_Reverse (index, count) {
      throw new ($T03())(this.get_ErrorMessage());
    }
  );

  $.Method({Static:false, Public:true }, "set_Item", 
    $sig.make(0x10DE, null, [$asm01.TypeRef("System.Int32"), $asm01.TypeRef("System.Object")], []), 
    function ReadOnlyArrayListWrapper_set_Item (index, value) {
      throw new ($T03())(this.get_ErrorMessage());
    }
  );

  $.Method({Static:false, Public:true }, "SetRange", 
    $sig.make(0x10E2, null, [$asm01.TypeRef("System.Int32"), $asm01.TypeRef("System.Collections.ICollection")], []), 
    function ReadOnlyArrayListWrapper_SetRange (index, c) {
      throw new ($T03())(this.get_ErrorMessage());
    }
  );

  $.Method({Static:false, Public:true }, "Sort", 
    $sig.make(0x10E3, null, [], []), 
    function ReadOnlyArrayListWrapper_Sort () {
      throw new ($T03())(this.get_ErrorMessage());
    }
  );

  $.Method({Static:false, Public:true }, "Sort", 
    $sig.make(0x10E4, null, [$asm01.TypeRef("System.Collections.IComparer")], []), 
    function ReadOnlyArrayListWrapper_Sort (comparer) {
      throw new ($T03())(this.get_ErrorMessage());
    }
  );

  $.Method({Static:false, Public:true }, "Sort", 
    $sig.make(0x10E5, null, [
        $asm01.TypeRef("System.Int32"), $asm01.TypeRef("System.Int32"), 
        $asm01.TypeRef("System.Collections.IComparer")
      ], []), 
    function ReadOnlyArrayListWrapper_Sort (index, count, comparer) {
      throw new ($T03())(this.get_ErrorMessage());
    }
  );

  $.Property({Static:false, Public:false, Virtual:true }, "ErrorMessage", $asm01.TypeRef("System.String"));

  $.Property({Static:false, Public:true , Virtual:true }, "IsReadOnly", $asm01.TypeRef("System.Boolean"));

  $.Property({Static:false, Public:true , Virtual:true }, "Item", $asm01.TypeRef("System.Object"));

})
  .Attribute($asm01.TypeRef("System.Reflection.DefaultMemberAttribute"), function () { return ["Item"]; });

JSIL.MakeClass($asm01.TypeRef("System.Collections.ArrayList/ArrayListWrapper"), "System.Collections.ArrayList/RangedArrayList", false, [], function ($) {
  var $thisType = $.publicInterface;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm01.System.Collections.ArrayList)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm01.System.Int32)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm01.System.Collections.ArrayList_ArrayListWrapper)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm01.System.Object)) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize($asm01.System.Collections.ICollection)) ();
  };
  var $T05 = function () {
    return ($T05 = JSIL.Memoize($asm01.System.Collections.Comparer)) ();
  };
  var $T06 = function () {
    return ($T06 = JSIL.Memoize($asm01.System.Collections.IComparer)) ();
  };
  var $T07 = function () {
    return ($T07 = JSIL.Memoize($asm01.System.Array)) ();
  };
  var $T08 = function () {
    return ($T08 = JSIL.Memoize($asm01.System.ArgumentOutOfRangeException)) ();
  };
  var $T09 = function () {
    return ($T09 = JSIL.Memoize(System.Array.Of($asm01.System.Object))) ();
  };
  var $T0A = function () {
    return ($T0A = JSIL.Memoize($asm01.System.Type)) ();
  };
  var $T0B = function () {
    return ($T0B = JSIL.Memoize($asm01.System.Void)) ();
  };
  var $T0C = function () {
    return ($T0C = JSIL.Memoize($asm01.System.NotSupportedException)) ();
  };
  var $T0D = function () {
    return ($T0D = JSIL.Memoize($asm01.System.InvalidOperationException)) ();
  };

  $.Method({Static:false, Public:true }, ".ctor", 
    $sig.make(0x105B, null, [
        $asm01.TypeRef("System.Collections.ArrayList"), $asm01.TypeRef("System.Int32"), 
        $asm01.TypeRef("System.Int32")
      ], []), 
    function RangedArrayList__ctor (innerList, index, count) {
      $T02().prototype._ctor.call(this, innerList);
      this.m_InnerIndex = index;
      this.m_InnerCount = count;
      this.m_InnerStateChanges = innerList._version;
    }
  );

  $.Method({Static:false, Public:true }, "Add", 
    $sig.make(0x1064, $asm01.TypeRef("System.Int32"), [$asm01.TypeRef("System.Object")], []), 
    function RangedArrayList_Add (value) {
      this.VerifyStateChanges();
      this.m_InnerArrayList.Insert(((this.m_InnerIndex + this.m_InnerCount) | 0), value);
      this.m_InnerStateChanges = this.m_InnerArrayList._version;
      return ++this.m_InnerCount;
    }
  );

  $.Method({Static:false, Public:true }, "AddRange", 
    $sig.make(0x10B1, null, [$asm01.TypeRef("System.Collections.ICollection")], []), 
    function RangedArrayList_AddRange (c) {
      this.VerifyStateChanges();
      this.m_InnerArrayList.InsertRange(this.m_InnerCount, c);
      this.m_InnerCount += c.ICollection_get_Count();
      this.m_InnerStateChanges = this.m_InnerArrayList._version;
    }
  );

  $.Method({Static:false, Public:true }, "BinarySearch", 
    $sig.make(0x10B3, $asm01.TypeRef("System.Int32"), [$asm01.TypeRef("System.Object")], []), 
    function RangedArrayList_BinarySearch (value) {
      return this.BinarySearch(0, this.m_InnerCount, value, $T05().Default);
    }
  );

  $.Method({Static:false, Public:true }, "BinarySearch", 
    $sig.make(0x10B5, $asm01.TypeRef("System.Int32"), [$asm01.TypeRef("System.Object"), $asm01.TypeRef("System.Collections.IComparer")], []), 
    function RangedArrayList_BinarySearch (value, comparer) {
      return this.BinarySearch(0, this.m_InnerCount, value, comparer);
    }
  );

  $.Method({Static:false, Public:true }, "BinarySearch", 
    $sig.make(0x10B6, $asm01.TypeRef("System.Int32"), [
        $asm01.TypeRef("System.Int32"), $asm01.TypeRef("System.Int32"), 
        $asm01.TypeRef("System.Object"), $asm01.TypeRef("System.Collections.IComparer")
      ], []), 
    function RangedArrayList_BinarySearch (index, count, value, comparer) {
      $T00().CheckRange(index, count, this.m_InnerCount);
      return this.m_InnerArrayList.BinarySearch(((this.m_InnerIndex + index) | 0), count, value, comparer);
    }
  );

  $.Method({Static:false, Public:true }, "Clear", 
    $sig.make(0x1068, null, [], []), 
    function RangedArrayList_Clear () {
      this.VerifyStateChanges();
      this.m_InnerArrayList.RemoveRange(this.m_InnerIndex, this.m_InnerCount);
      this.m_InnerCount = 0;
      this.m_InnerStateChanges = this.m_InnerArrayList._version;
    }
  );

  $.Method({Static:false, Public:true }, "Clone", 
    $sig.make(0x10B8, $asm01.TypeRef("System.Object"), [], []), 
    function RangedArrayList_Clone () {
      return new $thisType($T00().$Cast(this.m_InnerArrayList.Clone()), this.m_InnerIndex, this.m_InnerCount);
    }
  );

  $.Method({Static:false, Public:true }, "Contains", 
    $sig.make(0x106C, $asm01.TypeRef("System.Boolean"), [$asm01.TypeRef("System.Object")], []), 
    function RangedArrayList_Contains (value) {
      return this.m_InnerArrayList.Contains(value, this.m_InnerIndex, this.m_InnerCount);
    }
  );

  $.Method({Static:false, Public:true }, "CopyTo", 
    $sig.make(0x10A7, null, [$asm01.TypeRef("System.Array")], []), 
    function RangedArrayList_CopyTo (array) {
      this.CopyTo(array, 0);
    }
  );

  $.Method({Static:false, Public:true }, "CopyTo", 
    $sig.make(0x10A9, null, [$asm01.TypeRef("System.Array"), $asm01.TypeRef("System.Int32")], []), 
    function RangedArrayList_CopyTo (array, index) {
      this.CopyTo(0, array, index, this.m_InnerCount);
    }
  );

  $.Method({Static:false, Public:true }, "CopyTo", 
    $sig.make(0x10AC, null, [
        $asm01.TypeRef("System.Int32"), $asm01.TypeRef("System.Array"), 
        $asm01.TypeRef("System.Int32"), $asm01.TypeRef("System.Int32")
      ], []), 
    function RangedArrayList_CopyTo (index, array, arrayIndex, count) {
      $T00().CheckRange(index, count, this.m_InnerCount);
      this.m_InnerArrayList.CopyTo(((this.m_InnerIndex + index) | 0), array, arrayIndex, count);
    }
  );

  $.Method({Static:false, Public:true }, "get_Capacity", 
    $sig.make(0x103E, $asm01.TypeRef("System.Int32"), [], []), 
    function RangedArrayList_get_Capacity () {
      return this.m_InnerArrayList.get_Capacity();
    }
  );

  $.Method({Static:false, Public:true }, "get_Count", 
    $sig.make(0x103A, $asm01.TypeRef("System.Int32"), [], []), 
    function RangedArrayList_get_Count () {
      this.VerifyStateChanges();
      return this.m_InnerCount;
    }
  );

  $.Method({Static:false, Public:true }, "get_IsSynchronized", 
    $sig.make(0x1031, $asm01.TypeRef("System.Boolean"), [], []), 
    function RangedArrayList_get_IsSynchronized () {
      return false;
    }
  );

  $.Method({Static:false, Public:true }, "get_Item", 
    $sig.make(0x1035, $asm01.TypeRef("System.Object"), [$asm01.TypeRef("System.Int32")], []), 
    function RangedArrayList_get_Item (index) {
      if (!((index >= 0) && (index <= this.m_InnerCount))) {
        throw new ($T08())("index");
      }
      return this.m_InnerArrayList.get_Item(((this.m_InnerIndex + index) | 0));
    }
  );

  $.Method({Static:false, Public:true }, "GetEnumerator", 
    $sig.make(0x10AE, $asm01.TypeRef("System.Collections.IEnumerator"), [], []), 
    function RangedArrayList_GetEnumerator () {
      return this.GetEnumerator(0, this.m_InnerCount);
    }
  );

  $.Method({Static:false, Public:true }, "GetEnumerator", 
    $sig.make(0x10B0, $asm01.TypeRef("System.Collections.IEnumerator"), [$asm01.TypeRef("System.Int32"), $asm01.TypeRef("System.Int32")], []), 
    function RangedArrayList_GetEnumerator (index, count) {
      $T00().CheckRange(index, count, this.m_InnerCount);
      return this.m_InnerArrayList.GetEnumerator(((this.m_InnerIndex + index) | 0), count);
    }
  );

  $.Method({Static:false, Public:true }, "GetRange", 
    $sig.make(0x10BA, $asm01.TypeRef("System.Collections.ArrayList"), [$asm01.TypeRef("System.Int32"), $asm01.TypeRef("System.Int32")], []), 
    function RangedArrayList_GetRange (index, count) {
      $T00().CheckRange(index, count, this.m_InnerCount);
      return new $thisType(this, index, count);
    }
  );

  $.Method({Static:false, Public:true }, "IndexOf", 
    $sig.make(0x1071, $asm01.TypeRef("System.Int32"), [$asm01.TypeRef("System.Object")], []), 
    function RangedArrayList_IndexOf (value) {
      return this.IndexOf(value, 0);
    }
  );

  $.Method({Static:false, Public:true }, "IndexOf", 
    $sig.make(0x1073, $asm01.TypeRef("System.Int32"), [$asm01.TypeRef("System.Object"), $asm01.TypeRef("System.Int32")], []), 
    function RangedArrayList_IndexOf (value, startIndex) {
      return this.IndexOf(value, startIndex, ((this.m_InnerCount - startIndex) | 0));
    }
  );

  $.Method({Static:false, Public:true }, "IndexOf", 
    $sig.make(0x1077, $asm01.TypeRef("System.Int32"), [
        $asm01.TypeRef("System.Object"), $asm01.TypeRef("System.Int32"), 
        $asm01.TypeRef("System.Int32")
      ], []), 
    function RangedArrayList_IndexOf (value, startIndex, count) {
      if (!((startIndex >= 0) && (startIndex <= this.m_InnerCount))) {
        $T00().ThrowNewArgumentOutOfRangeException("startIndex", startIndex, "Does not specify valid index.");
      }
      if (count < 0) {
        $T00().ThrowNewArgumentOutOfRangeException("count", count, "Can't be less than 0.");
      }
      if (startIndex > ((this.m_InnerCount - count) | 0)) {
        throw $sig.get(0xCA7, null, [$asm01.System.String, $asm01.System.String], []).Construct($T08(), "count", "Start index and count do not specify a valid range.");
      }
      var retval = this.m_InnerArrayList.IndexOf(value, ((this.m_InnerIndex + startIndex) | 0), count);
      if (retval === -1) {
        var result = -1;
      } else {
        result = ((retval - this.m_InnerIndex) | 0);
      }
      return result;
    }
  );

  $.Method({Static:false, Public:true }, "Insert", 
    $sig.make(0x108C, null, [$asm01.TypeRef("System.Int32"), $asm01.TypeRef("System.Object")], []), 
    function RangedArrayList_Insert (index, value) {
      this.VerifyStateChanges();
      if (!((index >= 0) && (index <= this.m_InnerCount))) {
        $T00().ThrowNewArgumentOutOfRangeException("index", index, "Index must be >= 0 and <= Count.");
      }
      this.m_InnerArrayList.Insert(((this.m_InnerIndex + index) | 0), value);
      ++this.m_InnerCount;
      this.m_InnerStateChanges = this.m_InnerArrayList._version;
    }
  );

  $.Method({Static:false, Public:true }, "InsertRange", 
    $sig.make(0x1090, null, [$asm01.TypeRef("System.Int32"), $asm01.TypeRef("System.Collections.ICollection")], []), 
    function RangedArrayList_InsertRange (index, c) {
      this.VerifyStateChanges();
      if (!((index >= 0) && (index <= this.m_InnerCount))) {
        $T00().ThrowNewArgumentOutOfRangeException("index", index, "Index must be >= 0 and <= Count.");
      }
      this.m_InnerArrayList.InsertRange(((this.m_InnerIndex + index) | 0), c);
      this.m_InnerCount += c.ICollection_get_Count();
      this.m_InnerStateChanges = this.m_InnerArrayList._version;
    }
  );

  $.Method({Static:false, Public:true }, "LastIndexOf", 
    $sig.make(0x107F, $asm01.TypeRef("System.Int32"), [$asm01.TypeRef("System.Object")], []), 
    function RangedArrayList_LastIndexOf (value) {
      return this.LastIndexOf(value, ((this.m_InnerCount - 1) | 0));
    }
  );

  $.Method({Static:false, Public:true }, "LastIndexOf", 
    $sig.make(0x1083, $asm01.TypeRef("System.Int32"), [$asm01.TypeRef("System.Object"), $asm01.TypeRef("System.Int32")], []), 
    function RangedArrayList_LastIndexOf (value, startIndex) {
      return this.LastIndexOf(value, startIndex, ((startIndex + 1) | 0));
    }
  );

  $.Method({Static:false, Public:true }, "LastIndexOf", 
    $sig.make(0x1088, $asm01.TypeRef("System.Int32"), [
        $asm01.TypeRef("System.Object"), $asm01.TypeRef("System.Int32"), 
        $asm01.TypeRef("System.Int32")
      ], []), 
    function RangedArrayList_LastIndexOf (value, startIndex, count) {
      if (startIndex < 0) {
        $T00().ThrowNewArgumentOutOfRangeException("startIndex", startIndex, "< 0");
      }
      if (count < 0) {
        $T00().ThrowNewArgumentOutOfRangeException("count", count, "count is negative.");
      }
      var retval = this.m_InnerArrayList.LastIndexOf(value, ((this.m_InnerIndex + startIndex) | 0), count);
      if (retval === -1) {
        var result = -1;
      } else {
        result = ((retval - this.m_InnerIndex) | 0);
      }
      return result;
    }
  );

  $.Method({Static:false, Public:true }, "Remove", 
    $sig.make(0x1093, null, [$asm01.TypeRef("System.Object")], []), 
    function RangedArrayList_Remove (value) {
      this.VerifyStateChanges();
      var x = this.IndexOf(value);
      if (x > -1) {
        this.RemoveAt(x);
      }
      this.m_InnerStateChanges = this.m_InnerArrayList._version;
    }
  );

  $.Method({Static:false, Public:true }, "RemoveAt", 
    $sig.make(0x1096, null, [$asm01.TypeRef("System.Int32")], []), 
    function RangedArrayList_RemoveAt (index) {
      this.VerifyStateChanges();
      if (!((index >= 0) && (index <= this.m_InnerCount))) {
        $T00().ThrowNewArgumentOutOfRangeException("index", index, "Index must be >= 0 and <= Count.");
      }
      this.m_InnerArrayList.RemoveAt(((this.m_InnerIndex + index) | 0));
      --this.m_InnerCount;
      this.m_InnerStateChanges = this.m_InnerArrayList._version;
    }
  );

  $.Method({Static:false, Public:true }, "RemoveRange", 
    $sig.make(0x1099, null, [$asm01.TypeRef("System.Int32"), $asm01.TypeRef("System.Int32")], []), 
    function RangedArrayList_RemoveRange (index, count) {
      this.VerifyStateChanges();
      $T00().CheckRange(index, count, this.m_InnerCount);
      this.m_InnerArrayList.RemoveRange(((this.m_InnerIndex + index) | 0), count);
      this.m_InnerCount -= count;
      this.m_InnerStateChanges = this.m_InnerArrayList._version;
    }
  );

  $.Method({Static:false, Public:true }, "Reverse", 
    $sig.make(0x109C, null, [], []), 
    function RangedArrayList_Reverse () {
      this.Reverse(0, this.m_InnerCount);
    }
  );

  $.Method({Static:false, Public:true }, "Reverse", 
    $sig.make(0x109F, null, [$asm01.TypeRef("System.Int32"), $asm01.TypeRef("System.Int32")], []), 
    function RangedArrayList_Reverse (index, count) {
      this.VerifyStateChanges();
      $T00().CheckRange(index, count, this.m_InnerCount);
      this.m_InnerArrayList.Reverse(((this.m_InnerIndex + index) | 0), count);
      this.m_InnerStateChanges = this.m_InnerArrayList._version;
    }
  );

  $.Method({Static:false, Public:true }, "set_Capacity", 
    $sig.make(0x105A, null, [$asm01.TypeRef("System.Int32")], []), 
    function RangedArrayList_set_Capacity (value) {
      if (value < this.m_InnerCount) {
        throw new ($T08())();
      }
    }
  );

  $.Method({Static:false, Public:true }, "set_Item", 
    $sig.make(0x1037, null, [$asm01.TypeRef("System.Int32"), $asm01.TypeRef("System.Object")], []), 
    function RangedArrayList_set_Item (index, value) {
      if (!((index >= 0) && (index <= this.m_InnerCount))) {
        throw new ($T08())("index");
      }
      this.m_InnerArrayList.set_Item(((this.m_InnerIndex + index) | 0), value);
    }
  );

  $.Method({Static:false, Public:true }, "SetRange", 
    $sig.make(0x10A5, null, [$asm01.TypeRef("System.Int32"), $asm01.TypeRef("System.Collections.ICollection")], []), 
    function RangedArrayList_SetRange (index, c) {
      this.VerifyStateChanges();
      if (!((index >= 0) && (index <= this.m_InnerCount))) {
        $T00().ThrowNewArgumentOutOfRangeException("index", index, "Index must be >= 0 and <= Count.");
      }
      this.m_InnerArrayList.SetRange(((this.m_InnerIndex + index) | 0), c);
      this.m_InnerStateChanges = this.m_InnerArrayList._version;
    }
  );

  $.Method({Static:false, Public:true }, "Sort", 
    $sig.make(0x10BC, null, [], []), 
    function RangedArrayList_Sort () {
      this.Sort($T05().Default);
    }
  );

  $.Method({Static:false, Public:true }, "Sort", 
    $sig.make(0x10BD, null, [$asm01.TypeRef("System.Collections.IComparer")], []), 
    function RangedArrayList_Sort (comparer) {
      this.Sort(0, this.m_InnerCount, comparer);
    }
  );

  $.Method({Static:false, Public:true }, "Sort", 
    $sig.make(0x10BE, null, [
        $asm01.TypeRef("System.Int32"), $asm01.TypeRef("System.Int32"), 
        $asm01.TypeRef("System.Collections.IComparer")
      ], []), 
    function RangedArrayList_Sort (index, count, comparer) {
      this.VerifyStateChanges();
      $T00().CheckRange(index, count, this.m_InnerCount);
      this.m_InnerArrayList.Sort(((this.m_InnerIndex + index) | 0), count, comparer);
      this.m_InnerStateChanges = this.m_InnerArrayList._version;
    }
  );

  $.Method({Static:false, Public:true }, "ToArray", 
    $sig.make(0x10BF, $jsilcore.TypeRef("System.Array", [$asm01.TypeRef("System.Object")]), [], []), 
    function RangedArrayList_ToArray () {
      var array = JSIL.Array.New($T03(), this.m_InnerCount);
      this.m_InnerArrayList.CopyTo(this.m_InnerIndex, array, 0, this.m_InnerCount);
      return array;
    }
  );

  $.Method({Static:false, Public:true }, "ToArray", 
    $sig.make(0x10C0, $asm01.TypeRef("System.Array"), [$asm01.TypeRef("System.Type")], []), 
    function RangedArrayList_ToArray (elementType) {
      var array = (JSIL.Array.New(elementType, this.m_InnerCount));
      this.m_InnerArrayList.CopyTo(this.m_InnerIndex, array, 0, this.m_InnerCount);
      return array;
    }
  );

  $.Method({Static:false, Public:true }, "TrimToSize", 
    $sig.make(0x10BB, null, [], []), 
    function RangedArrayList_TrimToSize () {
      throw new ($T0C())();
    }
  );

  $.Method({Static:false, Public:false}, "VerifyStateChanges", 
    $sig.make(0x105F, null, [], []), 
    function RangedArrayList_VerifyStateChanges () {
      if (this.m_InnerStateChanges !== this.m_InnerArrayList._version) {
        throw new ($T0D())("ArrayList view is invalid because the underlying ArrayList was modified.");
      }
    }
  );

  $.Field({Static:false, Public:false}, "m_InnerIndex", $asm01.TypeRef("System.Int32")); 
  $.Field({Static:false, Public:false}, "m_InnerCount", $asm01.TypeRef("System.Int32")); 
  $.Field({Static:false, Public:false}, "m_InnerStateChanges", $asm01.TypeRef("System.Int32")); 
  $.Property({Static:false, Public:true , Virtual:true }, "IsSynchronized", $asm01.TypeRef("System.Boolean"));

  $.Property({Static:false, Public:true , Virtual:true }, "Item", $asm01.TypeRef("System.Object"));

  $.Property({Static:false, Public:true , Virtual:true }, "Count", $asm01.TypeRef("System.Int32"));

  $.Property({Static:false, Public:true , Virtual:true }, "Capacity", $asm01.TypeRef("System.Int32"));

})
  .Attribute($asm01.TypeRef("System.Reflection.DefaultMemberAttribute"), function () { return ["Item"]; });

JSIL.MakeClass($asm01.TypeRef("System.Object"), "System.Collections.ArrayList/ListWrapper", false, [], function ($) {
  var $thisType = $.publicInterface;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm01.System.Collections.IList)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm01.System.Object)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm01.System.Array)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm01.System.Int32)) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize($asm01.System.Collections.ICollection)) ();
  };
  var $T05 = function () {
    return ($T05 = JSIL.Memoize($asm01.System.Collections.IEnumerable)) ();
  };

  $.Method({Static:false, Public:true }, ".ctor", 
    $sig.make(0xFDA, null, [$asm01.TypeRef("System.Collections.IList")], []), 
    function ListWrapper__ctor (innerList) {
      this.m_InnerList = innerList;
    }
  );

  $.Method({Static:false, Public:true }, "Add", 
    $sig.make(0xFDF, $asm01.TypeRef("System.Int32"), [$asm01.TypeRef("System.Object")], []), 
    function ListWrapper_Add (value) {
      return this.m_InnerList.IList_Add(value);
    }
  );

  $.Method({Static:false, Public:true }, "Clear", 
    $sig.make(0xFE3, null, [], []), 
    function ListWrapper_Clear () {
      this.m_InnerList.IList_Clear();
    }
  );

  $.Method({Static:false, Public:true }, "Contains", 
    $sig.make(0xFE7, $asm01.TypeRef("System.Boolean"), [$asm01.TypeRef("System.Object")], []), 
    function ListWrapper_Contains (value) {
      return this.m_InnerList.IList_Contains(value);
    }
  );

  $.Method({Static:false, Public:true }, "CopyTo", 
    $sig.make(0xFFE, null, [$asm01.TypeRef("System.Array"), $asm01.TypeRef("System.Int32")], []), 
    function ListWrapper_CopyTo (array, index) {
      this.m_InnerList.ICollection_CopyTo(array, index);
    }
  );

  $.Method({Static:false, Public:true }, "get_Count", 
    $sig.make(0xFBC, $asm01.TypeRef("System.Int32"), [], []), 
    function ListWrapper_get_Count () {
      return this.m_InnerList.ICollection_get_Count();
    }
  );

  $.Method({Static:false, Public:true }, "get_IsFixedSize", 
    $sig.make(0xFD1, $asm01.TypeRef("System.Boolean"), [], []), 
    function ListWrapper_get_IsFixedSize () {
      return this.m_InnerList.IList_get_IsFixedSize();
    }
  );

  $.Method({Static:false, Public:true }, "get_IsReadOnly", 
    $sig.make(0xFD7, $asm01.TypeRef("System.Boolean"), [], []), 
    function ListWrapper_get_IsReadOnly () {
      return this.m_InnerList.IList_get_IsReadOnly();
    }
  );

  $.Method({Static:false, Public:true }, "get_IsSynchronized", 
    $sig.make(0xFBE, $asm01.TypeRef("System.Boolean"), [], []), 
    function ListWrapper_get_IsSynchronized () {
      return this.m_InnerList.ICollection_get_IsSynchronized();
    }
  );

  $.Method({Static:false, Public:true }, "get_Item", 
    $sig.make(0xFB6, $asm01.TypeRef("System.Object"), [$asm01.TypeRef("System.Int32")], []), 
    function ListWrapper_get_Item (index) {
      return this.m_InnerList.IList_get_Item(index);
    }
  );

  $.Method({Static:false, Public:true }, "get_SyncRoot", 
    $sig.make(0xFC3, $asm01.TypeRef("System.Object"), [], []), 
    function ListWrapper_get_SyncRoot () {
      return this.m_InnerList.ICollection_get_SyncRoot();
    }
  );

  $.Method({Static:false, Public:true }, "GetEnumerator", 
    $sig.make(0x1001, $asm01.TypeRef("System.Collections.IEnumerator"), [], []), 
    function ListWrapper_GetEnumerator () {
      return this.m_InnerList.IEnumerable_GetEnumerator();
    }
  );

  $.Method({Static:false, Public:true }, "IndexOf", 
    $sig.make(0xFED, $asm01.TypeRef("System.Int32"), [$asm01.TypeRef("System.Object")], []), 
    function ListWrapper_IndexOf (value) {
      return this.m_InnerList.IList_IndexOf(value);
    }
  );

  $.Method({Static:false, Public:true }, "Insert", 
    $sig.make(0xFF2, null, [$asm01.TypeRef("System.Int32"), $asm01.TypeRef("System.Object")], []), 
    function ListWrapper_Insert (index, value) {
      this.m_InnerList.IList_Insert(index, value);
    }
  );

  $.Method({Static:false, Public:true }, "Remove", 
    $sig.make(0xFF8, null, [$asm01.TypeRef("System.Object")], []), 
    function ListWrapper_Remove (value) {
      this.m_InnerList.IList_Remove(value);
    }
  );

  $.Method({Static:false, Public:true }, "RemoveAt", 
    $sig.make(0xFFB, null, [$asm01.TypeRef("System.Int32")], []), 
    function ListWrapper_RemoveAt (index) {
      this.m_InnerList.IList_RemoveAt(index);
    }
  );

  $.Method({Static:false, Public:true }, "set_Item", 
    $sig.make(0xFB8, null, [$asm01.TypeRef("System.Int32"), $asm01.TypeRef("System.Object")], []), 
    function ListWrapper_set_Item (index, value) {
      this.m_InnerList.IList_set_Item(index, value);
    }
  );

  $.Field({Static:false, Public:false}, "m_InnerList", $asm01.TypeRef("System.Collections.IList")); 
  $.Property({Static:false, Public:true , Virtual:true }, "Item", $asm01.TypeRef("System.Object"));

  $.Property({Static:false, Public:true , Virtual:true }, "Count", $asm01.TypeRef("System.Int32"));

  $.Property({Static:false, Public:true , Virtual:true }, "IsSynchronized", $asm01.TypeRef("System.Boolean"));

  $.Property({Static:false, Public:true , Virtual:true }, "SyncRoot", $asm01.TypeRef("System.Object"));

  $.Property({Static:false, Public:true , Virtual:true }, "IsFixedSize", $asm01.TypeRef("System.Boolean"));

  $.Property({Static:false, Public:true , Virtual:true }, "IsReadOnly", $asm01.TypeRef("System.Boolean"));

  $.ImplementInterfaces(
      $asm01.TypeRef("System.Collections.IList"), $asm01.TypeRef("System.Collections.ICollection"), 
      $asm01.TypeRef("System.Collections.IEnumerable")
  )
})
  .Attribute($asm01.TypeRef("System.Reflection.DefaultMemberAttribute"), function () { return ["Item"]; });

JSIL.MakeClass($asm01.TypeRef("System.Collections.ArrayList/ListWrapper"), "System.Collections.ArrayList/SynchronizedListWrapper", false, [], function ($) {
  var $thisType = $.publicInterface;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm01.System.Collections.IList)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm01.System.Collections.ArrayList_ListWrapper)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm01.System.Object)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm01.System.Boolean)) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize($asm01.System.Threading.Monitor)) ();
  };
  var $T05 = function () {
    return ($T05 = JSIL.Memoize($asm01.System.Int32)) ();
  };
  var $T06 = function () {
    return ($T06 = JSIL.Memoize($asm01.System.Array)) ();
  };
  var $T07 = function () {
    return ($T07 = JSIL.Memoize($asm01.System.Collections.ICollection)) ();
  };
  var $T08 = function () {
    return ($T08 = JSIL.Memoize($asm01.System.Collections.IEnumerator)) ();
  };
  var $T09 = function () {
    return ($T09 = JSIL.Memoize($asm01.System.Collections.IEnumerable)) ();
  };

  $.Method({Static:false, Public:true }, ".ctor", 
    $sig.make(0x1084, null, [$asm01.TypeRef("System.Collections.IList")], []), 
    function SynchronizedListWrapper__ctor (innerList) {
      $T01().prototype._ctor.call(this, innerList);
      this.m_SyncRoot = innerList.ICollection_get_SyncRoot();
    }
  );

  $.Method({Static:false, Public:true }, "Add", 
    $sig.make(0x108B, $asm01.TypeRef("System.Int32"), [$asm01.TypeRef("System.Object")], []), 
    function SynchronizedListWrapper_Add (value) {
      var syncRoot = null;
      var flag = new JSIL.Variable(false);
      try {
        $T04().Enter((syncRoot = this.m_SyncRoot), /* ref */ flag);
        var result = this.m_InnerList.IList_Add(value);
      } finally {
        if (flag.value) {
          $T04().Exit(syncRoot);
        }
      }
      return result;
    }
  );

  $.Method({Static:false, Public:true }, "Clear", 
    $sig.make(0x108E, null, [], []), 
    function SynchronizedListWrapper_Clear () {
      var syncRoot = null;
      var flag = new JSIL.Variable(false);
      try {
        $T04().Enter((syncRoot = this.m_SyncRoot), /* ref */ flag);
        this.m_InnerList.IList_Clear();
      } finally {
        if (flag.value) {
          $T04().Exit(syncRoot);
        }
      }
    }
  );

  $.Method({Static:false, Public:true }, "Contains", 
    $sig.make(0x1092, $asm01.TypeRef("System.Boolean"), [$asm01.TypeRef("System.Object")], []), 
    function SynchronizedListWrapper_Contains (value) {
      var syncRoot = null;
      var flag = new JSIL.Variable(false);
      try {
        $T04().Enter((syncRoot = this.m_SyncRoot), /* ref */ flag);
        var result = this.m_InnerList.IList_Contains(value);
      } finally {
        if (flag.value) {
          $T04().Exit(syncRoot);
        }
      }
      return result;
    }
  );

  $.Method({Static:false, Public:true }, "CopyTo", 
    $sig.make(0x10AA, null, [$asm01.TypeRef("System.Array"), $asm01.TypeRef("System.Int32")], []), 
    function SynchronizedListWrapper_CopyTo (array, index) {
      var syncRoot = null;
      var flag = new JSIL.Variable(false);
      try {
        $T04().Enter((syncRoot = this.m_SyncRoot), /* ref */ flag);
        this.m_InnerList.ICollection_CopyTo(array, index);
      } finally {
        if (flag.value) {
          $T04().Exit(syncRoot);
        }
      }
    }
  );

  $.Method({Static:false, Public:true }, "get_Count", 
    $sig.make(0x105C, $asm01.TypeRef("System.Int32"), [], []), 
    function SynchronizedListWrapper_get_Count () {
      var syncRoot = null;
      var flag = new JSIL.Variable(false);
      try {
        $T04().Enter((syncRoot = this.m_SyncRoot), /* ref */ flag);
        var count = this.m_InnerList.ICollection_get_Count();
      } finally {
        if (flag.value) {
          $T04().Exit(syncRoot);
        }
      }
      return count;
    }
  );

  $.Method({Static:false, Public:true }, "get_IsFixedSize", 
    $sig.make(0x1065, $asm01.TypeRef("System.Boolean"), [], []), 
    function SynchronizedListWrapper_get_IsFixedSize () {
      var syncRoot = null;
      var flag = new JSIL.Variable(false);
      try {
        $T04().Enter((syncRoot = this.m_SyncRoot), /* ref */ flag);
        var isFixedSize = this.m_InnerList.IList_get_IsFixedSize();
      } finally {
        if (flag.value) {
          $T04().Exit(syncRoot);
        }
      }
      return isFixedSize;
    }
  );

  $.Method({Static:false, Public:true }, "get_IsReadOnly", 
    $sig.make(0x1072, $asm01.TypeRef("System.Boolean"), [], []), 
    function SynchronizedListWrapper_get_IsReadOnly () {
      var syncRoot = null;
      var flag = new JSIL.Variable(false);
      try {
        $T04().Enter((syncRoot = this.m_SyncRoot), /* ref */ flag);
        var isReadOnly = this.m_InnerList.IList_get_IsReadOnly();
      } finally {
        if (flag.value) {
          $T04().Exit(syncRoot);
        }
      }
      return isReadOnly;
    }
  );

  $.Method({Static:false, Public:true }, "get_IsSynchronized", 
    $sig.make(0x105D, $asm01.TypeRef("System.Boolean"), [], []), 
    function SynchronizedListWrapper_get_IsSynchronized () {
      return true;
    }
  );

  $.Method({Static:false, Public:true }, "get_Item", 
    $sig.make(0x1078, $asm01.TypeRef("System.Object"), [$asm01.TypeRef("System.Int32")], []), 
    function SynchronizedListWrapper_get_Item (index) {
      var syncRoot = null;
      var flag = new JSIL.Variable(false);
      try {
        $T04().Enter((syncRoot = this.m_SyncRoot), /* ref */ flag);
        var result = this.m_InnerList.IList_get_Item(index);
      } finally {
        if (flag.value) {
          $T04().Exit(syncRoot);
        }
      }
      return result;
    }
  );

  $.Method({Static:false, Public:true }, "get_SyncRoot", 
    $sig.make(0x1060, $asm01.TypeRef("System.Object"), [], []), 
    function SynchronizedListWrapper_get_SyncRoot () {
      var syncRoot = null;
      var flag = new JSIL.Variable(false);
      try {
        $T04().Enter((syncRoot = this.m_SyncRoot), /* ref */ flag);
        var syncRoot2 = this.m_InnerList.ICollection_get_SyncRoot();
      } finally {
        if (flag.value) {
          $T04().Exit(syncRoot);
        }
      }
      return syncRoot2;
    }
  );

  $.Method({Static:false, Public:true }, "GetEnumerator", 
    $sig.make(0x10AB, $asm01.TypeRef("System.Collections.IEnumerator"), [], []), 
    function SynchronizedListWrapper_GetEnumerator () {
      var syncRoot = null;
      var flag = new JSIL.Variable(false);
      try {
        $T04().Enter((syncRoot = this.m_SyncRoot), /* ref */ flag);
        var enumerator = this.m_InnerList.IEnumerable_GetEnumerator();
      } finally {
        if (flag.value) {
          $T04().Exit(syncRoot);
        }
      }
      return enumerator;
    }
  );

  $.Method({Static:false, Public:true }, "IndexOf", 
    $sig.make(0x109A, $asm01.TypeRef("System.Int32"), [$asm01.TypeRef("System.Object")], []), 
    function SynchronizedListWrapper_IndexOf (value) {
      var syncRoot = null;
      var flag = new JSIL.Variable(false);
      try {
        $T04().Enter((syncRoot = this.m_SyncRoot), /* ref */ flag);
        var result = this.m_InnerList.IList_IndexOf(value);
      } finally {
        if (flag.value) {
          $T04().Exit(syncRoot);
        }
      }
      return result;
    }
  );

  $.Method({Static:false, Public:true }, "Insert", 
    $sig.make(0x109E, null, [$asm01.TypeRef("System.Int32"), $asm01.TypeRef("System.Object")], []), 
    function SynchronizedListWrapper_Insert (index, value) {
      var syncRoot = null;
      var flag = new JSIL.Variable(false);
      try {
        $T04().Enter((syncRoot = this.m_SyncRoot), /* ref */ flag);
        this.m_InnerList.IList_Insert(index, value);
      } finally {
        if (flag.value) {
          $T04().Exit(syncRoot);
        }
      }
    }
  );

  $.Method({Static:false, Public:true }, "Remove", 
    $sig.make(0x10A2, null, [$asm01.TypeRef("System.Object")], []), 
    function SynchronizedListWrapper_Remove (value) {
      var syncRoot = null;
      var flag = new JSIL.Variable(false);
      try {
        $T04().Enter((syncRoot = this.m_SyncRoot), /* ref */ flag);
        this.m_InnerList.IList_Remove(value);
      } finally {
        if (flag.value) {
          $T04().Exit(syncRoot);
        }
      }
    }
  );

  $.Method({Static:false, Public:true }, "RemoveAt", 
    $sig.make(0x10A4, null, [$asm01.TypeRef("System.Int32")], []), 
    function SynchronizedListWrapper_RemoveAt (index) {
      var syncRoot = null;
      var flag = new JSIL.Variable(false);
      try {
        $T04().Enter((syncRoot = this.m_SyncRoot), /* ref */ flag);
        this.m_InnerList.IList_RemoveAt(index);
      } finally {
        if (flag.value) {
          $T04().Exit(syncRoot);
        }
      }
    }
  );

  $.Method({Static:false, Public:true }, "set_Item", 
    $sig.make(0x1080, null, [$asm01.TypeRef("System.Int32"), $asm01.TypeRef("System.Object")], []), 
    function SynchronizedListWrapper_set_Item (index, value) {
      var syncRoot = null;
      var flag = new JSIL.Variable(false);
      try {
        $T04().Enter((syncRoot = this.m_SyncRoot), /* ref */ flag);
        this.m_InnerList.IList_set_Item(index, value);
      } finally {
        if (flag.value) {
          $T04().Exit(syncRoot);
        }
      }
    }
  );

  $.Field({Static:false, Public:false}, "m_SyncRoot", $asm01.TypeRef("System.Object")); 
  $.Property({Static:false, Public:true , Virtual:true }, "Count", $asm01.TypeRef("System.Int32"));

  $.Property({Static:false, Public:true , Virtual:true }, "IsSynchronized", $asm01.TypeRef("System.Boolean"));

  $.Property({Static:false, Public:true , Virtual:true }, "SyncRoot", $asm01.TypeRef("System.Object"));

  $.Property({Static:false, Public:true , Virtual:true }, "IsFixedSize", $asm01.TypeRef("System.Boolean"));

  $.Property({Static:false, Public:true , Virtual:true }, "IsReadOnly", $asm01.TypeRef("System.Boolean"));

  $.Property({Static:false, Public:true , Virtual:true }, "Item", $asm01.TypeRef("System.Object"));

})
  .Attribute($asm01.TypeRef("System.Reflection.DefaultMemberAttribute"), function () { return ["Item"]; });

JSIL.MakeClass($asm01.TypeRef("System.Collections.ArrayList/ListWrapper"), "System.Collections.ArrayList/FixedSizeListWrapper", false, [], function ($) {
  var $thisType = $.publicInterface;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm01.System.Collections.IList)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm01.System.Collections.ArrayList_ListWrapper)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm01.System.Object)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm01.System.NotSupportedException)) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize($asm01.System.Int32)) ();
  };

  $.Method({Static:false, Public:true }, ".ctor", 
    $sig.make(0x103C, null, [$asm01.TypeRef("System.Collections.IList")], []), 
    function FixedSizeListWrapper__ctor (innerList) {
      $T01().prototype._ctor.call(this, innerList);
    }
  );

  $.Method({Static:false, Public:true }, "Add", 
    $sig.make(0x103D, $asm01.TypeRef("System.Int32"), [$asm01.TypeRef("System.Object")], []), 
    function FixedSizeListWrapper_Add (value) {
      throw new ($T03())(this.get_ErrorMessage());
    }
  );

  $.Method({Static:false, Public:true }, "Clear", 
    $sig.make(0x103F, null, [], []), 
    function FixedSizeListWrapper_Clear () {
      throw new ($T03())(this.get_ErrorMessage());
    }
  );

  $.Method({Static:false, Public:false}, "get_ErrorMessage", 
    $sig.make(0x1030, $asm01.TypeRef("System.String"), [], []), 
    function FixedSizeListWrapper_get_ErrorMessage () {
      return "List is fixed-size.";
    }
  );

  $.Method({Static:false, Public:true }, "get_IsFixedSize", 
    $sig.make(0x1039, $asm01.TypeRef("System.Boolean"), [], []), 
    function FixedSizeListWrapper_get_IsFixedSize () {
      return true;
    }
  );

  $.Method({Static:false, Public:true }, "Insert", 
    $sig.make(0x1041, null, [$asm01.TypeRef("System.Int32"), $asm01.TypeRef("System.Object")], []), 
    function FixedSizeListWrapper_Insert (index, value) {
      throw new ($T03())(this.get_ErrorMessage());
    }
  );

  $.Method({Static:false, Public:true }, "Remove", 
    $sig.make(0x1043, null, [$asm01.TypeRef("System.Object")], []), 
    function FixedSizeListWrapper_Remove (value) {
      throw new ($T03())(this.get_ErrorMessage());
    }
  );

  $.Method({Static:false, Public:true }, "RemoveAt", 
    $sig.make(0x1044, null, [$asm01.TypeRef("System.Int32")], []), 
    function FixedSizeListWrapper_RemoveAt (index) {
      throw new ($T03())(this.get_ErrorMessage());
    }
  );

  $.Property({Static:false, Public:false, Virtual:true }, "ErrorMessage", $asm01.TypeRef("System.String"));

  $.Property({Static:false, Public:true , Virtual:true }, "IsFixedSize", $asm01.TypeRef("System.Boolean"));

});

JSIL.MakeClass($asm01.TypeRef("System.Collections.ArrayList/FixedSizeListWrapper"), "System.Collections.ArrayList/ReadOnlyListWrapper", false, [], function ($) {
  var $thisType = $.publicInterface;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm01.System.Collections.IList)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm01.System.Collections.ArrayList_FixedSizeListWrapper)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm01.System.Int32)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm01.System.Object)) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize($asm01.System.NotSupportedException)) ();
  };

  $.Method({Static:false, Public:true }, ".ctor", 
    $sig.make(0x1075, null, [$asm01.TypeRef("System.Collections.IList")], []), 
    function ReadOnlyListWrapper__ctor (innerList) {
      $T01().prototype._ctor.call(this, innerList);
    }
  );

  $.Method({Static:false, Public:false}, "get_ErrorMessage", 
    $sig.make(0x1062, $asm01.TypeRef("System.String"), [], []), 
    function ReadOnlyListWrapper_get_ErrorMessage () {
      return "List is read-only.";
    }
  );

  $.Method({Static:false, Public:true }, "get_IsReadOnly", 
    $sig.make(0x1069, $asm01.TypeRef("System.Boolean"), [], []), 
    function ReadOnlyListWrapper_get_IsReadOnly () {
      return true;
    }
  );

  $.Method({Static:false, Public:true }, "get_Item", 
    $sig.make(0x106D, $asm01.TypeRef("System.Object"), [$asm01.TypeRef("System.Int32")], []), 
    function ReadOnlyListWrapper_get_Item (index) {
      return this.m_InnerList.IList_get_Item(index);
    }
  );

  $.Method({Static:false, Public:true }, "set_Item", 
    $sig.make(0x1070, null, [$asm01.TypeRef("System.Int32"), $asm01.TypeRef("System.Object")], []), 
    function ReadOnlyListWrapper_set_Item (index, value) {
      throw new ($T04())(this.get_ErrorMessage());
    }
  );

  $.Property({Static:false, Public:false, Virtual:true }, "ErrorMessage", $asm01.TypeRef("System.String"));

  $.Property({Static:false, Public:true , Virtual:true }, "IsReadOnly", $asm01.TypeRef("System.Boolean"));

  $.Property({Static:false, Public:true , Virtual:true }, "Item", $asm01.TypeRef("System.Object"));

})
  .Attribute($asm01.TypeRef("System.Reflection.DefaultMemberAttribute"), function () { return ["Item"]; });

JSIL.MakeClass($asm01.TypeRef("System.Object"), "System.Collections.Generic.Comparer`1", true, ["T"], function ($) {
  var $thisType = $.publicInterface;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm01.System.Type)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm01.System.Activator)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm01.System.Collections.Generic.GenericComparer$b1)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm01.System.Object)) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize($asm01.System.Int32)) ();
  };
  var $T05 = function () {
    return ($T05 = JSIL.Memoize($asm01.System.ArgumentException)) ();
  };

  $.Method({Static:false, Public:false}, ".ctor", 
    $sig.make(0xDF5, null, [], []), 
    function Comparer$b1__ctor () {
    }
  );

  $.Method({Static:true , Public:true }, "get_Default", 
    $sig.make(0xDE8, $.Type, [], []), 
    function Comparer$b1_get_Default () {
      return $thisType.Of($thisType.T.get(this))._default;
    }
  );

  $.Method({Static:false, Public:false}, "IComparer.Compare", 
    $sig.make(0xDF1, $asm01.TypeRef("System.Int32"), [$asm01.TypeRef("System.Object"), $asm01.TypeRef("System.Object")], []), 
    function Comparer$b1_IComparer_Compare (x, y) {
      if (x === null) {
        var result = ((y === null) ? 0 : -1);
      } else if (y === null) {
        result = 1;
      } else {
        if (($thisType.T.get(this).$As(x) === null) || !$thisType.T.get(this).$Is(y)) {
          throw new ($T05())();
        }
        result = this.Compare(JSIL.CloneParameter($thisType.T.get(this), $thisType.T.get(this).$Cast(x)), JSIL.CloneParameter($thisType.T.get(this), $thisType.T.get(this).$Cast(y)));
      }
      return result;
    }
  );

  $.Field({Static:true , Public:false, ReadOnly:true }, "_default", $.Type); 
  $.Method({Static:true , Public:false}, ".cctor", 
    $sig.make(0xDEA, null, [], []), 
    function Comparer$b1__cctor () {
      if ($asm01.System.IComparable$b1.Of($thisType.T.get(this)).__Type__.IsAssignableFrom($thisType.T.get(this))) {
        $thisType.Of($thisType.T.get(this))._default = $thisType.Of($thisType.T.get(this)).$Cast($T01().CreateInstance($T02().__Type__.MakeGenericType(JSIL.Array.New($T00(), [$thisType.T.get(this)]))));
      } else {
        $thisType.Of($thisType.T.get(this))._default = new ($asm01.System.Collections.Generic.Comparer$b1_DefaultComparer.Of($thisType.T.get(this))) ();
      }
    }
  );

  $.GenericProperty({Static:true , Public:true }, "Default", $.Type);

  $.ImplementInterfaces($asm01.TypeRef("System.Collections.Generic.IComparer`1", [new JSIL.GenericParameter("T", "System.Collections.Generic.Comparer`1")]), $asm01.TypeRef("System.Collections.IComparer"))
});

JSIL.MakeClass($asm01.TypeRef("System.Collections.Generic.Comparer`1", [new JSIL.GenericParameter("T", "System.Collections.Generic.Comparer`1/DefaultComparer")]), "System.Collections.Generic.Comparer`1/DefaultComparer", false, ["T"], function ($) {
  var $thisType = $.publicInterface;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm01.System.Int32)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm01.System.IComparable)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm01.System.ArgumentException)) ();
  };

  $.Method({Static:false, Public:true }, ".ctor", 
    $sig.make(0xF50, null, [], []), 
    function DefaultComparer__ctor () {
      $asm01.System.Collections.Generic.Comparer$b1.Of($thisType.T.get(this)).prototype._ctor.call(this);
    }
  );

  $.Method({Static:false, Public:true }, "Compare", 
    $sig.make(0xF49, $asm01.TypeRef("System.Int32"), [new JSIL.GenericParameter("T", "System.Collections.Generic.Comparer`1/DefaultComparer"), new JSIL.GenericParameter("T", "System.Collections.Generic.Comparer`1/DefaultComparer")], []), 
    function DefaultComparer_Compare (x, y) {
      if (x === null) {
        var result = ((y === null) ? 0 : -1);
      } else if (y === null) {
        result = 1;
      } else if ($asm01.System.IComparable$b1.Of($thisType.T.get(this)).$Is(x)) {
        result = $asm01.System.IComparable$b1.Of($thisType.T.get(this)).$Cast(x).IComparable$b1_CompareTo(JSIL.CloneParameter($thisType.T.get(this), y));
      } else {
        if (!$T01().$Is(x)) {
          throw new ($T02())("does not implement right interface");
        }
        result = $T01().$Cast(x).IComparable_CompareTo(JSIL.CloneParameter($thisType.T.get(this), y));
      }
      return result;
    }
  );

});

JSIL.MakeClass($asm01.TypeRef("System.Collections.Generic.Comparer`1", [new JSIL.GenericParameter("T", "System.Collections.Generic.GenericComparer`1")]), "System.Collections.Generic.GenericComparer`1", false, ["T"], function ($) {
  var $thisType = $.publicInterface;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm01.System.Int32)) ();
  };

  $.Method({Static:false, Public:true }, ".ctor", 
    $sig.make(0xE2C, null, [], []), 
    function GenericComparer$b1__ctor () {
      $asm01.System.Collections.Generic.Comparer$b1.Of($thisType.T.get(this)).prototype._ctor.call(this);
    }
  );

  $.Method({Static:false, Public:true }, "Compare", 
    $sig.make(0xE2A, $asm01.TypeRef("System.Int32"), [new JSIL.GenericParameter("T", "System.Collections.Generic.GenericComparer`1"), new JSIL.GenericParameter("T", "System.Collections.Generic.GenericComparer`1")], []), 
    function GenericComparer$b1_Compare (x, y) {
      if (x === null) {
        var result = ((y === null) ? 0 : -1);
      } else if (y === null) {
        result = 1;
      } else {
        result = x.IComparable$b1_CompareTo(JSIL.CloneParameter($thisType.T.get(this), y));
      }
      return result;
    }
  );

});

