/* Generated by JSIL v0.6.0 build 23296. See http://jsil.org/ for more information. */ 
var $asm00 = JSIL.DeclareAssembly("CorlibTest, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null");

JSIL.DeclareNamespace("NUnit");
JSIL.DeclareNamespace("NUnit.Framework");
JSIL.MakeClass($asm01.TypeRef("System.Attribute"), "NUnit.Framework.TestFixtureAttribute", true, [], function ($) {
  var $thisType = $.publicInterface;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm01.System.Attribute)) ();
  };

  $.Method({Static:false, Public:true }, ".ctor", 
    $sig.make(0x86, null, [], []), 
    function TestFixtureAttribute__ctor () {
      $T00().prototype._ctor.call(this);
    }
  );

});

JSIL.DeclareNamespace("MonoTests");
JSIL.DeclareNamespace("MonoTests.System");
JSIL.DeclareNamespace("MonoTests.System.Collections");
JSIL.DeclareNamespace("MonoTests.System.Collections.Generic");
JSIL.MakeClass($asm01.TypeRef("System.Object"), "MonoTests.System.Collections.Generic.DictionaryTest", true, [], function ($) {
  var $thisType = $.publicInterface;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm01.System.Collections.Generic.Dictionary$b2.Of($asm01.System.String, $asm01.System.Object))) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm01.System.Int32)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm01.System.Collections.Generic.Dictionary$b2.Of($asm01.System.Int32, $asm01.System.Int32))) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm01.System.Collections.Generic.Dictionary$b2_Enumerator.Of($asm01.System.Int32, $asm01.System.Int32))) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize($asm01.System.Collections.Generic.KeyValuePair$b2.Of($asm01.System.Int32, $asm01.System.Int32))) ();
  };
  var $T05 = function () {
    return ($T05 = JSIL.Memoize($asm01.System.IDisposable)) ();
  };
  var $T06 = function () {
    return ($T06 = JSIL.Memoize($asm00.NUnit.Framework.Assert)) ();
  };
  var $T07 = function () {
    return ($T07 = JSIL.Memoize($asm01.System.Object)) ();
  };
  var $T08 = function () {
    return ($T08 = JSIL.Memoize($asm00.MonoTests.System.Collections.Generic.DictionaryTest_MyClass)) ();
  };
  var $T09 = function () {
    return ($T09 = JSIL.Memoize($asm01.System.Collections.Generic.Dictionary$b2.Of($asm00.MonoTests.System.Collections.Generic.DictionaryTest_MyClass, $asm00.MonoTests.System.Collections.Generic.DictionaryTest_MyClass))) ();
  };
  var $T0A = function () {
    return ($T0A = JSIL.Memoize($asm01.System.Collections.Generic.Dictionary$b2.Of($asm01.System.Object, $asm01.System.Object))) ();
  };
  var $T0B = function () {
    return ($T0B = JSIL.Memoize($asm01.System.Collections.Generic.Dictionary$b2_Enumerator.Of($asm01.System.Object, $asm01.System.Object))) ();
  };
  var $T0C = function () {
    return ($T0C = JSIL.Memoize($asm01.System.Boolean)) ();
  };
  var $T0D = function () {
    return ($T0D = JSIL.Memoize($asm01.System.Collections.Generic.Dictionary$b2.Of($asm01.System.String, $asm01.System.String))) ();
  };
  var $T0E = function () {
    return ($T0E = JSIL.Memoize($asm01.System.Collections.ArrayList)) ();
  };
  var $T0F = function () {
    return ($T0F = JSIL.Memoize($asm01.System.Collections.IEnumerator)) ();
  };
  var $T10 = function () {
    return ($T10 = JSIL.Memoize($asm01.System.Collections.ICollection)) ();
  };
  var $T11 = function () {
    return ($T11 = JSIL.Memoize(System.Array.Of($asm01.System.Collections.DictionaryEntry))) ();
  };
  var $T12 = function () {
    return ($T12 = JSIL.Memoize($asm01.System.Collections.DictionaryEntry)) ();
  };
  var $T13 = function () {
    return ($T13 = JSIL.Memoize($asm01.System.Collections.Generic.ICollection$b1.Of($asm01.System.Collections.Generic.KeyValuePair$b2.Of($asm01.System.Int32, $asm01.System.Int32)))) ();
  };
  var $T14 = function () {
    return ($T14 = JSIL.Memoize(System.Array.Of($asm01.System.Collections.Generic.KeyValuePair$b2.Of($asm01.System.Int32, $asm01.System.Int32)))) ();
  };
  var $T15 = function () {
    return ($T15 = JSIL.Memoize(System.Array.Of($asm01.System.Int32))) ();
  };
  var $T16 = function () {
    return ($T16 = JSIL.Memoize($asm01.System.Collections.Generic.Dictionary$b2_KeyCollection.Of($asm01.System.Int32, $asm01.System.Int32))) ();
  };
  var $T17 = function () {
    return ($T17 = JSIL.Memoize($asm01.System.Collections.Generic.Dictionary$b2_ValueCollection.Of($asm01.System.Int32, $asm01.System.Int32))) ();
  };
  var $T18 = function () {
    return ($T18 = JSIL.Memoize($asm00.MonoTests.System.Collections.Generic.DictionaryTest_$l$gc__DisplayClassb)) ();
  };
  var $T19 = function () {
    return ($T19 = JSIL.Memoize($asm01.System.Collections.Generic.IEnumerable$b1.Of($asm01.System.Collections.Generic.KeyValuePair$b2.Of($asm01.System.Int32, $asm01.System.Int32)))) ();
  };
  var $T1A = function () {
    return ($T1A = JSIL.Memoize($asm01.System.Collections.IEnumerable)) ();
  };
  var $T1B = function () {
    return ($T1B = JSIL.Memoize($asm01.System.Collections.Generic.Dictionary$b2_KeyCollection_Enumerator.Of($asm01.System.Int32, $asm01.System.Int32))) ();
  };
  var $T1C = function () {
    return ($T1C = JSIL.Memoize($asm01.System.Collections.Generic.Dictionary$b2_Enumerator.Of($asm01.System.String, $asm01.System.Object))) ();
  };
  var $T1D = function () {
    return ($T1D = JSIL.Memoize($asm01.System.Collections.Generic.KeyValuePair$b2.Of($asm01.System.String, $asm01.System.Object))) ();
  };
  var $T1E = function () {
    return ($T1E = JSIL.Memoize($asm01.System.Collections.IDictionaryEnumerator)) ();
  };
  var $T1F = function () {
    return ($T1F = JSIL.Memoize($asm01.System.Collections.IDictionary)) ();
  };
  var $T20 = function () {
    return ($T20 = JSIL.Memoize($asm01.System.Collections.Generic.Dictionary$b2.Of($asm01.System.Int32, $asm01.System.String))) ();
  };
  var $T21 = function () {
    return ($T21 = JSIL.Memoize($asm01.System.String)) ();
  };
  var $T22 = function () {
    return ($T22 = JSIL.Memoize($asm01.System.ValueType)) ();
  };
  var $T23 = function () {
    return ($T23 = JSIL.Memoize($asm01.System.Collections.Generic.Dictionary$b2.Of($asm01.System.String, $asm01.System.Int32))) ();
  };
  var $T24 = function () {
    return ($T24 = JSIL.Memoize($asm01.System.Collections.Generic.KeyValuePair$b2.Of($asm01.System.String, $asm01.System.Int32))) ();
  };
  var $T25 = function () {
    return ($T25 = JSIL.Memoize(System.Array.Of($asm01.System.Object))) ();
  };
  var $T26 = function () {
    return ($T26 = JSIL.Memoize($asm01.System.Collections.Generic.IEnumerator$b1.Of($asm01.System.Collections.Generic.KeyValuePair$b2.Of($asm01.System.String, $asm01.System.Object)))) ();
  };
  var $T27 = function () {
    return ($T27 = JSIL.Memoize($asm01.System.Collections.Generic.ICollection$b1.Of($asm01.System.String))) ();
  };
  var $T28 = function () {
    return ($T28 = JSIL.Memoize($asm01.System.Collections.Generic.IEnumerator$b1.Of($asm01.System.String))) ();
  };
  var $T29 = function () {
    return ($T29 = JSIL.Memoize($asm01.System.Collections.Generic.IEnumerable$b1.Of($asm01.System.String))) ();
  };
  var $T2A = function () {
    return ($T2A = JSIL.Memoize($asm00.MonoTests.System.Collections.Generic.DictionaryTest_$l$gc__DisplayClass17)) ();
  };
  var $T2B = function () {
    return ($T2B = JSIL.Memoize($asm01.System.Collections.Generic.IEnumerable$b1.Of($asm01.System.Int32))) ();
  };
  var $T2C = function () {
    return ($T2C = JSIL.Memoize($asm01.System.Void)) ();
  };
  var $T2D = function () {
    return ($T2D = JSIL.Memoize($asm01.System.Collections.Generic.Dictionary$b2_KeyCollection_Enumerator.Of($asm01.System.String, $asm01.System.Int32))) ();
  };
  var $T2E = function () {
    return ($T2E = JSIL.Memoize($asm01.System.Collections.Generic.Dictionary$b2_KeyCollection.Of($asm01.System.String, $asm01.System.Int32))) ();
  };
  var $T2F = function () {
    return ($T2F = JSIL.Memoize($asm01.System.Collections.Generic.IDictionary$b2.Of($asm01.System.Int32, $asm01.System.Int32))) ();
  };
  var $T30 = function () {
    return ($T30 = JSIL.Memoize($asm01.System.Collections.Generic.IEnumerator$b1.Of($asm01.System.Int32))) ();
  };
  var $T31 = function () {
    return ($T31 = JSIL.Memoize($asm00.MonoTests.System.Collections.Generic.DictionaryTest_MyTest)) ();
  };
  var $T32 = function () {
    return ($T32 = JSIL.Memoize($asm01.System.Collections.Generic.Dictionary$b2_KeyCollection.Of($asm01.System.String, $asm01.System.String))) ();
  };
  var $T33 = function () {
    return ($T33 = JSIL.Memoize($asm01.System.Collections.Generic.Dictionary$b2_ValueCollection.Of($asm01.System.String, $asm01.System.String))) ();
  };
  var $T34 = function () {
    return ($T34 = JSIL.Memoize($asm01.System.Collections.Generic.Dictionary$b2_ValueCollection.Of($asm01.System.String, $asm01.System.Int32))) ();
  };
  var $T35 = function () {
    return ($T35 = JSIL.Memoize($asm01.System.Collections.Generic.Dictionary$b2_ValueCollection_Enumerator.Of($asm01.System.String, $asm01.System.Int32))) ();
  };
  var $T36 = function () {
    return ($T36 = JSIL.Memoize($asm00.MonoTests.System.Collections.Generic.DictionaryTest_D)) ();
  };
  var $T37 = function () {
    return ($T37 = JSIL.Memoize($asm01.System.Exception)) ();
  };
  var $T38 = function () {
    return ($T38 = JSIL.Memoize($asm00.MonoTests.System.Collections.Generic.DictionaryTest_$l$gc__DisplayClass23)) ();
  };
  var $T39 = function () {
    return ($T39 = JSIL.Memoize($asm01.System.Collections.Generic.Dictionary$b2_ValueCollection_Enumerator.Of($asm01.System.Int32, $asm01.System.Int32))) ();
  };
  var $T3A = function () {
    return ($T3A = JSIL.Memoize($asm01.System.Collections.Generic.Dictionary$b2.Of($asm01.System.Int32, $asm01.System.Single))) ();
  };
  var $T3B = function () {
    return ($T3B = JSIL.Memoize($asm01.System.Collections.Generic.KeyNotFoundException)) ();
  };

  $.Method({Static:false, Public:true }, ".ctor", 
    $sig.make(0x149, null, [], []), 
    function DictionaryTest__ctor () {
      this._dictionary = null;
      this._dictionary2 = null;
      this._dictionary3 = null;
    }
  );

  $.Method({Static:false, Public:true }, "AddDuplicateTest", 
    $sig.make(0x25, null, [], []), 
    function DictionaryTest_AddDuplicateTest () {
      this._dictionary.Add("foo", "bar");
      this._dictionary.Add("foo", "bar");
    }
  )
    .Attribute($asm00.TypeRef("NUnit.Framework.ExpectedExceptionAttribute"), function () { return [$asm01.TypeRef("System.ArgumentException")]; })
    .Attribute($asm00.TypeRef("NUnit.Framework.TestAttribute"));

  $.Method({Static:false, Public:true }, "AddLargeTest", 
    $sig.make(0x26, null, [], []), 
    function DictionaryTest_AddLargeTest () {
      var numElems = 50;

      for (var i = 0; i < numElems; ++i) {
        this._dictionary3.Add(i, i);
      }
      i = 0;
      var enumerator = $T02().prototype.GetEnumerator.call(this._dictionary3);
      try {

        while (enumerator.MoveNext()) {
          var entry = enumerator.get_Current().MemberwiseClone();
          ++i;
        }
      } finally {
        enumerator.IDisposable_Dispose();
      }
      $T06().AreEqual(i, numElems, "Add with resize failed!");
    }
  )
    .Attribute($asm00.TypeRef("NUnit.Framework.TestAttribute"));

  $.Method({Static:false, Public:true }, "AddNullTest", 
    $sig.make(0x24, null, [], []), 
    function DictionaryTest_AddNullTest () {
      this._dictionary.Add(null, "");
    }
  )
    .Attribute($asm00.TypeRef("NUnit.Framework.TestAttribute"))
    .Attribute($asm00.TypeRef("NUnit.Framework.ExpectedExceptionAttribute"), function () { return [$asm01.TypeRef("System.ArgumentNullException")]; });

  $.Method({Static:false, Public:true }, "AddTest", 
    $sig.make(0x19, null, [], []), 
    function DictionaryTest_AddTest () {
      this._dictionary.Add("key1", "value");
      $T06().AreEqual("value", this._dictionary.get_Item("key1").toString(), "Add failed!");
    }
  )
    .Attribute($asm00.TypeRef("NUnit.Framework.TestAttribute"));

  $.Method({Static:false, Public:true }, "AddTest2", 
    $sig.make(0x1A, null, [], []), 
    function DictionaryTest_AddTest2 () {
      var m = new ($T08())(10, 5);
      var m2 = new ($T08())(20, 5);
      var m3 = new ($T08())(12, 3);
      this._dictionary2.Add(m, m);
      this._dictionary2.Add(m2, m2);
      this._dictionary2.Add(m3, m3);
      $T06().AreEqual(20, this._dictionary2.get_Item(m2).get_Value(), "#1");
      $T06().AreEqual(10, this._dictionary2.get_Item(m).get_Value(), "#2");
      $T06().AreEqual(12, this._dictionary2.get_Item(m3).get_Value(), "#3");
    }
  )
    .Attribute($asm00.TypeRef("NUnit.Framework.TestAttribute"));

  $.Method({Static:false, Public:true }, "AddTest3", 
    $sig.make(0x1B, null, [], []), 
    function DictionaryTest_AddTest3 () {
      this._dictionary3.Add(1, 2);
      this._dictionary3.Add(2, 3);
      this._dictionary3.Add(3, 4);
      $T06().AreEqual(2, this._dictionary3.get_Item(1), "#1");
      $T06().AreEqual(3, this._dictionary3.get_Item(2), "#2");
      $T06().AreEqual(4, this._dictionary3.get_Item(3), "#3");
    }
  )
    .Attribute($asm00.TypeRef("NUnit.Framework.TestAttribute"));

  $.Method({Static:false, Public:true }, "Clear_Iterators", 
    $sig.make(0x33, null, [], []), 
    function DictionaryTest_Clear_Iterators () {
      var d = new ($T0A())();
      d.set_Item(new ($T07())(), new ($T07())());
      d.Clear();
      var hash = 0;
      var enumerator = $T0A().prototype.GetEnumerator.call(d);
      try {

        while (enumerator.MoveNext()) {
          var o = enumerator.get_Current().MemberwiseClone();
          hash += (JSIL.ObjectHashCode(o));
        }
      } finally {
        enumerator.IDisposable_Dispose();
      }
    }
  )
    .Attribute($asm00.TypeRef("NUnit.Framework.TestAttribute"));

  $.Method({Static:false, Public:true }, "ClearTest", 
    $sig.make(0x30, null, [], []), 
    function DictionaryTest_ClearTest () {
      this._dictionary.Add("key1", "value1");
      this._dictionary.Add("key2", "value2");
      this._dictionary.Add("key3", "value3");
      this._dictionary.Add("key4", "value4");
      this._dictionary.Clear();
      $T06().AreEqual(0, this._dictionary.get_Count(), "Clear method failed!");
      $T06().IsFalse(this._dictionary.ContainsKey("key2"));
    }
  )
    .Attribute($asm00.TypeRef("NUnit.Framework.TestAttribute"));

  $.Method({Static:false, Public:true }, "ContainsKeyTest", 
    $sig.make(0x39, null, [], []), 
    function DictionaryTest_ContainsKeyTest () {
      this._dictionary.Add("key1", "value1");
      this._dictionary.Add("key2", "value2");
      this._dictionary.Add("key3", "value3");
      this._dictionary.Add("key4", "value4");
      var contains = this._dictionary.ContainsKey("key4");
      $T06().IsTrue(contains, "ContainsKey does not return correct value!");
      contains = this._dictionary.ContainsKey("key5");
      $T06().IsFalse(contains, "ContainsKey for non existant does not return correct value!");
    }
  )
    .Attribute($asm00.TypeRef("NUnit.Framework.TestAttribute"));

  $.Method({Static:false, Public:true }, "ContainsKeyTest2", 
    $sig.make(0x3D, null, [], []), 
    function DictionaryTest_ContainsKeyTest2 () {
      this._dictionary.ContainsKey(null);
    }
  )
    .Attribute($asm00.TypeRef("NUnit.Framework.ExpectedExceptionAttribute"), function () { return [$asm01.TypeRef("System.ArgumentNullException")]; })
    .Attribute($asm00.TypeRef("NUnit.Framework.TestAttribute"));

  $.Method({Static:false, Public:true }, "ContainsValueTest", 
    $sig.make(0x40, null, [], []), 
    function DictionaryTest_ContainsValueTest () {
      this._dictionary.Add("key1", "value1");
      this._dictionary.Add("key2", "value2");
      this._dictionary.Add("key3", "value3");
      this._dictionary.Add("key4", "value4");
      var contains = $T00().prototype.ContainsValue.call(this._dictionary, "value2");
      $T06().IsTrue(contains, "ContainsValue does not return correct value!");
      contains = $T00().prototype.ContainsValue.call(this._dictionary, "@@daisofja@@");
      $T06().IsFalse(contains, "ContainsValue for non existant does not return correct value!");
    }
  )
    .Attribute($asm00.TypeRef("NUnit.Framework.TestAttribute"));

  $.Method({Static:false, Public:true }, "CopyToArray", 
    $sig.make(0xD1, null, [], []), 
    function DictionaryTest_CopyToArray () {
      var test = new ($T0D())();
      test.Add("monkey", "singe");
      test.Add("singe", "mono");
      test.Add("mono", "monkey");
      $T06().AreEqual(3, test.get_Keys().get_Count(), "Dictionary.Count");
      var list = $sig.get(0xD1B, null, [$asm01.System.Collections.ICollection], []).Construct($T0E(), test.get_Keys());
      $T06().AreEqual(3, list.get_Count(), "ArrayList.Count");
      $T06().IsTrue(list.Contains("monkey"), "monkey");
      $T06().IsTrue(list.Contains("singe"), "singe");
      $T06().IsTrue(list.Contains("mono"), "mono");
    }
  )
    .Attribute($asm00.TypeRef("NUnit.Framework.TestAttribute"));

  $.Method({Static:false, Public:true }, "Dictionary_MoveNext", 
    $sig.make(0xCF, null, [], []), 
    function DictionaryTest_Dictionary_MoveNext () {
      var en = $T02().prototype.GetEnumerator.call((new ($T02())()).__Initialize__([[3, 1], [4, 1]])).MemberwiseClone();

      for (var i = 1; i < 10; ++i) {
        en.IEnumerator_MoveNext();
      }
    }
  )
    .Attribute($asm00.TypeRef("NUnit.Framework.TestAttribute"));

  $.Method({Static:false, Public:true }, "Empty_CopyTo", 
    $sig.make(0x82, null, [], []), 
    function DictionaryTest_Empty_CopyTo () {
      var d = new ($T02())();
      var c = d;
      var array = JSIL.Array.New($T12(), 1);
      c.ICollection_CopyTo(array, array.length);
      var c2 = d;
      var array2 = JSIL.Array.New($T04(), 1);
      c2.ICollection$b1_CopyTo(array2, array2.length);
    }
  )
    .Attribute($asm00.TypeRef("NUnit.Framework.TestAttribute"));

  $.Method({Static:false, Public:true }, "Empty_KeysValues_CopyTo", 
    $sig.make(0x7B, null, [], []), 
    function DictionaryTest_Empty_KeysValues_CopyTo () {
      var d = new ($T02())();
      var array = JSIL.Array.New($T01(), 1);
      d.get_Keys().CopyTo(array, array.length);
      d.get_Values().CopyTo(array, array.length);
    }
  )
    .Attribute($asm00.TypeRef("NUnit.Framework.TestAttribute"));

  $.Method({Static:false, Public:true }, "Enumerator_Current", 
    $sig.make(0x139, null, [], []), 
    function DictionaryTest_Enumerator_Current () {
      var $l$gc__DisplayClassb = new ($T18())();
      $l$gc__DisplayClassb.e1 = new ($T03())();
      $T06().IsFalse(this.Throws(function () {
            var x = this.e1.get_Current();
          }.bind($l$gc__DisplayClassb)));
      var d = new ($T02())();
      $l$gc__DisplayClassb.e2 = $T02().prototype.GetEnumerator.call(d);
      $T06().IsFalse(this.Throws(function () {
            var x = this.e2.get_Current();
          }.bind($l$gc__DisplayClassb)));
      $l$gc__DisplayClassb.e2.MoveNext();
      $T06().IsFalse(this.Throws(function () {
            var x = this.e2.get_Current();
          }.bind($l$gc__DisplayClassb)));
      $l$gc__DisplayClassb.e2.Dispose();
      $T06().IsFalse(this.Throws(function () {
            var x = this.e2.get_Current();
          }.bind($l$gc__DisplayClassb)));
      $l$gc__DisplayClassb.e3 = d.IEnumerable$b1_GetEnumerator();
      $T06().IsFalse(this.Throws(function () {
            var x = this.e3.IEnumerator$b1_get_Current();
          }.bind($l$gc__DisplayClassb)));
      $l$gc__DisplayClassb.e3.IEnumerator_MoveNext();
      $T06().IsFalse(this.Throws(function () {
            var x = this.e3.IEnumerator$b1_get_Current();
          }.bind($l$gc__DisplayClassb)));
      $l$gc__DisplayClassb.e3.IDisposable_Dispose();
      $T06().IsFalse(this.Throws(function () {
            var x = this.e3.IEnumerator$b1_get_Current();
          }.bind($l$gc__DisplayClassb)));
      $l$gc__DisplayClassb.e4 = d.IEnumerable_GetEnumerator();
      $T06().IsTrue(this.Throws(function () {
            var x = this.e4.IEnumerator_get_Current();
          }.bind($l$gc__DisplayClassb)));
      $l$gc__DisplayClassb.e4.IEnumerator_MoveNext();
      $T06().IsTrue(this.Throws(function () {
            var x = this.e4.IEnumerator_get_Current();
          }.bind($l$gc__DisplayClassb)));
      $T05().$Cast($l$gc__DisplayClassb.e4).IDisposable_Dispose();
      $T06().IsTrue(this.Throws(function () {
            var x = this.e4.IEnumerator_get_Current();
          }.bind($l$gc__DisplayClassb)));
    }
  )
    .Attribute($asm00.TypeRef("NUnit.Framework.TestAttribute"));

  $.Method({Static:false, Public:true }, "FailFastTest1", 
    $sig.make(0x74, null, [], []), 
    function DictionaryTest_FailFastTest1 () {
      var d = new ($T02())();
      d.set_Item(1, 1);
      var count = 0;
      var enumerator = $T02().prototype.GetEnumerator.call(d);
      try {

        while (enumerator.MoveNext()) {
          var kv = enumerator.get_Current().MemberwiseClone();
          d.set_Item(
            ((kv.get_Key() + 1) | 0), 
            ((kv.get_Value() + 1) | 0)
          );
          if (count++ !== 0) {
            $T06().Fail("Should not be reached");
          }
        }
      } finally {
        enumerator.IDisposable_Dispose();
      }
      $T06().Fail("Should not be reached");
    }
  )
    .Attribute($asm00.TypeRef("NUnit.Framework.ExpectedExceptionAttribute"), function () { return [$asm01.TypeRef("System.InvalidOperationException")]; })
    .Attribute($asm00.TypeRef("NUnit.Framework.TestAttribute"));

  $.Method({Static:false, Public:true }, "FailFastTest2", 
    $sig.make(0x77, null, [], []), 
    function DictionaryTest_FailFastTest2 () {
      var d = new ($T02())();
      d.set_Item(1, 1);
      var count = 0;
      var enumerator = d.get_Keys().GetEnumerator();
      try {

        while (enumerator.MoveNext()) {
          var i = enumerator.get_Current();
          d.set_Item(((i + 1) | 0), ((i + 1) | 0));
          if (count++ !== 0) {
            $T06().Fail("Should not be reached");
          }
        }
      } finally {
        enumerator.IDisposable_Dispose();
      }
      $T06().Fail("Should not be reached");
    }
  )
    .Attribute($asm00.TypeRef("NUnit.Framework.TestAttribute"))
    .Attribute($asm00.TypeRef("NUnit.Framework.ExpectedExceptionAttribute"), function () { return [$asm01.TypeRef("System.InvalidOperationException")]; });

  $.Method({Static:false, Public:true }, "FailFastTest3", 
    $sig.make(0x79, null, [], []), 
    function DictionaryTest_FailFastTest3 () {
      var d = new ($T02())();
      d.set_Item(1, 1);
      var count = 0;
      var enumerator = d.get_Keys().GetEnumerator();
      try {

        while (enumerator.MoveNext()) {
          var i = enumerator.get_Current();
          d.set_Item(i, i);
          if (count++ !== 0) {
            $T06().Fail("Should not be reached");
          }
        }
      } finally {
        enumerator.IDisposable_Dispose();
      }
      $T06().Fail("Should not be reached");
    }
  )
    .Attribute($asm00.TypeRef("NUnit.Framework.TestAttribute"))
    .Attribute($asm00.TypeRef("NUnit.Framework.ExpectedExceptionAttribute"), function () { return [$asm01.TypeRef("System.InvalidOperationException")]; });

  $.Method({Static:false, Public:true }, "ForEachTest", 
    $sig.make(0x5C, null, [], []), 
    function DictionaryTest_ForEachTest () {
      this._dictionary.Add("key1", "value1");
      this._dictionary.Add("key2", "value2");
      this._dictionary.Add("key3", "value3");
      this._dictionary.Add("key4", "value4");
      var i = 0;
      var enumerator = $T00().prototype.GetEnumerator.call(this._dictionary);
      try {

        while (enumerator.MoveNext()) {
          var entry = enumerator.get_Current().MemberwiseClone();
          ++i;
        }
      } finally {
        enumerator.IDisposable_Dispose();
      }
      $T06().AreEqual(4, i, "fail1: foreach entry failed!");
      i = 0;
      var enumerator2 = this._dictionary.IEnumerable_GetEnumerator();
      try {

        while (enumerator2.IEnumerator_MoveNext()) {
          entry = $T1D().$Cast(enumerator2.IEnumerator_get_Current()).MemberwiseClone();
          ++i;
        }
      } finally {
        var disposable = $T05().$As(enumerator2);
        if (disposable !== null) {
          disposable.IDisposable_Dispose();
        }
      }
      $T06().AreEqual(4, i, "fail2: foreach entry failed!");
      i = 0;
      var enumerator3 = this._dictionary.IDictionary_GetEnumerator();
      try {

        while (enumerator3.IEnumerator_MoveNext()) {
          var entry2 = $T12().$Cast(enumerator3.IEnumerator_get_Current()).MemberwiseClone();
          ++i;
        }
      } finally {
        disposable = $T05().$As(enumerator3);
        if (disposable !== null) {
          disposable.IDisposable_Dispose();
        }
      }
      $T06().AreEqual(4, i, "fail3: foreach entry failed!");
    }
  )
    .Attribute($asm00.TypeRef("NUnit.Framework.TestAttribute"));

  $.Method({Static:false, Public:true }, "ICollectionCopyTo", 
    $sig.make(0x140, null, [], []), 
    function DictionaryTest_ICollectionCopyTo () {
      var d = new ($T20())();
      var c = d;
      c.ICollection_CopyTo(JSIL.Array.New($T07(), 0), 0);
      c.ICollection_CopyTo(JSIL.Array.New($T21(), 0), 0);
      c.ICollection_CopyTo(JSIL.Array.New($T08(), 0), 0);
      c = d.get_Keys();
      c.ICollection_CopyTo(JSIL.Array.New($T07(), 0), 0);
      c.ICollection_CopyTo(JSIL.Array.New($T22(), 0), 0);
      c = d.get_Values();
      c.ICollection_CopyTo(JSIL.Array.New($T07(), 0), 0);
      c.ICollection_CopyTo(JSIL.Array.New($T08(), 0), 0);
      d.set_Item(3, null);
      c = d.get_Keys();
      c.ICollection_CopyTo(JSIL.Array.New($T07(), 1), 0);
      c.ICollection_CopyTo(JSIL.Array.New($T22(), 1), 0);
      c = d.get_Values();
      c.ICollection_CopyTo(JSIL.Array.New($T07(), 1), 0);
      c.ICollection_CopyTo(JSIL.Array.New($T08(), 1), 0);
    }
  )
    .Attribute($asm00.TypeRef("NUnit.Framework.TestAttribute"));

  $.Method({Static:false, Public:true }, "ICollectionCopyTo_ex1", 
    $sig.make(0x141, null, [], []), 
    function DictionaryTest_ICollectionCopyTo_ex1 () {
      var d = new ($T20())();
      var c = d.get_Keys();
      c.ICollection_CopyTo(JSIL.Array.New($T21(), 1), 0);
    }
  )
    .Attribute($asm00.TypeRef("NUnit.Framework.TestAttribute"))
    .Attribute($asm00.TypeRef("NUnit.Framework.ExpectedExceptionAttribute"), function () { return [$asm01.TypeRef("System.ArgumentException")]; });

  $.Method({Static:false, Public:true }, "ICollectionCopyTo_ex2", 
    $sig.make(0x142, null, [], []), 
    function DictionaryTest_ICollectionCopyTo_ex2 () {
      var d = new ($T20())();
      var c = d.get_Values();
      c.ICollection_CopyTo(JSIL.Array.New($T01(), 1), 0);
    }
  )
    .Attribute($asm00.TypeRef("NUnit.Framework.TestAttribute"))
    .Attribute($asm00.TypeRef("NUnit.Framework.ExpectedExceptionAttribute"), function () { return [$asm01.TypeRef("System.ArgumentException")]; });

  $.Method({Static:false, Public:true }, "ICollectionCopyTo_ex3", 
    $sig.make(0x144, null, [], []), 
    function DictionaryTest_ICollectionCopyTo_ex3 () {
      var d = new ($T20())();
      d.set_Item(3, "5");
      var c = d.get_Keys();
      c.ICollection_CopyTo(JSIL.Array.New($T08(), 1), 0);
    }
  )
    .Attribute($asm00.TypeRef("NUnit.Framework.TestAttribute"))
    .Attribute($asm00.TypeRef("NUnit.Framework.ExpectedExceptionAttribute"), function () { return [$asm01.TypeRef("System.ArgumentException")]; });

  $.Method({Static:false, Public:true }, "ICollectionCopyTo_ex4", 
    $sig.make(0x146, null, [], []), 
    function DictionaryTest_ICollectionCopyTo_ex4 () {
      var d = new ($T20())();
      d.set_Item(3, "5");
      var c = d.get_Values();
      c.ICollection_CopyTo(JSIL.Array.New($T08(), 1), 0);
    }
  )
    .Attribute($asm00.TypeRef("NUnit.Framework.TestAttribute"))
    .Attribute($asm00.TypeRef("NUnit.Framework.ExpectedExceptionAttribute"), function () { return [$asm01.TypeRef("System.ArgumentException")]; });

  $.Method({Static:false, Public:true }, "ICollectionCopyToDictionaryEntryArray", 
    $sig.make(0x123, null, [], []), 
    function DictionaryTest_ICollectionCopyToDictionaryEntryArray () {
      var collection = (new ($T23())()).__Initialize__([["foo", 42]]);
      $T06().AreEqual(1, collection.ICollection_get_Count());
      var entries = JSIL.Array.New($T12(), 1);
      collection.ICollection_CopyTo(entries, 0);
      $T06().AreEqual("foo", $T21().$Cast((entries[0]).get_Key()));
      $T06().AreEqual(42, $T01().$Cast((entries[0]).get_Value()));
    }
  )
    .Attribute($asm00.TypeRef("NUnit.Framework.TestAttribute"));

  $.Method({Static:false, Public:true }, "ICollectionCopyToInvalidArray", 
    $sig.make(0x130, null, [], []), 
    function DictionaryTest_ICollectionCopyToInvalidArray () {
      var collection = (new ($T23())()).__Initialize__([["foo", 42]]);
      $T06().AreEqual(1, collection.ICollection_get_Count());
      var array = JSIL.Array.New($T01(), 1);
      collection.ICollection_CopyTo(array, 0);
    }
  )
    .Attribute($asm00.TypeRef("NUnit.Framework.TestAttribute"))
    .Attribute($asm00.TypeRef("NUnit.Framework.ExpectedExceptionAttribute"), function () { return [$asm01.TypeRef("System.ArgumentException")]; });

  $.Method({Static:false, Public:true }, "ICollectionCopyToKeyValuePairArray", 
    $sig.make(0x11B, null, [], []), 
    function DictionaryTest_ICollectionCopyToKeyValuePairArray () {
      var collection = (new ($T23())()).__Initialize__([["foo", 42]]);
      $T06().AreEqual(1, collection.ICollection_get_Count());
      var pairs = JSIL.Array.New($T24(), 1);
      collection.ICollection_CopyTo(pairs, 0);
      $T06().AreEqual("foo", (pairs[0]).get_Key());
      $T06().AreEqual(42, (pairs[0]).get_Value());
    }
  )
    .Attribute($asm00.TypeRef("NUnit.Framework.TestAttribute"));

  $.Method({Static:false, Public:true }, "ICollectionCopyToObjectArray", 
    $sig.make(0x12E, null, [], []), 
    function DictionaryTest_ICollectionCopyToObjectArray () {
      var collection = (new ($T23())()).__Initialize__([["foo", 42]]);
      $T06().AreEqual(1, collection.ICollection_get_Count());
      var array = JSIL.Array.New($T07(), 1);
      collection.ICollection_CopyTo(array, 0);
      var pair = $T24().$Cast(array[0]);
      $T06().AreEqual("foo", pair.get_Key());
      $T06().AreEqual(42, pair.get_Value());
    }
  )
    .Attribute($asm00.TypeRef("NUnit.Framework.TestAttribute"));

  $.Method({Static:false, Public:true }, "ICollectionOfKeyValuePairContains", 
    $sig.make(0x10F, null, [], []), 
    function DictionaryTest_ICollectionOfKeyValuePairContains () {
      var collection = (new ($T23())()).__Initialize__([["foo", 42], ["bar", 12]]);
      $T06().AreEqual(2, collection.ICollection$b1_get_Count());
      $T06().IsFalse(collection.ICollection$b1_Contains(new ($T24())("baz", 13)));
      $T06().IsFalse(collection.ICollection$b1_Contains(new ($T24())("foo", 13)));
      $T06().IsTrue(collection.ICollection$b1_Contains(new ($T24())("foo", 42)));
    }
  )
    .Attribute($asm00.TypeRef("NUnit.Framework.TestAttribute"));

  $.Method({Static:false, Public:true }, "ICollectionOfKeyValuePairRemove", 
    $sig.make(0x115, null, [], []), 
    function DictionaryTest_ICollectionOfKeyValuePairRemove () {
      var dictionary = new ($T23())();
      dictionary.Add("foo", 42);
      dictionary.Add("bar", 12);
      var collection = dictionary;
      $T06().AreEqual(2, collection.ICollection$b1_get_Count());
      $T06().IsFalse(collection.ICollection$b1_Remove(new ($T24())("baz", 13)));
      $T06().IsFalse(collection.ICollection$b1_Remove(new ($T24())("foo", 13)));
      $T06().IsTrue(collection.ICollection$b1_Remove(new ($T24())("foo", 42)));
      $T06().AreEqual(12, dictionary.get_Item("bar"));
      $T06().IsFalse(dictionary.ContainsKey("foo"));
    }
  )
    .Attribute($asm00.TypeRef("NUnit.Framework.TestAttribute"));

  $.Method({Static:false, Public:true }, "IDictionary_Add_Null", 
    $sig.make(0xC6, null, [], []), 
    function DictionaryTest_IDictionary_Add_Null () {
      var d = new ($T20())();
      d.IDictionary_Add(1, null);
      d.IDictionary_set_Item(2, null);
      $T06().IsNull(d.IDictionary_get_Item(1));
      $T06().IsNull(d.IDictionary_get_Item(2));
    }
  )
    .Attribute($asm00.TypeRef("NUnit.Framework.TestAttribute"));

  $.Method({Static:false, Public:true }, "IDictionary_Add_Null_2", 
    $sig.make(0xC9, null, [], []), 
    function DictionaryTest_IDictionary_Add_Null_2 () {
      var d = new ($T02())();
      d.IDictionary_Add(1, null);
    }
  )
    .Attribute($asm00.TypeRef("NUnit.Framework.ExpectedExceptionAttribute"), function () { return [$asm01.TypeRef("System.ArgumentException")]; })
    .Attribute($asm00.TypeRef("NUnit.Framework.TestAttribute"));

  $.Method({Static:false, Public:true }, "IDictionary_Add1", 
    $sig.make(0xC0, null, [], []), 
    function DictionaryTest_IDictionary_Add1 () {
      var d = new ($T02())();
      d.IDictionary_Add(null, 1);
    }
  )
    .Attribute($asm00.TypeRef("NUnit.Framework.TestAttribute"))
    .Attribute($asm00.TypeRef("NUnit.Framework.ExpectedExceptionAttribute"), function () { return [$asm01.TypeRef("System.ArgumentNullException")]; });

  $.Method({Static:false, Public:true }, "IDictionary_Add2", 
    $sig.make(0xC2, null, [], []), 
    function DictionaryTest_IDictionary_Add2 () {
      var d = new ($T02())();
      d.IDictionary_Add("bar", 1);
    }
  )
    .Attribute($asm00.TypeRef("NUnit.Framework.ExpectedExceptionAttribute"), function () { return [$asm01.TypeRef("System.ArgumentException")]; })
    .Attribute($asm00.TypeRef("NUnit.Framework.TestAttribute"));

  $.Method({Static:false, Public:true }, "IDictionary_Add3", 
    $sig.make(0xC4, null, [], []), 
    function DictionaryTest_IDictionary_Add3 () {
      var d = new ($T02())();
      d.IDictionary_Add(1, "bar");
    }
  )
    .Attribute($asm00.TypeRef("NUnit.Framework.TestAttribute"))
    .Attribute($asm00.TypeRef("NUnit.Framework.ExpectedExceptionAttribute"), function () { return [$asm01.TypeRef("System.ArgumentException")]; });

  $.Method({Static:false, Public:true }, "IDictionary_Contains", 
    $sig.make(0x8F, null, [], []), 
    function DictionaryTest_IDictionary_Contains () {
      var d = new ($T02())();
      d.IDictionary_Add(1, 2);
      $T06().IsTrue(d.IDictionary_Contains(1));
      $T06().IsFalse(d.IDictionary_Contains(2));
      $T06().IsFalse(d.IDictionary_Contains("x"));
    }
  )
    .Attribute($asm00.TypeRef("NUnit.Framework.TestAttribute"));

  $.Method({Static:false, Public:true }, "IDictionary_Contains2", 
    $sig.make(0x9B, null, [], []), 
    function DictionaryTest_IDictionary_Contains2 () {
      var d = new ($T02())();
      d.IDictionary_Contains(null);
    }
  )
    .Attribute($asm00.TypeRef("NUnit.Framework.ExpectedExceptionAttribute"), function () { return [$asm01.TypeRef("System.ArgumentNullException")]; })
    .Attribute($asm00.TypeRef("NUnit.Framework.TestAttribute"));

  $.Method({Static:false, Public:true }, "IDictionary_IndexerGetNonExistingTest", 
    $sig.make(0xCE, null, [], []), 
    function DictionaryTest_IDictionary_IndexerGetNonExistingTest () {
      var d = new ($T02())();
      d.IDictionary_Add(1, 2);
      $T06().IsNull(d.IDictionary_get_Item(2));
      $T06().IsNull(d.IDictionary_get_Item("foo"));
    }
  )
    .Attribute($asm00.TypeRef("NUnit.Framework.TestAttribute"));

  $.Method({Static:false, Public:true }, "IDictionary_Remove1", 
    $sig.make(0xCB, null, [], []), 
    function DictionaryTest_IDictionary_Remove1 () {
      var d = new ($T02())();
      d.IDictionary_Add(1, 2);
      d.IDictionary_Remove(1);
      d.IDictionary_Remove(5);
      d.IDictionary_Remove("foo");
    }
  )
    .Attribute($asm00.TypeRef("NUnit.Framework.TestAttribute"));

  $.Method({Static:false, Public:true }, "IDictionary_Remove2", 
    $sig.make(0xCD, null, [], []), 
    function DictionaryTest_IDictionary_Remove2 () {
      var d = new ($T02())();
      d.IDictionary_Remove(null);
    }
  )
    .Attribute($asm00.TypeRef("NUnit.Framework.TestAttribute"))
    .Attribute($asm00.TypeRef("NUnit.Framework.ExpectedExceptionAttribute"), function () { return [$asm01.TypeRef("System.ArgumentNullException")]; });

  $.Method({Static:false, Public:true }, "IDictionaryAddTest", 
    $sig.make(0x46, null, [], []), 
    function DictionaryTest_IDictionaryAddTest () {
      var iDict = this._dictionary;
      iDict.IDictionary_Add("key1", "value1");
      iDict.IDictionary_Add("key2", "value3");
      $T06().AreEqual(2, iDict.ICollection_get_Count(), "IDictioanry interface add is not working!");
      iDict.IDictionary_Add(12, "value");
      iDict.IDictionary_Add("key", 34);
    }
  )
    .Attribute($asm00.TypeRef("NUnit.Framework.TestAttribute"))
    .Attribute($asm00.TypeRef("NUnit.Framework.ExpectedExceptionAttribute"), function () { return [$asm01.TypeRef("System.ArgumentException")]; });

  $.Method({Static:false, Public:true }, "IDictionaryEnumeratorTest", 
    $sig.make(0x4B, null, [], []), 
    function DictionaryTest_IDictionaryEnumeratorTest () {
      this._dictionary.Add("key1", "value1");
      this._dictionary.Add("key2", "value2");
      this._dictionary.Add("key3", "value3");
      this._dictionary.Add("key4", "value4");

      for (var itr = this._dictionary.IDictionary_GetEnumerator(); itr.IEnumerator_MoveNext(); ) {
        var o = itr.IEnumerator_get_Current();
        $T06().AreEqual($T12().__Type__, JSIL.GetType(o), "Current should return a type of DictionaryEntry");
        var entry = $T12().$Cast(itr.IEnumerator_get_Current()).MemberwiseClone();
      }
      $T06().AreEqual("value4", this._dictionary.get_Item("key4").toString(), "");
    }
  )
    .Attribute($asm00.TypeRef("NUnit.Framework.TestAttribute"));

  $.Method({Static:false, Public:true }, "IEnumeratorGenericTest", 
    $sig.make(0x4A, null, [], []), 
    function DictionaryTest_IEnumeratorGenericTest () {
      this._dictionary.Add("key1", "value1");
      this._dictionary.Add("key2", "value2");
      this._dictionary.Add("key3", "value3");
      this._dictionary.Add("key4", "value4");

      for (var itr = this._dictionary.IEnumerable$b1_GetEnumerator(); itr.IEnumerator_MoveNext(); ) {
        var o = itr.IEnumerator$b1_get_Current().MemberwiseClone();
        $T06().AreEqual($T1D().__Type__, JSIL.GetType(o), "Current should return a type of KeyValuePair<object,string>");
        var entry = itr.IEnumerator$b1_get_Current().MemberwiseClone();
      }
      $T06().AreEqual("value4", this._dictionary.get_Item("key4").toString(), "");
    }
  )
    .Attribute($asm00.TypeRef("NUnit.Framework.TestAttribute"));

  $.Method({Static:false, Public:true }, "IEnumeratorTest", 
    $sig.make(0x48, null, [], []), 
    function DictionaryTest_IEnumeratorTest () {
      this._dictionary.Add("key1", "value1");
      this._dictionary.Add("key2", "value2");
      this._dictionary.Add("key3", "value3");
      this._dictionary.Add("key4", "value4");

      for (var itr = this._dictionary.IEnumerable_GetEnumerator(); itr.IEnumerator_MoveNext(); ) {
        var o = itr.IEnumerator_get_Current();
        $T06().AreEqual($T1D().__Type__, JSIL.GetType(o), "Current should return a type of KeyValuePair");
        var entry = $T1D().$Cast(itr.IEnumerator_get_Current()).MemberwiseClone();
      }
      $T06().AreEqual("value4", this._dictionary.get_Item("key4").toString(), "");
    }
  )
    .Attribute($asm00.TypeRef("NUnit.Framework.TestAttribute"));

  $.Method({Static:false, Public:true }, "IndexerGetExistingTest", 
    $sig.make(0x27, null, [], []), 
    function DictionaryTest_IndexerGetExistingTest () {
      this._dictionary.Add("key1", "value");
      $T06().AreEqual("value", this._dictionary.get_Item("key1").toString(), "Add failed!");
    }
  )
    .Attribute($asm00.TypeRef("NUnit.Framework.TestAttribute"));

  $.Method({Static:false, Public:true }, "IndexerGetNonExistingTest", 
    $sig.make(0x28, null, [], []), 
    function DictionaryTest_IndexerGetNonExistingTest () {
      var foo = this._dictionary.get_Item("foo");
    }
  )
    .Attribute($asm00.TypeRef("NUnit.Framework.TestAttribute"))
    .Attribute($asm00.TypeRef("NUnit.Framework.ExpectedExceptionAttribute"), function () { return [$asm01.TypeRef("System.Collections.Generic.KeyNotFoundException")]; });

  $.Method({Static:false, Public:true }, "IndexerGetNullTest", 
    $sig.make(0x29, null, [], []), 
    function DictionaryTest_IndexerGetNullTest () {
      var s = this._dictionary.get_Item(null);
    }
  )
    .Attribute($asm00.TypeRef("NUnit.Framework.TestAttribute"))
    .Attribute($asm00.TypeRef("NUnit.Framework.ExpectedExceptionAttribute"), function () { return [$asm01.TypeRef("System.ArgumentNullException")]; });

  $.Method({Static:false, Public:true }, "IndexerSetExistingTest", 
    $sig.make(0x2A, null, [], []), 
    function DictionaryTest_IndexerSetExistingTest () {
      this._dictionary.Add("key1", "value1");
      this._dictionary.set_Item("key1", "value2");
      $T06().AreEqual(1, this._dictionary.get_Count());
      $T06().AreEqual("value2", this._dictionary.get_Item("key1"));
    }
  )
    .Attribute($asm00.TypeRef("NUnit.Framework.TestAttribute"));

  $.Method({Static:false, Public:true }, "IndexerSetNonExistingTest", 
    $sig.make(0x2B, null, [], []), 
    function DictionaryTest_IndexerSetNonExistingTest () {
      this._dictionary.set_Item("key1", "value1");
      $T06().AreEqual(1, this._dictionary.get_Count());
      $T06().AreEqual("value1", this._dictionary.get_Item("key1"));
    }
  )
    .Attribute($asm00.TypeRef("NUnit.Framework.TestAttribute"));

  $.Method({Static:false, Public:true }, "IndexerSetNullTest", 
    $sig.make(0x2E, null, [], []), 
    function DictionaryTest_IndexerSetNullTest () {
      this._dictionary.set_Item(null, "bar");
    }
  )
    .Attribute($asm00.TypeRef("NUnit.Framework.TestAttribute"))
    .Attribute($asm00.TypeRef("NUnit.Framework.ExpectedExceptionAttribute"), function () { return [$asm01.TypeRef("System.ArgumentNullException")]; });

  $.Method({Static:false, Public:true }, "KeyCollectionTest", 
    $sig.make(0x66, null, [], []), 
    function DictionaryTest_KeyCollectionTest () {
      this._dictionary.Add("key1", "value1");
      this._dictionary.Add("key2", "value2");
      this._dictionary.Add("key3", "value3");
      this._dictionary.Add("key4", "value4");
      var keys = this._dictionary.IDictionary$b2_get_Keys();
      $T06().AreEqual(4, keys.ICollection$b1_get_Count());
      var i = 0;
      var enumerator = keys.IEnumerable$b1_GetEnumerator();
      try {

        while (enumerator.IEnumerator_MoveNext()) {
          var key = enumerator.IEnumerator$b1_get_Current();
          ++i;
        }
      } finally {
        if (enumerator !== null) {
          enumerator.IDisposable_Dispose();
        }
      }
      $T06().AreEqual(4, i);
    }
  )
    .Attribute($asm00.TypeRef("NUnit.Framework.TestAttribute"));

  $.Method({Static:false, Public:true }, "KeyEnumerator_Current", 
    $sig.make(0x13C, null, [], []), 
    function DictionaryTest_KeyEnumerator_Current () {
      var $l$gc__DisplayClass = new ($T2A())();
      $l$gc__DisplayClass.e1 = new ($T1B())();
      $T06().IsFalse(this.Throws(function () {
            var x = this.e1.get_Current();
          }.bind($l$gc__DisplayClass)));
      var d = $T02().prototype.get_Keys.call((new ($T02())()));
      $l$gc__DisplayClass.e2 = d.GetEnumerator();
      $T06().IsFalse(this.Throws(function () {
            var x = this.e2.get_Current();
          }.bind($l$gc__DisplayClass)));
      $l$gc__DisplayClass.e2.MoveNext();
      $T06().IsFalse(this.Throws(function () {
            var x = this.e2.get_Current();
          }.bind($l$gc__DisplayClass)));
      $l$gc__DisplayClass.e2.Dispose();
      $T06().IsFalse(this.Throws(function () {
            var x = this.e2.get_Current();
          }.bind($l$gc__DisplayClass)));
      $l$gc__DisplayClass.e3 = d.IEnumerable$b1_GetEnumerator();
      $T06().IsFalse(this.Throws(function () {
            var x = this.e3.IEnumerator$b1_get_Current();
          }.bind($l$gc__DisplayClass)));
      $l$gc__DisplayClass.e3.IEnumerator_MoveNext();
      $T06().IsFalse(this.Throws(function () {
            var x = this.e3.IEnumerator$b1_get_Current();
          }.bind($l$gc__DisplayClass)));
      $l$gc__DisplayClass.e3.IDisposable_Dispose();
      $T06().IsFalse(this.Throws(function () {
            var x = this.e3.IEnumerator$b1_get_Current();
          }.bind($l$gc__DisplayClass)));
      $l$gc__DisplayClass.e4 = d.IEnumerable_GetEnumerator();
      $T06().IsTrue(this.Throws(function () {
            var x = this.e4.IEnumerator_get_Current();
          }.bind($l$gc__DisplayClass)));
      $l$gc__DisplayClass.e4.IEnumerator_MoveNext();
      $T06().IsTrue(this.Throws(function () {
            var x = this.e4.IEnumerator_get_Current();
          }.bind($l$gc__DisplayClass)));
      $T05().$Cast($l$gc__DisplayClass.e4).IDisposable_Dispose();
      $T06().IsTrue(this.Throws(function () {
            var x = this.e4.IEnumerator_get_Current();
          }.bind($l$gc__DisplayClass)));
    }
  )
    .Attribute($asm00.TypeRef("NUnit.Framework.TestAttribute"));

  $.Method({Static:false, Public:true }, "KeyObjectMustNotGetChangedIfKeyAlreadyExists", 
    $sig.make(0xD2, null, [], []), 
    function DictionaryTest_KeyObjectMustNotGetChangedIfKeyAlreadyExists () {
      var d = new ($T23())();
      var s = "Test";
      var s2 = (("Tes" + "T".toLowerCase()));
      d.set_Item(s, 1);
      d.set_Item(s2, 2);
      var comp = $T21().Empty;
      var enumerator = d.get_Keys().GetEnumerator();
      try {

        while (enumerator.MoveNext()) {
          var s3 = enumerator.get_Current();
          comp = s3;
        }
      } finally {
        enumerator.IDisposable_Dispose();
      }
      $T06().IsTrue((s === comp));
    }
  )
    .Attribute($asm00.TypeRef("NUnit.Framework.TestAttribute"));

  $.Method({Static:false, Public:true }, "KeyValueEnumeratorTest", 
    $sig.make(0x67, null, [], []), 
    function DictionaryTest_KeyValueEnumeratorTest () {
      var d = new ($T02())();
      d.IDictionary$b2_set_Item(9, 1);
      d.IDictionary$b2_set_Item(10, 2);
      d.IDictionary$b2_set_Item(19, 3);
      $T06().AreEqual(
        d.ICollection$b1_get_Count(), 
        d.IDictionary$b2_get_Keys().ICollection$b1_get_Count(), 
        "d and d.Keys don't appear to match"
      );
      $T06().AreEqual(
        d.IDictionary$b2_get_Values().ICollection$b1_get_Count(), 
        d.IDictionary$b2_get_Keys().ICollection$b1_get_Count(), 
        "d.Keys and d.Values don't appear to match"
      );
      var count = 0;
      var enumerator = d.IDictionary$b2_get_Values().IEnumerable$b1_GetEnumerator();
      try {

        while (enumerator.IEnumerator_MoveNext()) {
          var i = enumerator.IEnumerator$b1_get_Current();
          ++count;
        }
      } finally {
        if (enumerator !== null) {
          enumerator.IDisposable_Dispose();
        }
      }
      $T06().AreEqual(count, d.IDictionary$b2_get_Values().ICollection$b1_get_Count(), "d.Values doesn't have the correct number of elements");
      count = 0;
      enumerator = d.IDictionary$b2_get_Keys().IEnumerable$b1_GetEnumerator();
      try {

        while (enumerator.IEnumerator_MoveNext()) {
          i = enumerator.IEnumerator$b1_get_Current();
          ++count;
        }
      } finally {
        if (enumerator !== null) {
          enumerator.IDisposable_Dispose();
        }
      }
      $T06().AreEqual(count, d.IDictionary$b2_get_Keys().ICollection$b1_get_Count(), "d.Keys doesn't have the correct number of elements");
      var nkeys = count;
      count = 0;
      enumerator = d.IDictionary$b2_get_Keys().IEnumerable$b1_GetEnumerator();
      try {

        while (enumerator.IEnumerator_MoveNext()) {
          i = enumerator.IEnumerator$b1_get_Current();
          var foo = d.IDictionary$b2_get_Item(i);
          if (count++ >= nkeys) {
            $T06().Fail("Reading a value appears to trash enumerator state");
          }
        }
      } finally {
        if (enumerator !== null) {
          enumerator.IDisposable_Dispose();
        }
      }
    }
  )
    .Attribute($asm00.TypeRef("NUnit.Framework.TestAttribute"));

  $.Method({Static:false, Public:true }, "ObjectAsKeyTest", 
    $sig.make(0x44, null, [], []), 
    function DictionaryTest_ObjectAsKeyTest () {
      var key2 = null, key3 = null;
      var dict = new ($T0A())();
      dict.Add(new ($T31())("key1", 234), "value1");
      dict.Add((key2 = new ($T31())("key2", 444)), "value2");
      dict.Add((key3 = new ($T31())("key3", 5655)), "value3");
      $T06().AreEqual("value2", dict.get_Item(key2), "value is not returned!");
      $T06().AreEqual("value3", dict.get_Item(key3), "neg: exception should not be thrown!");
    }
  )
    .Attribute($asm00.TypeRef("NUnit.Framework.TestAttribute"));

  $.Method({Static:false, Public:true }, "PlainEnumeratorReturnTest", 
    $sig.make(0x71, null, [], []), 
    function DictionaryTest_PlainEnumeratorReturnTest () {
      this._dictionary.set_Item("foo", "bar");
      var enumerator = $T00().prototype.GetEnumerator.call(this._dictionary).MemberwiseClone();
      $T06().IsTrue(enumerator.IEnumerator_MoveNext(), "#1");
      $T06().AreEqual($T1D().__Type__, JSIL.GetType(enumerator.IEnumerator_get_Current()), "#2");
      $T06().AreEqual($T12().__Type__, JSIL.GetType($T1E().$Cast(enumerator).IDictionaryEnumerator_get_Entry()), "#3");
      $T06().AreEqual($T1D().__Type__, JSIL.GetType($T1E().$Cast(enumerator).IEnumerator_get_Current()), "#4");
      $T06().AreEqual($T1D().__Type__, JSIL.GetType(enumerator.IEnumerator$b1_get_Current()), "#5");
    }
  )
    .Attribute($asm00.TypeRef("NUnit.Framework.TestAttribute"));

  $.Method({Static:false, Public:true }, "RemoveTest", 
    $sig.make(0x2C, null, [], []), 
    function DictionaryTest_RemoveTest () {
      this._dictionary.Add("key1", "value1");
      this._dictionary.Add("key2", "value2");
      this._dictionary.Add("key3", "value3");
      this._dictionary.Add("key4", "value4");
      $T06().IsTrue(this._dictionary.Remove("key3"));
      $T06().IsFalse(this._dictionary.Remove("foo"));
      $T06().AreEqual(3, this._dictionary.get_Count());
      $T06().IsFalse(this._dictionary.ContainsKey("key3"));
    }
  )
    .Attribute($asm00.TypeRef("NUnit.Framework.TestAttribute"));

  $.Method({Static:false, Public:true }, "RemoveTest2", 
    $sig.make(0x2D, null, [], []), 
    function DictionaryTest_RemoveTest2 () {
      var m = new ($T08())(10, 5);
      var m2 = new ($T08())(20, 5);
      var m3 = new ($T08())(12, 3);
      this._dictionary2.Add(m, m);
      this._dictionary2.Add(m2, m2);
      this._dictionary2.Add(m3, m3);
      this._dictionary2.Remove(m);
      $T06().AreEqual(20, this._dictionary2.get_Item(m2).get_Value(), "#4");
    }
  )
    .Attribute($asm00.TypeRef("NUnit.Framework.TestAttribute"));

  $.Method({Static:false, Public:true }, "ResetKeysEnumerator", 
    $sig.make(0x10A, null, [], []), 
    function DictionaryTest_ResetKeysEnumerator () {
      var enumerator = (new ($T0D())()).__Initialize__([["monkey", "singe"], ["singe", "mono"], ["mono", "monkey"]]).get_Keys().GetEnumerator().MemberwiseClone();
      $T06().IsTrue(enumerator.IEnumerator_MoveNext());
      $T06().IsTrue(enumerator.IEnumerator_MoveNext());
      enumerator.IEnumerator_Reset();
      $T06().IsTrue(enumerator.IEnumerator_MoveNext());
      $T06().IsTrue(enumerator.IEnumerator_MoveNext());
      $T06().IsTrue(enumerator.IEnumerator_MoveNext());
      $T06().IsFalse(enumerator.IEnumerator_MoveNext());
    }
  )
    .Attribute($asm00.TypeRef("NUnit.Framework.TestAttribute"));

  $.Method({Static:false, Public:true }, "ResetShimEnumerator", 
    $sig.make(0x10D, null, [], []), 
    function DictionaryTest_ResetShimEnumerator () {
      var enumerator = (new ($T0D())()).__Initialize__([["monkey", "singe"], ["singe", "mono"], ["mono", "monkey"]]).IDictionary_GetEnumerator();
      $T06().IsTrue(enumerator.IEnumerator_MoveNext());
      $T06().IsTrue(enumerator.IEnumerator_MoveNext());
      enumerator.IEnumerator_Reset();
      $T06().IsTrue(enumerator.IEnumerator_MoveNext());
      $T06().IsTrue(enumerator.IEnumerator_MoveNext());
      $T06().IsTrue(enumerator.IEnumerator_MoveNext());
      $T06().IsFalse(enumerator.IEnumerator_MoveNext());
    }
  )
    .Attribute($asm00.TypeRef("NUnit.Framework.TestAttribute"));

  $.Method({Static:false, Public:true }, "ResetValuesEnumerator", 
    $sig.make(0x10C, null, [], []), 
    function DictionaryTest_ResetValuesEnumerator () {
      var enumerator = (new ($T0D())()).__Initialize__([["monkey", "singe"], ["singe", "mono"], ["mono", "monkey"]]).get_Values().GetEnumerator().MemberwiseClone();
      $T06().IsTrue(enumerator.IEnumerator_MoveNext());
      $T06().IsTrue(enumerator.IEnumerator_MoveNext());
      enumerator.IEnumerator_Reset();
      $T06().IsTrue(enumerator.IEnumerator_MoveNext());
      $T06().IsTrue(enumerator.IEnumerator_MoveNext());
      $T06().IsTrue(enumerator.IEnumerator_MoveNext());
      $T06().IsFalse(enumerator.IEnumerator_MoveNext());
    }
  )
    .Attribute($asm00.TypeRef("NUnit.Framework.TestAttribute"));

  $.Method({Static:false, Public:true }, "ResizeTest", 
    $sig.make(0x64, null, [], []), 
    function DictionaryTest_ResizeTest () {
      var dictionary = $sig.get(0x336, null, [$asm01.System.Int32], []).Construct($T00(), 3);
      dictionary.Add("key1", "value1");
      dictionary.Add("key2", "value2");
      dictionary.Add("key3", "value3");
      $T06().AreEqual(3, dictionary.get_Count());
      dictionary.Add("key4", "value4");
      $T06().AreEqual(4, dictionary.get_Count());
      $T06().AreEqual("value1", dictionary.get_Item("key1").toString(), "");
      $T06().AreEqual("value2", dictionary.get_Item("key2").toString(), "");
      $T06().AreEqual("value4", dictionary.get_Item("key4").toString(), "");
      $T06().AreEqual("value3", dictionary.get_Item("key3").toString(), "");
    }
  )
    .Attribute($asm00.TypeRef("NUnit.Framework.TestAttribute"));

  $.Method({Static:false, Public:true }, "SetUp", 
    $sig.make(0x18, null, [], []), 
    function DictionaryTest_SetUp () {
      this._dictionary = new ($T00())();
      this._dictionary2 = new ($T09())();
      this._dictionary3 = new ($T02())();
    }
  )
    .Attribute($asm00.TypeRef("NUnit.Framework.SetUpAttribute"));

  $.Method({Static:false, Public:true }, "SliceCollectionsEnumeratorTest", 
    $sig.make(0x6F, null, [], []), 
    function DictionaryTest_SliceCollectionsEnumeratorTest () {
      var values = new ($T23())();
      var ke = values.get_Keys().GetEnumerator().MemberwiseClone();
      var ve = values.get_Values().GetEnumerator().MemberwiseClone();
      $T06().IsTrue($T2D().$Is(ke));
      $T06().IsTrue($T35().$Is(ve));
    }
  )
    .Attribute($asm00.TypeRef("NUnit.Framework.TestAttribute"));

  $.Method({Static:false, Public:false}, "Throws", 
    $sig.make(0x137, $.Boolean, [$asm00.TypeRef("MonoTests.System.Collections.Generic.DictionaryTest/D")], []), 
    function DictionaryTest_Throws (d) {
      try {
        d();
        var result = false;
      } catch ($exception) {
        result = true;
      }
      return result;
    }
  );

  $.Method({Static:false, Public:true }, "TryGetValueTest", 
    $sig.make(0x42, null, [], []), 
    function DictionaryTest_TryGetValueTest () {
      this._dictionary.Add("key1", "value1");
      this._dictionary.Add("key2", "value2");
      this._dictionary.Add("key3", "value3");
      this._dictionary.Add("key4", "value4");
      var value = new JSIL.Variable("");
      var retrieved = this._dictionary.TryGetValue("key4", /* ref */ value);
      $T06().IsTrue(retrieved);
      $T06().AreEqual("value4", $T21().$Cast(value.value), "TryGetValue does not return value!");
      retrieved = this._dictionary.TryGetValue("key7", /* ref */ value);
      $T06().IsFalse(retrieved);
      $T06().IsNull(value.value, "value for non existant value should be null!");
    }
  )
    .Attribute($asm00.TypeRef("NUnit.Framework.TestAttribute"));

  $.Method({Static:false, Public:true }, "ValueEnumerator_Current", 
    $sig.make(0x13E, null, [], []), 
    function DictionaryTest_ValueEnumerator_Current () {
      var $l$gc__DisplayClass = new ($T38())();
      $l$gc__DisplayClass.e1 = new ($T39())();
      $T06().IsFalse(this.Throws(function () {
            var x = this.e1.get_Current();
          }.bind($l$gc__DisplayClass)));
      var d = $T02().prototype.get_Values.call((new ($T02())()));
      $l$gc__DisplayClass.e2 = d.GetEnumerator();
      $T06().IsFalse(this.Throws(function () {
            var x = this.e2.get_Current();
          }.bind($l$gc__DisplayClass)));
      $l$gc__DisplayClass.e2.MoveNext();
      $T06().IsFalse(this.Throws(function () {
            var x = this.e2.get_Current();
          }.bind($l$gc__DisplayClass)));
      $l$gc__DisplayClass.e2.Dispose();
      $T06().IsFalse(this.Throws(function () {
            var x = this.e2.get_Current();
          }.bind($l$gc__DisplayClass)));
      $l$gc__DisplayClass.e3 = d.IEnumerable$b1_GetEnumerator();
      $T06().IsFalse(this.Throws(function () {
            var x = this.e3.IEnumerator$b1_get_Current();
          }.bind($l$gc__DisplayClass)));
      $l$gc__DisplayClass.e3.IEnumerator_MoveNext();
      $T06().IsFalse(this.Throws(function () {
            var x = this.e3.IEnumerator$b1_get_Current();
          }.bind($l$gc__DisplayClass)));
      $l$gc__DisplayClass.e3.IDisposable_Dispose();
      $T06().IsFalse(this.Throws(function () {
            var x = this.e3.IEnumerator$b1_get_Current();
          }.bind($l$gc__DisplayClass)));
      $l$gc__DisplayClass.e4 = d.IEnumerable_GetEnumerator();
      $T06().IsTrue(this.Throws(function () {
            var x = this.e4.IEnumerator_get_Current();
          }.bind($l$gc__DisplayClass)));
      $l$gc__DisplayClass.e4.IEnumerator_MoveNext();
      $T06().IsTrue(this.Throws(function () {
            var x = this.e4.IEnumerator_get_Current();
          }.bind($l$gc__DisplayClass)));
      $T05().$Cast($l$gc__DisplayClass.e4).IDisposable_Dispose();
      $T06().IsTrue(this.Throws(function () {
            var x = this.e4.IEnumerator_get_Current();
          }.bind($l$gc__DisplayClass)));
    }
  )
    .Attribute($asm00.TypeRef("NUnit.Framework.TestAttribute"));

  $.Method({Static:false, Public:true }, "ValuesCopyToObjectArray", 
    $sig.make(0x135, null, [], []), 
    function DictionaryTest_ValuesCopyToObjectArray () {
      var dictionary = (new ($T0D())()).__Initialize__([["foo", "bar"]]);
      var values = dictionary.get_Values();
      var array = JSIL.Array.New($T07(), values.ICollection_get_Count());
      values.ICollection_CopyTo(array, 0);
      $T06().AreEqual("bar", array[0]);
    }
  )
    .Attribute($asm00.TypeRef("NUnit.Framework.TestAttribute"));

  $.Method({Static:false, Public:true }, "ValueTypeTest", 
    $sig.make(0x43, null, [], []), 
    function DictionaryTest_ValueTypeTest () {
      var dict = new ($T3A())();
      dict.Add(10, 10.300000190734863);
      dict.Add(11, 10.399999618530273);
      dict.Add(12, 10.5);
      $T06().AreEqual(10.399999618530273, dict.get_Item(11), "#5");
    }
  )
    .Attribute($asm00.TypeRef("NUnit.Framework.TestAttribute"));

  $.Method({Static:false, Public:true }, "ZeroCapacity", 
    $sig.make(0x7A, null, [], []), 
    function DictionaryTest_ZeroCapacity () {
      var intv = new JSIL.Variable(0);
      var x = $sig.get(0x336, null, [$asm01.System.Int32], []).Construct($T02(), 0);
      x.Add(1, 2);
      x = $sig.get(0x336, null, [$asm01.System.Int32], []).Construct($T02(), 0);
      x.Clear();
      x = $sig.get(0x336, null, [$asm01.System.Int32], []).Construct($T02(), 0);
      var aa = x.get_Count();
      x = $sig.get(0x336, null, [$asm01.System.Int32], []).Construct($T02(), 0);
      try {
        var i = x.get_Item(1);
      } catch ($exception) {
        if ($T3B().$Is($exception)) {
        } else {
          throw $exception;
        }
      }
      var b = x.ContainsKey(10);
      b = $T02().prototype.ContainsValue.call(x, 10);
      x = $sig.get(0x336, null, [$asm01.System.Int32], []).Construct($T02(), 0);
      x.Remove(10);
      x = $sig.get(0x336, null, [$asm01.System.Int32], []).Construct($T02(), 0);
      x.TryGetValue(1, /* ref */ intv);
      var oa = x.get_Keys();
      var ob = x.get_Values();
      var enumerator = $T02().prototype.GetEnumerator.call(x);
      try {

        while (enumerator.MoveNext()) {
          var a = enumerator.get_Current().MemberwiseClone();
        }
      } finally {
        enumerator.IDisposable_Dispose();
      }
    }
  )
    .Attribute($asm00.TypeRef("NUnit.Framework.TestAttribute"));

  $.Field({Static:false, Public:false}, "_dictionary", $asm01.TypeRef("System.Collections.Generic.Dictionary`2", [$.String, $.Object])); 
  $.Field({Static:false, Public:false}, "_dictionary2", $asm01.TypeRef("System.Collections.Generic.Dictionary`2", [$asm00.TypeRef("MonoTests.System.Collections.Generic.DictionaryTest/MyClass"), $asm00.TypeRef("MonoTests.System.Collections.Generic.DictionaryTest/MyClass")])); 
  $.Field({Static:false, Public:false}, "_dictionary3", $asm01.TypeRef("System.Collections.Generic.Dictionary`2", [$.Int32, $.Int32])); 
})
  .Attribute($asm00.TypeRef("NUnit.Framework.TestFixtureAttribute"));

JSIL.MakeClass($asm01.TypeRef("System.Object"), "MonoTests.System.Collections.Generic.DictionaryTest/MyClass", false, [], function ($) {
  var $thisType = $.publicInterface;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm01.System.Int32)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm01.System.Object)) ();
  };

  $.Method({Static:false, Public:true }, ".ctor", 
    $sig.make(0x781, null, [$.Int32, $.Int32], []), 
    function MyClass__ctor (a, b) {
      this.a = a;
      this.b = b;
    }
  );

  $.Method({Static:false, Public:true }, "Object.Equals", 
    $sig.make(0x783, $.Boolean, [$.Object], []), 
    function MyClass_Object_Equals (obj) {
      return ($thisType.$Is(obj) && ($thisType.$Cast(obj).get_Value() === this.a));
    }
  );

  $.Method({Static:false, Public:true }, "get_Value", 
    $sig.make(0x780, $.Int32, [], []), 
    function MyClass_get_Value () {
      return this.a;
    }
  );

  $.Method({Static:false, Public:true }, "GetHashCode", 
    $sig.make(0x782, $.Int32, [], []), 
    function MyClass_GetHashCode () {
      return ((this.a + this.b) | 0);
    }
  );

  $.Field({Static:false, Public:false}, "a", $.Int32); 
  $.Field({Static:false, Public:false}, "b", $.Int32); 
  $.Property({Static:false, Public:true }, "Value", $.Int32);

});

JSIL.MakeClass($asm01.TypeRef("System.Object"), "MonoTests.System.Collections.Generic.DictionaryTest/MyTest", false, [], function ($) {
  var $thisType = $.publicInterface;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm01.System.String)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm01.System.Int32)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm01.System.Object)) ();
  };

  $.Method({Static:false, Public:true }, ".ctor", 
    $sig.make(0x745, null, [$.String, $.Int32], []), 
    function MyTest__ctor (name, number) {
      this.Name = name;
      this.RollNo = number;
    }
  );

  $.Method({Static:false, Public:true }, "Object.Equals", 
    $sig.make(0x749, $.Boolean, [$.Object], []), 
    function MyTest_Object_Equals (obj) {
      var myt = $thisType.$As(obj);
      return (myt.Name.Object_Equals(this.Name) && myt.RollNo.Equals(this.RollNo));
    }
  );

  $.Method({Static:false, Public:true }, "GetHashCode", 
    $sig.make(0x746, $.Int32, [], []), 
    function MyTest_GetHashCode () {
      return (((JSIL.ObjectHashCode(this.Name)) ^ this.RollNo) | 0);
    }
  );

  $.Field({Static:false, Public:true }, "Name", $.String); 
  $.Field({Static:false, Public:true }, "RollNo", $.Int32); 
});

JSIL.MakeDelegate("MonoTests.System.Collections.Generic.DictionaryTest/D", false, []);

JSIL.MakeClass($asm01.TypeRef("System.Object"), "MonoTests.System.Collections.Generic.DictionaryTest/<>c__DisplayClassb", false, [], function ($) {
  var $thisType = $.publicInterface;

  $.Method({Static:false, Public:true }, ".ctor", 
    $sig.make(0x74A, null, [], []), 
    function $l$gc__DisplayClassb__ctor () {
    }
  );

  $.Field({Static:false, Public:true }, "e1", $asm01.TypeRef("System.Collections.Generic.Dictionary`2/Enumerator", [$.Int32, $.Int32])); 
  $.Field({Static:false, Public:true }, "e2", $asm01.TypeRef("System.Collections.Generic.Dictionary`2/Enumerator", [$.Int32, $.Int32])); 
  $.Field({Static:false, Public:true }, "e3", $asm01.TypeRef("System.Collections.Generic.IEnumerator`1", [$asm01.TypeRef("System.Collections.Generic.KeyValuePair`2", [$.Int32, $.Int32])])); 
  $.Field({Static:false, Public:true }, "e4", $asm01.TypeRef("System.Collections.IEnumerator")); 
})
  .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

JSIL.MakeClass($asm01.TypeRef("System.Object"), "MonoTests.System.Collections.Generic.DictionaryTest/<>c__DisplayClass17", false, [], function ($) {
  var $thisType = $.publicInterface;

  $.Method({Static:false, Public:true }, ".ctor", 
    $sig.make(0x762, null, [], []), 
    function $l$gc__DisplayClass17__ctor () {
    }
  );

  $.Field({Static:false, Public:true }, "e1", $asm01.TypeRef("System.Collections.Generic.Dictionary`2/KeyCollection/Enumerator", [$.Int32, $.Int32])); 
  $.Field({Static:false, Public:true }, "e2", $asm01.TypeRef("System.Collections.Generic.Dictionary`2/KeyCollection/Enumerator", [$.Int32, $.Int32])); 
  $.Field({Static:false, Public:true }, "e3", $asm01.TypeRef("System.Collections.Generic.IEnumerator`1", [$.Int32])); 
  $.Field({Static:false, Public:true }, "e4", $asm01.TypeRef("System.Collections.IEnumerator")); 
})
  .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

JSIL.MakeClass($asm01.TypeRef("System.Object"), "MonoTests.System.Collections.Generic.DictionaryTest/<>c__DisplayClass23", false, [], function ($) {
  var $thisType = $.publicInterface;

  $.Method({Static:false, Public:true }, ".ctor", 
    $sig.make(0x747, null, [], []), 
    function $l$gc__DisplayClass23__ctor () {
    }
  );

  $.Field({Static:false, Public:true }, "e1", $asm01.TypeRef("System.Collections.Generic.Dictionary`2/ValueCollection/Enumerator", [$.Int32, $.Int32])); 
  $.Field({Static:false, Public:true }, "e2", $asm01.TypeRef("System.Collections.Generic.Dictionary`2/ValueCollection/Enumerator", [$.Int32, $.Int32])); 
  $.Field({Static:false, Public:true }, "e3", $asm01.TypeRef("System.Collections.Generic.IEnumerator`1", [$.Int32])); 
  $.Field({Static:false, Public:true }, "e4", $asm01.TypeRef("System.Collections.IEnumerator")); 
})
  .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

JSIL.DeclareNamespace("CorlibTest");
JSIL.MakeClass($asm01.TypeRef("System.Object"), "CorlibTest.Program", true, [], function ($) {
  var $thisType = $.publicInterface;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm00.MonoTests.System.TimeSpanTest)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm01.System.Type)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm01.System.Collections.Generic.List$b1.Of($asm01.System.Reflection.MethodInfo))) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm01.System.Reflection.MethodInfo)) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize(System.Array.Of($asm01.System.Reflection.MethodInfo))) ();
  };
  var $T05 = function () {
    return ($T05 = JSIL.Memoize($asm01.System.Int32)) ();
  };
  var $T06 = function () {
    return ($T06 = JSIL.Memoize($asm01.System.Reflection.MemberInfo)) ();
  };
  var $T07 = function () {
    return ($T07 = JSIL.Memoize($asm00.NUnit.Framework.TestAttribute)) ();
  };
  var $T08 = function () {
    return ($T08 = JSIL.Memoize($asm00.NUnit.Framework.SetUpAttribute)) ();
  };
  var $T09 = function () {
    return ($T09 = JSIL.Memoize($asm01.System.Collections.Generic.List$b1_Enumerator.Of($asm01.System.Reflection.MethodInfo))) ();
  };
  var $T0A = function () {
    return ($T0A = JSIL.Memoize(System.Array.Of($asm00.NUnit.Framework.ExpectedExceptionAttribute))) ();
  };
  var $T0B = function () {
    return ($T0B = JSIL.Memoize($asm00.NUnit.Framework.ExpectedExceptionAttribute)) ();
  };
  var $T0C = function () {
    return ($T0C = JSIL.Memoize(System.Array.Of($asm00.NUnit.Framework.IgnoreAttribute))) ();
  };
  var $T0D = function () {
    return ($T0D = JSIL.Memoize($asm00.NUnit.Framework.IgnoreAttribute)) ();
  };
  var $T0E = function () {
    return ($T0E = JSIL.Memoize($asm01.System.Console)) ();
  };
  var $T0F = function () {
    return ($T0F = JSIL.Memoize($asm01.System.Object)) ();
  };
  var $T10 = function () {
    return ($T10 = JSIL.Memoize($asm01.System.Void)) ();
  };
  var $T11 = function () {
    return ($T11 = JSIL.Memoize($asm00.NUnit.Framework.Assert)) ();
  };
  var $T12 = function () {
    return ($T12 = JSIL.Memoize($asm01.System.Exception)) ();
  };
  var $T13 = function () {
    return ($T13 = JSIL.Memoize($asm01.System.IDisposable)) ();
  };

  $.Method({Static:false, Public:true }, ".ctor", 
    $sig.make(0x162, null, [], []), 
    function Program__ctor () {
    }
  );

  $.Method({Static:true , Public:true }, "Main", 
    $sig.make(0x49, null, [], []), 
    function Program_Main () {
      $thisType.RunTests$b1($T00())(function () {
          return new $asm00.MonoTests.System.TimeSpanTest();
        });
    }
  );

  $.Method({Static:true , Public:false}, "RunTests", 
    $sig.make(0x160, null, [$asm01.TypeRef("System.Func`1", ["!!0"])], ["T"]), 
    function Program_RunTests$b1 (T, factory) {
      var dtType = T;
      var testMethods = new ($T02())();
      var setup = null;
      var methods = dtType.GetMethods();

      for (var i = 0; i < methods.length; ++i) {
        var method = methods[i];
        if (method.GetCustomAttributes($T07().__Type__, false).length !== 0) {
          testMethods.Add(method);
        } else if (method.GetCustomAttributes($T08().__Type__, false).length !== 0) {
          setup = method;
        }
      }
      var counter = 0;
      var failedCounter = 0;
      var ignoredCounter = 0;
      var enumerator = $T02().prototype.GetEnumerator.call(testMethods);
      try {

        while (enumerator.MoveNext()) {
          var testInfo = enumerator.get_Current();
          var dt = JSIL.CloneParameter(T, factory());
          if (setup !== null) {
            (dt[setup._data.mangledName].call(dt, null));
          }
          var expectedException = $T0A().$Cast(testInfo.GetCustomAttributes($T0B().__Type__, false));
          var ignored = $T0C().$Cast(testInfo.GetCustomAttributes($T0D().__Type__, false));
          ++counter;
          if (ignored.length !== 0) {
            ++ignoredCounter;
            $T0E().WriteLine(JSIL.Array.New($T0F(), [JSIL.ConcatString("Ignored test ", testInfo)]));
          } else {
            try {
              (dt[testInfo._data.mangledName].call(dt, null));
              if (expectedException.length > 0) {
                $T11().Fail(JSIL.ConcatString("expected exception ", expectedException[0].ExpectedExceptionAttribute$ExceptionType$value));
              } else {
                $T0E().WriteLine(JSIL.Array.New($T0F(), [JSIL.ConcatString(testInfo, " : OK")]));
              }
            } catch ($exception) {
              var e = $exception;
              if (!((expectedException.length !== 0) && (expectedException[0].ExpectedExceptionAttribute$ExceptionType$value !== JSIL.GetType(e)))) {
                ++failedCounter;
                $T0E().WriteLine(JSIL.Array.New($T0F(), [JSIL.ConcatString(testInfo, " : Failed. ", e.get_Message())]));
              } else {
                $T0E().WriteLine(JSIL.Array.New($T0F(), [JSIL.ConcatString(testInfo, " : OK")]));
              }
            }
          }
        }
      } finally {
        enumerator.IDisposable_Dispose();
      }
      $T0E().WriteLine(JSIL.Array.New($T0F(), [JSIL.ConcatString(counter, " tests total. ")]));
      $T0E().WriteLine(JSIL.Array.New($T0F(), [JSIL.ConcatString(((((counter - failedCounter) | 0) - ignoredCounter) | 0), " tests succeded.")]));
      $T0E().WriteLine(JSIL.Array.New($T0F(), [JSIL.ConcatString(failedCounter, " tests failed.")]));
      $T0E().WriteLine(JSIL.Array.New($T0F(), [JSIL.ConcatString(ignoredCounter, " tests ignored.")]));
    }
  );

});

JSIL.MakeClass($asm01.TypeRef("System.Attribute"), "NUnit.Framework.SetUpAttribute", true, [], function ($) {
  var $thisType = $.publicInterface;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm01.System.Attribute)) ();
  };

  $.Method({Static:false, Public:true }, ".ctor", 
    $sig.make(0x31, null, [], []), 
    function SetUpAttribute__ctor () {
      $T00().prototype._ctor.call(this);
    }
  );

});

JSIL.MakeClass($asm01.TypeRef("System.Attribute"), "NUnit.Framework.TearDownAttribute", true, [], function ($) {
  var $thisType = $.publicInterface;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm01.System.Attribute)) ();
  };

  $.Method({Static:false, Public:true }, ".ctor", 
    $sig.make(0x2F, null, [], []), 
    function TearDownAttribute__ctor () {
      $T00().prototype._ctor.call(this);
    }
  );

});

JSIL.MakeStaticClass("NUnit.Framework.Assert", true, [], function ($) {
  var $thisType = $.publicInterface;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm01.System.Object)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm01.System.String)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm01.System.Exception)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm01.System.Void)) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize($asm01.System.Double)) ();
  };
  var $T05 = function () {
    return ($T05 = JSIL.Memoize($asm01.System.Math)) ();
  };
  var $T06 = function () {
    return ($T06 = JSIL.Memoize($asm01.System.Boolean)) ();
  };

  $.Method({Static:true , Public:true }, "AreEqual", 
    $sig.make(0x9, null, [
        $.Object, $.Object, 
        $.String
      ], []), 
    function Assert_AreEqual (expected, actual, message) {
      if (!expected.Object_Equals(actual)) {
        throw new ($T02())(message);
      }
    }
  );

  $.Method({Static:true , Public:true }, "AreEqual", 
    $sig.make(0xA, null, [$.Object, $.Object], []), 
    function Assert_AreEqual (expected, actual) {
      $thisType.AreEqual(expected, actual, JSIL.ConcatString.apply(null, JSIL.Array.New($T00(), ["Assertion failed: ", expected, " != ", actual])));
    }
  );

  $.Method({Static:true , Public:true }, "AreEqual", 
    $sig.make(0x13, null, [
        $.Double, $.Double, 
        $.Double, $.String
      ], []), 
    function Assert_AreEqual (expected, actual, epsilon, message) {
      if (!(isNaN(expected)) || !(isNaN(actual))) {
        if (isNaN(expected)) {
          $thisType.Fail(message);
        }
        if (isNaN(actual)) {
          $thisType.Fail(message);
        }
        var diff = $sig.get(0x7EE, $asm01.System.Double, [$asm01.System.Double], []).CallStatic($T05(), "Abs", null, (expected - actual));
        if (epsilon < diff) {
          $thisType.Fail(message);
        }
      }
    }
  );

  $.Method({Static:true , Public:true }, "Fail", 
    $sig.make(0x11, null, [$.String], []), 
    function Assert_Fail (p) {
      throw new ($T02())(("Test failed: " + p));
    }
  );

  $.Method({Static:true , Public:true }, "IsFalse", 
    $sig.make(0xC, null, [$.Boolean], []), 
    function Assert_IsFalse (p) {
      $thisType.AreEqual(false, p);
    }
  );

  $.Method({Static:true , Public:true }, "IsFalse", 
    $sig.make(0xE, null, [$.Boolean, $.String], []), 
    function Assert_IsFalse (contains, p) {
      $thisType.AreEqual(false, contains, p);
    }
  );

  $.Method({Static:true , Public:true }, "IsNotNull", 
    $sig.make(0x12, null, [$.Object, $.String], []), 
    function Assert_IsNotNull (p, message) {
      $thisType.IsTrue((p !== null), message);
    }
  );

  $.Method({Static:true , Public:true }, "IsNull", 
    $sig.make(0xF, null, [$.Object, $.String], []), 
    function Assert_IsNull (value, p) {
      $thisType.AreEqual(null, value, p);
    }
  );

  $.Method({Static:true , Public:true }, "IsNull", 
    $sig.make(0x10, null, [$.Object], []), 
    function Assert_IsNull (p) {
      $thisType.AreEqual(null, p);
    }
  );

  $.Method({Static:true , Public:true }, "IsTrue", 
    $sig.make(0xB, null, [$.Boolean], []), 
    function Assert_IsTrue (p) {
      $thisType.AreEqual(true, p);
    }
  );

  $.Method({Static:true , Public:true }, "IsTrue", 
    $sig.make(0xD, null, [$.Boolean, $.String], []), 
    function Assert_IsTrue (contains, p) {
      $thisType.AreEqual(true, contains, p);
    }
  );

});

JSIL.MakeClass($asm01.TypeRef("System.Object"), "MonoTests.System.TimeSpanTest", true, [], function ($) {
  var $thisType = $.publicInterface;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm01.System.TimeSpan)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm01.System.Console)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm01.System.Object)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm00.NUnit.Framework.Assert)) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize($asm01.System.Int64)) ();
  };
  var $T05 = function () {
    return ($T05 = JSIL.Memoize($asm01.System.Int32)) ();
  };
  var $T06 = function () {
    return ($T06 = JSIL.Memoize($asm01.System.String)) ();
  };
  var $T07 = function () {
    return ($T07 = JSIL.Memoize($asm01.System.Void)) ();
  };
  var $T08 = function () {
    return ($T08 = JSIL.Memoize($asm01.System.Exception)) ();
  };
  var $T09 = function () {
    return ($T09 = JSIL.Memoize($asm01.System.OverflowException)) ();
  };
  var $T0A = function () {
    return ($T0A = JSIL.Memoize($asm01.System.Boolean)) ();
  };
  var $T0B = function () {
    return ($T0B = JSIL.Memoize($asm01.System.FormatException)) ();
  };
  var $T0C = function () {
    return ($T0C = JSIL.Memoize($asm01.System.ArgumentException)) ();
  };

  $.Method({Static:false, Public:true }, ".ctor", 
    $sig.make(0x113, null, [], []), 
    function TimeSpanTest__ctor () {
    }
  );

  $.Method({Static:false, Public:true }, "DaysOverflow", 
    $sig.make(0x4F, null, [], []), 
    function TimeSpanTest_DaysOverflow () {
      var ts = new ($T00())(10675200, 0, 0, 0, 0);
    }
  )
    .Attribute($asm00.TypeRef("NUnit.Framework.ExpectedExceptionAttribute"), function () { return [$asm01.TypeRef("System.ArgumentOutOfRangeException")]; })
    .Attribute($asm00.TypeRef("NUnit.Framework.TestAttribute"));

  $.Method({Static:false, Public:false}, "Debug", 
    $sig.make(0x4C, null, [$asm01.TypeRef("System.TimeSpan")], []), 
    function TimeSpanTest_Debug (ts) {
      $T01().WriteLine(JSIL.Array.New($T02(), ["Days {0}", ts.get_Days()]));
      $T01().WriteLine(JSIL.Array.New($T02(), ["Hours {0}", ts.get_Hours()]));
      $T01().WriteLine(JSIL.Array.New($T02(), ["Minutes {0}", ts.get_Minutes()]));
      $T01().WriteLine(JSIL.Array.New($T02(), ["Seconds {0}", ts.get_Seconds()]));
      $T01().WriteLine(JSIL.Array.New($T02(), ["Milliseconds {0}", ts.get_Milliseconds()]));
      $T01().WriteLine(JSIL.Array.New($T02(), ["Ticks {0}", ts.get_Ticks()]));
    }
  );

  $.Method({Static:false, Public:true }, "FromDays_MaxValue", 
    $sig.make(0x9A, null, [], []), 
    function TimeSpanTest_FromDays_MaxValue () {
      $T00().FromDays(1.7976931348623157E+308);
    }
  )
    .Attribute($asm00.TypeRef("NUnit.Framework.TestAttribute"))
    .Attribute($asm00.TypeRef("NUnit.Framework.ExpectedExceptionAttribute"), function () { return [$asm01.TypeRef("System.OverflowException")]; });

  $.Method({Static:false, Public:true }, "FromDays_MinValue", 
    $sig.make(0x99, null, [], []), 
    function TimeSpanTest_FromDays_MinValue () {
      $T00().FromDays(-1.7976931348623157E+308);
    }
  )
    .Attribute($asm00.TypeRef("NUnit.Framework.ExpectedExceptionAttribute"), function () { return [$asm01.TypeRef("System.OverflowException")]; })
    .Attribute($asm00.TypeRef("NUnit.Framework.TestAttribute"));

  $.Method({Static:false, Public:true }, "FromDays_NaN", 
    $sig.make(0x9C, null, [], []), 
    function TimeSpanTest_FromDays_NaN () {
      $T00().FromDays(NaN);
    }
  )
    .Attribute($asm00.TypeRef("NUnit.Framework.ExpectedExceptionAttribute"), function () { return [$asm01.TypeRef("System.ArgumentException")]; })
    .Attribute($asm00.TypeRef("NUnit.Framework.TestAttribute"));

  $.Method({Static:false, Public:true }, "FromDays_NegativeInfinity", 
    $sig.make(0x9E, null, [], []), 
    function TimeSpanTest_FromDays_NegativeInfinity () {
      $T03().AreEqual($T00().MinValue.MemberwiseClone(), $T00().FromDays(-Infinity).MemberwiseClone());
    }
  )
    .Attribute($asm00.TypeRef("NUnit.Framework.TestAttribute"))
    .Attribute($asm00.TypeRef("NUnit.Framework.ExpectedExceptionAttribute"), function () { return [$asm01.TypeRef("System.OverflowException")]; });

  $.Method({Static:false, Public:true }, "FromDays_PositiveInfinity", 
    $sig.make(0x9D, null, [], []), 
    function TimeSpanTest_FromDays_PositiveInfinity () {
      $T03().AreEqual($T00().MaxValue.MemberwiseClone(), $T00().FromDays(Infinity).MemberwiseClone());
    }
  )
    .Attribute($asm00.TypeRef("NUnit.Framework.TestAttribute"))
    .Attribute($asm00.TypeRef("NUnit.Framework.ExpectedExceptionAttribute"), function () { return [$asm01.TypeRef("System.OverflowException")]; });

  $.Method({Static:false, Public:true }, "FromHours_MaxValue", 
    $sig.make(0xA0, null, [], []), 
    function TimeSpanTest_FromHours_MaxValue () {
      $T00().FromHours(1.7976931348623157E+308);
    }
  )
    .Attribute($asm00.TypeRef("NUnit.Framework.ExpectedExceptionAttribute"), function () { return [$asm01.TypeRef("System.OverflowException")]; })
    .Attribute($asm00.TypeRef("NUnit.Framework.TestAttribute"));

  $.Method({Static:false, Public:true }, "FromHours_MinValue", 
    $sig.make(0x9F, null, [], []), 
    function TimeSpanTest_FromHours_MinValue () {
      $T00().FromHours(-1.7976931348623157E+308);
    }
  )
    .Attribute($asm00.TypeRef("NUnit.Framework.TestAttribute"))
    .Attribute($asm00.TypeRef("NUnit.Framework.ExpectedExceptionAttribute"), function () { return [$asm01.TypeRef("System.OverflowException")]; });

  $.Method({Static:false, Public:true }, "FromHours_NaN", 
    $sig.make(0xA1, null, [], []), 
    function TimeSpanTest_FromHours_NaN () {
      $T00().FromHours(NaN);
    }
  )
    .Attribute($asm00.TypeRef("NUnit.Framework.TestAttribute"))
    .Attribute($asm00.TypeRef("NUnit.Framework.ExpectedExceptionAttribute"), function () { return [$asm01.TypeRef("System.ArgumentException")]; });

  $.Method({Static:false, Public:true }, "FromHours_NegativeInfinity", 
    $sig.make(0xA3, null, [], []), 
    function TimeSpanTest_FromHours_NegativeInfinity () {
      $T03().AreEqual($T00().MinValue.MemberwiseClone(), $T00().FromHours(-Infinity).MemberwiseClone());
    }
  )
    .Attribute($asm00.TypeRef("NUnit.Framework.ExpectedExceptionAttribute"), function () { return [$asm01.TypeRef("System.OverflowException")]; })
    .Attribute($asm00.TypeRef("NUnit.Framework.TestAttribute"));

  $.Method({Static:false, Public:true }, "FromHours_PositiveInfinity", 
    $sig.make(0xA2, null, [], []), 
    function TimeSpanTest_FromHours_PositiveInfinity () {
      $T03().AreEqual($T00().MaxValue.MemberwiseClone(), $T00().FromHours(Infinity).MemberwiseClone());
    }
  )
    .Attribute($asm00.TypeRef("NUnit.Framework.ExpectedExceptionAttribute"), function () { return [$asm01.TypeRef("System.OverflowException")]; })
    .Attribute($asm00.TypeRef("NUnit.Framework.TestAttribute"));

  $.Method({Static:false, Public:true }, "FromMilliseconds_MaxValue", 
    $sig.make(0xA5, null, [], []), 
    function TimeSpanTest_FromMilliseconds_MaxValue () {
      $T00().FromMilliseconds(1.7976931348623157E+308);
    }
  )
    .Attribute($asm00.TypeRef("NUnit.Framework.TestAttribute"))
    .Attribute($asm00.TypeRef("NUnit.Framework.ExpectedExceptionAttribute"), function () { return [$asm01.TypeRef("System.OverflowException")]; });

  $.Method({Static:false, Public:true }, "FromMilliseconds_MinValue", 
    $sig.make(0xA4, null, [], []), 
    function TimeSpanTest_FromMilliseconds_MinValue () {
      $T00().FromMilliseconds(-1.7976931348623157E+308);
    }
  )
    .Attribute($asm00.TypeRef("NUnit.Framework.TestAttribute"))
    .Attribute($asm00.TypeRef("NUnit.Framework.ExpectedExceptionAttribute"), function () { return [$asm01.TypeRef("System.OverflowException")]; });

  $.Method({Static:false, Public:true }, "FromMilliseconds_NaN", 
    $sig.make(0xDC, null, [], []), 
    function TimeSpanTest_FromMilliseconds_NaN () {
      $T00().FromMilliseconds(NaN);
    }
  )
    .Attribute($asm00.TypeRef("NUnit.Framework.ExpectedExceptionAttribute"), function () { return [$asm01.TypeRef("System.ArgumentException")]; })
    .Attribute($asm00.TypeRef("NUnit.Framework.TestAttribute"));

  $.Method({Static:false, Public:true }, "FromMilliseconds_NegativeInfinity", 
    $sig.make(0xE4, null, [], []), 
    function TimeSpanTest_FromMilliseconds_NegativeInfinity () {
      $T03().AreEqual($T00().MinValue.MemberwiseClone(), $T00().FromMilliseconds(-Infinity).MemberwiseClone());
    }
  )
    .Attribute($asm00.TypeRef("NUnit.Framework.TestAttribute"))
    .Attribute($asm00.TypeRef("NUnit.Framework.ExpectedExceptionAttribute"), function () { return [$asm01.TypeRef("System.OverflowException")]; });

  $.Method({Static:false, Public:true }, "FromMilliseconds_PositiveInfinity", 
    $sig.make(0xE2, null, [], []), 
    function TimeSpanTest_FromMilliseconds_PositiveInfinity () {
      $T03().AreEqual($T00().MaxValue.MemberwiseClone(), $T00().FromMilliseconds(Infinity).MemberwiseClone());
    }
  )
    .Attribute($asm00.TypeRef("NUnit.Framework.TestAttribute"))
    .Attribute($asm00.TypeRef("NUnit.Framework.ExpectedExceptionAttribute"), function () { return [$asm01.TypeRef("System.OverflowException")]; });

  $.Method({Static:false, Public:true }, "FromMinutes_MaxValue", 
    $sig.make(0xE7, null, [], []), 
    function TimeSpanTest_FromMinutes_MaxValue () {
      $T00().FromMinutes(1.7976931348623157E+308);
    }
  )
    .Attribute($asm00.TypeRef("NUnit.Framework.TestAttribute"))
    .Attribute($asm00.TypeRef("NUnit.Framework.ExpectedExceptionAttribute"), function () { return [$asm01.TypeRef("System.OverflowException")]; });

  $.Method({Static:false, Public:true }, "FromMinutes_MinValue", 
    $sig.make(0xE6, null, [], []), 
    function TimeSpanTest_FromMinutes_MinValue () {
      $T00().FromMinutes(-1.7976931348623157E+308);
    }
  )
    .Attribute($asm00.TypeRef("NUnit.Framework.ExpectedExceptionAttribute"), function () { return [$asm01.TypeRef("System.OverflowException")]; })
    .Attribute($asm00.TypeRef("NUnit.Framework.TestAttribute"));

  $.Method({Static:false, Public:true }, "FromMinutes_NaN", 
    $sig.make(0xEA, null, [], []), 
    function TimeSpanTest_FromMinutes_NaN () {
      $T00().FromMinutes(NaN);
    }
  )
    .Attribute($asm00.TypeRef("NUnit.Framework.TestAttribute"))
    .Attribute($asm00.TypeRef("NUnit.Framework.ExpectedExceptionAttribute"), function () { return [$asm01.TypeRef("System.ArgumentException")]; });

  $.Method({Static:false, Public:true }, "FromMinutes_NegativeInfinity", 
    $sig.make(0xED, null, [], []), 
    function TimeSpanTest_FromMinutes_NegativeInfinity () {
      $T03().AreEqual($T00().MinValue.MemberwiseClone(), $T00().FromMinutes(-Infinity).MemberwiseClone());
    }
  )
    .Attribute($asm00.TypeRef("NUnit.Framework.TestAttribute"))
    .Attribute($asm00.TypeRef("NUnit.Framework.ExpectedExceptionAttribute"), function () { return [$asm01.TypeRef("System.OverflowException")]; });

  $.Method({Static:false, Public:true }, "FromMinutes_PositiveInfinity", 
    $sig.make(0xEB, null, [], []), 
    function TimeSpanTest_FromMinutes_PositiveInfinity () {
      $T03().AreEqual($T00().MaxValue.MemberwiseClone(), $T00().FromMinutes(Infinity).MemberwiseClone());
    }
  )
    .Attribute($asm00.TypeRef("NUnit.Framework.ExpectedExceptionAttribute"), function () { return [$asm01.TypeRef("System.OverflowException")]; })
    .Attribute($asm00.TypeRef("NUnit.Framework.TestAttribute"));

  $.Method({Static:false, Public:true }, "FromSeconds_MaxValue", 
    $sig.make(0xEF, null, [], []), 
    function TimeSpanTest_FromSeconds_MaxValue () {
      $T00().FromSeconds(1.7976931348623157E+308);
    }
  )
    .Attribute($asm00.TypeRef("NUnit.Framework.TestAttribute"))
    .Attribute($asm00.TypeRef("NUnit.Framework.ExpectedExceptionAttribute"), function () { return [$asm01.TypeRef("System.OverflowException")]; });

  $.Method({Static:false, Public:true }, "FromSeconds_MinValue", 
    $sig.make(0xEE, null, [], []), 
    function TimeSpanTest_FromSeconds_MinValue () {
      $T00().FromSeconds(-1.7976931348623157E+308);
    }
  )
    .Attribute($asm00.TypeRef("NUnit.Framework.ExpectedExceptionAttribute"), function () { return [$asm01.TypeRef("System.OverflowException")]; })
    .Attribute($asm00.TypeRef("NUnit.Framework.TestAttribute"));

  $.Method({Static:false, Public:true }, "FromSeconds_NaN", 
    $sig.make(0xF1, null, [], []), 
    function TimeSpanTest_FromSeconds_NaN () {
      $T00().FromSeconds(NaN);
    }
  )
    .Attribute($asm00.TypeRef("NUnit.Framework.ExpectedExceptionAttribute"), function () { return [$asm01.TypeRef("System.ArgumentException")]; })
    .Attribute($asm00.TypeRef("NUnit.Framework.TestAttribute"));

  $.Method({Static:false, Public:true }, "FromSeconds_NegativeInfinity", 
    $sig.make(0xF4, null, [], []), 
    function TimeSpanTest_FromSeconds_NegativeInfinity () {
      $T03().AreEqual($T00().MinValue.MemberwiseClone(), $T00().FromSeconds(-Infinity).MemberwiseClone());
    }
  )
    .Attribute($asm00.TypeRef("NUnit.Framework.TestAttribute"))
    .Attribute($asm00.TypeRef("NUnit.Framework.ExpectedExceptionAttribute"), function () { return [$asm01.TypeRef("System.OverflowException")]; });

  $.Method({Static:false, Public:true }, "FromSeconds_PositiveInfinity", 
    $sig.make(0xF2, null, [], []), 
    function TimeSpanTest_FromSeconds_PositiveInfinity () {
      $T03().AreEqual($T00().MaxValue.MemberwiseClone(), $T00().FromSeconds(Infinity).MemberwiseClone());
    }
  )
    .Attribute($asm00.TypeRef("NUnit.Framework.ExpectedExceptionAttribute"), function () { return [$asm01.TypeRef("System.OverflowException")]; })
    .Attribute($asm00.TypeRef("NUnit.Framework.TestAttribute"));

  $.Method({Static:false, Public:true }, "MaxDays", 
    $sig.make(0x5B, null, [], []), 
    function TimeSpanTest_MaxDays () {
      new ($T00())(2147483647, 0, 0, 0, 0);
    }
  )
    .Attribute($asm00.TypeRef("NUnit.Framework.TestAttribute"))
    .Attribute($asm00.TypeRef("NUnit.Framework.ExpectedExceptionAttribute"), function () { return [$asm01.TypeRef("System.ArgumentOutOfRangeException")]; });

  $.Method({Static:false, Public:true }, "MaxHours", 
    $sig.make(0x62, null, [], []), 
    function TimeSpanTest_MaxHours () {
      var ts = new ($T00())(0, 2147483647, 0, 0, 0);
      $T03().AreEqual(0, ts.get_Days(), "Max-Days");
      $T03().AreEqual(-1, ts.get_Hours(), "Max-Hours");
      $T03().AreEqual(0, ts.get_Minutes(), "Max-Minutes");
      $T03().AreEqual(0, ts.get_Seconds(), "Max-Seconds");
      $T03().AreEqual(0, ts.get_Milliseconds(), "Max-Milliseconds");
      $T03().AreEqual(
        $T04().Create(3905536, 16775070, 65535), 
        ts.get_Ticks(), 
        "Max-Ticks"
      );
      $T00().prototype._ctor.call(ts, 
        0, 
        2146887125, 
        0, 
        0, 
        0
      );
      $T03().AreEqual(-24855, ts.get_Days(), "Days");
      $T03().AreEqual(-3, ts.get_Hours(), "Hours");
      $T03().AreEqual(0, ts.get_Minutes(), "Minutes");
      $T03().AreEqual(0, ts.get_Seconds(), "Seconds");
      $T03().AreEqual(0, ts.get_Milliseconds(), "Milliseconds");
      $T03().AreEqual(
        $T04().Create(7505920, 11846137, 65459), 
        ts.get_Ticks(), 
        "Ticks"
      );
    }
  )
    .Attribute($asm00.TypeRef("NUnit.Framework.CategoryAttribute"), function () { return ["NotWorking"]; })
    .Attribute($asm00.TypeRef("NUnit.Framework.ExpectedExceptionAttribute"), function () { return [$asm01.TypeRef("System.ArgumentOutOfRangeException")]; })
    .Attribute($asm00.TypeRef("NUnit.Framework.TestAttribute"));

  $.Method({Static:false, Public:true }, "MaxHours_BreakPoint", 
    $sig.make(0x63, null, [], []), 
    function TimeSpanTest_MaxHours_BreakPoint () {
      var ts = new ($T00())(0, 2146887124, 0, 0, 0);
      $T03().AreEqual(24855, ts.get_Days(), "Days");
      $T03().AreEqual(2, ts.get_Hours(), "Hours");
      $T03().AreEqual(28, ts.get_Minutes(), "Minutes");
      $T03().AreEqual(16, ts.get_Seconds(), "Seconds");
      $T03().AreEqual(0, ts.get_Milliseconds(), "Milliseconds");
      $T03().AreEqual(
        $T04().Create(11411456, 4929943, 76), 
        ts.get_Ticks(), 
        "Ticks"
      );
    }
  )
    .Attribute($asm00.TypeRef("NUnit.Framework.TestAttribute"))
    .Attribute($asm00.TypeRef("NUnit.Framework.ExpectedExceptionAttribute"), function () { return [$asm01.TypeRef("System.ArgumentOutOfRangeException")]; })
    .Attribute($asm00.TypeRef("NUnit.Framework.CategoryAttribute"), function () { return ["NotWorking"]; });

  $.Method({Static:false, Public:true }, "MaxHours_TooLong", 
    $sig.make(0x61, null, [], []), 
    function TimeSpanTest_MaxHours_TooLong () {
      var ts = new ($T00())();

      for (var i = 0; i < 596523; ++i) {
        $T00().prototype._ctor.call(ts, 
          0, 
          ((2147483647 - i) | 0), 
          0, 
          0, 
          0
        );
        var h = ((i + 1) | 0);
        var prefix = (JSIL.ConcatString(i.toString(), "-"));
        $T03().AreEqual(-((h / 24) | 0), ts.get_Days(), (prefix + "Days"));
        $T03().AreEqual(-((h % 24) | 0), ts.get_Hours(), (prefix + "Hours"));
        $T03().AreEqual(0, ts.get_Minutes(), (prefix + "Minutes"));
        $T03().AreEqual(0, ts.get_Seconds(), (prefix + "Seconds"));
        $T03().AreEqual(0, ts.get_Milliseconds(), (prefix + "Milliseconds"));
        $T03().AreEqual(
          $T04().op_Multiplication(
            $T04().Create(3905536, 16775070, 65535), 
            $T04().FromNumber(h)
          ), 
          ts.get_Ticks(), 
          (prefix + "Ticks")
        );
      }
    }
  )
    .Attribute($asm00.TypeRef("NUnit.Framework.IgnoreAttribute"), function () { return ["too long"]; })
    .Attribute($asm00.TypeRef("NUnit.Framework.TestAttribute"));

  $.Method({Static:false, Public:true }, "MaxMilliseconds", 
    $sig.make(0x81, null, [], []), 
    function TimeSpanTest_MaxMilliseconds () {
      var ts = new ($T00())(0, 0, 0, 0, 2147483647);
      $T03().AreEqual(24, ts.get_Days(), "Days");
      $T03().AreEqual(20, ts.get_Hours(), "Hours");
      $T03().AreEqual(31, ts.get_Minutes(), "Minutes");
      $T03().AreEqual(23, ts.get_Seconds(), "Seconds");
      $T03().AreEqual(647, ts.get_Milliseconds(), "Milliseconds");
      $T03().AreEqual(
        $T04().Create(16767216, 1279999, 0), 
        ts.get_Ticks(), 
        "Ticks"
      );
    }
  )
    .Attribute($asm00.TypeRef("NUnit.Framework.TestAttribute"));

  $.Method({Static:false, Public:true }, "MaxMinutes", 
    $sig.make(0x6B, null, [], []), 
    function TimeSpanTest_MaxMinutes () {
      var ts = new ($T00())(0, 0, 256204778, 0, 0);
      $T03().AreEqual(177919, ts.get_Days(), "Max-Days");
      $T03().AreEqual(23, ts.get_Hours(), "Max-Hours");
      $T03().AreEqual(38, ts.get_Minutes(), "Max-Minutes");
      $T03().AreEqual(0, ts.get_Seconds(), "Max-Seconds");
      $T03().AreEqual(0, ts.get_Milliseconds(), "Max-Milliseconds");
      $T03().AreEqual(
        $T04().Create(7863296, 2236933, 546), 
        ts.get_Ticks(), 
        "Max-Ticks"
      );
    }
  )
    .Attribute($asm00.TypeRef("NUnit.Framework.CategoryAttribute"), function () { return ["NotWorking"]; })
    .Attribute($asm00.TypeRef("NUnit.Framework.TestAttribute"));

  $.Method({Static:false, Public:true }, "MaxMinutes_BreakPoint", 
    $sig.make(0x6E, null, [], []), 
    function TimeSpanTest_MaxMinutes_BreakPoint () {
      var ts = new ($T00())(0, 2111692253, 0, 0, 0);
      $T03().AreEqual(0, ts.get_Days(), "Days");
      $T03().AreEqual(0, ts.get_Hours(), "Hours");
      $T03().AreEqual(-52, ts.get_Minutes(), "Minutes");
      $T03().AreEqual(0, ts.get_Seconds(), "Seconds");
      $T03().AreEqual(0, ts.get_Milliseconds(), "Milliseconds");
      $T03().AreEqual(
        $T04().Create(5621760, 16775356, 65535), 
        ts.get_Ticks(), 
        "Ticks"
      );
    }
  )
    .Attribute($asm00.TypeRef("NUnit.Framework.CategoryAttribute"), function () { return ["NotWorking"]; })
    .Attribute($asm00.TypeRef("NUnit.Framework.ExpectedExceptionAttribute"), function () { return [$asm01.TypeRef("System.ArgumentOutOfRangeException")]; })
    .Attribute($asm00.TypeRef("NUnit.Framework.TestAttribute"));

  $.Method({Static:false, Public:true }, "MaxMinutes_TooLong", 
    $sig.make(0x6A, null, [], []), 
    function TimeSpanTest_MaxMinutes_TooLong () {
      var ts = new ($T00())();

      for (var i = 0; i < 35791394; ++i) {
        $T00().prototype._ctor.call(ts, 
          0, 
          0, 
          ((2147483647 - i) | 0), 
          0, 
          0
        );
        var h = $T04().FromNumber(-$T04().FromNumber(((i + 1) | 0)));
        var prefix = (JSIL.ConcatString(i.toString(), "-"));
        $T03().AreEqual(
          $T04().op_Division(h, $T04().Create(1440, 0, 0)), 
          ts.get_Days(), 
          (prefix + "Days")
        );
        $T03().AreEqual(
          $T04().op_Modulus(
            $T04().op_Division(h, $T04().Create(60, 0, 0)), 
            $T04().Create(24, 0, 0)
          ), 
          ts.get_Hours(), 
          (prefix + "Hours")
        );
        $T03().AreEqual(
          $T04().op_Modulus(h, $T04().Create(60, 0, 0)), 
          ts.get_Minutes(), 
          (prefix + "Minutes")
        );
        $T03().AreEqual(0, ts.get_Seconds(), (prefix + "Seconds"));
        $T03().AreEqual(0, ts.get_Milliseconds(), (prefix + "Milliseconds"));
        $T03().AreEqual(
          $T04().op_Multiplication($T04().Create(12797440, 35, 0), h), 
          ts.get_Ticks(), 
          (prefix + "Ticks")
        );
      }
    }
  )
    .Attribute($asm00.TypeRef("NUnit.Framework.TestAttribute"))
    .Attribute($asm00.TypeRef("NUnit.Framework.IgnoreAttribute"), function () { return ["too long"]; });

  $.Method({Static:false, Public:true }, "MaxSeconds", 
    $sig.make(0x7F, null, [], []), 
    function TimeSpanTest_MaxSeconds () {
      var ts = new ($T00())(0, 0, 0, 2147483647, 0);
      $T03().AreEqual(24855, ts.get_Days(), "Days");
      $T03().AreEqual(3, ts.get_Hours(), "Hours");
      $T03().AreEqual(14, ts.get_Minutes(), "Minutes");
      $T03().AreEqual(7, ts.get_Seconds(), "Seconds");
      $T03().AreEqual(0, ts.get_Milliseconds(), "Milliseconds");
      $T03().AreEqual(
        $T04().Create(6777216, 4931583, 76), 
        ts.get_Ticks(), 
        "Ticks"
      );
    }
  )
    .Attribute($asm00.TypeRef("NUnit.Framework.TestAttribute"));

  $.Method({Static:false, Public:true }, "MinDays", 
    $sig.make(0x5D, null, [], []), 
    function TimeSpanTest_MinDays () {
      new ($T00())(-2147483648, 0, 0, 0, 0);
    }
  )
    .Attribute($asm00.TypeRef("NUnit.Framework.ExpectedExceptionAttribute"), function () { return [$asm01.TypeRef("System.ArgumentOutOfRangeException")]; })
    .Attribute($asm00.TypeRef("NUnit.Framework.TestAttribute"));

  $.Method({Static:false, Public:true }, "MinHours", 
    $sig.make(0x68, null, [], []), 
    function TimeSpanTest_MinHours () {
      var ts = new ($T00())(0, -256204778, 0, 0, 0);
      $T03().AreEqual(-10675199, ts.get_Days(), "Days");
      $T03().AreEqual(-2, ts.get_Hours(), "Hours");
      $T03().AreEqual(0, ts.get_Minutes(), "Minutes");
      $T03().AreEqual(0, ts.get_Seconds(), "Seconds");
      $T03().AreEqual(0, ts.get_Milliseconds(), "Milliseconds");
      $T03().AreEqual(
        $T04().Create(14741504, 1719, 32768), 
        ts.get_Ticks(), 
        "Ticks"
      );
    }
  )
    .Attribute($asm00.TypeRef("NUnit.Framework.CategoryAttribute"), function () { return ["NotWorking"]; })
    .Attribute($asm00.TypeRef("NUnit.Framework.TestAttribute"));

  $.Method({Static:false, Public:true }, "MinHours_BreakPoint", 
    $sig.make(0x69, null, [], []), 
    function TimeSpanTest_MinHours_BreakPoint () {
      var ts = new ($T00())(0, -2146887124, 0, 0, 0);
      $T03().AreEqual(-24855, ts.get_Days(), "Days");
      $T03().AreEqual(-2, ts.get_Hours(), "Hours");
      $T03().AreEqual(-28, ts.get_Minutes(), "Minutes");
      $T03().AreEqual(-16, ts.get_Seconds(), "Seconds");
      $T03().AreEqual(0, ts.get_Milliseconds(), "Milliseconds");
      $T03().AreEqual(
        $T04().Create(5365760, 11847272, 65459), 
        ts.get_Ticks(), 
        "Ticks"
      );
    }
  )
    .Attribute($asm00.TypeRef("NUnit.Framework.ExpectedExceptionAttribute"), function () { return [$asm01.TypeRef("System.ArgumentOutOfRangeException")]; })
    .Attribute($asm00.TypeRef("NUnit.Framework.TestAttribute"))
    .Attribute($asm00.TypeRef("NUnit.Framework.CategoryAttribute"), function () { return ["NotWorking"]; });

  $.Method({Static:false, Public:true }, "MinHours_TooLong", 
    $sig.make(0x65, null, [], []), 
    function TimeSpanTest_MinHours_TooLong () {
      var ts = new ($T00())();

      for (var i = -2147483648; i < -2146887124; ++i) {
        $T00().prototype._ctor.call(ts, 
          0, 
          i, 
          0, 
          0, 
          0
        );
        var h = ((((i + 2147483647) | 0) + 1) | 0);
        var prefix = (JSIL.ConcatString(i.toString(), "-"));
        $T03().AreEqual(((h / 24) | 0), ts.get_Days(), (prefix + "Days"));
        $T03().AreEqual(((h % 24) | 0), ts.get_Hours(), (prefix + "Hours"));
        $T03().AreEqual(0, ts.get_Minutes(), (prefix + "Minutes"));
        $T03().AreEqual(0, ts.get_Seconds(), (prefix + "Seconds"));
        $T03().AreEqual(0, ts.get_Milliseconds(), (prefix + "Milliseconds"));
        $T03().AreEqual(
          $T04().op_Multiplication(
            $T04().Create(12871680, 2145, 0), 
            $T04().FromNumber(h)
          ), 
          ts.get_Ticks(), 
          (prefix + "Ticks")
        );
      }
    }
  )
    .Attribute($asm00.TypeRef("NUnit.Framework.IgnoreAttribute"), function () { return ["too long"]; })
    .Attribute($asm00.TypeRef("NUnit.Framework.TestAttribute"));

  $.Method({Static:false, Public:true }, "MinMilliseconds", 
    $sig.make(0x84, null, [], []), 
    function TimeSpanTest_MinMilliseconds () {
      var ts = new ($T00())(0, 0, 0, 0, -2147483648);
      $T03().AreEqual(-24, ts.get_Days(), "Days");
      $T03().AreEqual(-20, ts.get_Hours(), "Hours");
      $T03().AreEqual(-31, ts.get_Minutes(), "Minutes");
      $T03().AreEqual(-23, ts.get_Seconds(), "Seconds");
      $T03().AreEqual(-648, ts.get_Milliseconds(), "Milliseconds");
      $T03().AreEqual(
        $T04().Create(0, 15497216, 65535), 
        ts.get_Ticks(), 
        "Ticks"
      );
    }
  )
    .Attribute($asm00.TypeRef("NUnit.Framework.TestAttribute"));

  $.Method({Static:false, Public:true }, "MinMinutes", 
    $sig.make(0x7C, null, [], []), 
    function TimeSpanTest_MinMinutes () {
      var ts = new ($T00())(0, 0, -2147483648, 0, 0);
      $T03().AreEqual(-1491308, ts.get_Days(), "Days");
      $T03().AreEqual(-2, ts.get_Hours(), "Hours");
      $T03().AreEqual(-8, ts.get_Minutes(), "Minutes");
      $T03().AreEqual(0, ts.get_Seconds(), "Seconds");
      $T03().AreEqual(0, ts.get_Milliseconds(), "Milliseconds");
      $T03().AreEqual(
        $T04().Create(0, 6094848, 60958), 
        ts.get_Ticks(), 
        "Ticks"
      );
    }
  )
    .Attribute($asm00.TypeRef("NUnit.Framework.TestAttribute"))
    .Attribute($asm00.TypeRef("NUnit.Framework.CategoryAttribute"), function () { return ["NotWorking"]; });

  $.Method({Static:false, Public:true }, "MinMinutes_BreakPoint", 
    $sig.make(0x7D, null, [], []), 
    function TimeSpanTest_MinMinutes_BreakPoint () {
      var ts = new ($T00())(0, 0, -2111692253, 0, 0);
      $T03().AreEqual(-1466452, ts.get_Days(), "Days");
      $T03().AreEqual(-22, ts.get_Hours(), "Hours");
      $T03().AreEqual(-53, ts.get_Minutes(), "Minutes");
      $T03().AreEqual(0, ts.get_Seconds(), "Seconds");
      $T03().AreEqual(0, ts.get_Milliseconds(), "Milliseconds");
      $T03().AreEqual(
        $T04().Create(16683520, 11026462, 61034), 
        ts.get_Ticks(), 
        "Ticks"
      );
    }
  )
    .Attribute($asm00.TypeRef("NUnit.Framework.TestAttribute"))
    .Attribute($asm00.TypeRef("NUnit.Framework.CategoryAttribute"), function () { return ["NotWorking"]; });

  $.Method({Static:false, Public:true }, "MinMinutes_TooLong", 
    $sig.make(0x72, null, [], []), 
    function TimeSpanTest_MinMinutes_TooLong () {
      var ts = new ($T00())();

      for (var i = -2147483648; i < -2111692253; ++i) {
        $T00().prototype._ctor.call(ts, 
          0, 
          0, 
          i, 
          0, 
          0
        );
        var h = $T04().FromNumber(((((i + 2147483647) | 0) + 1) | 0));
        var prefix = (JSIL.ConcatString(i.toString(), "-"));
        $T03().AreEqual(
          $T04().op_Division(h, $T04().Create(1440, 0, 0)), 
          ts.get_Days(), 
          (prefix + "Days")
        );
        $T03().AreEqual(
          $T04().op_Modulus(
            $T04().op_Division(h, $T04().Create(60, 0, 0)), 
            $T04().Create(24, 0, 0)
          ), 
          ts.get_Hours(), 
          (prefix + "Hours")
        );
        $T03().AreEqual(
          $T04().op_Modulus(h, $T04().Create(60, 0, 0)), 
          ts.get_Minutes(), 
          (prefix + "Minutes")
        );
        $T03().AreEqual(0, ts.get_Seconds(), (prefix + "Seconds"));
        $T03().AreEqual(0, ts.get_Milliseconds(), (prefix + "Milliseconds"));
        $T03().AreEqual(
          $T04().op_Multiplication($T04().Create(12797440, 35, 0), h), 
          ts.get_Ticks(), 
          (prefix + "Ticks")
        );
      }
    }
  )
    .Attribute($asm00.TypeRef("NUnit.Framework.TestAttribute"))
    .Attribute($asm00.TypeRef("NUnit.Framework.IgnoreAttribute"), function () { return ["too long"]; });

  $.Method({Static:false, Public:true }, "MinSeconds", 
    $sig.make(0x80, null, [], []), 
    function TimeSpanTest_MinSeconds () {
      var ts = new ($T00())(0, 0, 0, -2147483648, 0);
      $T03().AreEqual(-24855, ts.get_Days(), "Days");
      $T03().AreEqual(-3, ts.get_Hours(), "Hours");
      $T03().AreEqual(-14, ts.get_Minutes(), "Minutes");
      $T03().AreEqual(-8, ts.get_Seconds(), "Seconds");
      $T03().AreEqual(0, ts.get_Milliseconds(), "Milliseconds");
      $T03().AreEqual(
        $T04().Create(0, 11845632, 65459), 
        ts.get_Ticks(), 
        "Ticks"
      );
    }
  )
    .Attribute($asm00.TypeRef("NUnit.Framework.TestAttribute"));

  $.Method({Static:false, Public:true }, "NegativeTimeSpan", 
    $sig.make(0x87, null, [], []), 
    function TimeSpanTest_NegativeTimeSpan () {
      var ts = new ($T00())(-23, -59, -59);
      $T03().AreEqual(0, ts.get_Days(), "Days");
      $T03().AreEqual(-23, ts.get_Hours(), "Hours");
      $T03().AreEqual(-59, ts.get_Minutes(), "Minutes");
      $T03().AreEqual(-59, ts.get_Seconds(), "Seconds");
      $T03().AreEqual(0, ts.get_Milliseconds(), "Milliseconds");
      $T03().AreEqual(
        $T04().Create(3069568, 16725718, 65535), 
        ts.get_Ticks(), 
        "Ticks"
      );
    }
  )
    .Attribute($asm00.TypeRef("NUnit.Framework.TestAttribute"));

  $.Method({Static:false, Public:true }, "NoNegateMinValue", 
    $sig.make(0x8E, null, [], []), 
    function TimeSpanTest_NoNegateMinValue () {
      var t = $T00().MinValue.Negate();
    }
  )
    .Attribute($asm00.TypeRef("NUnit.Framework.ExpectedExceptionAttribute"), function () { return [$asm01.TypeRef("System.OverflowException")]; })
    .Attribute($asm00.TypeRef("NUnit.Framework.TestAttribute"));

  $.Method({Static:false, Public:true }, "NoOverflowInHoursMinsSecondsMS", 
    $sig.make(0x56, null, [], []), 
    function TimeSpanTest_NoOverflowInHoursMinsSecondsMS () {
      var ts = new ($T00())(0, 2147483647, 2147483647, 2147483647, 2147483647);
      $T03().AreEqual(24879, ts.get_Days(), "Days");
      $T03().AreEqual(22, ts.get_Hours(), "Hours");
      $T03().AreEqual(44, ts.get_Minutes(), "Minutes");
      $T03().AreEqual(30, ts.get_Seconds(), "Seconds");
      $T03().AreEqual(647, ts.get_Milliseconds(), "Milliseconds");
      $T03().AreEqual(
        $T04().Create(14652528, 6209401, 76), 
        ts.get_Ticks(), 
        "Ticks"
      );
    }
  )
    .Attribute($asm00.TypeRef("NUnit.Framework.TestAttribute"))
    .Attribute($asm00.TypeRef("NUnit.Framework.CategoryAttribute"), function () { return ["NotWorking"]; })
    .Attribute($asm00.TypeRef("NUnit.Framework.ExpectedExceptionAttribute"), function () { return [$asm01.TypeRef("System.ArgumentOutOfRangeException")]; });

  $.Method({Static:false, Public:true }, "Parse_Days_WithoutColon", 
    $sig.make(0xFB, null, [], []), 
    function TimeSpanTest_Parse_Days_WithoutColon () {
      var ts = $T00().Parse("1");
      $T03().AreEqual(1, ts.get_Days(), "Days");
    }
  )
    .Attribute($asm00.TypeRef("NUnit.Framework.TestAttribute"));

  $.Method({Static:false, Public:true }, "Parse_InvalidValuesAndFormat_ExceptionOrder", 
    $sig.make(0x102, null, [], []), 
    function TimeSpanTest_Parse_InvalidValuesAndFormat_ExceptionOrder () {
      try {
        $T00().Parse("0.99.99.0");
        $T03().Fail("#A1");
      } catch ($exception) {
        if ($T09().$Is($exception)) {
        } else {
          throw $exception;
        }
      }
      try {
        $T00().Parse("0.999999999999.99.0");
        $T03().Fail("#A2");
      } catch ($exception) {
        if ($T09().$Is($exception)) {
        } else {
          throw $exception;
        }
      }
    }
  )
    .Attribute($asm00.TypeRef("NUnit.Framework.TestAttribute"));

  $.Method({Static:false, Public:true }, "Parse_MinMaxValues", 
    $sig.make(0x103, null, [], []), 
    function TimeSpanTest_Parse_MinMaxValues () {
      $T03().AreEqual($T00().MaxValue.MemberwiseClone(), $T00().Parse("10675199.02:48:05.4775807"), "MaxValue");
      $T03().AreEqual($T00().MinValue.MemberwiseClone(), $T00().Parse("-10675199.02:48:05.4775808"), "MinValue");
    }
  )
    .Attribute($asm00.TypeRef("NUnit.Framework.TestAttribute"));

  $.Method({Static:false, Public:true }, "Parse_OverMaxValue", 
    $sig.make(0x104, null, [], []), 
    function TimeSpanTest_Parse_OverMaxValue () {
      $T00().Parse("10675199.02:48:05.4775808");
    }
  )
    .Attribute($asm00.TypeRef("NUnit.Framework.TestAttribute"))
    .Attribute($asm00.TypeRef("NUnit.Framework.ExpectedExceptionAttribute"), function () { return [$asm01.TypeRef("System.OverflowException")]; });

  $.Method({Static:false, Public:true }, "Parse_UnderMinValue", 
    $sig.make(0x106, null, [], []), 
    function TimeSpanTest_Parse_UnderMinValue () {
      $T00().Parse("-10675199.02:48:05.4775809");
    }
  )
    .Attribute($asm00.TypeRef("NUnit.Framework.TestAttribute"))
    .Attribute($asm00.TypeRef("NUnit.Framework.ExpectedExceptionAttribute"), function () { return [$asm01.TypeRef("System.OverflowException")]; });

  $.Method({Static:false, Public:false}, "ParseHelper", 
    $sig.make(0xF7, null, [
        $.String, $.Boolean, 
        $.Boolean, $.String
      ], []), 
    function TimeSpanTest_ParseHelper (s, expectFormat, expectOverflow, expect) {
      var formatException = false;
      var overflowException = false;
      var result = "junk ";
      try {
        result = $T00().Parse(s).toString();
      } catch ($exception) {
        if ($T09().$Is($exception)) {
          overflowException = true;
        } else if ($T0B().$Is($exception)) {
          formatException = true;
        } else {
          throw $exception;
        }
      }
      $T03().AreEqual(expectFormat, formatException, ("A1 [" + s + "]"));
      $T03().AreEqual(expectOverflow, overflowException, ("A2 " + s + "]"));
      if (!(expectOverflow || expectFormat)) {
        $T03().AreEqual(expect, result, ("A3 [" + s + "]"));
      }
    }
  );

  $.Method({Static:false, Public:true }, "ParseMissingSeconds", 
    $sig.make(0x108, null, [], []), 
    function TimeSpanTest_ParseMissingSeconds () {
      var ts = $T00().Parse("0:0:.75");
      $T03().AreEqual(0, ts.get_Days(), "Days");
      $T03().AreEqual(0, ts.get_Hours(), "Hours");
      $T03().AreEqual(750, ts.get_Milliseconds(), "Milliseconds");
      $T03().AreEqual(0, ts.get_Minutes(), "Minutes");
      $T03().AreEqual(0, ts.get_Seconds(), "Seconds");
      $T03().AreEqual(7500000, ts.get_Ticks(), "Ticks");
      $T03().AreEqual(8.6805555555555555E-06, ts.get_TotalDays(), 1E-17, "TotalDays");
      $T03().AreEqual(0.00020833333333333332, ts.get_TotalHours(), 1E-17, "TotalHours");
      $T03().AreEqual(750, ts.get_TotalMilliseconds(), "TotalMilliseconds");
      $T03().AreEqual(0.0125, ts.get_TotalMinutes(), "TotalMinutes");
      $T03().AreEqual(0.75, ts.get_TotalSeconds(), "TotalSeconds");
    }
  )
    .Attribute($asm00.TypeRef("NUnit.Framework.TestAttribute"));

  $.Method({Static:false, Public:true }, "TemporaryOverflow", 
    $sig.make(0x52, null, [], []), 
    function TimeSpanTest_TemporaryOverflow () {
      var ts = new ($T00())(10675200, -2147483648, -2147483648, -2147483648, -2147483648);
      $T03().AreEqual(10650320, ts.get_Days(), "Days");
      $T03().AreEqual(0, ts.get_Hours(), "Hours");
      $T03().AreEqual(14, ts.get_Minutes(), "Minutes");
      $T03().AreEqual(28, ts.get_Seconds(), "Seconds");
      $T03().AreEqual(352, ts.get_Milliseconds(), "Milliseconds");
      $T03().AreEqual(
        $T04().Create(0, 10611119, 32691), 
        ts.get_Ticks(), 
        "Ticks"
      );
    }
  )
    .Attribute($asm00.TypeRef("NUnit.Framework.TestAttribute"))
    .Attribute($asm00.TypeRef("NUnit.Framework.ExpectedExceptionAttribute"), function () { return [$asm01.TypeRef("System.ArgumentOutOfRangeException")]; })
    .Attribute($asm00.TypeRef("NUnit.Framework.CategoryAttribute"), function () { return ["NotWorking"]; });

  $.Method({Static:false, Public:true }, "TestAdd", 
    $sig.make(0x8A, null, [], []), 
    function TimeSpanTest_TestAdd () {
      var t = new ($T00())(2, 3, 4, 5, 6);
      var t2 = new ($T00())(1, 2, 3, 4, 5);
      var t3 = $T00().op_Addition(t.MemberwiseClone(), t2).MemberwiseClone();
      var t4 = t.Add(t2).MemberwiseClone();
      $T03().AreEqual(3, t3.get_Days(), "A1");
      $T03().AreEqual(5, t3.get_Hours(), "A2");
      $T03().AreEqual(7, t3.get_Minutes(), "A3");
      $T03().AreEqual(9, t3.get_Seconds(), "A4");
      $T03().AreEqual(11, t3.get_Milliseconds(), "A5");
      $T03().AreEqual("3.05:07:09.0110000", t4.toString(), "A6");
      try {
        var t5 = $T00().op_Addition($T00().MaxValue.MemberwiseClone(), new ($T00())($T04().Create(1, 0, 0)));
        var exception = false;
      } catch ($exception) {
        if ($T09().$Is($exception)) {
          exception = true;
        } else {
          throw $exception;
        }
      }
      $T03().IsTrue(exception, "A7");
    }
  );

  $.Method({Static:false, Public:true }, "TestCompare", 
    $sig.make(0x8C, null, [], []), 
    function TimeSpanTest_TestCompare () {
      var t = new ($T00())($T04().Create(16777215, 16777215, 65535));
      var t2 = new ($T00())($T04().Create(1, 0, 0));
      $T03().AreEqual(-1, $T00().Compare(t, t2), "A1");
      $T03().AreEqual(1, $T00().Compare(t2, t), "A2");
      $T03().AreEqual(0, $T00().Compare(t2, t2), "A3");
      $T03().AreEqual(-1, $T00().Compare($T00().MinValue, $T00().MaxValue), "A4");
      $T03().AreEqual(-1, $sig.get(0x23A, $asm01.System.Int32, [$asm01.System.TimeSpan], []).CallVirtual("CompareTo", null, t, t2), "A5");
      $T03().AreEqual(1, $sig.get(0x23A, $asm01.System.Int32, [$asm01.System.TimeSpan], []).CallVirtual("CompareTo", null, t2, t), "A6");
      $T03().AreEqual(0, $sig.get(0x23A, $asm01.System.Int32, [$asm01.System.TimeSpan], []).CallVirtual("CompareTo", null, t2, t2), "A7");
      $T03().AreEqual(-1, $T00().Compare($T00().MinValue, $T00().MaxValue), "A8");
      $T03().AreEqual(1, $sig.get(0x237, $asm01.System.Int32, [$asm01.System.Object], []).CallVirtual("CompareTo", null, $T00().Zero, null), "A9");
      try {
        var res = $sig.get(0x237, $asm01.System.Int32, [$asm01.System.Object], []).CallVirtual("CompareTo", null, $T00().Zero, "");
        var exception = false;
      } catch ($exception) {
        if ($T0C().$Is($exception)) {
          exception = true;
        } else {
          throw $exception;
        }
      }
      $T03().IsTrue(exception, "A10");
      $T03().AreEqual(false, $T00().op_Equality(t, t2), "A11");
      $T03().AreEqual(false, $T00().op_GreaterThan(t, t2), "A12");
      $T03().AreEqual(false, $T00().op_GreaterThanOrEqual(t, t2), "A13");
      $T03().AreEqual(true, $T00().op_Inequality(t, t2), "A14");
      $T03().AreEqual(true, $T00().op_LessThan(t, t2), "A15");
      $T03().AreEqual(true, $T00().op_LessThanOrEqual(t, t2), "A16");
    }
  );

  $.Method({Static:false, Public:true }, "TestCtors", 
    $sig.make(0x4D, null, [], []), 
    function TimeSpanTest_TestCtors () {
      var t = new ($T00())($T04().Create(9831122, 73, 0));
      $T03().AreEqual("00:02:03.4567890", t.toString(), "A1");
      $T00().prototype._ctor.call(t, 1, 2, 3);
      $T03().AreEqual("01:02:03", t.toString(), "A2");
      $T00().prototype._ctor.call(t, 1, 2, 3, 4);
      $T03().AreEqual("1.02:03:04", t.toString(), "A3");
      $T00().prototype._ctor.call(t, 
        1, 
        2, 
        3, 
        4, 
        5
      );
      $T03().AreEqual("1.02:03:04.0050000", t.toString(), "A4");
      $T00().prototype._ctor.call(t, 
        -1, 
        2, 
        -3, 
        4, 
        -5
      );
      $T03().AreEqual("-22:02:56.0050000", t.toString(), "A5");
      $T00().prototype._ctor.call(t, 
        0, 
        25, 
        0, 
        0, 
        0
      );
      $T03().AreEqual("1.01:00:00", t.toString(), "A6");
    }
  );

  $.Method({Static:false, Public:true }, "TestEquals", 
    $sig.make(0x95, null, [], []), 
    function TimeSpanTest_TestEquals () {
      var t = new ($T00())($T04().Create(1, 0, 0));
      var t2 = new ($T00())($T04().Create(2, 0, 0));
      var s = "justastring";
      $T03().AreEqual(true, t.Equals(t), "A1");
      $T03().AreEqual(false, t.Equals(t2), "A2");
      $T03().AreEqual(false, t.Object_Equals(s), "A3");
      $T03().AreEqual(false, t.Object_Equals(null), "A4");
      $T03().AreEqual(true, $sig.get(0x257, $asm01.System.Boolean, [$asm01.System.TimeSpan, $asm01.System.TimeSpan], []).CallStatic($T00(), "Equals", null, t, t), "A5");
      $T03().AreEqual(false, $sig.get(0x257, $asm01.System.Boolean, [$asm01.System.TimeSpan, $asm01.System.TimeSpan], []).CallStatic($T00(), "Equals", null, t, t2), "A6");
      $T03().AreEqual(false, JSIL.ObjectEquals(null, null), "A7");
      $T03().AreEqual(false, JSIL.ObjectEquals(null, null), "A8");
      $T03().AreEqual(false, JSIL.ObjectEquals(null, null), "A9");
      $T03().AreEqual(true, JSIL.ObjectEquals(null, null), "A10");
    }
  );

  $.Method({Static:false, Public:true }, "TestFromXXXX", 
    $sig.make(0x96, null, [], []), 
    function TimeSpanTest_TestFromXXXX () {
      $T03().AreEqual("12.08:16:48", ($T00().FromDays(12.345)).toString(), "A1");
      $T03().AreEqual("12:20:42", ($T00().FromHours(12.345)).toString(), "A2");
      $T03().AreEqual("00:12:20.7000000", ($T00().FromMinutes(12.345)).toString(), "A3");
      $T03().AreEqual("00:00:12.3450000", ($T00().FromSeconds(12.345)).toString(), "A4");
      $T03().AreEqual("00:00:00.0120000", ($T00().FromMilliseconds(12.345)).toString(), "A5");
      $T03().AreEqual("00:00:00.0012345", ($T00().FromTicks($T04().Create(12345, 0, 0))).toString(), "A6");
    }
  );

  $.Method({Static:false, Public:true }, "TestGetHashCode", 
    $sig.make(0xF5, null, [], []), 
    function TimeSpanTest_TestGetHashCode () {
      $T03().AreEqual(77, JSIL.ObjectHashCode(new ($T00())($T04().Create(77, 0, 0))), "A1");
    }
  );

  $.Method({Static:false, Public:true }, "TestNegateAndDuration", 
    $sig.make(0x93, null, [], []), 
    function TimeSpanTest_TestNegateAndDuration () {
      $T03().AreEqual("-00:00:00.0012345", (((new ($T00())($T04().Create(12345, 0, 0)))).Negate()).toString(), "A1");
      $T03().AreEqual("00:00:00.0012345", (((new ($T00())($T04().Create(16764871, 16777215, 65535)))).Duration()).toString(), "A2");
      try {
        var t = $T00().MinValue.Duration();
        var exception = false;
      } catch ($exception) {
        if ($T09().$Is($exception)) {
          exception = true;
        } else {
          throw $exception;
        }
      }
      $T03().IsTrue(exception, "A4");
      $T03().AreEqual("-00:00:00.0000077", ($T00().op_UnaryNegation(new ($T00())($T04().Create(77, 0, 0)))).toString(), "A5");
      $T03().AreEqual("00:00:00.0000077", ($T00().op_UnaryPlus(new ($T00())($T04().Create(77, 0, 0)))).toString(), "A6");
    }
  );

  $.Method({Static:false, Public:true }, "TestParse", 
    $sig.make(0xF9, null, [], []), 
    function TimeSpanTest_TestParse () {
      this.ParseHelper(" 13:45:15 ", false, false, "13:45:15");
      this.ParseHelper(" -1:2:3 ", false, false, "-01:02:03");
      this.ParseHelper(" 25:0:0 ", false, true, "dontcare");
      this.ParseHelper("-21.23:59:59.9999999", false, false, "-21.23:59:59.9999999");
      this.ParseHelper("10:12  ", false, false, "10:12:00");
      this.ParseHelper("aaa", true, false, "dontcare");
      this.ParseHelper("100000000000000.1:1:1", false, true, "dontcare");
      this.ParseHelper("24:60:60", false, true, "dontcare");
      this.ParseHelper("0001:0002:0003.12     ", false, false, "01:02:03.1200000");
      this.ParseHelper(" 1:2:3:12345678 ", true, false, "dontcare");
      this.ParseHelper("00:00:00", false, false, "00:00:00");
      this.ParseHelper("00:10:00", false, false, "00:10:00");
    }
  )
    .Attribute($asm00.TypeRef("NUnit.Framework.TestAttribute"));

  $.Method({Static:false, Public:true }, "TestProperties", 
    $sig.make(0x88, null, [], []), 
    function TimeSpanTest_TestProperties () {
      var t = new ($T00())(1, 2, 3, 4, 5);
      var t2 = $T00().op_UnaryNegation(t.MemberwiseClone());
      $T03().AreEqual(1, t.get_Days(), "A1");
      $T03().AreEqual(2, t.get_Hours(), "A2");
      $T03().AreEqual(3, t.get_Minutes(), "A3");
      $T03().AreEqual(4, t.get_Seconds(), "A4");
      $T03().AreEqual(5, t.get_Milliseconds(), "A5");
      $T03().AreEqual(-1, t2.get_Days(), "A6");
      $T03().AreEqual(-2, t2.get_Hours(), "A7");
      $T03().AreEqual(-3, t2.get_Minutes(), "A8");
      $T03().AreEqual(-4, t2.get_Seconds(), "A9");
      $T03().AreEqual(-5, t2.get_Milliseconds(), "A10");
    }
  );

  $.Method({Static:false, Public:true }, "TestSubstract", 
    $sig.make(0xFC, null, [], []), 
    function TimeSpanTest_TestSubstract () {
      var t = new ($T00())(2, 3, 4, 5, 6);
      var t2 = new ($T00())(1, 2, 3, 4, 5);
      var t3 = $T00().op_Subtraction(t.MemberwiseClone(), t2).MemberwiseClone();
      var t4 = t.Subtract(t2).MemberwiseClone();
      $T03().AreEqual("1.01:01:01.0010000", t3.toString(), "A1");
      $T03().AreEqual("1.01:01:01.0010000", t4.toString(), "A2");
      try {
        var t5 = $T00().op_Subtraction($T00().MinValue.MemberwiseClone(), new ($T00())($T04().Create(1, 0, 0)));
        var exception = false;
      } catch ($exception) {
        if ($T09().$Is($exception)) {
          exception = true;
        } else {
          throw $exception;
        }
      }
      $T03().IsTrue(exception, "A3");
    }
  );

  $.Method({Static:false, Public:true }, "TestToString", 
    $sig.make(0xFE, null, [], []), 
    function TimeSpanTest_TestToString () {
      var t = new ($T00())(1, 2, 3, 4, 5);
      var t2 = $T00().op_UnaryNegation(t.MemberwiseClone());
      $T03().AreEqual("1.02:03:04.0050000", t.toString(), "A1");
      $T03().AreEqual("-1.02:03:04.0050000", t2.toString(), "A2");
      $T03().AreEqual("10675199.02:48:05.4775807", $T00().MaxValue.toString(), "A3");
      $T03().AreEqual("-10675199.02:48:05.4775808", $T00().MinValue.toString(), "A4");
    }
  );

  $.Method({Static:false, Public:true }, "ToString_Constants", 
    $sig.make(0x100, null, [], []), 
    function TimeSpanTest_ToString_Constants () {
      $T03().AreEqual("00:00:00", $T00().Zero.toString(), "Zero");
      $T03().AreEqual("10675199.02:48:05.4775807", $T00().MaxValue.toString(), "MaxValue");
      $T03().AreEqual("-10675199.02:48:05.4775808", $T00().MinValue.toString(), "MinValue");
    }
  )
    .Attribute($asm00.TypeRef("NUnit.Framework.TestAttribute"));

  $.Method({Static:false, Public:true }, "TryParse", 
    $sig.make(0x110, null, [], []), 
    function TimeSpanTest_TryParse () {
      var result = new JSIL.Variable(new ($T00())());
      $T03().AreEqual(true, $T00().TryParse(" 13:45:15 ", /* ref */ result), "#A1");
      $T03().AreEqual("13:45:15", result.value.toString(), "#A2");
      $T03().AreEqual(true, $T00().TryParse(" -1:2:3 ", /* ref */ result), "#B1");
      $T03().AreEqual("-01:02:03", result.value.toString(), "#B2");
      $T03().AreEqual(false, $T00().TryParse("aaa", /* ref */ result), "#C2");
      $T03().AreEqual(true, $T00().TryParse("-21.23:59:59.9999999", /* ref */ result), "#D1");
      $T03().AreEqual("-21.23:59:59.9999999", result.value.toString(), "#D2");
      $T03().AreEqual(false, $T00().TryParse("100000000000000.1:1:1", /* ref */ result), "#E1");
      $T03().AreEqual(false, $T00().TryParse("24:60:60", /* ref */ result), "#E2");
      $T03().AreEqual(true, $T00().TryParse("0001:0002:0003.12     ", /* ref */ result), "#F1");
      $T03().AreEqual("01:02:03.1200000", result.value.toString(), "#F2");
      $T03().AreEqual(false, $T00().TryParse(" 1:2:3:12345678 ", /* ref */ result), "#G1");
      $T03().AreEqual(true, $T00().TryParse("10675199.02:48:05.4775807", /* ref */ result), "MaxValue#1");
      $T03().AreEqual($T00().MaxValue.MemberwiseClone(), result.value, "MaxValue#2");
      $T03().AreEqual(true, $T00().TryParse("-10675199.02:48:05.4775808", /* ref */ result), "MinValue#1");
      $T03().AreEqual($T00().MinValue.MemberwiseClone(), result.value, "MinValue#2");
    }
  )
    .Attribute($asm00.TypeRef("NUnit.Framework.TestAttribute"));

  $.Method({Static:false, Public:true }, "TryParseErrors", 
    $sig.make(0x111, null, [], []), 
    function TimeSpanTest_TryParseErrors () {
      var result = new JSIL.Variable(new ($T00())());
      $T03().AreEqual(false, $T00().TryParse("0.99.99.0", /* ref */ result), "Format#1");
      $T03().AreEqual(false, $T00().TryParse("10675199.02:48:05.4775808", /* ref */ result), "OverMaxValue");
      $T03().AreEqual(false, $T00().TryParse("-10675199.02:48:05.4775809", /* ref */ result), "UnderMinValue");
    }
  )
    .Attribute($asm00.TypeRef("NUnit.Framework.TestAttribute"));

})
  .Attribute($asm00.TypeRef("NUnit.Framework.TestFixtureAttribute"));

JSIL.MakeClass($asm01.TypeRef("System.Attribute"), "NUnit.Framework.IgnoreAttribute", true, [], function ($) {
  var $thisType = $.publicInterface;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm01.System.String)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm01.System.Attribute)) ();
  };

  $.Method({Static:false, Public:true }, ".ctor", 
    $sig.make(0x6C, null, [$.String], []), 
    function IgnoreAttribute__ctor (message) {
      $T01().prototype._ctor.call(this);
    }
  );

});

JSIL.MakeClass($asm01.TypeRef("System.Object"), "MonoTests.System.DateTimeTest", true, [], function ($) {
  var $thisType = $.publicInterface;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm01.System.Int64)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm01.System.DateTime)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm01.System.TimeSpan)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm00.NUnit.Framework.Assert)) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize($asm01.System.DateTimeKind)) ();
  };
  var $T05 = function () {
    return ($T05 = JSIL.Memoize($asm01.System.TimeZone)) ();
  };
  var $T06 = function () {
    return ($T06 = JSIL.Memoize($asm01.System.Globalization.CultureInfo)) ();
  };
  var $T07 = function () {
    return ($T07 = JSIL.Memoize($asm01.System.Globalization.DateTimeStyles)) ();
  };
  var $T08 = function () {
    return ($T08 = JSIL.Memoize($asm01.System.Exception)) ();
  };
  var $T09 = function () {
    return ($T09 = JSIL.Memoize(System.Array.Of($asm01.System.String))) ();
  };
  var $T0A = function () {
    return ($T0A = JSIL.Memoize($asm01.System.String)) ();
  };
  var $T0B = function () {
    return ($T0B = JSIL.Memoize($asm01.System.Globalization.DateTimeFormatInfo)) ();
  };
  var $T0C = function () {
    return ($T0C = JSIL.Memoize($asm01.System.Int32)) ();
  };
  var $T0D = function () {
    return ($T0D = JSIL.Memoize($asm01.System.Threading.Thread)) ();
  };
  var $T0E = function () {
    return ($T0E = JSIL.Memoize($asm01.System.FormatException)) ();
  };
  var $T0F = function () {
    return ($T0F = JSIL.Memoize($asm01.System.Object)) ();
  };
  var $T10 = function () {
    return ($T10 = JSIL.Memoize($asm00.MonoTests.System.DateTimeTest_Resolution)) ();
  };
  var $T11 = function () {
    return ($T11 = JSIL.Memoize($asm01.System.IConvertible)) ();
  };
  var $T12 = function () {
    return ($T12 = JSIL.Memoize($asm01.System.Boolean)) ();
  };
  var $T13 = function () {
    return ($T13 = JSIL.Memoize($asm01.System.Byte)) ();
  };
  var $T14 = function () {
    return ($T14 = JSIL.Memoize($asm01.System.Char)) ();
  };
  var $T15 = function () {
    return ($T15 = JSIL.Memoize($asm01.System.Decimal)) ();
  };
  var $T16 = function () {
    return ($T16 = JSIL.Memoize($asm01.System.Double)) ();
  };
  var $T17 = function () {
    return ($T17 = JSIL.Memoize($asm01.System.Int16)) ();
  };
  var $T18 = function () {
    return ($T18 = JSIL.Memoize($asm01.System.SByte)) ();
  };
  var $T19 = function () {
    return ($T19 = JSIL.Memoize($asm01.System.Single)) ();
  };
  var $T1A = function () {
    return ($T1A = JSIL.Memoize($asm01.System.UInt16)) ();
  };
  var $T1B = function () {
    return ($T1B = JSIL.Memoize($asm01.System.UInt32)) ();
  };
  var $T1C = function () {
    return ($T1C = JSIL.Memoize($asm01.System.UInt64)) ();
  };
  var $T1D = function () {
    return ($T1D = JSIL.Memoize($asm01.System.Void)) ();
  };
  var $T1E = function () {
    return ($T1E = JSIL.Memoize($asm01.System.ArgumentNullException)) ();
  };
  var $T1F = function () {
    return ($T1F = JSIL.Memoize($asm01.System.IFormatProvider)) ();
  };

  $.Method({Static:false, Public:true }, ".ctor", 
    $sig.make(0x16F, null, [], []), 
    function DateTimeTest__ctor () {
      this.myTicks = JSIL.Array.New($T00(), [$T00().Create(9682944, 9152128, 2243), $T00().Create(15239936, 9185216, 2243), $T00().Create(3963648, 9163759, 2243), $T00().Create(8101376, 9163751, 2243), $T00().Create(3883648, 9163759, 2243), $T00().Create(7789184, 9161613, 2243), $T00().Create(534144, 5991031, 2235), $T00().Create(7372800, 9935871, 2244)]);
    }
  );

  $.Method({Static:false, Public:true }, "Add", 
    $sig.make(0xA8, null, [], []), 
    function DateTimeTest_Add () {
      var t = new ($T01())(this.myTicks[1]);
      var span = new ($T02())(3, 54, 1);
      var t2 = t.Add(span).MemberwiseClone();
      $T03().AreEqual(25, t2.get_Day(), "#1");
      $T03().AreEqual(19, t2.get_Hour(), "#2");
      $T03().AreEqual(19, t2.get_Minute(), "#3");
      $T03().AreEqual(14, t2.get_Second(), "#4");
      $T03().AreEqual(25, t.get_Day(), "#5");
      $T03().AreEqual(15, t.get_Hour(), "#6");
      $T03().AreEqual(25, t.get_Minute(), "#7");
      $T03().AreEqual(13, t.get_Second(), "#8");
    }
  )
    .Attribute($asm00.TypeRef("NUnit.Framework.TestAttribute"));

  $.Method({Static:false, Public:true }, "AddDays", 
    $sig.make(0xAB, null, [], []), 
    function DateTimeTest_AddDays () {
      var t = new ($T01())(this.myTicks[1]);
      t = t.AddDays(3).MemberwiseClone();
      $T03().AreEqual(28, t.get_Day(), "#A1");
      $T03().AreEqual(15, t.get_Hour(), "#A2");
      $T03().AreEqual(25, t.get_Minute(), "#A3");
      $T03().AreEqual(13, t.get_Second(), "#A4");
      t = t.AddDays(1.9).MemberwiseClone();
      $T03().AreEqual(2, t.get_Day(), "#B1");
      $T03().AreEqual(13, t.get_Hour(), "#B2");
      $T03().AreEqual(1, t.get_Minute(), "#B3");
      $T03().AreEqual(13, t.get_Second(), "#B4");
      t = t.AddDays(0.2).MemberwiseClone();
      $T03().AreEqual(2, t.get_Day(), "#C1");
      $T03().AreEqual(17, t.get_Hour(), "#C2");
      $T03().AreEqual(49, t.get_Minute(), "#C3");
      $T03().AreEqual(13, t.get_Second(), "#C4");
    }
  )
    .Attribute($asm00.TypeRef("NUnit.Framework.TestAttribute"));

  $.Method({Static:false, Public:true }, "AddDaysOutOfRangeException1", 
    $sig.make(0xAC, null, [], []), 
    function DateTimeTest_AddDaysOutOfRangeException1 () {
      var t = new ($T01())(this.myTicks[1]);
      t.AddDays(10000000);
    }
  )
    .Attribute($asm00.TypeRef("NUnit.Framework.ExpectedExceptionAttribute"), function () { return [$asm01.TypeRef("System.ArgumentOutOfRangeException")]; })
    .Attribute($asm00.TypeRef("NUnit.Framework.TestAttribute"));

  $.Method({Static:false, Public:true }, "AddDaysOutOfRangeException2", 
    $sig.make(0xAD, null, [], []), 
    function DateTimeTest_AddDaysOutOfRangeException2 () {
      var t = new ($T01())(this.myTicks[1]);
      t.AddDays(-10000000);
    }
  )
    .Attribute($asm00.TypeRef("NUnit.Framework.ExpectedExceptionAttribute"), function () { return [$asm01.TypeRef("System.ArgumentOutOfRangeException")]; })
    .Attribute($asm00.TypeRef("NUnit.Framework.TestAttribute"));

  $.Method({Static:false, Public:true }, "AddHours", 
    $sig.make(0xAE, null, [], []), 
    function DateTimeTest_AddHours () {
      var t = new ($T01())(this.myTicks[1]);
      t = t.AddHours(10).MemberwiseClone();
      $T03().AreEqual(26, t.get_Day(), "#A1");
      $T03().AreEqual(1, t.get_Hour(), "#A2");
      $T03().AreEqual(25, t.get_Minute(), "#A3");
      $T03().AreEqual(13, t.get_Second(), "#A4");
      t = t.AddHours(-3.7).MemberwiseClone();
      $T03().AreEqual(25, t.get_Day(), "#B1");
      $T03().AreEqual(21, t.get_Hour(), "#B2");
      $T03().AreEqual(43, t.get_Minute(), "#B3");
      $T03().AreEqual(13, t.get_Second(), "#B4");
      t = t.AddHours(3.732).MemberwiseClone();
      $T03().AreEqual(26, t.get_Day(), "#C1");
      $T03().AreEqual(1, t.get_Hour(), "#C2");
      $T03().AreEqual(27, t.get_Minute(), "#C3");
      $T03().AreEqual(8, t.get_Second(), "#C4");
    }
  )
    .Attribute($asm00.TypeRef("NUnit.Framework.TestAttribute"));

  $.Method({Static:false, Public:true }, "AddHoursOutOfRangeException1", 
    $sig.make(0xAF, null, [], []), 
    function DateTimeTest_AddHoursOutOfRangeException1 () {
      var t = new ($T01())(this.myTicks[1]);
      t.AddHours(9E+100);
    }
  )
    .Attribute($asm00.TypeRef("NUnit.Framework.TestAttribute"))
    .Attribute($asm00.TypeRef("NUnit.Framework.ExpectedExceptionAttribute"), function () { return [$asm01.TypeRef("System.ArgumentOutOfRangeException")]; });

  $.Method({Static:false, Public:true }, "AddHoursOutOfRangeException2", 
    $sig.make(0xB0, null, [], []), 
    function DateTimeTest_AddHoursOutOfRangeException2 () {
      var t = new ($T01())(this.myTicks[1]);
      t.AddHours(-9E+100);
    }
  )
    .Attribute($asm00.TypeRef("NUnit.Framework.TestAttribute"))
    .Attribute($asm00.TypeRef("NUnit.Framework.ExpectedExceptionAttribute"), function () { return [$asm01.TypeRef("System.ArgumentOutOfRangeException")]; });

  $.Method({Static:false, Public:true }, "AddMilliseconds", 
    $sig.make(0xB1, null, [], []), 
    function DateTimeTest_AddMilliseconds () {
      var t = new ($T01())(this.myTicks[1]);
      t = t.AddMilliseconds(10000000000).MemberwiseClone();
      $T03().AreEqual(21, t.get_Day(), "#A1");
      $T03().AreEqual(9, t.get_Hour(), "#A2");
      $T03().AreEqual(11, t.get_Minute(), "#A3");
      $T03().AreEqual(53, t.get_Second(), "#A4");
      t = t.AddMilliseconds(-190000000000).MemberwiseClone();
      $T03().AreEqual(13, t.get_Day(), "#B1");
      $T03().AreEqual(7, t.get_Hour(), "#B2");
      $T03().AreEqual(25, t.get_Minute(), "#B3");
      $T03().AreEqual(13, t.get_Second(), "#B4");
      t = t.AddMilliseconds(15.623).MemberwiseClone();
      $T03().AreEqual(13, t.get_Day(), "#C1");
      $T03().AreEqual(7, t.get_Hour(), "#C2");
      $T03().AreEqual(25, t.get_Minute(), "#C3");
      $T03().AreEqual(13, t.get_Second(), "#C4");
    }
  )
    .Attribute($asm00.TypeRef("NUnit.Framework.TestAttribute"));

  $.Method({Static:false, Public:true }, "AddMillisecondsOutOfRangeException1", 
    $sig.make(0xB2, null, [], []), 
    function DateTimeTest_AddMillisecondsOutOfRangeException1 () {
      var t = new ($T01())(this.myTicks[1]);
      t.AddMilliseconds(9E+100);
    }
  )
    .Attribute($asm00.TypeRef("NUnit.Framework.ExpectedExceptionAttribute"), function () { return [$asm01.TypeRef("System.ArgumentOutOfRangeException")]; })
    .Attribute($asm00.TypeRef("NUnit.Framework.TestAttribute"));

  $.Method({Static:false, Public:true }, "AddMillisecondsOutOfRangeException2", 
    $sig.make(0xB3, null, [], []), 
    function DateTimeTest_AddMillisecondsOutOfRangeException2 () {
      var t = new ($T01())(this.myTicks[1]);
      t.AddMilliseconds(-9E+100);
    }
  )
    .Attribute($asm00.TypeRef("NUnit.Framework.ExpectedExceptionAttribute"), function () { return [$asm01.TypeRef("System.ArgumentOutOfRangeException")]; })
    .Attribute($asm00.TypeRef("NUnit.Framework.TestAttribute"));

  $.Method({Static:false, Public:true }, "AddOutOfRangeException1", 
    $sig.make(0xA9, null, [], []), 
    function DateTimeTest_AddOutOfRangeException1 () {
      var t = new ($T01())(this.myTicks[1]);
      t.Add($T02().MaxValue);
    }
  )
    .Attribute($asm00.TypeRef("NUnit.Framework.TestAttribute"))
    .Attribute($asm00.TypeRef("NUnit.Framework.ExpectedExceptionAttribute"), function () { return [$asm01.TypeRef("System.ArgumentOutOfRangeException")]; });

  $.Method({Static:false, Public:true }, "AddOutOfRangeException2", 
    $sig.make(0xAA, null, [], []), 
    function DateTimeTest_AddOutOfRangeException2 () {
      var t = new ($T01())(this.myTicks[1]);
      t.Add($T02().MinValue);
    }
  )
    .Attribute($asm00.TypeRef("NUnit.Framework.TestAttribute"))
    .Attribute($asm00.TypeRef("NUnit.Framework.ExpectedExceptionAttribute"), function () { return [$asm01.TypeRef("System.ArgumentOutOfRangeException")]; });

  $.Method({Static:false, Public:true }, "Bug352210", 
    $sig.make(0x13F, null, [], []), 
    function DateTimeTest_Bug352210 () {
      var dt = $T01().ParseExact("2007-06-15T10:30:10.5", "yyyy-MM-ddTHH:mm:ss.f", null);
      $T03().AreEqual(
        $T00().Create(2109504, 8212297, 2249), 
        dt.get_Ticks(), 
        "#1"
      );
      $T03().AreEqual($T04().Unspecified, dt.get_Kind(), "#2");
    }
  )
    .Attribute($asm00.TypeRef("NUnit.Framework.TestAttribute"));

  $.Method({Static:false, Public:true }, "Bug352210_New", 
    $sig.make(0x143, null, [], []), 
    function DateTimeTest_Bug352210_New () {
      var ticksUTC = $T00().Create(6782208, 3520337, 2250);
      var ticksLocal = $T00().op_Addition(ticksUTC, $T05().get_CurrentTimeZone().GetUtcOffset(new ($T01())(ticksUTC)).get_Ticks());
      var ci = $T06().get_InvariantCulture();
      var dt = $T01().ParseExact("2008-02-05 02:38:26", "yyyy-MM-dd HH:mm:ss", ci).MemberwiseClone();
      $T03().AreEqual($T04().Unspecified, dt.get_Kind(), "A1");
      $T03().AreEqual(ticksUTC, dt.get_Ticks(), "A2");
      dt = $T01().ParseExact("2008-02-05 02:38:26Z", "u", ci).MemberwiseClone();
      $T03().AreEqual($T04().Unspecified, dt.get_Kind(), "B1");
      $T03().AreEqual(ticksUTC, dt.get_Ticks(), "B2");
      dt = $T01().ParseExact("2008-02-05 00:38:26-02:00", "yyyy-MM-dd HH:mm:ssK", ci).MemberwiseClone();
      $T03().AreEqual($T04().Local, dt.get_Kind(), "C1");
      $T03().AreEqual(ticksLocal, dt.get_Ticks(), "C2");
      dt = $sig.get(0x474, $asm01.System.DateTime, [
          $asm01.System.String, $asm01.System.String, 
          $asm01.System.IFormatProvider, $asm01.System.Globalization.DateTimeStyles
        ], []).CallStatic($T01(), "ParseExact", null, "2008-02-05 00:38:26 -2", "yyyy-MM-dd HH:mm:ss z", ci, $T07().AssumeUniversal).MemberwiseClone();
      $T03().AreEqual($T04().Local, dt.get_Kind(), "D1");
      $T03().AreEqual(ticksLocal, dt.get_Ticks(), "D2");
      try {
        dt = $T01().ParseExact("2008-02-05 02:38:26 GMT", "yyyy-MM-dd HH:mm:ss GMT", ci).MemberwiseClone();
        $T03().AreEqual($T04().Local, dt.get_Kind(), "E1");
        $T03().AreEqual(ticksLocal, dt.get_Ticks(), "E2");
      } catch ($exception) {
        $T03().Fail("E3");
      }
      try {
        dt = $T01().ParseExact("2008-02-05 02:38:26 qqGMTqq", "yyyy-MM-dd HH:mm:ss qqGMTqq", ci).MemberwiseClone();
        $T03().AreEqual($T04().Local, dt.get_Kind(), "F1");
        $T03().AreEqual(ticksLocal, dt.get_Ticks(), "F2");
      } catch ($exception) {
        $T03().Fail("F3");
      }
      try {
        dt = $T01().ParseExact("2008-02-05 02:38:26 GMT", "yyyy-MM-dd HH:mm:ss 'GMT'", ci).MemberwiseClone();
        $T03().AreEqual($T04().Unspecified, dt.get_Kind(), "G1");
        $T03().AreEqual(ticksUTC, dt.get_Ticks(), "G2");
      } catch ($exception) {
        $T03().Fail("G3");
      }
      try {
        dt = $T01().Parse("GMT 2008-02-05 02:38:26", ci).MemberwiseClone();
        $T03().AreEqual($T04().Local, dt.get_Kind(), "H1");
        $T03().AreEqual(ticksLocal, dt.get_Ticks(), "H2");
      } catch ($exception) {
        $T03().Fail("H4");
      }
    }
  )
    .Attribute($asm00.TypeRef("NUnit.Framework.TestAttribute"));

  $.Method({Static:false, Public:true }, "Bug377042", 
    $sig.make(0x145, null, [], []), 
    function DateTimeTest_Bug377042 () {
      var f = JSIL.Array.New($T0A(), ["yyyy-MM-ddTHH:mm:ssZ", "yyyy-MM-ddTHH:mm:sszzzz", "yyyy-MM-dd"]);
      var dts = $T07().AdjustToUniversal;
      dts = $T07().$Cast((dts | $T07().AssumeUniversal));
      var result = $sig.get(0x476, $asm01.System.DateTime, [
          $asm01.System.String, System.Array.Of($asm01.System.String), 
          $asm01.System.IFormatProvider, $asm01.System.Globalization.DateTimeStyles
        ], []).CallStatic($T01(), "ParseExact", null, "2005-01-01T01:11:11+8:00", f, new ($T0B())(), dts).MemberwiseClone();
    }
  )
    .Attribute($asm00.TypeRef("NUnit.Framework.TestAttribute"));

  $.Method({Static:false, Public:true }, "CompareTicks", 
    $sig.make(0x14F, null, [], []), 
    function DateTimeTest_CompareTicks () {
      var d = new ($T01())($T00().Create(0, 0, 0), $T04().Utc);
      var f = new ($T01())($T00().Create(0, 0, 0));
      $T03().AreEqual($T01().op_Equality(d, f), true, "#1");
    }
  )
    .Attribute($asm00.TypeRef("NUnit.Framework.TestAttribute"));

  $.Method({Static:false, Public:true }, "Constructor_Max", 
    $sig.make(0x8D, null, [], []), 
    function DateTimeTest_Constructor_Max () {
      $T03().AreEqual(
        $T00().Create(3610864, 2651636, 11210), 
        ($sig.get(0x40E, null, [
              $asm01.System.Int32, $asm01.System.Int32, 
              $asm01.System.Int32, $asm01.System.Int32, 
              $asm01.System.Int32, $asm01.System.Int32, 
              $asm01.System.Int32
            ], []).Construct($T01(), 9999, 12, 31, 23, 59, 59, 999)).get_Ticks(), 
        "Max"
      );
    }
  )
    .Attribute($asm00.TypeRef("NUnit.Framework.TestAttribute"));

  $.Method({Static:false, Public:true }, "Constructor_Milliseconds_1000", 
    $sig.make(0xA6, null, [], []), 
    function DateTimeTest_Constructor_Milliseconds_1000 () {
      $sig.get(0x40E, null, [
          $asm01.System.Int32, $asm01.System.Int32, 
          $asm01.System.Int32, $asm01.System.Int32, 
          $asm01.System.Int32, $asm01.System.Int32, 
          $asm01.System.Int32
        ], []).Construct($T01(), 9999, 12, 31, 23, 59, 59, 1000);
    }
  )
    .Attribute($asm00.TypeRef("NUnit.Framework.ExpectedExceptionAttribute"), function () { return [$asm01.TypeRef("System.ArgumentOutOfRangeException")]; })
    .Attribute($asm00.TypeRef("NUnit.Framework.TestAttribute"));

  $.Method({Static:false, Public:true }, "Constructor_Milliseconds_Negative", 
    $sig.make(0x97, null, [], []), 
    function DateTimeTest_Constructor_Milliseconds_Negative () {
      $sig.get(0x40E, null, [
          $asm01.System.Int32, $asm01.System.Int32, 
          $asm01.System.Int32, $asm01.System.Int32, 
          $asm01.System.Int32, $asm01.System.Int32, 
          $asm01.System.Int32
        ], []).Construct($T01(), 9999, 12, 31, 23, 59, 59, -1);
    }
  )
    .Attribute($asm00.TypeRef("NUnit.Framework.TestAttribute"))
    .Attribute($asm00.TypeRef("NUnit.Framework.ExpectedExceptionAttribute"), function () { return [$asm01.TypeRef("System.ArgumentOutOfRangeException")]; });

  $.Method({Static:false, Public:true }, "CultureIndependentTests", 
    $sig.make(0x105, null, [], []), 
    function DateTimeTest_CultureIndependentTests () {

    $loop0: 
      for (var i = 0; i < 32768; ) {

        var $label1 = 0;
      $labelgroup1: 
        while (true) {
          switch ($label1) {
            case 0: /* $entry1 */ 
              var ci = null;
              var stage = "init";
              try {
                try {
                  ci = $sig.get(0x31F, null, [$asm01.System.Int32], []).Construct($T06(), i);
                  if (!(!ci.get_IsNeutralCulture() || (ci === $T06().get_InvariantCulture()))) {
                    $label1 = 1 /* goto IL_2FC */ ;
                    continue $labelgroup1;
                  }
                } catch ($exception) {
                  $label1 = 1 /* goto IL_2FC */ ;
                  continue $labelgroup1;
                }
                $T0D().Thread$CurrentThread$value.set_CurrentCulture(ci);
                var lCID = ci.get_LCID();
                if (!((lCID === 1025) || (lCID === 2559))) {

                  var $label0 = 0;
                $labelgroup0: 
                  while (true) {
                    switch ($label0) {
                      case 0: /* $entry0 */ 
                        stage = "1";
                        var dt = $T01().ParseExact("19960312183847Z", "yyyyMMddHHmmssZ", null).MemberwiseClone();
                        stage = "3";
                        dt = $T01().Parse("2004-05-26T03:29:01.1234567").MemberwiseClone();
                        stage = "4";
                        dt = $T01().Parse("2004-05-26T03:29:01.1234567-07:00").MemberwiseClone();
                        lCID = ci.get_LCID();
                        if (!((lCID === 1054) || (lCID === 1128))) {
                          try {
                            stage = "5";
                            dt = $T01().Parse("Sat, 29 Oct 1994 12:00:00 GMT", ci).MemberwiseClone();
                          } catch ($exception) {
                            if ($T0E().$Is($exception)) {
                              var ex = $exception;
                              $T03().Fail($T0A().Format("stage 5.1 RFC1123: culture {0} {1} failed: {2}", JSIL.Array.New($T0F(), [i, ci, ex.get_Message()])));
                            } else {
                              throw $exception;
                            }
                          }
                          if ($T01().op_Inequality(dt, $T05().get_CurrentTimeZone().ToUniversalTime(dt.MemberwiseClone()))) {
                            $T03().IsTrue(
                              (12 !== dt.get_Hour()), 
                              $T0A().Format("bug #47720 on culture {0} {1}", JSIL.Array.New($T0F(), [ci.get_LCID(), ci]))
                            );
                          }
                          try {
                            stage = "6";
                            dt = $T01().Parse("Sat, 1 Oct 1994 03:00:00", ci).MemberwiseClone();
                          } catch ($exception) {
                            if ($T0E().$Is($exception)) {
                              var ex = $exception;
                              $T03().Fail($T0A().Format("stage 6.1 RFC1123 variant: culture {0} {1} failed: {2}", JSIL.Array.New($T0F(), [i, ci, ex.get_Message()])));
                            } else {
                              throw $exception;
                            }
                          }
                          stage = "7";
                          $T03().AreEqual(
                            3, 
                            dt.get_Hour(), 
                            $T0A().Format("stage 7.1 RFC1123 variant on culture {0} {1}", JSIL.Array.New($T0F(), [ci.get_LCID(), ci]))
                          );
                        }
                        lCID = ci.get_LCID();
                        if (lCID !== 1054) {
                          switch (lCID) {
                            case 1123: 
                            case 1125: 
                              $label0 = 1 /* goto IL_23F */ ;
                              continue $labelgroup0;

                            case 1124: 
                              break;

                            default: 
                              if (lCID === 1164) {
                                $label0 = 1 /* goto IL_23F */ ;
                                continue $labelgroup0;
                              }
                              break;

                          }
                          stage = "8";
                          var tick2 = ($T05().get_CurrentTimeZone().ToLocalTime(new ($T01())($T00().Create(7789184, 9161613, 2243)))).get_Ticks();
                          dt = $T01().Parse("Mon, 25 Feb 2002 04:25:13 GMT", ci).MemberwiseClone();
                          $T03().AreEqual(
                            tick2, 
                            dt.get_Ticks(), 
                            $T0A().Format("GMT variant. culture={0} {1}", JSIL.Array.New($T0F(), [i, ci]))
                          );
                        }

                        $label0 = 1 /* goto IL_23F */ ;
                        continue $labelgroup0;
                      case 1: /* IL_23F */ 

                        $label0 = 2 /* goto $exit0 */ ;
                        continue $labelgroup0;
                      case 2: /* $exit0 */ 

                        break $labelgroup0;
                    }
                  }
                }
              } catch ($exception) {
                if ($T0E().$Is($exception)) {
                  var ex = $exception;
                  $T03().Fail($T0A().Format("stage {3}: Culture {0} {1} failed: {2}", JSIL.Array.New($T0F(), [i, ci, ex.get_Message(), stage])));
                } else {
                  throw $exception;
                }
              }

              $label1 = 1 /* goto IL_2FC */ ;
              continue $labelgroup1;
            case 1: /* IL_2FC */ 
              ++i;
              continue $loop0;

          }
        }
      }
    }
  )
    .Attribute($asm00.TypeRef("NUnit.Framework.TestAttribute"));

  $.Method({Static:false, Public:true }, "DateTimeStylesAdjustToUniversal", 
    $sig.make(0xE3, null, [], []), 
    function DateTimeTest_DateTimeStylesAdjustToUniversal () {
      $T03().AreEqual("2005-09-05 22:29:00Z", $sig.get(0x49F, $asm01.System.String, [$asm01.System.String], []).CallVirtual("ToString", null, $T01().Parse("2005-09-05T22:29:00Z", $T06().get_InvariantCulture(), $T07().AdjustToUniversal), "u"));
    }
  )
    .Attribute($asm00.TypeRef("NUnit.Framework.TestAttribute"));

  $.Method({Static:false, Public:false}, "DTAssertEquals", 
    $sig.make(0x45, null, [
        $asm01.TypeRef("System.DateTime"), $asm01.TypeRef("System.DateTime"), 
        $asm00.TypeRef("MonoTests.System.DateTimeTest/Resolution")
      ], []), 
    function DateTimeTest_DTAssertEquals (actual, expected, resolution) {
      this.DTAssertEquals(actual, expected, resolution, "");
    }
  );

  $.Method({Static:false, Public:false}, "DTAssertEquals", 
    $sig.make(0x47, null, [
        $asm01.TypeRef("System.DateTime"), $asm01.TypeRef("System.DateTime"), 
        $asm00.TypeRef("MonoTests.System.DateTimeTest/Resolution"), $.String
      ], []), 
    function DateTimeTest_DTAssertEquals (expected, actual, resolution, message) {
      if ($T10().$Cast((resolution & $T10().Year)).valueOf() !== 0) {
        $T03().AreEqual(
          expected.get_Year(), 
          actual.get_Year(), 
          message
        );
      }
      if ($T10().$Cast((resolution & $T10()._Month)).valueOf() !== 0) {
        $T03().AreEqual(
          expected.get_Month(), 
          actual.get_Month(), 
          message
        );
      }
      if ($T10().$Cast((resolution & $T10()._Day)).valueOf() !== 0) {
        $T03().AreEqual(
          expected.get_Day(), 
          actual.get_Day(), 
          message
        );
      }
      if ($T10().$Cast((resolution & $T10()._Hour)).valueOf() !== 0) {
        $T03().AreEqual(
          expected.get_Hour(), 
          actual.get_Hour(), 
          message
        );
      }
      if ($T10().$Cast((resolution & $T10()._Minute)).valueOf() !== 0) {
        $T03().AreEqual(
          expected.get_Minute(), 
          actual.get_Minute(), 
          message
        );
      }
      if ($T10().$Cast((resolution & $T10()._Second)).valueOf() !== 0) {
        $T03().AreEqual(
          expected.get_Second(), 
          actual.get_Second(), 
          message
        );
      }
      if ($T10().$Cast((resolution & $T10()._Millisecond)).valueOf() !== 0) {
        $T03().AreEqual(
          expected.get_Millisecond(), 
          actual.get_Millisecond(), 
          message
        );
      }
    }
  );

  $.Method({Static:false, Public:true }, "EmptyFormatPattern", 
    $sig.make(0x126, null, [], []), 
    function DateTimeTest_EmptyFormatPattern () {
      $T01().ParseExact($T0A().Empty, $T0A().Empty, null);
    }
  )
    .Attribute($asm00.TypeRef("NUnit.Framework.TestAttribute"))
    .Attribute($asm00.TypeRef("NUnit.Framework.ExpectedExceptionAttribute"), function () { return [$asm01.TypeRef("System.FormatException")]; });

  $.Method({Static:false, Public:true }, "EmptyString", 
    $sig.make(0x147, null, [], []), 
    function DateTimeTest_EmptyString () {
      $T01().Parse("");
    }
  )
    .Attribute($asm00.TypeRef("NUnit.Framework.ExpectedExceptionAttribute"), function () { return [$asm01.TypeRef("System.FormatException")]; })
    .Attribute($asm00.TypeRef("NUnit.Framework.TestAttribute"));

  $.Method({Static:false, Public:true }, "Fields", 
    $sig.make(0xA7, null, [], []), 
    function DateTimeTest_Fields () {
      $T03().AreEqual(
        $T00().Create(3620863, 2651636, 11210), 
        $T01().MaxValue.get_Ticks(), 
        "#1"
      );
      $T03().AreEqual(0, $T01().MinValue.get_Ticks(), "#2");
    }
  )
    .Attribute($asm00.TypeRef("NUnit.Framework.TestAttribute"));

  $.Method({Static:false, Public:true }, "FromBinary", 
    $sig.make(0x150, null, [], []), 
    function DateTimeTest_FromBinary () {
      var dt_utc = $T01().FromBinary($T00().Create(1, 0, 16384));
      $T03().AreEqual($T04().Utc, dt_utc.get_Kind(), "#1");
      $T03().AreEqual(1, dt_utc.get_Ticks(), "#2");
      var dt_local = $T01().FromBinary($T00().Create(1, 0, 32768));
      $T03().AreEqual($T04().Local, dt_local.get_Kind(), "#3");
      var dt_unspecified = $T01().FromBinary($T00().Create(1, 0, 0));
      $T03().AreEqual($T04().Unspecified, dt_unspecified.get_Kind(), "#4");
      $T03().AreEqual(1, dt_unspecified.get_Ticks(), "#5");
      var dt_local2 = $T01().FromBinary($T00().Create(1, 0, 49152));
      $T03().AreEqual($T04().Local, dt_local2.get_Kind(), "#6");
      $T03().AreEqual(
        dt_local.get_Ticks(), 
        dt_local2.get_Ticks(), 
        "#7"
      );
    }
  )
    .Attribute($asm00.TypeRef("NUnit.Framework.TestAttribute"));

  $.Method({Static:false, Public:true }, "FromOADate", 
    $sig.make(0xE9, null, [], []), 
    function DateTimeTest_FromOADate () {
      $T03().AreEqual(
        $T00().Create(8634368, 245963, 2129), 
        ($T01().FromOADate(0)).get_Ticks(), 
        "#1"
      );
      $T03().AreEqual(
        $T00().Create(11560960, 16688805, 110), 
        ($T01().FromOADate(-657434.999)).get_Ticks(), 
        "#2"
      );
      $T03().AreEqual(
        $T00().Create(12036096, 2651584, 11210), 
        ($T01().FromOADate(2958465.999)).get_Ticks(), 
        "#3"
      );
    }
  )
    .Attribute($asm00.TypeRef("NUnit.Framework.TestAttribute"));

  $.Method({Static:false, Public:true }, "FromOADate_Max", 
    $sig.make(0xE8, null, [], []), 
    function DateTimeTest_FromOADate_Max () {
      $T01().FromOADate(2958466);
    }
  )
    .Attribute($asm00.TypeRef("NUnit.Framework.TestAttribute"))
    .Attribute($asm00.TypeRef("NUnit.Framework.ExpectedExceptionAttribute"), function () { return [$asm01.TypeRef("System.ArgumentException")]; });

  $.Method({Static:false, Public:true }, "FromOADate_Min", 
    $sig.make(0xE5, null, [], []), 
    function DateTimeTest_FromOADate_Min () {
      $T01().FromOADate(-657435);
    }
  )
    .Attribute($asm00.TypeRef("NUnit.Framework.TestAttribute"))
    .Attribute($asm00.TypeRef("NUnit.Framework.ExpectedExceptionAttribute"), function () { return [$asm01.TypeRef("System.ArgumentException")]; });

  $.Method({Static:false, Public:true }, "IConvertible_ToType_Boolean", 
    $sig.make(0x127, null, [], []), 
    function DateTimeTest_IConvertible_ToType_Boolean () {
      $T01().get_Now().IConvertible_ToType($T12().__Type__, null);
    }
  )
    .Attribute($asm00.TypeRef("NUnit.Framework.TestAttribute"))
    .Attribute($asm00.TypeRef("NUnit.Framework.ExpectedExceptionAttribute"), function () { return [$asm01.TypeRef("System.InvalidCastException")]; });

  $.Method({Static:false, Public:true }, "IConvertible_ToType_Byte", 
    $sig.make(0x128, null, [], []), 
    function DateTimeTest_IConvertible_ToType_Byte () {
      $T01().get_Now().IConvertible_ToType($T13().__Type__, null);
    }
  )
    .Attribute($asm00.TypeRef("NUnit.Framework.ExpectedExceptionAttribute"), function () { return [$asm01.TypeRef("System.InvalidCastException")]; })
    .Attribute($asm00.TypeRef("NUnit.Framework.TestAttribute"));

  $.Method({Static:false, Public:true }, "IConvertible_ToType_Char", 
    $sig.make(0x129, null, [], []), 
    function DateTimeTest_IConvertible_ToType_Char () {
      $T01().get_Now().IConvertible_ToType($T14().__Type__, null);
    }
  )
    .Attribute($asm00.TypeRef("NUnit.Framework.TestAttribute"))
    .Attribute($asm00.TypeRef("NUnit.Framework.ExpectedExceptionAttribute"), function () { return [$asm01.TypeRef("System.InvalidCastException")]; });

  $.Method({Static:false, Public:true }, "IConvertible_ToType_DateTime", 
    $sig.make(0x12A, null, [], []), 
    function DateTimeTest_IConvertible_ToType_DateTime () {
      var dt = $T01().get_Now().MemberwiseClone();
      var dt2 = $T01().$Cast(dt.IConvertible_ToType($T01().__Type__, null)).MemberwiseClone();
      $T03().IsTrue(dt.Equals(dt2));
    }
  )
    .Attribute($asm00.TypeRef("NUnit.Framework.TestAttribute"));

  $.Method({Static:false, Public:true }, "IConvertible_ToType_Decimal", 
    $sig.make(0x12B, null, [], []), 
    function DateTimeTest_IConvertible_ToType_Decimal () {
      $T01().get_Now().IConvertible_ToType($T15().__Type__, null);
    }
  )
    .Attribute($asm00.TypeRef("NUnit.Framework.TestAttribute"))
    .Attribute($asm00.TypeRef("NUnit.Framework.ExpectedExceptionAttribute"), function () { return [$asm01.TypeRef("System.InvalidCastException")]; });

  $.Method({Static:false, Public:true }, "IConvertible_ToType_Double", 
    $sig.make(0x12C, null, [], []), 
    function DateTimeTest_IConvertible_ToType_Double () {
      $T01().get_Now().IConvertible_ToType($T16().__Type__, null);
    }
  )
    .Attribute($asm00.TypeRef("NUnit.Framework.TestAttribute"))
    .Attribute($asm00.TypeRef("NUnit.Framework.ExpectedExceptionAttribute"), function () { return [$asm01.TypeRef("System.InvalidCastException")]; });

  $.Method({Static:false, Public:true }, "IConvertible_ToType_Empty", 
    $sig.make(0x12D, null, [], []), 
    function DateTimeTest_IConvertible_ToType_Empty () {
      $T01().get_Now().IConvertible_ToType(null, null);
    }
  )
    .Attribute($asm00.TypeRef("NUnit.Framework.ExpectedExceptionAttribute"), function () { return [$asm01.TypeRef("System.ArgumentNullException")]; })
    .Attribute($asm00.TypeRef("NUnit.Framework.TestAttribute"));

  $.Method({Static:false, Public:true }, "IConvertible_ToType_Int16", 
    $sig.make(0x12F, null, [], []), 
    function DateTimeTest_IConvertible_ToType_Int16 () {
      $T01().get_Now().IConvertible_ToType($T17().__Type__, null);
    }
  )
    .Attribute($asm00.TypeRef("NUnit.Framework.ExpectedExceptionAttribute"), function () { return [$asm01.TypeRef("System.InvalidCastException")]; })
    .Attribute($asm00.TypeRef("NUnit.Framework.TestAttribute"));

  $.Method({Static:false, Public:true }, "IConvertible_ToType_Int32", 
    $sig.make(0x131, null, [], []), 
    function DateTimeTest_IConvertible_ToType_Int32 () {
      $T01().get_Now().IConvertible_ToType($T0C().__Type__, null);
    }
  )
    .Attribute($asm00.TypeRef("NUnit.Framework.TestAttribute"))
    .Attribute($asm00.TypeRef("NUnit.Framework.ExpectedExceptionAttribute"), function () { return [$asm01.TypeRef("System.InvalidCastException")]; });

  $.Method({Static:false, Public:true }, "IConvertible_ToType_Int64", 
    $sig.make(0x132, null, [], []), 
    function DateTimeTest_IConvertible_ToType_Int64 () {
      $T01().get_Now().IConvertible_ToType($T00().__Type__, null);
    }
  )
    .Attribute($asm00.TypeRef("NUnit.Framework.TestAttribute"))
    .Attribute($asm00.TypeRef("NUnit.Framework.ExpectedExceptionAttribute"), function () { return [$asm01.TypeRef("System.InvalidCastException")]; });

  $.Method({Static:false, Public:true }, "IConvertible_ToType_Object", 
    $sig.make(0x133, null, [], []), 
    function DateTimeTest_IConvertible_ToType_Object () {
      var dt = $T01().get_Now().MemberwiseClone();
      var o = dt.IConvertible_ToType($T0F().__Type__, null);
      $T03().IsTrue(dt.Object_Equals(o));
    }
  )
    .Attribute($asm00.TypeRef("NUnit.Framework.TestAttribute"));

  $.Method({Static:false, Public:true }, "IConvertible_ToType_SByte", 
    $sig.make(0x134, null, [], []), 
    function DateTimeTest_IConvertible_ToType_SByte () {
      $T01().get_Now().IConvertible_ToType($T18().__Type__, null);
    }
  )
    .Attribute($asm00.TypeRef("NUnit.Framework.TestAttribute"))
    .Attribute($asm00.TypeRef("NUnit.Framework.ExpectedExceptionAttribute"), function () { return [$asm01.TypeRef("System.InvalidCastException")]; });

  $.Method({Static:false, Public:true }, "IConvertible_ToType_Single", 
    $sig.make(0x136, null, [], []), 
    function DateTimeTest_IConvertible_ToType_Single () {
      $T01().get_Now().IConvertible_ToType($T19().__Type__, null);
    }
  )
    .Attribute($asm00.TypeRef("NUnit.Framework.TestAttribute"))
    .Attribute($asm00.TypeRef("NUnit.Framework.ExpectedExceptionAttribute"), function () { return [$asm01.TypeRef("System.InvalidCastException")]; });

  $.Method({Static:false, Public:true }, "IConvertible_ToType_String", 
    $sig.make(0x138, null, [], []), 
    function DateTimeTest_IConvertible_ToType_String () {
      var dt = $T01().get_Now().MemberwiseClone();
      var s = $T0A().$Cast(dt.IConvertible_ToType($T0A().__Type__, null));
      $T03().AreEqual(s, dt.toString());
    }
  )
    .Attribute($asm00.TypeRef("NUnit.Framework.TestAttribute"));

  $.Method({Static:false, Public:true }, "IConvertible_ToType_UInt16", 
    $sig.make(0x13A, null, [], []), 
    function DateTimeTest_IConvertible_ToType_UInt16 () {
      $T01().get_Now().IConvertible_ToType($T1A().__Type__, null);
    }
  )
    .Attribute($asm00.TypeRef("NUnit.Framework.TestAttribute"))
    .Attribute($asm00.TypeRef("NUnit.Framework.ExpectedExceptionAttribute"), function () { return [$asm01.TypeRef("System.InvalidCastException")]; });

  $.Method({Static:false, Public:true }, "IConvertible_ToType_UInt32", 
    $sig.make(0x13B, null, [], []), 
    function DateTimeTest_IConvertible_ToType_UInt32 () {
      $T01().get_Now().IConvertible_ToType($T1B().__Type__, null);
    }
  )
    .Attribute($asm00.TypeRef("NUnit.Framework.TestAttribute"))
    .Attribute($asm00.TypeRef("NUnit.Framework.ExpectedExceptionAttribute"), function () { return [$asm01.TypeRef("System.InvalidCastException")]; });

  $.Method({Static:false, Public:true }, "IConvertible_ToType_UInt64", 
    $sig.make(0x13D, null, [], []), 
    function DateTimeTest_IConvertible_ToType_UInt64 () {
      $T01().get_Now().IConvertible_ToType($T1C().__Type__, null);
    }
  )
    .Attribute($asm00.TypeRef("NUnit.Framework.TestAttribute"))
    .Attribute($asm00.TypeRef("NUnit.Framework.ExpectedExceptionAttribute"), function () { return [$asm01.TypeRef("System.InvalidCastException")]; });

  $.Method({Static:false, Public:true }, "IllegalStyleCombination1", 
    $sig.make(0x15E, null, [], []), 
    function DateTimeTest_IllegalStyleCombination1 () {
      $sig.get(0x474, $asm01.System.DateTime, [
          $asm01.System.String, $asm01.System.String, 
          $asm01.System.IFormatProvider, $asm01.System.Globalization.DateTimeStyles
        ], []).CallStatic($T01(), "ParseExact", null, "", "", null, $T07().$Cast(160));
    }
  )
    .Attribute($asm00.TypeRef("NUnit.Framework.TestAttribute"))
    .Attribute($asm00.TypeRef("NUnit.Framework.ExpectedExceptionAttribute"), function () { return [$asm01.TypeRef("System.ArgumentException")]; });

  $.Method({Static:false, Public:true }, "IllegalStyleCombination2", 
    $sig.make(0x15F, null, [], []), 
    function DateTimeTest_IllegalStyleCombination2 () {
      $sig.get(0x474, $asm01.System.DateTime, [
          $asm01.System.String, $asm01.System.String, 
          $asm01.System.IFormatProvider, $asm01.System.Globalization.DateTimeStyles
        ], []).CallStatic($T01(), "ParseExact", null, "", "", null, $T07().$Cast(144));
    }
  )
    .Attribute($asm00.TypeRef("NUnit.Framework.TestAttribute"))
    .Attribute($asm00.TypeRef("NUnit.Framework.ExpectedExceptionAttribute"), function () { return [$asm01.TypeRef("System.ArgumentException")]; });

  $.Method({Static:false, Public:true }, "IllegalStyleCombination3", 
    $sig.make(0x161, null, [], []), 
    function DateTimeTest_IllegalStyleCombination3 () {
      $sig.get(0x474, $asm01.System.DateTime, [
          $asm01.System.String, $asm01.System.String, 
          $asm01.System.IFormatProvider, $asm01.System.Globalization.DateTimeStyles
        ], []).CallStatic($T01(), "ParseExact", null, "", "", null, $T07().$Cast(192));
    }
  )
    .Attribute($asm00.TypeRef("NUnit.Framework.TestAttribute"))
    .Attribute($asm00.TypeRef("NUnit.Framework.ExpectedExceptionAttribute"), function () { return [$asm01.TypeRef("System.ArgumentException")]; });

  $.Method({Static:false, Public:true }, "IllegalStyleCombination4", 
    $sig.make(0x163, null, [], []), 
    function DateTimeTest_IllegalStyleCombination4 () {
      $sig.get(0x474, $asm01.System.DateTime, [
          $asm01.System.String, $asm01.System.String, 
          $asm01.System.IFormatProvider, $asm01.System.Globalization.DateTimeStyles
        ], []).CallStatic($T01(), "ParseExact", null, "", "", null, $T07().$Cast(96));
    }
  )
    .Attribute($asm00.TypeRef("NUnit.Framework.ExpectedExceptionAttribute"), function () { return [$asm01.TypeRef("System.ArgumentException")]; })
    .Attribute($asm00.TypeRef("NUnit.Framework.TestAttribute"));

  $.Method({Static:false, Public:true }, "InstanceMembersAndKind", 
    $sig.make(0x14C, null, [], []), 
    function DateTimeTest_InstanceMembersAndKind () {
      $T03().AreEqual($T04().Utc, $T01().get_UtcNow().get_Date().get_Kind(), "#1");
      $T03().AreEqual($T04().Utc, ($T01().get_UtcNow().Add($T02().FromMinutes(1))).get_Kind(), "#2");
      $T03().AreEqual($T04().Utc, ($sig.get(0x48A, $asm01.System.DateTime, [$asm01.System.TimeSpan], []).CallVirtual("Subtract", null, $T01().get_UtcNow(), $T02().FromMinutes(1))).get_Kind(), "#3");
      $T03().AreEqual($T04().Utc, ($T01().get_UtcNow().AddDays(1)).get_Kind(), "#4");
      $T03().AreEqual($T04().Utc, ($T01().get_UtcNow().AddTicks($T00().Create(1, 0, 0))).get_Kind(), "#5");
      $T03().AreEqual($T04().Utc, ($T01().get_UtcNow().AddHours(1)).get_Kind(), "#6");
      $T03().AreEqual($T04().Utc, ($T01().get_UtcNow().AddMinutes(1)).get_Kind(), "#7");
      $T03().AreEqual($T04().Utc, ($T01().get_UtcNow().AddSeconds(1)).get_Kind(), "#8");
      $T03().AreEqual($T04().Utc, ($T01().get_UtcNow().AddMilliseconds(1)).get_Kind(), "#9");
      $T03().AreEqual($T04().Utc, ($T01().get_UtcNow().AddMonths(1)).get_Kind(), "#10");
      $T03().AreEqual($T04().Utc, ($T01().get_UtcNow().AddYears(1)).get_Kind(), "#11");
      $T03().AreEqual($T04().Utc, ($T01().op_Addition(
            $T01().get_UtcNow(), 
            $T02().FromMinutes(1)
          )).get_Kind(), "#12");
      $T03().AreEqual($T04().Utc, ($sig.get(0x4B5, $asm01.System.DateTime, [$asm01.System.DateTime, $asm01.System.TimeSpan], []).CallStatic($T01(), "op_Subtraction", null, 
            $T01().get_UtcNow(), 
            $T02().FromMinutes(1)
          )).get_Kind(), "#13");
    }
  )
    .Attribute($asm00.TypeRef("NUnit.Framework.TestAttribute"));

  $.Method({Static:false, Public:true }, "Kind", 
    $sig.make(0x14A, null, [], []), 
    function DateTimeTest_Kind () {
      var now = new ($T01())();
      if (!$T01().op_Equality(
          $T01().get_Now(), 
          $T01().get_UtcNow()
        )) {
        if (!$T02().op_Inequality(
            $T05().get_CurrentTimeZone().GetUtcOffset($T01().get_UtcNow().MemberwiseClone()), 
            $T05().get_CurrentTimeZone().GetUtcOffset($T01().get_Now().MemberwiseClone())
          )) {
          $T03().AreEqual($T04().Local, $T01().get_Now().get_Kind(), "#A1");
          $T03().AreEqual($T04().Local, $T01().get_Today().get_Kind(), "#A2");
          var utc = $T01().get_UtcNow().MemberwiseClone();
          $T01().prototype._ctor.call(now, $T00().op_Addition(
              utc.get_Ticks(), 
              $T05().get_CurrentTimeZone().GetUtcOffset(utc.MemberwiseClone()).get_Ticks()
            ), $T04().Local);
          var utctouniv = utc.ToUniversalTime().MemberwiseClone();
          var nowtouniv = now.ToUniversalTime().MemberwiseClone();
          var utctoloc = utc.ToLocalTime().MemberwiseClone();
          var nowtoloc = now.ToLocalTime().MemberwiseClone();
          $T03().AreEqual($T04().Utc, utc.get_Kind(), "#B1");
          $T03().AreEqual($T04().Local, now.get_Kind(), "#B2");
          $T03().AreEqual($T04().Utc, utctouniv.get_Kind(), "#B3");
          $T03().AreEqual($T04().Utc, nowtouniv.get_Kind(), "#B4");
          $T03().AreEqual($T04().Local, utctoloc.get_Kind(), "#B5");
          $T03().AreEqual($T04().Local, nowtoloc.get_Kind(), "#B6");
          $T03().AreEqual(utc.MemberwiseClone(), utctouniv, "#B7");
          $T03().AreEqual(utc.MemberwiseClone(), nowtouniv, "#B8");
          $T03().AreEqual(now.MemberwiseClone(), nowtoloc, "#B9");
          $T03().AreEqual(now.MemberwiseClone(), utctoloc, "#B10");
        }
      }
    }
  )
    .Attribute($asm00.TypeRef("NUnit.Framework.TestAttribute"));

  $.Method({Static:false, Public:true }, "KindInPattern", 
    $sig.make(0x158, null, [], []), 
    function DateTimeTest_KindInPattern () {
      $T03().AreEqual("00:00:00", $sig.get(0x49F, $asm01.System.String, [$asm01.System.String], []).CallVirtual("ToString", null, (new ($T01())(2000, 1, 1)), "HH:mm:ssK"), "#1");
      $T03().AreEqual("Z", $sig.get(0x49F, $asm01.System.String, [$asm01.System.String], []).CallVirtual("ToString", null, $T01().get_Today().ToUniversalTime(), "HH:mm:ssK")[8], "#2");
      $T03().AreEqual("00:00:00+09:00".length, $sig.get(0x49F, $asm01.System.String, [$asm01.System.String], []).CallVirtual("ToString", null, $T01().get_Today(), "HH:mm:ssK").length, "#3");
    }
  )
    .Attribute($asm00.TypeRef("NUnit.Framework.TestAttribute"));

  $.Method({Static:false, Public:true }, "KindPattern", 
    $sig.make(0x15A, null, [], []), 
    function DateTimeTest_KindPattern () {
      var format = "yyyy-MM-dd'T'HH:mm:ss.fffK";
      var ci = $T06().get_CurrentCulture();
      var dt = $T01().SpecifyKind(new ($T01())(2007, 11, 1, 2, 30, 45), $T04().Utc);
      var s = $sig.get(0x49F, $asm01.System.String, [$asm01.System.String], []).CallVirtual("ToString", null, dt, format);
      var d = $T01().ParseExact(s, format, ci).MemberwiseClone();
      $T03().AreEqual(
        dt.get_Ticks(), 
        d.ToUniversalTime().get_Ticks(), 
        "#1"
      );
      $T03().AreEqual($T04().Utc, d.get_Kind(), "#2");
      format = "yyyy-MM-dd'T'HH:mm:ssK";
      ci = $T06().get_CurrentCulture();
      $T01().prototype._ctor.call(dt, 
        2007, 
        11, 
        1, 
        2, 
        30, 
        45
      );
      s = $sig.get(0x49F, $asm01.System.String, [$asm01.System.String], []).CallVirtual("ToString", null, dt, format);
      d = $T01().ParseExact(s, format, ci).MemberwiseClone();
      $T03().AreEqual(
        dt.get_Ticks(), 
        d.get_Ticks(), 
        "#3"
      );
      $T03().AreEqual($T04().Unspecified, d.get_Kind(), "#4");
    }
  )
    .Attribute($asm00.TypeRef("NUnit.Framework.TestAttribute"))
    .Attribute($asm00.TypeRef("NUnit.Framework.CategoryAttribute"), function () { return ["NotDotNet"]; })
    .Attribute($asm00.TypeRef("NUnit.Framework.CategoryAttribute"), function () { return ["NotWorking"]; });

  $.Method({Static:false, Public:true }, "MaxValueYear", 
    $sig.make(0xFA, null, [], []), 
    function DateTimeTest_MaxValueYear () {
      $T03().AreEqual("9999", $T01().MaxValue.get_Year().toString());
    }
  )
    .Attribute($asm00.TypeRef("NUnit.Framework.TestAttribute"));

  $.Method({Static:false, Public:true }, "Milliseconds", 
    $sig.make(0x114, null, [], []), 
    function DateTimeTest_Milliseconds () {
      var dt = $T01().Parse("2004-05-26T03:29:01.1234567-07:00").MemberwiseClone();
      dt = $T05().get_CurrentTimeZone().ToUniversalTime(dt.MemberwiseClone()).MemberwiseClone();
      $T03().AreEqual(
        $T00().Create(3074823, 1123173, 2246), 
        dt.get_Ticks()
      );
    }
  )
    .Attribute($asm00.TypeRef("NUnit.Framework.TestAttribute"));

  $.Method({Static:false, Public:true }, "MSAndZ", 
    $sig.make(0x16B, null, [], []), 
    function DateTimeTest_MSAndZ () {
      var dt = new JSIL.Variable(new ($T01())());
      var cultureInfo = $sig.get(0x32F, $asm01.System.Globalization.CultureInfo, [$asm01.System.String], []).CallStatic($T06(), "GetCultureInfo", null, "en-US");
      if (!$T01().TryParse("2009.02.24T13:57:07.000 -0800", cultureInfo.get_DateTimeFormat(), $T07().None, /* ref */ dt)) {
        $T03().Fail("Failed");
      }
    }
  )
    .Attribute($asm00.TypeRef("NUnit.Framework.TestAttribute"));

  $.Method({Static:false, Public:true }, "NoColonTimeZone", 
    $sig.make(0x124, null, [], []), 
    function DateTimeTest_NoColonTimeZone () {
      $T03().IsTrue($T00().op_Inequality(
          $T01().Parse("2004-05-26T03:29:01-0700").get_Ticks(), 
          $T01().Parse("2004-05-26T03:29:01-0800").get_Ticks()
        ));
    }
  )
    .Attribute($asm00.TypeRef("NUnit.Framework.TestAttribute"));

  $.Method({Static:false, Public:true }, "OmittedSecondsFraction", 
    $sig.make(0x157, null, [], []), 
    function DateTimeTest_OmittedSecondsFraction () {
      var today = $T01().get_Today().MemberwiseClone();
      $T03().AreEqual("00:00:00.13579", $sig.get(0x49F, $asm01.System.String, [$asm01.System.String], []).CallVirtual("ToString", null, today.AddTicks($T00().Create(1357900, 0, 0)), "HH:mm:ss.FFFFFFF"), "#1");
      var dt = $T01().ParseExact("00:00:00.13579", "HH:mm:ss.FFFFFFF", $T06().get_InvariantCulture()).MemberwiseClone();
      $T03().AreEqual(today.MemberwiseClone(), dt.AddTicks($T00().Create(15419316, 16777215, 65535)), "#2");
      $T03().AreEqual($T0A().Empty, $sig.get(0x49F, $asm01.System.String, [$asm01.System.String], []).CallVirtual("ToString", null, today, ".FFFFFFF"), "#3");
      $T03().AreEqual("$", $sig.get(0x49F, $asm01.System.String, [$asm01.System.String], []).CallVirtual("ToString", null, today, "$FFFFFFF"), "#4");
    }
  )
    .Attribute($asm00.TypeRef("NUnit.Framework.TestAttribute"));

  $.Method({Static:false, Public:true }, "Parse_Bug71289a", 
    $sig.make(0xD0, null, [], []), 
    function DateTimeTest_Parse_Bug71289a () {
      $T01().Parse("Sat,,,,,, 01 Oct 1994 03:00:00", $T06().get_InvariantCulture());
    }
  )
    .Attribute($asm00.TypeRef("NUnit.Framework.TestAttribute"));

  $.Method({Static:false, Public:true }, "Parse_Bug71289b", 
    $sig.make(0xD3, null, [], []), 
    function DateTimeTest_Parse_Bug71289b () {
      $T01().Parse("Sat,,, 01,,, Oct,,, ,,,1994 03:00:00", $T06().get_InvariantCulture());
    }
  )
    .Attribute($asm00.TypeRef("NUnit.Framework.TestAttribute"));

  $.Method({Static:false, Public:true }, "Parse_Bug72788", 
    $sig.make(0xD5, null, [], []), 
    function DateTimeTest_Parse_Bug72788 () {
      var dt = $T01().Parse("21/02/05", $sig.get(0x325, null, [$asm01.System.String], []).Construct($T06(), "fr-FR"));
      $T03().AreEqual(2005, dt.get_Year(), "#1");
      $T03().AreEqual(2, dt.get_Month(), "#2");
      $T03().AreEqual(21, dt.get_Day(), "#3");
    }
  )
    .Attribute($asm00.TypeRef("NUnit.Framework.TestAttribute"));

  $.Method({Static:false, Public:true }, "Parse_CommaAfterHours", 
    $sig.make(0xD4, null, [], []), 
    function DateTimeTest_Parse_CommaAfterHours () {
      $T01().Parse("Sat,,, 01,,, Oct,,, ,,,1994 03,:00:00", $T06().get_InvariantCulture());
    }
  )
    .Attribute($asm00.TypeRef("NUnit.Framework.ExpectedExceptionAttribute"), function () { return [$asm01.TypeRef("System.FormatException")]; })
    .Attribute($asm00.TypeRef("NUnit.Framework.TestAttribute"));

  $.Method({Static:false, Public:true }, "Parse_DontAccept2DigitsYears", 
    $sig.make(0xD8, null, [], []), 
    function DateTimeTest_Parse_DontAccept2DigitsYears () {
      $T01().ParseExact("05", "yyyy", $T06().get_InvariantCulture());
    }
  )
    .Attribute($asm00.TypeRef("NUnit.Framework.TestAttribute"))
    .Attribute($asm00.TypeRef("NUnit.Framework.ExpectedExceptionAttribute"), function () { return [$asm01.TypeRef("System.FormatException")]; });

  $.Method({Static:false, Public:true }, "Parse_DontAcceptEmptyHours", 
    $sig.make(0xD9, null, [], []), 
    function DateTimeTest_Parse_DontAcceptEmptyHours () {
      $T01().ParseExact(":05", "H:m", $T06().get_InvariantCulture());
    }
  )
    .Attribute($asm00.TypeRef("NUnit.Framework.TestAttribute"))
    .Attribute($asm00.TypeRef("NUnit.Framework.ExpectedExceptionAttribute"), function () { return [$asm01.TypeRef("System.FormatException")]; });

  $.Method({Static:false, Public:true }, "Parse_DontAcceptEmptyMinutes", 
    $sig.make(0xDA, null, [], []), 
    function DateTimeTest_Parse_DontAcceptEmptyMinutes () {
      $T01().ParseExact("0::0", "H:m:s", $T06().get_InvariantCulture());
    }
  )
    .Attribute($asm00.TypeRef("NUnit.Framework.TestAttribute"))
    .Attribute($asm00.TypeRef("NUnit.Framework.ExpectedExceptionAttribute"), function () { return [$asm01.TypeRef("System.FormatException")]; });

  $.Method({Static:false, Public:true }, "Parse_HourDesignator", 
    $sig.make(0xD6, null, [], []), 
    function DateTimeTest_Parse_HourDesignator () {
      var now = $T01().get_Now();
      var dt = $T01().Parse("12:00:00 AM", $sig.get(0x325, null, [$asm01.System.String], []).Construct($T06(), "en-US")).MemberwiseClone();
      $T03().AreEqual(
        now.get_Year(), 
        dt.get_Year(), 
        "#A1"
      );
      $T03().AreEqual(
        now.get_Month(), 
        dt.get_Month(), 
        "#A2"
      );
      $T03().AreEqual(
        now.get_Day(), 
        dt.get_Day(), 
        "#A3"
      );
      $T03().AreEqual(0, dt.get_Hour(), "#A4");
      $T03().AreEqual(0, dt.get_Minute(), "#A5");
      $T03().AreEqual(0, dt.get_Second(), "#A6");
      $T03().AreEqual(0, dt.get_Millisecond(), "#A7");
      dt = $T01().Parse("12:00:00 PM", $sig.get(0x325, null, [$asm01.System.String], []).Construct($T06(), "en-US")).MemberwiseClone();
      $T03().AreEqual(
        now.get_Year(), 
        dt.get_Year(), 
        "#B1"
      );
      $T03().AreEqual(
        now.get_Month(), 
        dt.get_Month(), 
        "#B2"
      );
      $T03().AreEqual(
        now.get_Day(), 
        dt.get_Day(), 
        "#B3"
      );
      $T03().AreEqual(12, dt.get_Hour(), "#B4");
      $T03().AreEqual(0, dt.get_Minute(), "#B5");
      $T03().AreEqual(0, dt.get_Second(), "#B6");
      $T03().AreEqual(0, dt.get_Millisecond(), "#B7");
    }
  )
    .Attribute($asm00.TypeRef("NUnit.Framework.TestAttribute"));

  $.Method({Static:false, Public:true }, "Parse_InvalidShortDate", 
    $sig.make(0x16E, null, [], []), 
    function DateTimeTest_Parse_InvalidShortDate () {
      var expected = new ($T01())(2011, 3, 22, 8, 32, 0);
      var cultures = JSIL.Array.New($T0A(), ["es-ES", "en-US", "en-GB", "de-DE", "fr-FR"]);
      var array = cultures;

      for (var i = 0; i < array.length; ++i) {
        var culture = array[i];
        var ci = $sig.get(0x325, null, [$asm01.System.String], []).Construct($T06(), culture);
        ci.get_DateTimeFormat().set_ShortDatePattern("d");
        $T03().AreEqual($T01().Parse("2011-03-22 08:32:00+01:00", ci, $T07().RoundtripKind).MemberwiseClone(), expected, ("#a01 - " + culture));
        $T03().AreEqual($T01().Parse("2011/03/22 08:32:00+01:00", ci, $T07().RoundtripKind).MemberwiseClone(), expected, ("#a02 - " + culture));
        $T03().AreEqual($T01().Parse("2011-03-22T08:32:00", ci, $T07().RoundtripKind).MemberwiseClone(), expected, ("#a03 - " + culture));
        $T03().AreEqual($T01().Parse("2011/03/22T08:32:00", ci, $T07().RoundtripKind).MemberwiseClone(), expected, ("#a04 - " + culture));
        $T03().AreEqual($T01().Parse("03/2011/22T08:32:00", ci, $T07().RoundtripKind).MemberwiseClone(), expected, ("#a05 - " + culture));
        $T03().AreEqual($T01().Parse("03-2011-22T08:32:00", ci, $T07().RoundtripKind).MemberwiseClone(), expected, ("#a06 - " + culture));
        $T03().AreEqual($T01().Parse("03/2011/22 08:32:00+01:00", ci, $T07().RoundtripKind).MemberwiseClone(), expected, ("#a07 - " + culture));
        ci.get_DateTimeFormat().set_DateSeparator("%");
        $T03().AreEqual($T01().Parse("2011-03-22 08:32:00+01:00", ci, $T07().RoundtripKind).MemberwiseClone(), expected, ("#b01 - " + culture));
        $T03().AreEqual($T01().Parse("2011/03/22 08:32:00+01:00", ci, $T07().RoundtripKind).MemberwiseClone(), expected, ("#b02 - " + culture));
        $T03().AreEqual($T01().Parse("2011-03-22T08:32:00", ci, $T07().RoundtripKind).MemberwiseClone(), expected, ("#b03 - " + culture));
        $T03().AreEqual($T01().Parse("2011/03/22T08:32:00", ci, $T07().RoundtripKind).MemberwiseClone(), expected, ("#b04 - " + culture));
        $T03().AreEqual($T01().Parse("03/2011/22T08:32:00", ci, $T07().RoundtripKind).MemberwiseClone(), expected, ("#b05 - " + culture));
        $T03().AreEqual($T01().Parse("03-2011-22T08:32:00", ci, $T07().RoundtripKind).MemberwiseClone(), expected, ("#b06 - " + culture));
        $T03().AreEqual($T01().Parse("03/2011/22 08:32:00+01:00", ci, $T07().RoundtripKind).MemberwiseClone(), expected, ("#b07 - " + culture));
      }
    }
  )
    .Attribute($asm00.TypeRef("NUnit.Framework.IgnoreAttribute"), function () { return ["This test is not international ready, probably only succeeds in the U.S."]; })
    .Attribute($asm00.TypeRef("NUnit.Framework.TestAttribute"));

  $.Method({Static:false, Public:true }, "Parse_RequireSpaceSeparator", 
    $sig.make(0xD7, null, [], []), 
    function DateTimeTest_Parse_RequireSpaceSeparator () {
      $T01().Parse("05:25:132002-02-25", $T06().get_InvariantCulture());
    }
  )
    .Attribute($asm00.TypeRef("NUnit.Framework.TestAttribute"))
    .Attribute($asm00.TypeRef("NUnit.Framework.ExpectedExceptionAttribute"), function () { return [$asm01.TypeRef("System.FormatException")]; })
    .Attribute($asm00.TypeRef("NUnit.Framework.CategoryAttribute"), function () { return ["NotWorking"]; });

  $.Method({Static:false, Public:true }, "ParseAllowsQueerString", 
    $sig.make(0xE0, null, [], []), 
    function DateTimeTest_ParseAllowsQueerString () {
      $T01().Parse("Sat,,,,,, 01 Oct 1994 03:00:00", $T06().get_InvariantCulture());
    }
  )
    .Attribute($asm00.TypeRef("NUnit.Framework.TestAttribute"));

  $.Method({Static:false, Public:true }, "ParseCOMDependentFormat", 
    $sig.make(0xDB, null, [], []), 
    function DateTimeTest_ParseCOMDependentFormat () {
      $T01().Parse($T0A().Format("{0}\u5e74{1}\u6708{2}\u65e5 {3}\u6642{4}\u5206{5}\u79d2", JSIL.Array.New($T0F(), [2006, 3, 1, 15, 32, 42])), $sig.get(0x325, null, [$asm01.System.String], []).Construct($T06(), ""));
      try {
        $T01().Parse($T0A().Format("{0}\u4e00{1}\u6708{2}\u65e5 {3}\u6642{4}\u5206{5}\u79d2", JSIL.Array.New($T0F(), [2006, 3, 1, 15, 32, 42])), $sig.get(0x325, null, [$asm01.System.String], []).Construct($T06(), ""));
        $T03().Fail(null);
      } catch ($exception) {
        if ($T0E().$Is($exception)) {
        } else {
          throw $exception;
        }
      }
    }
  )
    .Attribute($asm00.TypeRef("NUnit.Framework.TestAttribute"));

  $.Method({Static:false, Public:true }, "ParseExact_Bug324845", 
    $sig.make(0x11D, null, [], []), 
    function DateTimeTest_ParseExact_Bug324845 () {
      var ctime = new ($T01())(2007, 7, 23, 19, 19, 45);
      ctime = ctime.ToUniversalTime().MemberwiseClone();
      var instr = $sig.get(0x49F, $asm01.System.String, [$asm01.System.String], []).CallVirtual("ToString", null, ctime, "yyyyMMddHHmmss");
      var t = $sig.get(0x474, $asm01.System.DateTime, [
          $asm01.System.String, $asm01.System.String, 
          $asm01.System.IFormatProvider, $asm01.System.Globalization.DateTimeStyles
        ], []).CallStatic($T01(), "ParseExact", null, instr, "yyyyMMddHHmmss", null, $T07().AssumeUniversal);
      $T03().AreEqual(2007, t.get_Year());
      $T03().AreEqual(7, t.get_Month());
      $T03().AreEqual(23, t.get_Day());
      $T03().AreEqual(19, t.get_Hour());
      $T03().AreEqual(19, t.get_Minute());
      $T03().AreEqual(45, t.get_Second());
    }
  )
    .Attribute($asm00.TypeRef("NUnit.Framework.TestAttribute"));

  $.Method({Static:false, Public:true }, "ParseExact_Bug80094", 
    $sig.make(0x11A, null, [], []), 
    function DateTimeTest_ParseExact_Bug80094 () {
      $T0D().Thread$CurrentThread$value.set_CurrentCulture($sig.get(0x325, null, [$asm01.System.String], []).Construct($T06(), "ja-JP"));
      var y = $T0A().Format("{0}-{1}-{2} {3}", JSIL.Array.New($T0F(), [$T01().get_Now().get_Year().toString(), "11", "29", "06:34"]));
      var date = $T01().ParseExact(y, "yyyy-MMM-dd hh:mm", null);
      $T03().AreEqual(
        $T01().get_Now().get_Year(), 
        date.get_Year(), 
        "#1"
      );
      $T03().AreEqual(11, date.get_Month(), "#2");
      $T03().AreEqual(29, date.get_Day(), "#3");
      $T03().AreEqual(6, date.get_Hour(), "#4");
      $T03().AreEqual(34, date.get_Minute(), "#5");
      $T03().AreEqual(0, date.get_Second(), "#6");
      $T03().AreEqual(0, date.get_Millisecond(), "#7");
    }
  )
    .Attribute($asm00.TypeRef("NUnit.Framework.TestAttribute"));

  $.Method({Static:false, Public:true }, "ParseExact_Format_Empty", 
    $sig.make(0xB5, null, [], []), 
    function DateTimeTest_ParseExact_Format_Empty () {
      try {
        $T01().ParseExact("2002-02-25 04:25:13Z", $T0A().Empty, null);
        $T03().Fail("#A1");
      } catch ($exception) {
        if ($T0E().$Is($exception)) {
          var ex = $exception;
          $T03().AreEqual($T0E().__Type__, JSIL.GetType(ex), "#B2");
          $T03().IsNull(ex.get_InnerException(), "#B3");
          $T03().IsNotNull(ex.get_Message(), "#B4");
        } else {
          throw $exception;
        }
      }
      try {
        $sig.get(0x474, $asm01.System.DateTime, [
            $asm01.System.String, $asm01.System.String, 
            $asm01.System.IFormatProvider, $asm01.System.Globalization.DateTimeStyles
          ], []).CallStatic($T01(), "ParseExact", null, "2002-02-25 04:25:13Z", $T0A().Empty, null, $T07().None);
        $T03().Fail("#B1");
      } catch ($exception) {
        if ($T0E().$Is($exception)) {
          var ex = $exception;
          $T03().AreEqual($T0E().__Type__, JSIL.GetType(ex), "#B2");
          $T03().IsNull(ex.get_InnerException(), "#B3");
          $T03().IsNotNull(ex.get_Message(), "#B4");
        } else {
          throw $exception;
        }
      }
    }
  )
    .Attribute($asm00.TypeRef("NUnit.Framework.TestAttribute"));

  $.Method({Static:false, Public:true }, "ParseExact_Format_Null", 
    $sig.make(0xB6, null, [], []), 
    function DateTimeTest_ParseExact_Format_Null () {
      try {
        $T01().ParseExact("2002-02-25 04:25:13Z", null, null);
        $T03().Fail("#A1");
      } catch ($exception) {
        if ($T1E().$Is($exception)) {
          var ex = $exception;
          $T03().AreEqual($T1E().__Type__, JSIL.GetType(ex), "#A2");
          $T03().IsNull(ex.get_InnerException(), "#A3");
          $T03().IsNotNull(ex.get_Message(), "#A4");
          $T03().IsNotNull(ex.get_ParamName(), "#A5");
          $T03().AreEqual("format", ex.get_ParamName(), "#A6");
        } else {
          throw $exception;
        }
      }
      try {
        $sig.get(0x474, $asm01.System.DateTime, [
            $asm01.System.String, $asm01.System.String, 
            $asm01.System.IFormatProvider, $asm01.System.Globalization.DateTimeStyles
          ], []).CallStatic($T01(), "ParseExact", null, "2002-02-25 04:25:13Z", null, null, $T07().None);
        $T03().Fail("#B1");
      } catch ($exception) {
        if ($T1E().$Is($exception)) {
          var ex = $exception;
          $T03().AreEqual($T1E().__Type__, JSIL.GetType(ex), "#B2");
          $T03().IsNull(ex.get_InnerException(), "#B3");
          $T03().IsNotNull(ex.get_Message(), "#B4");
          $T03().IsNotNull(ex.get_ParamName(), "#B5");
          $T03().AreEqual("format", ex.get_ParamName(), "#B6");
        } else {
          throw $exception;
        }
      }
    }
  )
    .Attribute($asm00.TypeRef("NUnit.Framework.TestAttribute"));

  $.Method({Static:false, Public:true }, "ParseExact_Formats_Empty", 
    $sig.make(0xB7, null, [], []), 
    function DateTimeTest_ParseExact_Formats_Empty () {
      try {
        $sig.get(0x476, $asm01.System.DateTime, [
            $asm01.System.String, System.Array.Of($asm01.System.String), 
            $asm01.System.IFormatProvider, $asm01.System.Globalization.DateTimeStyles
          ], []).CallStatic($T01(), "ParseExact", null, "2002-02-25 04:25:13Z", JSIL.Array.New($T0A(), 0), null, $T07().None);
        $T03().Fail("#A1");
      } catch ($exception) {
        if ($T0E().$Is($exception)) {
          var ex = $exception;
          $T03().AreEqual($T0E().__Type__, JSIL.GetType(ex), "#A2");
          $T03().IsNull(ex.get_InnerException(), "#A3");
          $T03().IsNotNull(ex.get_Message(), "#A4");
        } else {
          throw $exception;
        }
      }
      var formats = JSIL.Array.New($T0A(), ["G", $T0A().Empty, "d"]);
      try {
        $sig.get(0x476, $asm01.System.DateTime, [
            $asm01.System.String, System.Array.Of($asm01.System.String), 
            $asm01.System.IFormatProvider, $asm01.System.Globalization.DateTimeStyles
          ], []).CallStatic($T01(), "ParseExact", null, "2002-02-25 04:25:13Z", formats, null, $T07().None);
        $T03().Fail("#B1");
      } catch ($exception) {
        if ($T0E().$Is($exception)) {
          var ex = $exception;
          $T03().AreEqual($T0E().__Type__, JSIL.GetType(ex), "#B2");
          $T03().IsNull(ex.get_InnerException(), "#B3");
          $T03().IsNotNull(ex.get_Message(), "#B4");
        } else {
          throw $exception;
        }
      }
    }
  )
    .Attribute($asm00.TypeRef("NUnit.Framework.TestAttribute"));

  $.Method({Static:false, Public:true }, "ParseExact_Formats_Null", 
    $sig.make(0xB8, null, [], []), 
    function DateTimeTest_ParseExact_Formats_Null () {
      try {
        $sig.get(0x476, $asm01.System.DateTime, [
            $asm01.System.String, System.Array.Of($asm01.System.String), 
            $asm01.System.IFormatProvider, $asm01.System.Globalization.DateTimeStyles
          ], []).CallStatic($T01(), "ParseExact", null, "2002-02-25 04:25:13Z", null, null, $T07().None);
        $T03().Fail("#A1");
      } catch ($exception) {
        if ($T1E().$Is($exception)) {
          var ex = $exception;
          $T03().AreEqual($T1E().__Type__, JSIL.GetType(ex), "#A2");
          $T03().IsNull(ex.get_InnerException(), "#A3");
          $T03().IsNotNull(ex.get_Message(), "#A4");
          $T03().IsNotNull(ex.get_ParamName(), "#A5");
          $T03().AreEqual("formats", ex.get_ParamName(), "#A6");
        } else {
          throw $exception;
        }
      }
      var formats = JSIL.Array.New($T0A(), ["G", null, "d"]);
      try {
        $sig.get(0x476, $asm01.System.DateTime, [
            $asm01.System.String, System.Array.Of($asm01.System.String), 
            $asm01.System.IFormatProvider, $asm01.System.Globalization.DateTimeStyles
          ], []).CallStatic($T01(), "ParseExact", null, "2002-02-25 04:25:13Z", formats, null, $T07().None);
        $T03().Fail("#B1");
      } catch ($exception) {
        if ($T0E().$Is($exception)) {
          var ex2 = $exception;
          $T03().AreEqual($T0E().__Type__, JSIL.GetType(ex2), "#B2");
          $T03().IsNull(ex2.get_InnerException(), "#B3");
          $T03().IsNotNull(ex2.get_Message(), "#B4");
        } else {
          throw $exception;
        }
      }
    }
  )
    .Attribute($asm00.TypeRef("NUnit.Framework.TestAttribute"));

  $.Method({Static:false, Public:true }, "ParseExact_String_Empty", 
    $sig.make(0xB9, null, [], []), 
    function DateTimeTest_ParseExact_String_Empty () {
      try {
        $T01().ParseExact($T0A().Empty, "G", null);
        $T03().Fail("#A1");
      } catch ($exception) {
        if ($T0E().$Is($exception)) {
          var ex = $exception;
          $T03().AreEqual($T0E().__Type__, JSIL.GetType(ex), "#A2");
          $T03().IsNull(ex.get_InnerException(), "#A3");
          $T03().IsNotNull(ex.get_Message(), "#A4");
        } else {
          throw $exception;
        }
      }
      try {
        $sig.get(0x474, $asm01.System.DateTime, [
            $asm01.System.String, $asm01.System.String, 
            $asm01.System.IFormatProvider, $asm01.System.Globalization.DateTimeStyles
          ], []).CallStatic($T01(), "ParseExact", null, $T0A().Empty, "G", null, $T07().None);
        $T03().Fail("#B1");
      } catch ($exception) {
        if ($T0E().$Is($exception)) {
          var ex = $exception;
          $T03().AreEqual($T0E().__Type__, JSIL.GetType(ex), "#B2");
          $T03().IsNull(ex.get_InnerException(), "#B3");
          $T03().IsNotNull(ex.get_Message(), "#B4");
        } else {
          throw $exception;
        }
      }
      try {
        $sig.get(0x476, $asm01.System.DateTime, [
            $asm01.System.String, System.Array.Of($asm01.System.String), 
            $asm01.System.IFormatProvider, $asm01.System.Globalization.DateTimeStyles
          ], []).CallStatic($T01(), "ParseExact", null, $T0A().Empty, JSIL.Array.New($T0A(), ["G"]), null, $T07().None);
        $T03().Fail("#C1");
      } catch ($exception) {
        if ($T0E().$Is($exception)) {
          var ex = $exception;
          $T03().AreEqual($T0E().__Type__, JSIL.GetType(ex), "#C2");
          $T03().IsNull(ex.get_InnerException(), "#C3");
          $T03().IsNotNull(ex.get_Message(), "#C4");
        } else {
          throw $exception;
        }
      }
    }
  )
    .Attribute($asm00.TypeRef("NUnit.Framework.TestAttribute"));

  $.Method({Static:false, Public:true }, "ParseExact_String_Null", 
    $sig.make(0xBA, null, [], []), 
    function DateTimeTest_ParseExact_String_Null () {
      try {
        $T01().ParseExact(null, "G", null);
        $T03().Fail("#A1");
      } catch ($exception) {
        if ($T1E().$Is($exception)) {
          var ex = $exception;
          $T03().AreEqual($T1E().__Type__, JSIL.GetType(ex), "#A2");
          $T03().IsNull(ex.get_InnerException(), "#A3");
          $T03().IsNotNull(ex.get_Message(), "#A4");
          $T03().IsNotNull(ex.get_ParamName(), "#A5");
          $T03().AreEqual("s", ex.get_ParamName(), "#A6");
        } else {
          throw $exception;
        }
      }
      try {
        $sig.get(0x474, $asm01.System.DateTime, [
            $asm01.System.String, $asm01.System.String, 
            $asm01.System.IFormatProvider, $asm01.System.Globalization.DateTimeStyles
          ], []).CallStatic($T01(), "ParseExact", null, null, "G", null, $T07().None);
        $T03().Fail("#B1");
      } catch ($exception) {
        if ($T1E().$Is($exception)) {
          var ex = $exception;
          $T03().AreEqual($T1E().__Type__, JSIL.GetType(ex), "#B2");
          $T03().IsNull(ex.get_InnerException(), "#B3");
          $T03().IsNotNull(ex.get_Message(), "#B4");
          $T03().IsNotNull(ex.get_ParamName(), "#B5");
          $T03().AreEqual("s", ex.get_ParamName(), "#B6");
        } else {
          throw $exception;
        }
      }
      try {
        $sig.get(0x476, $asm01.System.DateTime, [
            $asm01.System.String, System.Array.Of($asm01.System.String), 
            $asm01.System.IFormatProvider, $asm01.System.Globalization.DateTimeStyles
          ], []).CallStatic($T01(), "ParseExact", null, null, JSIL.Array.New($T0A(), ["G"]), null, $T07().None);
        $T03().Fail("#C1");
      } catch ($exception) {
        if ($T1E().$Is($exception)) {
          var ex = $exception;
          $T03().AreEqual($T1E().__Type__, JSIL.GetType(ex), "#C2");
          $T03().IsNull(ex.get_InnerException(), "#C3");
          $T03().IsNotNull(ex.get_Message(), "#C4");
          $T03().IsNotNull(ex.get_ParamName(), "#C5");
          $T03().AreEqual("s", ex.get_ParamName(), "#C6");
        } else {
          throw $exception;
        }
      }
    }
  )
    .Attribute($asm00.TypeRef("NUnit.Framework.TestAttribute"));

  $.Method({Static:false, Public:true }, "ParseExactDoesNotEatZ", 
    $sig.make(0x121, null, [], []), 
    function DateTimeTest_ParseExactDoesNotEatZ () {
      $T01().ParseExact("2004-05-26T03:29:01", "yyyy-MM-ddTHH:mm:ssZ", null);
    }
  )
    .Attribute($asm00.TypeRef("NUnit.Framework.TestAttribute"))
    .Attribute($asm00.TypeRef("NUnit.Framework.ExpectedExceptionAttribute"), function () { return [$asm01.TypeRef("System.FormatException")]; });

  $.Method({Static:false, Public:true }, "ParseExactIsExact", 
    $sig.make(0x120, null, [], []), 
    function DateTimeTest_ParseExactIsExact () {
      $T01().ParseExact("2004-05-26T03:29:01-07:00 foo", "yyyy-MM-ddTHH:mm:sszzz", null);
    }
  )
    .Attribute($asm00.TypeRef("NUnit.Framework.TestAttribute"))
    .Attribute($asm00.TypeRef("NUnit.Framework.ExpectedExceptionAttribute"), function () { return [$asm01.TypeRef("System.FormatException")]; });

  $.Method({Static:false, Public:true }, "ParseExactMilliseconds", 
    $sig.make(0x122, null, [], []), 
    function DateTimeTest_ParseExactMilliseconds () {
      var dt = $T01().ParseExact("2004-05-26T03:29:01.1234567-07:00", "yyyy-MM-ddTHH:mm:ss.fffffffzzz", null).MemberwiseClone();
      dt = $T05().get_CurrentTimeZone().ToUniversalTime(dt.MemberwiseClone()).MemberwiseClone();
      $T03().AreEqual(
        $T00().Create(3074823, 1123173, 2246), 
        dt.get_Ticks()
      );
    }
  )
    .Attribute($asm00.TypeRef("NUnit.Framework.TestAttribute"));

  $.Method({Static:false, Public:true }, "ParseFormatException1", 
    $sig.make(0xDD, null, [], []), 
    function DateTimeTest_ParseFormatException1 () {
      var format = $sig.get(0x327, null, [$asm01.System.String, $asm01.System.Boolean], []).Construct($T06(), "fr-FR", true);
      var t = $T01().Parse("11/13/2003 11:28:15", format);
    }
  )
    .Attribute($asm00.TypeRef("NUnit.Framework.ExpectedExceptionAttribute"), function () { return [$asm01.TypeRef("System.FormatException")]; })
    .Attribute($asm00.TypeRef("NUnit.Framework.TestAttribute"));

  $.Method({Static:false, Public:true }, "ParseFormatExceptionForInvalidYear", 
    $sig.make(0xDE, null, [], []), 
    function DateTimeTest_ParseFormatExceptionForInvalidYear () {
      var dt = $T01().Parse("1/1/10000");
    }
  )
    .Attribute($asm00.TypeRef("NUnit.Framework.ExpectedExceptionAttribute"), function () { return [$asm01.TypeRef("System.FormatException")]; })
    .Attribute($asm00.TypeRef("NUnit.Framework.TestAttribute"));

  $.Method({Static:false, Public:true }, "ParseNotExact", 
    $sig.make(0x118, null, [], []), 
    function DateTimeTest_ParseNotExact () {
      var dt = $T01().Parse("2004-05-26T03:29:01-07:00 foo").MemberwiseClone();
      dt = $T05().get_CurrentTimeZone().ToUniversalTime(dt.MemberwiseClone()).MemberwiseClone();
      $T03().AreEqual(
        $T00().Create(1840256, 1123173, 2246), 
        dt.get_Ticks()
      );
    }
  )
    .Attribute($asm00.TypeRef("NUnit.Framework.TestAttribute"))
    .Attribute($asm00.TypeRef("NUnit.Framework.ExpectedExceptionAttribute"), function () { return [$asm01.TypeRef("System.FormatException")]; });

  $.Method({Static:false, Public:true }, "ParseUtcNonUtc", 
    $sig.make(0xE1, null, [], []), 
    function DateTimeTest_ParseUtcNonUtc () {
      $T0D().Thread$CurrentThread$value.set_CurrentCulture($sig.get(0x325, null, [$asm01.System.String], []).Construct($T06(), "es-ES"));
      var dfi = $T0B().get_InvariantInfo();
      var s = dfi.get_UniversalSortableDateTimePattern();
      var s2 = "r";
      var s3 = "s";
      var tick = $T00().Create(4052992, 9499384, 2244);
      var tick2 = $T05().get_CurrentTimeZone().ToLocalTime(new ($T01())(tick)).get_Ticks();
      var ci = $T06().get_InvariantCulture();
      var d = "2003/01/23 12:34:56";
      var dt = $T01().Parse(d, ci).MemberwiseClone();
      $T03().AreEqual(tick, dt.get_Ticks(), ("#1:" + d));
      d = "2003/01/23 12:34:56 GMT";
      dt = $T01().Parse(d, ci).MemberwiseClone();
      $T03().AreEqual(tick2, dt.get_Ticks(), ("#2:" + d));
      d = "Thu, 23 Jan 2003 12:34:56 GMT";
      dt = $T01().ParseExact(d, s2, ci).MemberwiseClone();
      $T03().AreEqual(tick, dt.get_Ticks(), ("#3:" + d));
      d = "2003-01-23 12:34:56Z";
      dt = $T01().ParseExact(d, s, ci).MemberwiseClone();
      $T03().AreEqual(tick, dt.get_Ticks(), ("#4:" + d));
      d = "2003-01-23T12:34:56";
      dt = $T01().ParseExact(d, s3, ci).MemberwiseClone();
      $T03().AreEqual(tick, dt.get_Ticks(), ("#5:" + d));
      ci = $sig.get(0x325, null, [$asm01.System.String], []).Construct($T06(), "ja-JP");
      d = "2003/01/23 12:34:56";
      dt = $T01().Parse(d, ci).MemberwiseClone();
      $T03().AreEqual(tick, dt.get_Ticks(), ("#6:" + d));
      d = "2003/01/23 12:34:56 GMT";
      dt = $T01().Parse(d, ci).MemberwiseClone();
      $T03().AreEqual(tick2, dt.get_Ticks(), ("#7:" + d));
      d = "Thu, 23 Jan 2003 12:34:56 GMT";
      dt = $T01().ParseExact(d, s2, ci).MemberwiseClone();
      $T03().AreEqual(tick, dt.get_Ticks(), ("#8:" + d));
      d = "2003-01-23 12:34:56Z";
      dt = $T01().ParseExact(d, s, ci).MemberwiseClone();
      $T03().AreEqual(tick, dt.get_Ticks(), ("#9:" + d));
      d = "2003-01-23T12:34:56";
      dt = $T01().ParseExact(d, s3, ci).MemberwiseClone();
      $T03().AreEqual(tick, dt.get_Ticks(), ("#10:" + d));
    }
  )
    .Attribute($asm00.TypeRef("NUnit.Framework.TestAttribute"));

  $.Method({Static:false, Public:true }, "QuotedFormat", 
    $sig.make(0x101, null, [], []), 
    function DateTimeTest_QuotedFormat () {
      var expectedFormats = JSIL.Array.New($T0A(), ["dd\"/\"MMM\"/\"yyyy:HH:mm:ss zz\"00\""]);
      $sig.get(0x476, $asm01.System.DateTime, [
          $asm01.System.String, System.Array.Of($asm01.System.String), 
          $asm01.System.IFormatProvider, $asm01.System.Globalization.DateTimeStyles
        ], []).CallStatic($T01(), "ParseExact", null, "28/Mar/2004:19:12:37 +0200", expectedFormats, null, $T07().AllowWhiteSpaces);
    }
  )
    .Attribute($asm00.TypeRef("NUnit.Framework.TestAttribute"));

  $.Method({Static:false, Public:true }, "RoundtripBinary", 
    $sig.make(0x154, null, [], []), 
    function DateTimeTest_RoundtripBinary () {
      var dt = $T01().get_Now().MemberwiseClone();
      var dt2 = $T01().SpecifyKind(dt, $T04().Utc);
      var dt3 = $T01().SpecifyKind(dt, $T04().Unspecified);
      $T03().AreEqual(dt.MemberwiseClone(), $T01().FromBinary(dt.ToBinary()), "#1");
      $T03().AreEqual(dt2.MemberwiseClone(), $T01().FromBinary(dt2.ToBinary()), "#2");
      $T03().AreEqual(dt3.MemberwiseClone(), $T01().FromBinary(dt3.ToBinary()), "#3");
      $T03().AreEqual($T04().Local, $T01().FromBinary(dt.ToBinary()).get_Kind(), "#4");
      $T03().AreEqual($T04().Utc, $T01().FromBinary(dt2.ToBinary()).get_Kind(), "#5");
      $T03().AreEqual($T04().Unspecified, $T01().FromBinary(dt3.ToBinary()).get_Kind(), "#6");
      $T03().AreEqual(
        $T05().get_CurrentTimeZone().GetUtcOffset(dt.MemberwiseClone()).get_Ticks(), 
        $T00().op_Subtraction(
          dt3.ToBinary(), 
          $T00().op_BitwiseAnd(
            dt.ToBinary(), 
            $T00().Create(16777215, 16777215, 32767)
          )
        ), 
        "#7"
      );
    }
  )
    .Attribute($asm00.TypeRef("NUnit.Framework.TestAttribute"));

  $.Method({Static:false, Public:true }, "RoundtripPattern", 
    $sig.make(0x159, null, [], []), 
    function DateTimeTest_RoundtripPattern () {
      $T03().AreEqual("2000-01-01T00:00:00.0000000", $sig.get(0x49F, $asm01.System.String, [$asm01.System.String], []).CallVirtual("ToString", null, (new ($T01())(2000, 1, 1)), "o"), "#1");
      $T03().AreEqual("2000-01-01T00:00:00.0000000Z", $sig.get(0x49F, $asm01.System.String, [$asm01.System.String], []).CallVirtual("ToString", null, $T01().SpecifyKind(new ($T01())(2000, 1, 1), $T04().Utc), "o"), "#2");
      $T03().AreEqual("2000-01-01T00:00:00.0000000+09:00".length, $sig.get(0x49F, $asm01.System.String, [$asm01.System.String], []).CallVirtual("ToString", null, $T01().SpecifyKind(new ($T01())(2000, 1, 1), $T04().Local), "o").length, "#3");
    }
  )
    .Attribute($asm00.TypeRef("NUnit.Framework.TestAttribute"));

  $.Method({Static:false, Public:true }, "SetUp", 
    $sig.make(0x83, null, [], []), 
    function DateTimeTest_SetUp () {
      this.oldcult = $T0D().Thread$CurrentThread$value.get_CurrentCulture();
      $T0D().Thread$CurrentThread$value.set_CurrentCulture($sig.get(0x325, null, [$asm01.System.String], []).Construct($T06(), ""));
    }
  )
    .Attribute($asm00.TypeRef("NUnit.Framework.SetUpAttribute"));

  $.Method({Static:false, Public:true }, "TearDown", 
    $sig.make(0x85, null, [], []), 
    function DateTimeTest_TearDown () {
      $T0D().Thread$CurrentThread$value.set_CurrentCulture(this.oldcult);
    }
  )
    .Attribute($asm00.TypeRef("NUnit.Framework.TearDownAttribute"));

  $.Method({Static:false, Public:true }, "TestAssumeLocal", 
    $sig.make(0x15D, null, [], []), 
    function DateTimeTest_TestAssumeLocal () {
      var assumeLocal = $T07().AssumeLocal;
      var formats = JSIL.Array.New($T0A(), ["yyyy-MM-ddTHH:mm:ssK", "yyyy-MM-ddTHH:mm:ss.FFFFFFFK"]);
      var result = $sig.get(0x476, $asm01.System.DateTime, [
          $asm01.System.String, System.Array.Of($asm01.System.String), 
          $asm01.System.IFormatProvider, $asm01.System.Globalization.DateTimeStyles
        ], []).CallStatic($T01(), "ParseExact", null, "2008-02-21T11:14:18.2721262+02:00", formats, $T06().get_InvariantCulture(), assumeLocal).MemberwiseClone();
      $T03().AreEqual(result.get_Kind(), $T04().Local);
      $T03().AreEqual(
        result.ToUniversalTime().get_Ticks(), 
        $T00().Create(7902958, 4358469, 2250)
      );
      result = $sig.get(0x476, $asm01.System.DateTime, [
          $asm01.System.String, System.Array.Of($asm01.System.String), 
          $asm01.System.IFormatProvider, $asm01.System.Globalization.DateTimeStyles
        ], []).CallStatic($T01(), "ParseExact", null, "2008-02-21T11:14:18.2721262", formats, $T06().get_InvariantCulture(), assumeLocal).MemberwiseClone();
      $T03().AreEqual(result.get_Kind(), $T04().Local);
      $T03().AreEqual(
        result.get_Ticks(), 
        $T00().Create(91886, 4362761, 2250)
      );
      result = $sig.get(0x476, $asm01.System.DateTime, [
          $asm01.System.String, System.Array.Of($asm01.System.String), 
          $asm01.System.IFormatProvider, $asm01.System.Globalization.DateTimeStyles
        ], []).CallStatic($T01(), "ParseExact", null, "2008-02-21T11:14:18.2721262Z", formats, $T06().get_InvariantCulture(), assumeLocal).MemberwiseClone();
      $T03().AreEqual(result.get_Kind(), $T04().Local);
      $T03().AreEqual(
        result.ToUniversalTime().get_Ticks(), 
        $T00().Create(91886, 4362761, 2250)
      );
    }
  )
    .Attribute($asm00.TypeRef("NUnit.Framework.TestAttribute"));

  $.Method({Static:false, Public:true }, "TestCtors", 
    $sig.make(0x89, null, [], []), 
    function DateTimeTest_TestCtors () {
      var t = new ($T01())(2002, 2, 25);
      $T03().AreEqual(this.myTicks[0], t.get_Ticks(), "A01");
      var t2 = $sig.get(0x40E, null, [
          $asm01.System.Int32, $asm01.System.Int32, 
          $asm01.System.Int32, $asm01.System.Int32, 
          $asm01.System.Int32, $asm01.System.Int32, 
          $asm01.System.Int32
        ], []).Construct($T01(), 2002, 2, 25, 15, 25, 13, 8);
      $T03().AreEqual(this.myTicks[1], t2.get_Ticks(), "A02");
      $T03().AreEqual(this.myTicks[0], t2.get_Date().get_Ticks(), "A03");
      $T03().AreEqual(2002, t2.get_Year(), "A04");
      $T03().AreEqual(2, t2.get_Month(), "A05");
      $T03().AreEqual(25, t2.get_Day(), "A06");
      $T03().AreEqual(15, t2.get_Hour(), "A07");
      $T03().AreEqual(25, t2.get_Minute(), "A08");
      $T03().AreEqual(13, t2.get_Second(), "A09");
      $T03().AreEqual(8, t2.get_Millisecond(), "A10");
      var t3 = $sig.get(0x40E, null, [
          $asm01.System.Int32, $asm01.System.Int32, 
          $asm01.System.Int32, $asm01.System.Int32, 
          $asm01.System.Int32, $asm01.System.Int32, 
          $asm01.System.Int32
        ], []).Construct($T01(), 2002, 2, 25, 5, 25, 13, 8);
      $T03().AreEqual(this.myTicks[2], t3.get_Ticks(), "A11");
    }
  )
    .Attribute($asm00.TypeRef("NUnit.Framework.TestAttribute"));

  $.Method({Static:false, Public:true }, "TestMin", 
    $sig.make(0x156, null, [], []), 
    function DateTimeTest_TestMin () {
      $T01().MinValue.ToLocalTime();
    }
  )
    .Attribute($asm00.TypeRef("NUnit.Framework.TestAttribute"));

  $.Method({Static:false, Public:true }, "TestOA", 
    $sig.make(0xDF, null, [], []), 
    function DateTimeTest_TestOA () {
      var number = 5000.41443;
      var d = $T01().FromOADate(number).MemberwiseClone();
      this.DTAssertEquals(d, $sig.get(0x40E, null, [
            $asm01.System.Int32, $asm01.System.Int32, 
            $asm01.System.Int32, $asm01.System.Int32, 
            $asm01.System.Int32, $asm01.System.Int32, 
            $asm01.System.Int32
          ], []).Construct($T01(), 1913, 9, 8, 9, 56, 46, 0), $T10().Second, "#1");
      $T03().AreEqual(d.ToOADate(), number, "#2");
    }
  )
    .Attribute($asm00.TypeRef("NUnit.Framework.TestAttribute"));

  $.Method({Static:false, Public:true }, "TestParse2", 
    $sig.make(0xC1, null, [], []), 
    function DateTimeTest_TestParse2 () {
      var t = $T01().Parse("Mon, 25 Feb 2002 04:25:13 GMT").MemberwiseClone();
      t = $T05().get_CurrentTimeZone().ToUniversalTime(t.MemberwiseClone()).MemberwiseClone();
      $T03().AreEqual(
        ((4 - $T05().get_CurrentTimeZone().GetUtcOffset(t.MemberwiseClone()).get_Hours()) | 0), 
        t.get_Hour()
      );
    }
  )
    .Attribute($asm00.TypeRef("NUnit.Framework.TestAttribute"))
    .Attribute($asm00.TypeRef("NUnit.Framework.IgnoreAttribute"), function () { return ["need to fix tests that run on different timezones"]; });

  $.Method({Static:false, Public:true }, "TestParse3", 
    $sig.make(0xCA, null, [], []), 
    function DateTimeTest_TestParse3 () {
      var s = "Wednesday, 09 June 2004";
      $T01().ParseExact(s, "dddd, dd MMMM yyyy", $T06().get_InvariantCulture());
      try {
        $T01().ParseExact(s, "dddd, dd MMMM yyyy", $sig.get(0x325, null, [$asm01.System.String], []).Construct($T06(), "ja-JP"));
        $T03().Fail("ja-JP culture does not support format \"dddd, dd MMMM yyyy\"");
      } catch ($exception) {
        if ($T0E().$Is($exception)) {
        } else {
          throw $exception;
        }
      }
      $T01().Parse(s, $T06().get_InvariantCulture(), $T07().AllowWhiteSpaces);
      $T01().Parse(s, $sig.get(0x325, null, [$asm01.System.String], []).Construct($T06(), "ja-JP"), $T07().AllowWhiteSpaces);
    }
  )
    .Attribute($asm00.TypeRef("NUnit.Framework.TestAttribute"));

  $.Method({Static:false, Public:true }, "TestParse4", 
    $sig.make(0xCC, null, [], []), 
    function DateTimeTest_TestParse4 () {
      try {
        $T01().Parse("1");
        $T03().Fail("#1");
      } catch ($exception) {
        if ($T0E().$Is($exception)) {
        } else {
          throw $exception;
        }
      }
      try {
        $T01().Parse("1000");
        $T03().Fail("#2");
      } catch ($exception) {
        if ($T0E().$Is($exception)) {
        } else {
          throw $exception;
        }
      }
      try {
        $T01().Parse("8:");
        $T03().Fail("#3");
      } catch ($exception) {
        if ($T0E().$Is($exception)) {
        } else {
          throw $exception;
        }
      }
    }
  )
    .Attribute($asm00.TypeRef("NUnit.Framework.TestAttribute"));

  $.Method({Static:false, Public:true }, "TestParseDateFirst", 
    $sig.make(0xC3, null, [], []), 
    function DateTimeTest_TestParseDateFirst () {
      var USCultureInfo = $sig.get(0x325, null, [$asm01.System.String], []).Construct($T06(), "en-US");
      var t = $T01().Parse("02/25/2002", USCultureInfo).MemberwiseClone();
      $T03().AreEqual(this.myTicks[0], t.get_Ticks(), "#A1");
      t = $T01().Parse("2002-02-25", USCultureInfo).MemberwiseClone();
      $T03().AreEqual(this.myTicks[0], t.get_Ticks(), "#A2");
      t = $T01().Parse("Monday, 25 February 2002").MemberwiseClone();
      $T03().AreEqual(this.myTicks[0], t.get_Ticks(), "#A3");
      t = $T01().Parse("Monday, 25 February 2002 05:25").MemberwiseClone();
      $T03().AreEqual(this.myTicks[3], t.get_Ticks(), "#A4");
      t = $T01().Parse("Monday, 25 February 2002 05:25:13").MemberwiseClone();
      $T03().AreEqual(this.myTicks[4], t.get_Ticks(), "#A5");
      t = $T01().Parse("02/25/2002 05:25", USCultureInfo).MemberwiseClone();
      $T03().AreEqual(this.myTicks[3], t.get_Ticks(), "#A6");
      t = $T01().Parse("02/25/2002 05:25:13", USCultureInfo).MemberwiseClone();
      $T03().AreEqual(this.myTicks[4], t.get_Ticks(), "#A7");
      t = $T01().Parse("2002-02-25 04:25:13Z").MemberwiseClone();
      t = $T05().get_CurrentTimeZone().ToUniversalTime(t.MemberwiseClone()).MemberwiseClone();
      $T03().AreEqual(2002, t.get_Year(), "#A8");
      $T03().AreEqual(2, t.get_Month(), "#A9");
      $T03().AreEqual(25, t.get_Day(), "#A10");
      $T03().AreEqual(4, t.get_Hour(), "#A11");
      $T03().AreEqual(25, t.get_Minute(), "#A12");
      $T03().AreEqual(13, t.get_Second(), "#A13");
      t = $T01().Parse("Mon,02/25/2002", USCultureInfo).MemberwiseClone();
      $T03().AreEqual(this.myTicks[0], t.get_Ticks(), "#A14");
      var t2 = new ($T01())(1999, 1, 2, 0, 3, 4);
      t = $T01().Parse(t2.ToLongTimeString()).MemberwiseClone();
      $T03().AreEqual(0, t.get_Hour(), "#A14");
      t = $T01().Parse("Mon, 25 Feb 2002 04:25:13 GMT").MemberwiseClone();
      t = $T05().get_CurrentTimeZone().ToUniversalTime(t.MemberwiseClone()).MemberwiseClone();
      $T03().AreEqual(2002, t.get_Year(), "#C1");
      $T03().AreEqual(2, t.get_Month(), "#C2");
      $T03().AreEqual(25, t.get_Day(), "#C3");
      $T03().AreEqual(4, t.get_Hour(), "#C4");
      $T03().AreEqual(25, t.get_Minute(), "#C5");
      $T03().AreEqual(13, t.get_Second(), "#C6");
      t = $T01().Parse("2002-02-25T05:25").MemberwiseClone();
      $T03().AreEqual(this.myTicks[3], t.get_Ticks(), "#D1");
      t = $T01().Parse("2002-02-25T05:25:13").MemberwiseClone();
      $T03().AreEqual(this.myTicks[4], t.get_Ticks(), "#D1");
      t = $T01().Parse("2002-02-25T05:25:13.008").MemberwiseClone();
      $T03().AreEqual(this.myTicks[2], t.get_Ticks(), "#D1");
      t = $T01().Parse("02-2002-25T05:25:13").MemberwiseClone();
      $T03().AreEqual(this.myTicks[4], t.get_Ticks(), "#D1");
      $T01().prototype._ctor.call(t2, $T01().get_Today().get_Year(), 2, 25);
      t = $T01().Parse("February 25", USCultureInfo).MemberwiseClone();
      $T03().AreEqual(
        t2.get_Ticks(), 
        t.get_Ticks(), 
        "#B1"
      );
      $T01().prototype._ctor.call(t2, $T01().get_Today().get_Year(), 2, 8);
      t = $T01().Parse("February 08", USCultureInfo).MemberwiseClone();
      $T03().AreEqual(
        t2.get_Ticks(), 
        t.get_Ticks(), 
        "#B2"
      );
      $T01().prototype._ctor.call(t2, $T01().get_Today().get_Year(), 2, 8);
      t = $T01().Parse("February 8", USCultureInfo).MemberwiseClone();
      $T03().AreEqual(
        t2.get_Ticks(), 
        t.get_Ticks(), 
        "#D6"
      );
      $T01().prototype._ctor.call(t2, 2002, 2, 1);
      t = $T01().Parse("2002 February").MemberwiseClone();
      $T03().AreEqual(
        t2.get_Ticks(), 
        t.get_Ticks(), 
        "#D4"
      );
      $T01().prototype._ctor.call(t2, 2002, 2, 1);
      t = $T01().Parse("2002 February", $sig.get(0x325, null, [$asm01.System.String], []).Construct($T06(), "ja-JP")).MemberwiseClone();
      $T03().AreEqual(
        t2.get_Ticks(), 
        t.get_Ticks(), 
        "#D5"
      );
      $T01().prototype._ctor.call(t2, 
        2002, 
        2, 
        25, 
        5, 
        25, 
        22
      );
      t = $T01().Parse("Monday, 25 February 2002 05:25:22", $sig.get(0x325, null, [$asm01.System.String], []).Construct($T06(), "hi-IN")).MemberwiseClone();
      $T03().AreEqual(
        t2.get_Ticks(), 
        t.get_Ticks(), 
        "#D7"
      );
      $T01().prototype._ctor.call(t2, 
        2002, 
        2, 
        25, 
        5, 
        25, 
        0
      );
      t = $T01().Parse("Monday, 25 February 2002 05:25", $sig.get(0x325, null, [$asm01.System.String], []).Construct($T06(), "hi-IN")).MemberwiseClone();
      $T03().AreEqual(
        t2.get_Ticks(), 
        t.get_Ticks(), 
        "#D8"
      );
      t = $T01().Parse("02-2002-25 05:25", USCultureInfo).MemberwiseClone();
      $T03().AreEqual(this.myTicks[3], t.get_Ticks(), "#E1");
      t = $T01().Parse("02-2002-25 05:25:13", USCultureInfo).MemberwiseClone();
      $T03().AreEqual(this.myTicks[4], t.get_Ticks(), "#E1");
      t = $T01().Parse("02-2002-25 05:25:13 Mon", USCultureInfo).MemberwiseClone();
      $T03().AreEqual(this.myTicks[4], t.get_Ticks(), "#E2");
      t = $T01().Parse("02-2002-25 05:25:13 Monday", USCultureInfo).MemberwiseClone();
      $T03().AreEqual(this.myTicks[4], t.get_Ticks(), "#E3");
      t = $T01().Parse("02-2002-25 05:25:13.008", USCultureInfo).MemberwiseClone();
      $T03().AreEqual(this.myTicks[2], t.get_Ticks(), "#E4");
      var offset = $T05().get_CurrentTimeZone().GetUtcOffset(t.MemberwiseClone()).get_Ticks();
      var hourTicks = $T00().Create(12871680, 2145, 0);
      var halfHourTicks = $T00().op_Division(hourTicks, $T00().Create(2, 0, 0));
      t = $T01().Parse("02-2002-25 05:25+01", USCultureInfo).MemberwiseClone();
      $T03().AreEqual(this.myTicks[3], $T00().op_Subtraction($T00().op_Addition(t.get_Ticks(), hourTicks), offset), "#F1");
      t = $T01().Parse("02-2002-25 05:25-01", USCultureInfo).MemberwiseClone();
      $T03().AreEqual(this.myTicks[3], $T00().op_Subtraction($T00().op_Subtraction(t.get_Ticks(), hourTicks), offset), "#F2");
      t = $T01().Parse("02-2002-25 05:25+00:30", USCultureInfo).MemberwiseClone();
      $T03().AreEqual(this.myTicks[3], $T00().op_Subtraction($T00().op_Addition(
            t.get_Ticks(), 
            $T00().op_Division(hourTicks, $T00().Create(2, 0, 0))
          ), offset), "#F3");
      t = $T01().Parse("02-2002-25 05:25:13+02", USCultureInfo).MemberwiseClone();
      $T03().AreEqual(this.myTicks[4], $T00().op_Subtraction($T00().op_Addition(
            t.get_Ticks(), 
            $T00().op_Multiplication($T00().Create(2, 0, 0), hourTicks)
          ), offset), "#F4");
      t = $T01().Parse("2002-02-25 05:25:13.008-02").MemberwiseClone();
      $T03().AreEqual(this.myTicks[2], $T00().op_Subtraction($T00().op_Subtraction(
            t.get_Ticks(), 
            $T00().op_Multiplication($T00().Create(2, 0, 0), hourTicks)
          ), offset), "#F5");
      t = $T01().Parse("02-25-2002 05:25:13-02 AM", USCultureInfo).MemberwiseClone();
      $T03().AreEqual(this.myTicks[4], $T00().op_Subtraction($T00().op_Subtraction(
            t.get_Ticks(), 
            $T00().op_Multiplication($T00().Create(2, 0, 0), hourTicks)
          ), offset), "#F6");
      t = $T01().Parse("25 Feb 2002 05:25:13-02 AM", USCultureInfo).MemberwiseClone();
      $T03().AreEqual(this.myTicks[4], $T00().op_Subtraction($T00().op_Subtraction(
            t.get_Ticks(), 
            $T00().op_Multiplication($T00().Create(2, 0, 0), hourTicks)
          ), offset), "#F6");
    }
  )
    .Attribute($asm00.TypeRef("NUnit.Framework.TestAttribute"));

  $.Method({Static:false, Public:true }, "TestParseExact", 
    $sig.make(0xBF, null, [], []), 
    function DateTimeTest_TestParseExact () {
      var t = $T01().ParseExact("02/25/2002", "d", null).MemberwiseClone();
      $T03().AreEqual(this.myTicks[0], t.get_Ticks(), "#A1");
      t = $T01().ParseExact("Monday, 25 February 2002", "D", null).MemberwiseClone();
      $T03().AreEqual(this.myTicks[0], t.get_Ticks(), "#A2");
      t = $T01().ParseExact("Monday, 25 February 2002 05:25", "f", null).MemberwiseClone();
      $T03().AreEqual(this.myTicks[3], t.get_Ticks(), "#A3");
      t = $T01().ParseExact("Monday, 25 February 2002 05:25:13", "F", null).MemberwiseClone();
      $T03().AreEqual(this.myTicks[4], t.get_Ticks(), "#A4");
      t = $T01().ParseExact("02/25/2002 05:25", "g", null).MemberwiseClone();
      $T03().AreEqual(this.myTicks[3], t.get_Ticks(), "#A5");
      t = $T01().ParseExact("02/25/2002 05:25:13", "G", null).MemberwiseClone();
      $T03().AreEqual(this.myTicks[4], t.get_Ticks(), "#A6");
      t = $T01().ParseExact("Monday, 25 February 2002 04:25:13", "U", null).MemberwiseClone();
      t = $T05().get_CurrentTimeZone().ToUniversalTime(t.MemberwiseClone()).MemberwiseClone();
      $T03().AreEqual(2002, t.get_Year(), "#A7");
      $T03().AreEqual(2, t.get_Month(), "#A8");
      $T03().AreEqual(25, t.get_Day(), "#A9");
      $T03().AreEqual(4, t.get_Hour(), "#A10");
      $T03().AreEqual(25, t.get_Minute(), "#A11");
      $T03().AreEqual(13, t.get_Second(), "#A12");
      $T03().AreEqual("Monday, 25 February 2002 04:25:13", $sig.get(0x49F, $asm01.System.String, [$asm01.System.String], []).CallVirtual("ToString", null, $T01().ParseExact("Monday, 25 February 2002 04:25:13", "U", null), "U"), "#A13");
      var t2 = new ($T01())($T01().get_Today().get_Year(), 2, 25);
      t = $T01().ParseExact("February 25", "m", null).MemberwiseClone();
      $T03().AreEqual(
        t2.get_Ticks(), 
        t.get_Ticks(), 
        "#B1"
      );
      $T01().prototype._ctor.call(t2, $T01().get_Today().get_Year(), 2, 25);
      t = $T01().ParseExact("February 25", "M", null).MemberwiseClone();
      $T03().AreEqual(
        t2.get_Ticks(), 
        t.get_Ticks(), 
        "#B2"
      );
      t = $T01().ParseExact("Mon, 25 Feb 2002 04:25:13 GMT", "r", null).MemberwiseClone();
      $T03().AreEqual(2002, t.get_Year(), "#C1");
      $T03().AreEqual(2, t.get_Month(), "#C2");
      $T03().AreEqual(25, t.get_Day(), "#C3");
      $T03().AreEqual(4, t.get_Hour(), "#C4");
      $T03().AreEqual(25, t.get_Minute(), "#C5");
      $T03().AreEqual(13, t.get_Second(), "#C6");
      t = $T01().ParseExact("Mon, 25 Feb 2002 04:25:13 GMT", "R", null).MemberwiseClone();
      $T03().AreEqual(2002, t.get_Year(), "#D1");
      $T03().AreEqual(2, t.get_Month(), "#D2");
      $T03().AreEqual(25, t.get_Day(), "#D3");
      $T03().AreEqual(4, t.get_Hour(), "#D4");
      $T03().AreEqual(25, t.get_Minute(), "#D5");
      $T03().AreEqual(13, t.get_Second(), "#D6");
      t = $T01().ParseExact("2002-02-25T05:25:13", "s", null).MemberwiseClone();
      $T03().AreEqual(this.myTicks[4], t.get_Ticks(), "#E1");
      t2 = $T01().op_Addition($T01().get_Today(), new ($T02())(5, 25, 0)).MemberwiseClone();
      t = $T01().ParseExact("05:25", "t", null).MemberwiseClone();
      $T03().AreEqual(
        t2.get_Ticks(), 
        t.get_Ticks(), 
        "#E2"
      );
      t2 = $T01().op_Addition($T01().get_Today(), new ($T02())(5, 25, 13)).MemberwiseClone();
      t = $T01().ParseExact("05:25:13", "T", null).MemberwiseClone();
      $T03().AreEqual(
        t2.get_Ticks(), 
        t.get_Ticks(), 
        "#E3"
      );
      $T01().prototype._ctor.call(t2, 2002, 2, 1);
      t = $T01().ParseExact("2002 February", "y", null).MemberwiseClone();
      $T03().AreEqual(
        t2.get_Ticks(), 
        t.get_Ticks(), 
        "#E4"
      );
      $T01().prototype._ctor.call(t2, 2002, 2, 1);
      t = $T01().ParseExact("2002 February", "Y", null).MemberwiseClone();
      $T03().AreEqual(
        t2.get_Ticks(), 
        t.get_Ticks(), 
        "#E5"
      );
      $T01().prototype._ctor.call(t2, $T01().get_Now().get_Year(), 1, 25);
      t = $T01().ParseExact("25", "%d", null).MemberwiseClone();
      $T03().AreEqual(
        t2.get_Ticks(), 
        t.get_Ticks(), 
        "#F1"
      );
      t = $T01().ParseExact("25", "dd", null).MemberwiseClone();
      $T03().AreEqual(
        t2.get_Ticks(), 
        t.get_Ticks(), 
        "#F2"
      );
      $T01().prototype._ctor.call(t2, $T01().get_Today().get_Year(), 2, 1);
      t = $T01().ParseExact("2", "%M", null).MemberwiseClone();
      $T03().AreEqual(
        t2.get_Ticks(), 
        t.get_Ticks(), 
        "#G1"
      );
      t = $T01().ParseExact("02", "MM", null).MemberwiseClone();
      $T03().AreEqual(
        t2.get_Ticks(), 
        t.get_Ticks(), 
        "#G2"
      );
      t = $T01().ParseExact("Feb", "MMM", null).MemberwiseClone();
      $T03().AreEqual(
        t2.get_Ticks(), 
        t.get_Ticks(), 
        "#G3"
      );
      t = $T01().ParseExact("February", "MMMM", null).MemberwiseClone();
      $T03().AreEqual(
        t2.get_Ticks(), 
        t.get_Ticks(), 
        "#G4"
      );
      $T01().prototype._ctor.call(t2, 2005, 1, 1);
      t = $T01().ParseExact("5", "%y", null).MemberwiseClone();
      $T03().AreEqual(
        t2.get_Ticks(), 
        t.get_Ticks(), 
        "#G5"
      );
      t = $T01().ParseExact("05", "yy", null).MemberwiseClone();
      $T03().AreEqual(
        t2.get_Ticks(), 
        t.get_Ticks(), 
        "#G6"
      );
      t = $T01().ParseExact("2005", "yyyy", null).MemberwiseClone();
      $T03().AreEqual(
        t2.get_Ticks(), 
        t.get_Ticks(), 
        "#G7"
      );
      t2 = $T01().op_Addition($T01().get_Today(), new ($T02())(5, 0, 0)).MemberwiseClone();
      t = $T01().ParseExact("5A", "ht", null).MemberwiseClone();
      $T03().AreEqual(
        t2.get_Ticks(), 
        t.get_Ticks(), 
        "#G8"
      );
      t = $T01().ParseExact("05A", "hht", null).MemberwiseClone();
      $T03().AreEqual(
        t2.get_Ticks(), 
        t.get_Ticks(), 
        "#G9"
      );
      t2 = $T01().op_Addition($T01().get_Today(), new ($T02())(15, 0, 0)).MemberwiseClone();
      t = $T01().ParseExact("3P", "ht", null).MemberwiseClone();
      $T03().AreEqual(
        t2.get_Ticks(), 
        t.get_Ticks(), 
        "#G10"
      );
      t = $T01().ParseExact("03P", "hht", null).MemberwiseClone();
      $T03().AreEqual(
        t2.get_Ticks(), 
        t.get_Ticks(), 
        "#G11"
      );
      t2 = $T01().op_Addition($T01().get_Today(), new ($T02())(5, 0, 0)).MemberwiseClone();
      t = $T01().ParseExact("5", "%H", null).MemberwiseClone();
      $T03().AreEqual(
        t2.get_Ticks(), 
        t.get_Ticks(), 
        "#G12"
      );
      t2 = $T01().op_Addition($T01().get_Today(), new ($T02())(15, 0, 0)).MemberwiseClone();
      t = $T01().ParseExact("15", "%H", null).MemberwiseClone();
      $T03().AreEqual(
        t2.get_Ticks(), 
        t.get_Ticks(), 
        "#G13"
      );
      t = $T01().ParseExact("15", "HH", null).MemberwiseClone();
      $T03().AreEqual(
        t2.get_Ticks(), 
        t.get_Ticks(), 
        "#G14"
      );
      t2 = $T01().op_Addition($T01().get_Today(), new ($T02())(16, 18, 0)).MemberwiseClone();
      t = $sig.get(0x474, $asm01.System.DateTime, [
          $asm01.System.String, $asm01.System.String, 
          $asm01.System.IFormatProvider, $asm01.System.Globalization.DateTimeStyles
        ], []).CallStatic($T01(), "ParseExact", null, "11:18AM -5", "h:mmtt z", null, $T07().AdjustToUniversal).MemberwiseClone();
      $T03().AreEqual(
        t2.get_Ticks(), 
        t.get_Ticks(), 
        "#I1"
      );
      t = $sig.get(0x474, $asm01.System.DateTime, [
          $asm01.System.String, $asm01.System.String, 
          $asm01.System.IFormatProvider, $asm01.System.Globalization.DateTimeStyles
        ], []).CallStatic($T01(), "ParseExact", null, "Monday, 25 February 2002 05:25:13", "F", null, $T07().AdjustToUniversal).MemberwiseClone();
      $T03().AreEqual(this.myTicks[4], t.get_Ticks(), "#I2");
      t = $sig.get(0x474, $asm01.System.DateTime, [
          $asm01.System.String, $asm01.System.String, 
          $asm01.System.IFormatProvider, $asm01.System.Globalization.DateTimeStyles
        ], []).CallStatic($T01(), "ParseExact", null, "Monday, 25 February 2002 05:25:13", "dddd, dd MMMM yyyy HH:mm:ss", null, $T07().AdjustToUniversal).MemberwiseClone();
      $T03().AreEqual(this.myTicks[4], t.get_Ticks(), "#I3");
      t = $sig.get(0x474, $asm01.System.DateTime, [
          $asm01.System.String, $asm01.System.String, 
          $asm01.System.IFormatProvider, $asm01.System.Globalization.DateTimeStyles
        ], []).CallStatic($T01(), "ParseExact", null, "02/25/2002", "d", null, $T07().AllowWhiteSpaces).MemberwiseClone();
      $T03().AreEqual(this.myTicks[0], t.get_Ticks(), "#I4");
      t = $sig.get(0x474, $asm01.System.DateTime, [
          $asm01.System.String, $asm01.System.String, 
          $asm01.System.IFormatProvider, $asm01.System.Globalization.DateTimeStyles
        ], []).CallStatic($T01(), "ParseExact", null, "    02/25/2002", "d", null, $T07().AllowLeadingWhite).MemberwiseClone();
      $T03().AreEqual(this.myTicks[0], t.get_Ticks(), "#I5");
      t = $sig.get(0x474, $asm01.System.DateTime, [
          $asm01.System.String, $asm01.System.String, 
          $asm01.System.IFormatProvider, $asm01.System.Globalization.DateTimeStyles
        ], []).CallStatic($T01(), "ParseExact", null, "02/25/2002    ", "d", null, $T07().AllowTrailingWhite).MemberwiseClone();
      $T03().AreEqual(this.myTicks[0], t.get_Ticks(), "#I6");
      t = $sig.get(0x474, $asm01.System.DateTime, [
          $asm01.System.String, $asm01.System.String, 
          $asm01.System.IFormatProvider, $asm01.System.Globalization.DateTimeStyles
        ], []).CallStatic($T01(), "ParseExact", null, "  02 / 25 / 2002    ", "d", null, $T07().AllowWhiteSpaces).MemberwiseClone();
      $T03().AreEqual(this.myTicks[0], t.get_Ticks(), "#I7");
      var formats = JSIL.Array.New($T0A(), ["r", "dddd, dd'-'MMM'-'yy HH':'mm':'ss 'GMT'", "ddd MMM d HH':'mm':'ss yyyy"]);
      var enUS = $sig.get(0x327, null, [$asm01.System.String, $asm01.System.Boolean], []).Construct($T06(), "en-US", false);
      t = $sig.get(0x474, $asm01.System.DateTime, [
          $asm01.System.String, $asm01.System.String, 
          $asm01.System.IFormatProvider, $asm01.System.Globalization.DateTimeStyles
        ], []).CallStatic($T01(), "ParseExact", null, "Sun, 06 Nov 1994 08:49:37 GMT", formats[0], enUS, $T07().AllowWhiteSpaces).MemberwiseClone();
      $T03().AreEqual(this.myTicks[6], t.get_Ticks(), "#J1");
      t = $sig.get(0x474, $asm01.System.DateTime, [
          $asm01.System.String, $asm01.System.String, 
          $asm01.System.IFormatProvider, $asm01.System.Globalization.DateTimeStyles
        ], []).CallStatic($T01(), "ParseExact", null, "Sunday, 06-Nov-94 08:49:37 GMT", formats[1], enUS, $T07().AllowWhiteSpaces).MemberwiseClone();
      $T03().AreEqual(this.myTicks[6], t.get_Ticks(), "#J2");
      t = $sig.get(0x474, $asm01.System.DateTime, [
          $asm01.System.String, $asm01.System.String, 
          $asm01.System.IFormatProvider, $asm01.System.Globalization.DateTimeStyles
        ], []).CallStatic($T01(), "ParseExact", null, "Sun Nov  6 08:49:37 1994", formats[2], enUS, $T07().AllowWhiteSpaces).MemberwiseClone();
      $T03().AreEqual(this.myTicks[6], t.get_Ticks(), "#J3");
      t = $sig.get(0x476, $asm01.System.DateTime, [
          $asm01.System.String, System.Array.Of($asm01.System.String), 
          $asm01.System.IFormatProvider, $asm01.System.Globalization.DateTimeStyles
        ], []).CallStatic($T01(), "ParseExact", null, "Sun, 06 Nov 1994 08:49:37 GMT", formats, enUS, $T07().AllowWhiteSpaces).MemberwiseClone();
      $T03().AreEqual(this.myTicks[6], t.get_Ticks(), "#J4");
      t = $sig.get(0x476, $asm01.System.DateTime, [
          $asm01.System.String, System.Array.Of($asm01.System.String), 
          $asm01.System.IFormatProvider, $asm01.System.Globalization.DateTimeStyles
        ], []).CallStatic($T01(), "ParseExact", null, "Sunday, 06-Nov-94 08:49:37 GMT", formats, enUS, $T07().AllowWhiteSpaces).MemberwiseClone();
      $T03().AreEqual(this.myTicks[6], t.get_Ticks(), "#J5");
      t = $sig.get(0x476, $asm01.System.DateTime, [
          $asm01.System.String, System.Array.Of($asm01.System.String), 
          $asm01.System.IFormatProvider, $asm01.System.Globalization.DateTimeStyles
        ], []).CallStatic($T01(), "ParseExact", null, "Sun Nov  6 08:49:37 1994", formats, enUS, $T07().AllowWhiteSpaces).MemberwiseClone();
      $T03().AreEqual(this.myTicks[6], t.get_Ticks(), "#J6");
      t = $sig.get(0x474, $asm01.System.DateTime, [
          $asm01.System.String, $asm01.System.String, 
          $asm01.System.IFormatProvider, $asm01.System.Globalization.DateTimeStyles
        ], []).CallStatic($T01(), "ParseExact", null, "Monday, 25 February 2002 05:25:13", "ddddddd, dd MMMMMMM yyyy HHHHH:mmmmm:sssss", null, $T07().AdjustToUniversal).MemberwiseClone();
      $T03().AreEqual(this.myTicks[4], t.get_Ticks(), "#J7");
      t = $T01().ParseExact("--12--", "--MM--", null).MemberwiseClone();
      $T03().AreEqual(12, t.get_Month(), "#K1");
      t = $T01().ParseExact("--12-24", "--MM-dd", null).MemberwiseClone();
      $T03().AreEqual(24, t.get_Day(), "#K2");
      $T03().AreEqual(12, t.get_Month(), "#K3");
      t = $T01().ParseExact("---24", "---dd", null).MemberwiseClone();
      $T03().AreEqual(24, t.get_Day(), "#K4");
      t = $T01().ParseExact("18Aug2004 12:33:00", "ddMMMyyyy hh:mm:ss", $sig.get(0x325, null, [$asm01.System.String], []).Construct($T06(), "en-US")).MemberwiseClone();
      $T03().AreEqual(0, t.get_Hour(), "hh allows 12, though it's useless");
      $T01().ParseExact("Tue, 12 Apr 2005 10:10:04 +0100", "Tue, 12 Apr 2005 10:10:04 +0100", enUS);
      try {
        $T01().ParseExact("Tue, 12 Apr 2005 10:10:04 +00000", "ddd, dd MMM yyyy HH':'mm':'ss zzz", enUS);
        $T03().Fail("#L1");
      } catch ($exception) {
        if ($T0E().$Is($exception)) {
        } else {
          throw $exception;
        }
      }
      t = $T01().ParseExact("20050707132527Z", "yyyyMMddHHmmss\\Z", $T06().get_InvariantCulture()).MemberwiseClone();
      $T03().AreEqual(
        $T00().Create(16498048, 5312120, 2247), 
        t.get_Ticks(), 
        "#L2"
      );
    }
  )
    .Attribute($asm00.TypeRef("NUnit.Framework.TestAttribute"));

  $.Method({Static:false, Public:true }, "TestParseExact3", 
    $sig.make(0xBB, null, [], []), 
    function DateTimeTest_TestParseExact3 () {
      var t = $T01().ParseExact("2002-02-25 04:25:13Z", "u", null);
      $T03().AreEqual(2002, t.get_Year(), "#1");
      $T03().AreEqual(2, t.get_Month(), "#2");
      $T03().AreEqual(25, t.get_Day(), "#3");
      $T03().AreEqual(4, t.get_Hour(), "#4");
      $T03().AreEqual(25, t.get_Minute(), "#5");
      $T03().AreEqual(13, t.get_Second(), "#6");
    }
  )
    .Attribute($asm00.TypeRef("NUnit.Framework.TestAttribute"));

  $.Method({Static:false, Public:true }, "TestParseExact4", 
    $sig.make(0xBC, null, [], []), 
    function DateTimeTest_TestParseExact4 () {
      $T01().ParseExact("6/28/2004 13:00:00 AM", "M/d/yyyy HH':'mm':'ss tt", $T06().get_InvariantCulture());
    }
  )
    .Attribute($asm00.TypeRef("NUnit.Framework.TestAttribute"));

  $.Method({Static:false, Public:true }, "TestParseExact4_2", 
    $sig.make(0xBD, null, [], []), 
    function DateTimeTest_TestParseExact4_2 () {
      $sig.get(0x474, $asm01.System.DateTime, [
          $asm01.System.String, $asm01.System.String, 
          $asm01.System.IFormatProvider, $asm01.System.Globalization.DateTimeStyles
        ], []).CallStatic($T01(), "ParseExact", null, "Wed, 12 May 2004 20:51:09 +0200", "ddd, d MMM yyyy H:m:s zzz", $T06().CreateSpecificCulture("en-us"), $T07().AllowInnerWhite);
    }
  )
    .Attribute($asm00.TypeRef("NUnit.Framework.TestAttribute"));

  $.Method({Static:false, Public:true }, "TestParseExact5", 
    $sig.make(0xBE, null, [], []), 
    function DateTimeTest_TestParseExact5 () {
      var dt = $sig.get(0x474, $asm01.System.DateTime, [
          $asm01.System.String, $asm01.System.String, 
          $asm01.System.IFormatProvider, $asm01.System.Globalization.DateTimeStyles
        ], []).CallStatic($T01(), "ParseExact", null, "Wed, 12 May 2004 20:51:09 -02:30", "ddd, d MMM yyyy H:m:s zzz", $T06().CreateSpecificCulture("en-us"), $T07().AllowInnerWhite).ToUniversalTime();
      $T03().AreEqual(23, dt.get_Hour(), "Hour");
      $T03().AreEqual(21, dt.get_Minute(), "Minute");
    }
  )
    .Attribute($asm00.TypeRef("NUnit.Framework.TestAttribute"));

  $.Method({Static:false, Public:true }, "TestParseTimeFirst", 
    $sig.make(0xC5, null, [], []), 
    function DateTimeTest_TestParseTimeFirst () {
      var USCultureInfo = $sig.get(0x325, null, [$asm01.System.String], []).Construct($T06(), "en-US");
      var t2 = $T01().op_Addition($T01().get_Today(), new ($T02())(5, 25, 0)).MemberwiseClone();
      var t3 = $T01().Parse("05:25").MemberwiseClone();
      $T03().AreEqual(
        t2.get_Ticks(), 
        t3.get_Ticks(), 
        "#C1"
      );
      t2 = $T01().op_Addition($T01().get_Today(), new ($T02())(5, 25, 13)).MemberwiseClone();
      t3 = $T01().Parse("05:25:13").MemberwiseClone();
      $T03().AreEqual(
        t2.get_Ticks(), 
        t3.get_Ticks(), 
        "#B2"
      );
      t3 = $T01().Parse("05:25 02/25/2002", USCultureInfo).MemberwiseClone();
      $T03().AreEqual(this.myTicks[3], t3.get_Ticks(), "#B1");
      t3 = $T01().Parse("05:25:13 2002-02-25").MemberwiseClone();
      $T03().AreEqual(this.myTicks[4], t3.get_Ticks(), "#B2");
      t3 = $T01().Parse("05:25:13.008 02-2002-25").MemberwiseClone();
      $T03().AreEqual(this.myTicks[2], t3.get_Ticks(), "#B3");
      t3 = $T01().Parse("05:25:13.008 Feb 25 2002").MemberwiseClone();
      $T03().AreEqual(this.myTicks[2], t3.get_Ticks(), "#B4");
      t3 = $T01().Parse("05:25:13.008 25 Feb 2002").MemberwiseClone();
      $T03().AreEqual(this.myTicks[2], t3.get_Ticks(), "#B5");
      t3 = $T01().Parse("AM 05:25:13 2002-02-25").MemberwiseClone();
      $T03().AreEqual(this.myTicks[4], t3.get_Ticks(), "#C1");
      t3 = $T01().Parse("Monday05:25 02/25/2002", USCultureInfo).MemberwiseClone();
      $T03().AreEqual(this.myTicks[3], t3.get_Ticks(), "#C2");
      t3 = $T01().Parse("Mon 05:25 AM 02/25/2002", USCultureInfo).MemberwiseClone();
      $T03().AreEqual(this.myTicks[3], t3.get_Ticks(), "#C3");
      t3 = $T01().Parse("AM 05:25 Monday, 02/25/2002", USCultureInfo).MemberwiseClone();
      $T03().AreEqual(this.myTicks[3], t3.get_Ticks(), "#C4");
      t3 = $T01().Parse("05:25 02/25/2002 Monday", USCultureInfo).MemberwiseClone();
      $T03().AreEqual(this.myTicks[3], t3.get_Ticks(), "#C5");
      t3 = $T01().Parse("PM 03:25:13.008 02-2002-25").MemberwiseClone();
      $T03().AreEqual(this.myTicks[1], t3.get_Ticks(), "#C6");
      $T01().prototype._ctor.call(t2, 
        2002, 
        10, 
        7, 
        15, 
        6, 
        0
      );
      t3 = $T01().Parse("3:06 PM 10/7/2002", USCultureInfo).MemberwiseClone();
      $T03().AreEqual(
        t2.get_Ticks(), 
        t3.get_Ticks(), 
        "#D1"
      );
      $T01().prototype._ctor.call(t2, 
        2002, 
        10, 
        7, 
        15, 
        6, 
        0
      );
      t3 = $T01().Parse("3:06 pm 10/7/2002", USCultureInfo).MemberwiseClone();
      $T03().AreEqual(
        t2.get_Ticks(), 
        t3.get_Ticks(), 
        "#D2"
      );
      $T01().prototype._ctor.call(t2, 
        2002, 
        10, 
        7, 
        3, 
        6, 
        0
      );
      t3 = $T01().Parse("3:06 AM 10/7/2002", USCultureInfo).MemberwiseClone();
      $T03().AreEqual(
        t2.get_Ticks(), 
        t3.get_Ticks(), 
        "#D3"
      );
      $T01().prototype._ctor.call(t2, 
        2002, 
        10, 
        7, 
        3, 
        6, 
        0
      );
      t3 = $T01().Parse("3:06 am 10/7/2002", USCultureInfo).MemberwiseClone();
      $T03().AreEqual(
        t2.get_Ticks(), 
        t3.get_Ticks(), 
        "#D4"
      );
    }
  )
    .Attribute($asm00.TypeRef("NUnit.Framework.TestAttribute"));

  $.Method({Static:false, Public:true }, "TestParseWithDifferentMonthDayPatterns", 
    $sig.make(0xC8, null, [], []), 
    function DateTimeTest_TestParseWithDifferentMonthDayPatterns () {
      var cultureInfo = $sig.get(0x325, null, [$asm01.System.String], []).Construct($T06(), "en-US");
      var dateFormatInfo = cultureInfo.get_DateTimeFormat();
      var t = $T01().Parse("Feb 03", cultureInfo).MemberwiseClone();
      $T03().AreEqual(2, t.get_Month(), "#A1");
      $T03().AreEqual(3, t.get_Day(), "#A2");
      dateFormatInfo.set_MonthDayPattern("dd/MM");
      t = $T01().Parse("Feb 03", cultureInfo).MemberwiseClone();
      $T03().AreEqual(2, t.get_Month(), "#B1");
      $T03().AreEqual(1, t.get_Day(), "#B2");
      $T03().AreEqual(2003, t.get_Year(), "#B3");
      t = $T01().Parse("03/02", cultureInfo).MemberwiseClone();
      $T03().AreEqual(2, t.get_Month(), "#B6");
      $T03().AreEqual(3, t.get_Day(), "#B7");
      t = $T01().Parse("03 Feb", cultureInfo).MemberwiseClone();
      $T03().AreEqual(2, t.get_Month(), "#B8");
      $T03().AreEqual(3, t.get_Day(), "#B9");
      dateFormatInfo.set_MonthDayPattern("MM/dd");
      t = $T01().Parse("Feb 03", cultureInfo).MemberwiseClone();
      $T03().AreEqual(2, t.get_Month(), "#C1");
      $T03().AreEqual(3, t.get_Day(), "#C2");
      t = $T01().Parse("02/03", cultureInfo).MemberwiseClone();
      $T03().AreEqual(2, t.get_Month(), "#C3");
      $T03().AreEqual(3, t.get_Day(), "#C4");
      t = $T01().Parse("03 Feb", cultureInfo).MemberwiseClone();
      $T03().AreEqual(2, t.get_Month(), "#C5");
      $T03().AreEqual(3, t.get_Day(), "#C6");
    }
  )
    .Attribute($asm00.TypeRef("NUnit.Framework.TestAttribute"));

  $.Method({Static:false, Public:true }, "TestParseWithDifferentShortDatePatterns", 
    $sig.make(0xC7, null, [], []), 
    function DateTimeTest_TestParseWithDifferentShortDatePatterns () {
      var cultureInfo = $sig.get(0x325, null, [$asm01.System.String], []).Construct($T06(), "en-US");
      var dateFormatInfo = cultureInfo.get_DateTimeFormat();
      var t = $T01().Parse("02/01/2003", cultureInfo).MemberwiseClone();
      $T03().AreEqual(this.myTicks[7], t.get_Ticks(), "#A1");
      dateFormatInfo.set_ShortDatePattern("dd/MM/yyyy");
      t = $T01().Parse("01/02/03", cultureInfo).MemberwiseClone();
      $T03().AreEqual(this.myTicks[7], t.get_Ticks(), "#B1");
      t = $T01().Parse("01/02/2003", cultureInfo).MemberwiseClone();
      $T03().AreEqual(this.myTicks[7], t.get_Ticks(), "#B2");
      t = $T01().Parse("2003/02/01", cultureInfo).MemberwiseClone();
      $T03().AreEqual(this.myTicks[7], t.get_Ticks(), "#B3");
      t = $T01().Parse("01/Feb/03", cultureInfo).MemberwiseClone();
      $T03().AreEqual(this.myTicks[7], t.get_Ticks(), "#B4");
      t = $T01().Parse("Feb/01/03", cultureInfo).MemberwiseClone();
      $T03().AreEqual(this.myTicks[7], t.get_Ticks(), "#B5");
      dateFormatInfo.set_ShortDatePattern("MM/dd/yyyy");
      t = $T01().Parse("02/01/03", cultureInfo).MemberwiseClone();
      $T03().AreEqual(this.myTicks[7], t.get_Ticks(), "#C1");
      t = $T01().Parse("02/01/2003", cultureInfo).MemberwiseClone();
      $T03().AreEqual(this.myTicks[7], t.get_Ticks(), "#C2");
      t = $T01().Parse("2003/02/01", cultureInfo).MemberwiseClone();
      $T03().AreEqual(this.myTicks[7], t.get_Ticks(), "#C3");
      t = $T01().Parse("01/Feb/03", cultureInfo).MemberwiseClone();
      $T03().AreEqual(this.myTicks[7], t.get_Ticks(), "#C4");
      t = $T01().Parse("Feb/01/03", cultureInfo).MemberwiseClone();
      $T03().AreEqual(this.myTicks[7], t.get_Ticks(), "#C5");
      dateFormatInfo.set_ShortDatePattern("yyyy/MM/dd");
      t = $T01().Parse("03/02/01", cultureInfo).MemberwiseClone();
      $T03().AreEqual(this.myTicks[7], t.get_Ticks(), "#D1");
      t = $T01().Parse("02/01/2003", cultureInfo).MemberwiseClone();
      $T03().AreEqual(this.myTicks[7], t.get_Ticks(), "#D2");
      t = $T01().Parse("2003/02/01", cultureInfo).MemberwiseClone();
      $T03().AreEqual(this.myTicks[7], t.get_Ticks(), "#D3");
      t = $T01().Parse("03/Feb/01", cultureInfo).MemberwiseClone();
      $T03().AreEqual(this.myTicks[7], t.get_Ticks(), "#D4");
      t = $T01().Parse("Feb/03/01", cultureInfo).MemberwiseClone();
      $T03().AreEqual(this.myTicks[7], t.get_Ticks(), "#D5");
      dateFormatInfo.set_ShortDatePattern("yyyy/dd/MM");
      t = $T01().Parse("03/01/02", cultureInfo).MemberwiseClone();
      $T03().AreEqual(this.myTicks[7], t.get_Ticks(), "#E1");
      t = $T01().Parse("01/02/2003", cultureInfo).MemberwiseClone();
      $T03().AreEqual(this.myTicks[7], t.get_Ticks(), "#E2");
      t = $T01().Parse("2003/01/02", cultureInfo).MemberwiseClone();
      $T03().AreEqual(this.myTicks[7], t.get_Ticks(), "#E3");
    }
  )
    .Attribute($asm00.TypeRef("NUnit.Framework.TestAttribute"));

  $.Method({Static:false, Public:true }, "TestRegularStyle", 
    $sig.make(0x15C, null, [], []), 
    function DateTimeTest_TestRegularStyle () {
      var style = $T07().$Cast(3);
      var formats = JSIL.Array.New($T0A(), ["yyyy-MM-ddTHH:mm:ssK", "yyyy-MM-ddTHH:mm:ss.FFFFFFFK"]);
      var result = $sig.get(0x476, $asm01.System.DateTime, [
          $asm01.System.String, System.Array.Of($asm01.System.String), 
          $asm01.System.IFormatProvider, $asm01.System.Globalization.DateTimeStyles
        ], []).CallStatic($T01(), "ParseExact", null, "2008-02-21T11:14:18.2721262+02:00", formats, $T06().get_InvariantCulture(), style).MemberwiseClone();
      $T03().AreEqual(result.get_Kind(), $T04().Local);
      $T03().AreEqual(
        result.ToUniversalTime().get_Ticks(), 
        $T00().Create(7902958, 4358469, 2250)
      );
      result = $sig.get(0x476, $asm01.System.DateTime, [
          $asm01.System.String, System.Array.Of($asm01.System.String), 
          $asm01.System.IFormatProvider, $asm01.System.Globalization.DateTimeStyles
        ], []).CallStatic($T01(), "ParseExact", null, "2008-02-21T11:14:18.2721262", formats, $T06().get_InvariantCulture(), style).MemberwiseClone();
      $T03().AreEqual(result.get_Kind(), $T04().Unspecified);
      $T03().AreEqual(
        result.get_Ticks(), 
        $T00().Create(91886, 4362761, 2250)
      );
      result = $sig.get(0x476, $asm01.System.DateTime, [
          $asm01.System.String, System.Array.Of($asm01.System.String), 
          $asm01.System.IFormatProvider, $asm01.System.Globalization.DateTimeStyles
        ], []).CallStatic($T01(), "ParseExact", null, "2008-02-21T11:14:18.2721262Z", formats, $T06().get_InvariantCulture(), style).MemberwiseClone();
      $T03().AreEqual(result.get_Kind(), $T04().Local);
      $T03().AreEqual(
        result.ToUniversalTime().get_Ticks(), 
        $T00().Create(91886, 4362761, 2250)
      );
    }
  )
    .Attribute($asm00.TypeRef("NUnit.Framework.TestAttribute"));

  $.Method({Static:false, Public:true }, "TestRoundTrip", 
    $sig.make(0x15B, null, [], []), 
    function DateTimeTest_TestRoundTrip () {
      var roundTripStyle = $T07().RoundtripKind;
      var formats = JSIL.Array.New($T0A(), ["yyyy-MM-ddTHH:mm:ssK", "yyyy-MM-ddTHH:mm:ss.FFFFFFFK"]);
      var result = $sig.get(0x476, $asm01.System.DateTime, [
          $asm01.System.String, System.Array.Of($asm01.System.String), 
          $asm01.System.IFormatProvider, $asm01.System.Globalization.DateTimeStyles
        ], []).CallStatic($T01(), "ParseExact", null, "2008-02-21T11:14:18.2721262+02:00", formats, $T06().get_InvariantCulture(), roundTripStyle).MemberwiseClone();
      $T03().AreEqual(result.get_Kind(), $T04().Local);
      $T03().AreEqual(
        result.ToUniversalTime().get_Ticks(), 
        $T00().Create(7902958, 4358469, 2250)
      );
      result = $sig.get(0x476, $asm01.System.DateTime, [
          $asm01.System.String, System.Array.Of($asm01.System.String), 
          $asm01.System.IFormatProvider, $asm01.System.Globalization.DateTimeStyles
        ], []).CallStatic($T01(), "ParseExact", null, "2008-02-21T11:14:18.2721262", formats, $T06().get_InvariantCulture(), roundTripStyle).MemberwiseClone();
      $T03().AreEqual(result.get_Kind(), $T04().Unspecified);
      $T03().AreEqual(
        result.get_Ticks(), 
        $T00().Create(91886, 4362761, 2250)
      );
      result = $sig.get(0x476, $asm01.System.DateTime, [
          $asm01.System.String, System.Array.Of($asm01.System.String), 
          $asm01.System.IFormatProvider, $asm01.System.Globalization.DateTimeStyles
        ], []).CallStatic($T01(), "ParseExact", null, "2008-02-21T11:14:18.2721262Z", formats, $T06().get_InvariantCulture(), roundTripStyle).MemberwiseClone();
      $T03().AreEqual(result.get_Kind(), $T04().Utc);
      $T03().AreEqual(
        result.get_Ticks(), 
        $T00().Create(91886, 4362761, 2250)
      );
    }
  )
    .Attribute($asm00.TypeRef("NUnit.Framework.TestAttribute"));

  $.Method({Static:false, Public:true }, "TestToString", 
    $sig.make(0xB4, null, [], []), 
    function DateTimeTest_TestToString () {
      var t = new ($T01())(this.myTicks[2]);
      var t2 = new ($T01())(this.myTicks[1]);
      var t3 = new ($T01())(999, 1, 2, 3, 4, 5);
      $T03().AreEqual("02/25/2002", $sig.get(0x49F, $asm01.System.String, [$asm01.System.String], []).CallVirtual("ToString", null, t, "d"), "#A1");
      $T03().AreEqual("Monday, 25 February 2002", $sig.get(0x49F, $asm01.System.String, [$asm01.System.String], []).CallVirtual("ToString", null, t, "D"), "#A2");
      $T03().AreEqual("Monday, 25 February 2002 05:25", $sig.get(0x49F, $asm01.System.String, [$asm01.System.String], []).CallVirtual("ToString", null, t, "f"), "#A3");
      $T03().AreEqual("Monday, 25 February 2002 05:25:13", $sig.get(0x49F, $asm01.System.String, [$asm01.System.String], []).CallVirtual("ToString", null, t, "F"), "#A4");
      $T03().AreEqual("02/25/2002 05:25", $sig.get(0x49F, $asm01.System.String, [$asm01.System.String], []).CallVirtual("ToString", null, t, "g"), "#A5");
      $T03().AreEqual("02/25/2002 05:25:13", $sig.get(0x49F, $asm01.System.String, [$asm01.System.String], []).CallVirtual("ToString", null, t, "G"), "#A6");
      $T03().AreEqual("February 25", $sig.get(0x49F, $asm01.System.String, [$asm01.System.String], []).CallVirtual("ToString", null, t, "m"), "#A7");
      $T03().AreEqual("February 25", $sig.get(0x49F, $asm01.System.String, [$asm01.System.String], []).CallVirtual("ToString", null, t, "M"), "#A8");
      $T03().AreEqual("Mon, 25 Feb 2002 05:25:13 GMT", $sig.get(0x49F, $asm01.System.String, [$asm01.System.String], []).CallVirtual("ToString", null, t, "r"), "#A9");
      $T03().AreEqual("Mon, 25 Feb 2002 05:25:13 GMT", $sig.get(0x49F, $asm01.System.String, [$asm01.System.String], []).CallVirtual("ToString", null, t, "R"), "#A10");
      $T03().AreEqual("2002-02-25T05:25:13", $sig.get(0x49F, $asm01.System.String, [$asm01.System.String], []).CallVirtual("ToString", null, t, "s"), "#A11");
      $T03().AreEqual("05:25", $sig.get(0x49F, $asm01.System.String, [$asm01.System.String], []).CallVirtual("ToString", null, t, "t"), "#A12");
      $T03().AreEqual("05:25:13", $sig.get(0x49F, $asm01.System.String, [$asm01.System.String], []).CallVirtual("ToString", null, t, "T"), "#A13");
      $T03().AreEqual("2002-02-25 05:25:13Z", $sig.get(0x49F, $asm01.System.String, [$asm01.System.String], []).CallVirtual("ToString", null, t, "u"), "#A14");
      $T03().AreEqual("2002 February", $sig.get(0x49F, $asm01.System.String, [$asm01.System.String], []).CallVirtual("ToString", null, t, "y"), "#A16");
      $T03().AreEqual("2002 February", $sig.get(0x49F, $asm01.System.String, [$asm01.System.String], []).CallVirtual("ToString", null, t, "Y"), "#A17");
      $T03().AreEqual("02/25/2002 05:25:13", $sig.get(0x49F, $asm01.System.String, [$asm01.System.String], []).CallVirtual("ToString", null, t, ""), "#A18");
      $T03().AreEqual("25", $sig.get(0x49F, $asm01.System.String, [$asm01.System.String], []).CallVirtual("ToString", null, t, "%d"), "#B1");
      $T03().AreEqual("25", $sig.get(0x49F, $asm01.System.String, [$asm01.System.String], []).CallVirtual("ToString", null, t, "dd"), "#B2");
      $T03().AreEqual("Mon", $sig.get(0x49F, $asm01.System.String, [$asm01.System.String], []).CallVirtual("ToString", null, t, "ddd"), "#B3");
      $T03().AreEqual("Monday", $sig.get(0x49F, $asm01.System.String, [$asm01.System.String], []).CallVirtual("ToString", null, t, "dddd"), "#B4");
      $T03().AreEqual("2", $sig.get(0x49F, $asm01.System.String, [$asm01.System.String], []).CallVirtual("ToString", null, t, "%M"), "#B5");
      $T03().AreEqual("02", $sig.get(0x49F, $asm01.System.String, [$asm01.System.String], []).CallVirtual("ToString", null, t, "MM"), "#B6");
      $T03().AreEqual("Feb", $sig.get(0x49F, $asm01.System.String, [$asm01.System.String], []).CallVirtual("ToString", null, t, "MMM"), "#B7");
      $T03().AreEqual("February", $sig.get(0x49F, $asm01.System.String, [$asm01.System.String], []).CallVirtual("ToString", null, t, "MMMM"), "#B8");
      $T03().AreEqual("2", $sig.get(0x49F, $asm01.System.String, [$asm01.System.String], []).CallVirtual("ToString", null, t, "%y"), "#B9");
      $T03().AreEqual("02", $sig.get(0x49F, $asm01.System.String, [$asm01.System.String], []).CallVirtual("ToString", null, t, "yy"), "#B10");
      $T03().AreEqual("2002", $sig.get(0x49F, $asm01.System.String, [$asm01.System.String], []).CallVirtual("ToString", null, t, "yyyy"), "#B11");
      $T03().AreEqual("5", $sig.get(0x49F, $asm01.System.String, [$asm01.System.String], []).CallVirtual("ToString", null, t, "%h"), "#B12");
      $T03().AreEqual("05", $sig.get(0x49F, $asm01.System.String, [$asm01.System.String], []).CallVirtual("ToString", null, t, "hh"), "#B13");
      $T03().AreEqual("3", $sig.get(0x49F, $asm01.System.String, [$asm01.System.String], []).CallVirtual("ToString", null, t2, "%h"), "#B14");
      $T03().AreEqual("03", $sig.get(0x49F, $asm01.System.String, [$asm01.System.String], []).CallVirtual("ToString", null, t2, "hh"), "#B15");
      $T03().AreEqual("15", $sig.get(0x49F, $asm01.System.String, [$asm01.System.String], []).CallVirtual("ToString", null, t2, "%H"), "#B16");
      $T03().AreEqual("15", $sig.get(0x49F, $asm01.System.String, [$asm01.System.String], []).CallVirtual("ToString", null, t2, "HH"), "#B17");
      $T03().AreEqual("25", $sig.get(0x49F, $asm01.System.String, [$asm01.System.String], []).CallVirtual("ToString", null, t2, "%m"), "#B18");
      $T03().AreEqual("25", $sig.get(0x49F, $asm01.System.String, [$asm01.System.String], []).CallVirtual("ToString", null, t2, "mm"), "#B19");
      $T03().AreEqual("13", $sig.get(0x49F, $asm01.System.String, [$asm01.System.String], []).CallVirtual("ToString", null, t2, "%s"), "#B20");
      $T03().AreEqual("13", $sig.get(0x49F, $asm01.System.String, [$asm01.System.String], []).CallVirtual("ToString", null, t2, "ss"), "#B21");
      $T03().AreEqual("A", $sig.get(0x49F, $asm01.System.String, [$asm01.System.String], []).CallVirtual("ToString", null, t, "%t"), "#B22");
      $T03().AreEqual("P", $sig.get(0x49F, $asm01.System.String, [$asm01.System.String], []).CallVirtual("ToString", null, t2, "%t"), "#B23");
      $T03().AreEqual("AM", $sig.get(0x49F, $asm01.System.String, [$asm01.System.String], []).CallVirtual("ToString", null, t, "tt"), "#B24");
      $T03().AreEqual("PM", $sig.get(0x49F, $asm01.System.String, [$asm01.System.String], []).CallVirtual("ToString", null, t2, "tt"), "#B25");
      var offset = $T00().op_Division(
        $T05().get_CurrentTimeZone().GetUtcOffset(t.MemberwiseClone()).get_Ticks(), 
        $T00().Create(12871680, 2145, 0)
      );
      $T03().AreEqual(
        offset.ToString("+#;-#;+0"), 
        $sig.get(0x49F, $asm01.System.String, [$asm01.System.String], []).CallVirtual("ToString", null, t, "%z"), 
        "#B26"
      );
      $T03().AreEqual(
        offset.ToString("+00;-00;+00"), 
        $sig.get(0x49F, $asm01.System.String, [$asm01.System.String], []).CallVirtual("ToString", null, t, "zz"), 
        "#B28"
      );
      $T03().AreEqual(" : ", $sig.get(0x49F, $asm01.System.String, [$asm01.System.String], []).CallVirtual("ToString", null, t, " : "), "#B29");
      $T03().AreEqual(" / ", $sig.get(0x49F, $asm01.System.String, [$asm01.System.String], []).CallVirtual("ToString", null, t, " / "), "#B30");
      $T03().AreEqual(" yyy ", $sig.get(0x49F, $asm01.System.String, [$asm01.System.String], []).CallVirtual("ToString", null, t, " 'yyy' "), "#B31");
      $T03().AreEqual(" d", $sig.get(0x49F, $asm01.System.String, [$asm01.System.String], []).CallVirtual("ToString", null, t, " \\d"), "#B32");
      $T03().AreEqual("2002", $sig.get(0x49F, $asm01.System.String, [$asm01.System.String], []).CallVirtual("ToString", null, t, "yyy"), "#B33");
      $T03().AreEqual("0002002", $sig.get(0x49F, $asm01.System.String, [$asm01.System.String], []).CallVirtual("ToString", null, t, "yyyyyyy"), "#B34");
      $T03().AreEqual("999", $sig.get(0x49F, $asm01.System.String, [$asm01.System.String], []).CallVirtual("ToString", null, t3, "yyy"), "#B33");
      $T03().AreEqual("0999", $sig.get(0x49F, $asm01.System.String, [$asm01.System.String], []).CallVirtual("ToString", null, t3, "yyyy"), "#B33");
    }
  )
    .Attribute($asm00.TypeRef("NUnit.Framework.TestAttribute"));

  $.Method({Static:false, Public:true }, "ToBinary", 
    $sig.make(0x151, null, [], []), 
    function DateTimeTest_ToBinary () {
      var dt_local = new ($T01())($T00().Create(1, 0, 0), $T04().Local);
      $T03().AreEqual(1, $T1C().op_RightShift(dt_local.ToBinary().ToUInt64(), 63), "#1");
      $T03().AreEqual(1, dt_local.get_Ticks(), "#2");
      var dt_utc = new ($T01())($T00().Create(1, 0, 0), $T04().Utc);
      $T03().AreEqual(
        $T00().Create(1, 0, 16384), 
        dt_utc.ToBinary(), 
        "#3"
      );
      $T03().AreEqual(1, dt_utc.get_Ticks(), "#4");
      var dt_unspecified = new ($T01())($T00().Create(1, 0, 0), $T04().Unspecified);
      $T03().AreEqual(1, dt_unspecified.ToBinary(), "#5");
      $T03().AreEqual(1, dt_unspecified.get_Ticks(), "#6");
    }
  )
    .Attribute($asm00.TypeRef("NUnit.Framework.TestAttribute"));

  $.Method({Static:false, Public:true }, "ToFileTime", 
    $sig.make(0x10B, null, [], []), 
    function DateTimeTest_ToFileTime () {
      var u = ($T01().FromFileTimeUtc($T00().Create(0, 0, 0))).get_Ticks();
      $T03().AreEqual($T00().Create(7798784, 13506338, 1793), u, "#A1");
      var max = $T00().op_Subtraction(
        $T01().MaxValue.get_Ticks(), 
        $T00().Create(7798784, 13506338, 1793)
      );
      $T03().AreEqual(
        $T00().Create(3620863, 2651636, 11210), 
        $T01().FromFileTimeUtc(max).get_Ticks(), 
        "#A2"
      );
      var t = ($T01().FromFileTime($T00().Create(0, 0, 0))).get_Ticks();
      $T03().IsTrue($T00().op_GreaterThan(t, $T00().op_Subtraction(u, $T00().Create(6930432, 51498, 0))), "#B1");
      $T03().IsTrue($T00().op_LessThan(t, $T00().op_Addition(u, $T00().Create(6930432, 51498, 0))), "#B2");
    }
  )
    .Attribute($asm00.TypeRef("NUnit.Framework.TestAttribute"));

  $.Method({Static:false, Public:true }, "ToFileTime_MinValue", 
    $sig.make(0x107, null, [], []), 
    function DateTimeTest_ToFileTime_MinValue () {
      $T01().FromFileTime($T00().Create(0, 0, 32768));
    }
  )
    .Attribute($asm00.TypeRef("NUnit.Framework.TestAttribute"))
    .Attribute($asm00.TypeRef("NUnit.Framework.ExpectedExceptionAttribute"), function () { return [$asm01.TypeRef("System.ArgumentOutOfRangeException")]; });

  $.Method({Static:false, Public:true }, "ToFileTime_Negative", 
    $sig.make(0x109, null, [], []), 
    function DateTimeTest_ToFileTime_Negative () {
      $T01().FromFileTime($T00().Create(16777215, 16777215, 65535));
    }
  )
    .Attribute($asm00.TypeRef("NUnit.Framework.TestAttribute"))
    .Attribute($asm00.TypeRef("NUnit.Framework.ExpectedExceptionAttribute"), function () { return [$asm01.TypeRef("System.ArgumentOutOfRangeException")]; });

  $.Method({Static:false, Public:true }, "ToFileTimeUtc_MinValue", 
    $sig.make(0x10E, null, [], []), 
    function DateTimeTest_ToFileTimeUtc_MinValue () {
      $T01().FromFileTimeUtc($T00().Create(0, 0, 32768));
    }
  )
    .Attribute($asm00.TypeRef("NUnit.Framework.ExpectedExceptionAttribute"), function () { return [$asm01.TypeRef("System.ArgumentOutOfRangeException")]; })
    .Attribute($asm00.TypeRef("NUnit.Framework.TestAttribute"));

  $.Method({Static:false, Public:true }, "ToFileTimeUtc_Negative", 
    $sig.make(0x112, null, [], []), 
    function DateTimeTest_ToFileTimeUtc_Negative () {
      $T01().FromFileTimeUtc($T00().Create(16777215, 16777215, 65535));
    }
  )
    .Attribute($asm00.TypeRef("NUnit.Framework.ExpectedExceptionAttribute"), function () { return [$asm01.TypeRef("System.ArgumentOutOfRangeException")]; })
    .Attribute($asm00.TypeRef("NUnit.Framework.TestAttribute"));

  $.Method({Static:false, Public:true }, "ToOADate", 
    $sig.make(0xEC, null, [], []), 
    function DateTimeTest_ToOADate () {
      var d = new ($T01())($T00().Create(0, 0, 0));
      $T03().AreEqual(0, d.ToOADate(), "#1");
      $T01().prototype._ctor.call(d, $T00().Create(8634368, 245963, 2129));
      $T03().AreEqual(0, d.ToOADate(), "#2");
      $T01().prototype._ctor.call(d, $T00().Create(11560960, 16688805, 110));
      $T03().AreEqual(-657434.999, d.ToOADate(), "#3");
      $T01().prototype._ctor.call(d, $T00().Create(12036096, 2651584, 11210));
      $T03().AreEqual(2958465.999, d.ToOADate(), "#4");
    }
  )
    .Attribute($asm00.TypeRef("NUnit.Framework.TestAttribute"));

  $.Method({Static:false, Public:true }, "ToOADate_MaxValue", 
    $sig.make(0xF3, null, [], []), 
    function DateTimeTest_ToOADate_MaxValue () {
      $T03().AreEqual(2958465.99999999, $T01().MaxValue.ToOADate());
    }
  )
    .Attribute($asm00.TypeRef("NUnit.Framework.TestAttribute"))
    .Attribute($asm00.TypeRef("NUnit.Framework.IgnoreAttribute"), function () { return ["This test is probably geo location dependent, at least fails on .NET 4.0 in Japan"]; });

  $.Method({Static:false, Public:true }, "ToOADate_MinValue", 
    $sig.make(0xF8, null, [], []), 
    function DateTimeTest_ToOADate_MinValue () {
      $T03().AreEqual(0, $T01().MinValue.ToOADate());
    }
  )
    .Attribute($asm00.TypeRef("NUnit.Framework.TestAttribute"));

  $.Method({Static:false, Public:true }, "ToOADate_OverMax", 
    $sig.make(0xF0, null, [], []), 
    function DateTimeTest_ToOADate_OverMax () {
      var d = new ($T01())($T00().Create(12036097, 2651584, 11210));
      $T03().AreEqual(2958465.999, d.ToOADate());
    }
  )
    .Attribute($asm00.TypeRef("NUnit.Framework.TestAttribute"));

  $.Method({Static:false, Public:true }, "ToOADate_UnderMin", 
    $sig.make(0xF6, null, [], []), 
    function DateTimeTest_ToOADate_UnderMin () {
      var d = new ($T01())($T00().Create(11560959, 16688805, 110));
      $T03().AreEqual(-657434.999, d.ToOADate());
    }
  )
    .Attribute($asm00.TypeRef("NUnit.Framework.TestAttribute"));

  $.Method({Static:false, Public:true }, "TrailingDot", 
    $sig.make(0x166, null, [], []), 
    function DateTimeTest_TrailingDot () {
      $T01().ParseExact("12:00:00", "HH:mm:ss.", null);
    }
  )
    .Attribute($asm00.TypeRef("NUnit.Framework.ExpectedExceptionAttribute"), function () { return [$asm01.TypeRef("System.FormatException")]; })
    .Attribute($asm00.TypeRef("NUnit.Framework.TestAttribute"));

  $.Method({Static:false, Public:true }, "TrailingFlexibleMilliseconds", 
    $sig.make(0x168, null, [], []), 
    function DateTimeTest_TrailingFlexibleMilliseconds () {
      $T01().ParseExact("12:00:00", "HH:mm:ss.FFFFFFF", null);
    }
  )
    .Attribute($asm00.TypeRef("NUnit.Framework.TestAttribute"));

  $.Method({Static:false, Public:true }, "TryEmptyString", 
    $sig.make(0x148, null, [], []), 
    function DateTimeTest_TryEmptyString () {
      var date = new JSIL.Variable(new ($T01())());
      $T03().IsFalse($T01().TryParse("", /* ref */ date));
    }
  )
    .Attribute($asm00.TypeRef("NUnit.Framework.TestAttribute"));

  $.Method({Static:false, Public:true }, "TryParseExact_NullString", 
    $sig.make(0x16A, null, [], []), 
    function DateTimeTest_TryParseExact_NullString () {
      var dt = new JSIL.Variable(new ($T01())());
      $sig.get(0x47E, $asm01.System.Boolean, [
          $asm01.System.String, $asm01.System.String, 
          $asm01.System.IFormatProvider, $asm01.System.Globalization.DateTimeStyles, 
          JSIL.Reference.Of($asm01.System.DateTime)
        ], []).CallStatic($T01(), "TryParseExact", null, 
        null, 
        "yyyy'-'MM'-'dd'T'HH':'mm':'ss'Z'", 
        $T06().get_InvariantCulture(), 
        80, 
        /* ref */ dt
      );
      $T03().AreEqual(new ($T01())(), dt.value.MemberwiseClone());
    }
  )
    .Attribute($asm00.TypeRef("NUnit.Framework.TestAttribute"));

  $.Method({Static:false, Public:true }, "WithColonTimeZone", 
    $sig.make(0x125, null, [], []), 
    function DateTimeTest_WithColonTimeZone () {
      $T03().IsTrue($T00().op_Inequality(
          $T01().Parse("2004-05-26T03:29:01-07:00").get_Ticks(), 
          $T01().Parse("2004-05-26T03:29:01-08:00").get_Ticks()
        ));
    }
  )
    .Attribute($asm00.TypeRef("NUnit.Framework.TestAttribute"));

  $.Method({Static:false, Public:true }, "X509Certificate", 
    $sig.make(0xFD, null, [], []), 
    function DateTimeTest_X509Certificate () {
      var dt = $T01().ParseExact("19960312183847Z", "yyyyMMddHHmmssZ", null).MemberwiseClone();
      $T03().AreEqual($T04().Local, dt.get_Kind(), "#1");
      dt = dt.ToUniversalTime().MemberwiseClone();
      $T03().AreEqual($T04().Utc, dt.get_Kind(), "#2");
      $T03().AreEqual("03/12/1996 18:38:47", dt.toString(), "#3");
      dt = $T01().ParseExact("9602231915Z", "yyMMddHHmmZ", null).MemberwiseClone();
      $T03().AreEqual($T04().Local, dt.get_Kind(), "#4");
      dt = dt.ToUniversalTime().MemberwiseClone();
      $T03().AreEqual($T04().Utc, dt.get_Kind(), "#5");
      $T03().AreEqual("02/23/1996 19:15:00", dt.toString(), "#6");
      dt = $sig.get(0x474, $asm01.System.DateTime, [
          $asm01.System.String, $asm01.System.String, 
          $asm01.System.IFormatProvider, $asm01.System.Globalization.DateTimeStyles
        ], []).CallStatic($T01(), "ParseExact", null, "19960312183847Z", "yyyyMMddHHmmssZ", null, $T07().AdjustToUniversal).MemberwiseClone();
      $T03().AreEqual($T04().Utc, dt.get_Kind(), "#7");
    }
  )
    .Attribute($asm00.TypeRef("NUnit.Framework.TestAttribute"));

  $.Method({Static:false, Public:true }, "ZLiteral", 
    $sig.make(0xFF, null, [], []), 
    function DateTimeTest_ZLiteral () {
      var dt = $T01().ParseExact("19960312183847Z", "yyyyMMddHHmmss'Z'", null).MemberwiseClone();
      var dtz = $T01().ParseExact("19960312183847Z", "yyyyMMddHHmmssZ", null);
      $T03().AreEqual($T04().Unspecified, dt.get_Kind(), "#1");
      dt = dt.ToLocalTime().MemberwiseClone();
      $T03().AreEqual($T04().Local, dt.get_Kind(), "#2");
      $T03().AreEqual($T04().Local, dtz.get_Kind(), "#3");
      $T03().AreEqual(dt.MemberwiseClone(), dtz, "#4");
    }
  )
    .Attribute($asm00.TypeRef("NUnit.Framework.TestAttribute"));

  $.Field({Static:false, Public:false}, "oldcult", $asm01.TypeRef("System.Globalization.CultureInfo")); 
  $.Field({Static:false, Public:false}, "myTicks", $jsilcore.TypeRef("System.Array", [$.Int64])); 
})
  .Attribute($asm00.TypeRef("NUnit.Framework.TestFixtureAttribute"));

JSIL.MakeEnum(
  "MonoTests.System.DateTimeTest/Resolution", false, {
    _Millisecond: 1, 
    _Second: 2, 
    _Minute: 4, 
    _Hour: 8, 
    _Day: 16, 
    _Month: 32, 
    Year: 64, 
    Month: 96, 
    Day: 112, 
    Hour: 120, 
    Minute: 124, 
    Second: 126, 
    Millisecond: 127
  }, false
);

JSIL.MakeClass($asm01.TypeRef("System.Attribute"), "NUnit.Framework.TestAttribute", true, [], function ($) {
  var $thisType = $.publicInterface;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm01.System.Attribute)) ();
  };

  $.Method({Static:false, Public:true }, ".ctor", 
    $sig.make(0x384, null, [], []), 
    function TestAttribute__ctor () {
      $T00().prototype._ctor.call(this);
    }
  );

});

JSIL.MakeClass($asm01.TypeRef("System.Attribute"), "NUnit.Framework.CategoryAttribute", true, [], function ($) {
  var $thisType = $.publicInterface;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm01.System.String)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm01.System.Attribute)) ();
  };

  $.Method({Static:false, Public:true }, ".ctor", 
    $sig.make(0x38B, null, [$.String], []), 
    function CategoryAttribute__ctor (key) {
      $T01().prototype._ctor.call(this);
    }
  );

})
  .Attribute($asm01.TypeRef("System.AttributeUsageAttribute"), function () { return [$asm01.System.AttributeTargets.Method]; });

JSIL.MakeClass($asm01.TypeRef("System.Attribute"), "NUnit.Framework.ExpectedExceptionAttribute", true, [], function ($) {
  var $thisType = $.publicInterface;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm01.System.Type)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm01.System.Attribute)) ();
  };

  $.Method({Static:false, Public:true }, ".ctor", 
    $sig.make(0x3A0, null, [$asm01.TypeRef("System.Type")], []), 
    function ExpectedExceptionAttribute__ctor (exceptionType) {
      $T01().prototype._ctor.call(this);
      this.ExpectedExceptionAttribute$ExceptionType$value = exceptionType;
    }
  );

  $.Method({Static:false, Public:true }, "get_ExceptionType", 
    $sig.make(0x39E, $asm01.TypeRef("System.Type"), [], []), 
    function ExpectedExceptionAttribute_get_ExceptionType () {
      return this.ExpectedExceptionAttribute$ExceptionType$value;
    }
  )
    .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

  $.Method({Static:false, Public:false}, "set_ExceptionType", 
    $sig.make(0x39F, null, [$asm01.TypeRef("System.Type")], []), 
    function ExpectedExceptionAttribute_set_ExceptionType (value) {
      this.ExpectedExceptionAttribute$ExceptionType$value = value;
    }
  )
    .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

  $.Field({Static:false, Public:false}, "ExpectedExceptionAttribute$ExceptionType$value", $asm01.TypeRef("System.Type"))
    .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute")); 
  $.Property({Static:false, Public:true }, "ExceptionType", $asm01.TypeRef("System.Type"));

});

